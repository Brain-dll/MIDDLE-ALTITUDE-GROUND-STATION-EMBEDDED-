
F334_MAIN_GROUNDSTATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008724  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  080088b8  080088b8  000188b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bb0  08008bb0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008bb0  08008bb0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008bb0  08008bb0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bb0  08008bb0  00018bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bb4  08008bb4  00018bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  200001e0  08008d98  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08008d98  00020558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001170c  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002019  00000000  00000000  0003191c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d00  00000000  00000000  00033938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c38  00000000  00000000  00034638  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020b31  00000000  00000000  00035270  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c8a0  00000000  00000000  00055da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4381  00000000  00000000  00062641  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001269c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f8  00000000  00000000  00126a40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800889c 	.word	0x0800889c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800889c 	.word	0x0800889c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8a:	b08b      	sub	sp, #44	; 0x2c
 8000c8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8e:	f000 ff4d 	bl	8001b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c92:	f000 fa73 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c96:	f000 fbad 	bl	80013f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c9a:	f000 facd 	bl	8001238 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000c9e:	f000 fb19 	bl	80012d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ca2:	f000 fb47 	bl	8001334 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ca6:	f000 fb75 	bl	8001394 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  LORA_READ_PARAMETER();
 8000caa:	f000 fc61 	bl	8001570 <LORA_READ_PARAMETER>
  LORA_CONFG( ADDH, ADDL, CHN, MODE); // HIGH ADDRESS, LOW ADDRESS, CHANNEL, MODE (0 : TRANSPARENT, 1 : FIXED)
 8000cae:	4b84      	ldr	r3, [pc, #528]	; (8000ec0 <main+0x238>)
 8000cb0:	7818      	ldrb	r0, [r3, #0]
 8000cb2:	4b84      	ldr	r3, [pc, #528]	; (8000ec4 <main+0x23c>)
 8000cb4:	7819      	ldrb	r1, [r3, #0]
 8000cb6:	4b84      	ldr	r3, [pc, #528]	; (8000ec8 <main+0x240>)
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	4b84      	ldr	r3, [pc, #528]	; (8000ecc <main+0x244>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	f000 fbf9 	bl	80014b4 <LORA_CONFG>
  for(uint8_t i = 0 ; i < 8 ; i++){
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	77fb      	strb	r3, [r7, #31]
 8000cc6:	e009      	b.n	8000cdc <main+0x54>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000cc8:	2110      	movs	r1, #16
 8000cca:	4881      	ldr	r0, [pc, #516]	; (8000ed0 <main+0x248>)
 8000ccc:	f001 fac8 	bl	8002260 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8000cd0:	2032      	movs	r0, #50	; 0x32
 8000cd2:	f000 ff91 	bl	8001bf8 <HAL_Delay>
  for(uint8_t i = 0 ; i < 8 ; i++){
 8000cd6:	7ffb      	ldrb	r3, [r7, #31]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	77fb      	strb	r3, [r7, #31]
 8000cdc:	7ffb      	ldrb	r3, [r7, #31]
 8000cde:	2b07      	cmp	r3, #7
 8000ce0:	d9f2      	bls.n	8000cc8 <main+0x40>
  }
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000ce2:	4b7c      	ldr	r3, [pc, #496]	; (8000ed4 <main+0x24c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b7a      	ldr	r3, [pc, #488]	; (8000ed4 <main+0x24c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f042 0220 	orr.w	r2, r2, #32
 8000cf0:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 8000cf2:	4879      	ldr	r0, [pc, #484]	; (8000ed8 <main+0x250>)
 8000cf4:	f002 fd9a 	bl	800382c <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000cf8:	4b78      	ldr	r3, [pc, #480]	; (8000edc <main+0x254>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4b77      	ldr	r3, [pc, #476]	; (8000edc <main+0x254>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f042 0220 	orr.w	r2, r2, #32
 8000d06:	601a      	str	r2, [r3, #0]
 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000d08:	4b75      	ldr	r3, [pc, #468]	; (8000ee0 <main+0x258>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4b74      	ldr	r3, [pc, #464]	; (8000ee0 <main+0x258>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 0220 	orr.w	r2, r2, #32
 8000d16:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (gps == 1) {
 8000d18:	4b72      	ldr	r3, [pc, #456]	; (8000ee4 <main+0x25c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	f040 816c 	bne.w	8000ffa <main+0x372>
			for (uint8_t i = 0; i < gps_size; i++) {
 8000d22:	2300      	movs	r3, #0
 8000d24:	77bb      	strb	r3, [r7, #30]
 8000d26:	e15c      	b.n	8000fe2 <main+0x35a>
				if (RX1_BUF[i] == '$' && RX1_BUF[i + 1] == 'G'
 8000d28:	7fbb      	ldrb	r3, [r7, #30]
 8000d2a:	4a6f      	ldr	r2, [pc, #444]	; (8000ee8 <main+0x260>)
 8000d2c:	5cd3      	ldrb	r3, [r2, r3]
 8000d2e:	2b24      	cmp	r3, #36	; 0x24
 8000d30:	f040 8154 	bne.w	8000fdc <main+0x354>
 8000d34:	7fbb      	ldrb	r3, [r7, #30]
 8000d36:	3301      	adds	r3, #1
 8000d38:	4a6b      	ldr	r2, [pc, #428]	; (8000ee8 <main+0x260>)
 8000d3a:	5cd3      	ldrb	r3, [r2, r3]
 8000d3c:	2b47      	cmp	r3, #71	; 0x47
 8000d3e:	f040 814d 	bne.w	8000fdc <main+0x354>
						&& RX1_BUF[i + 2] == 'P' && RX1_BUF[i + 3] == 'G'
 8000d42:	7fbb      	ldrb	r3, [r7, #30]
 8000d44:	3302      	adds	r3, #2
 8000d46:	4a68      	ldr	r2, [pc, #416]	; (8000ee8 <main+0x260>)
 8000d48:	5cd3      	ldrb	r3, [r2, r3]
 8000d4a:	2b50      	cmp	r3, #80	; 0x50
 8000d4c:	f040 8146 	bne.w	8000fdc <main+0x354>
 8000d50:	7fbb      	ldrb	r3, [r7, #30]
 8000d52:	3303      	adds	r3, #3
 8000d54:	4a64      	ldr	r2, [pc, #400]	; (8000ee8 <main+0x260>)
 8000d56:	5cd3      	ldrb	r3, [r2, r3]
 8000d58:	2b47      	cmp	r3, #71	; 0x47
 8000d5a:	f040 813f 	bne.w	8000fdc <main+0x354>
						&& RX1_BUF[i + 4] == 'G' && RX1_BUF[i + 5] == 'A'
 8000d5e:	7fbb      	ldrb	r3, [r7, #30]
 8000d60:	3304      	adds	r3, #4
 8000d62:	4a61      	ldr	r2, [pc, #388]	; (8000ee8 <main+0x260>)
 8000d64:	5cd3      	ldrb	r3, [r2, r3]
 8000d66:	2b47      	cmp	r3, #71	; 0x47
 8000d68:	f040 8138 	bne.w	8000fdc <main+0x354>
 8000d6c:	7fbb      	ldrb	r3, [r7, #30]
 8000d6e:	3305      	adds	r3, #5
 8000d70:	4a5d      	ldr	r2, [pc, #372]	; (8000ee8 <main+0x260>)
 8000d72:	5cd3      	ldrb	r3, [r2, r3]
 8000d74:	2b41      	cmp	r3, #65	; 0x41
 8000d76:	f040 8131 	bne.w	8000fdc <main+0x354>
						&& RX1_BUF[i + 6] == ',') {
 8000d7a:	7fbb      	ldrb	r3, [r7, #30]
 8000d7c:	3306      	adds	r3, #6
 8000d7e:	4a5a      	ldr	r2, [pc, #360]	; (8000ee8 <main+0x260>)
 8000d80:	5cd3      	ldrb	r3, [r2, r3]
 8000d82:	2b2c      	cmp	r3, #44	; 0x2c
 8000d84:	f040 812a 	bne.w	8000fdc <main+0x354>
					uint8_t v = 0, pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0,
 8000d88:	2300      	movs	r3, #0
 8000d8a:	777b      	strb	r3, [r7, #29]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	773b      	strb	r3, [r7, #28]
 8000d90:	2300      	movs	r3, #0
 8000d92:	76fb      	strb	r3, [r7, #27]
 8000d94:	2300      	movs	r3, #0
 8000d96:	71fb      	strb	r3, [r7, #7]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	76bb      	strb	r3, [r7, #26]
							pos5 = 0, ok1 = 0, ok2 = 0, ok3 = 0, ok4 = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	71bb      	strb	r3, [r7, #6]
 8000da0:	2300      	movs	r3, #0
 8000da2:	767b      	strb	r3, [r7, #25]
 8000da4:	2300      	movs	r3, #0
 8000da6:	763b      	strb	r3, [r7, #24]
 8000da8:	2300      	movs	r3, #0
 8000daa:	75fb      	strb	r3, [r7, #23]
 8000dac:	2300      	movs	r3, #0
 8000dae:	75bb      	strb	r3, [r7, #22]
					for (uint8_t n = 0; n < sizeof(RX1_BUF); n++) {  //  ONEMLI
 8000db0:	2300      	movs	r3, #0
 8000db2:	757b      	strb	r3, [r7, #21]
 8000db4:	e00f      	b.n	8000dd6 <main+0x14e>
						if (RX1_BUF[n] == ',' && n > i + 5)
 8000db6:	7d7b      	ldrb	r3, [r7, #21]
 8000db8:	4a4b      	ldr	r2, [pc, #300]	; (8000ee8 <main+0x260>)
 8000dba:	5cd3      	ldrb	r3, [r2, r3]
 8000dbc:	2b2c      	cmp	r3, #44	; 0x2c
 8000dbe:	d107      	bne.n	8000dd0 <main+0x148>
 8000dc0:	7d7a      	ldrb	r2, [r7, #21]
 8000dc2:	7fbb      	ldrb	r3, [r7, #30]
 8000dc4:	3305      	adds	r3, #5
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	dd02      	ble.n	8000dd0 <main+0x148>
							v++;
 8000dca:	7f7b      	ldrb	r3, [r7, #29]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	777b      	strb	r3, [r7, #29]
					for (uint8_t n = 0; n < sizeof(RX1_BUF); n++) {  //  ONEMLI
 8000dd0:	7d7b      	ldrb	r3, [r7, #21]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	757b      	strb	r3, [r7, #21]
 8000dd6:	7d7b      	ldrb	r3, [r7, #21]
 8000dd8:	2b63      	cmp	r3, #99	; 0x63
 8000dda:	d9ec      	bls.n	8000db6 <main+0x12e>
					}
					if (v >= 5) { // new condition
 8000ddc:	7f7b      	ldrb	r3, [r7, #29]
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	f240 80fc 	bls.w	8000fdc <main+0x354>
						v = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	777b      	strb	r3, [r7, #29]
						for (uint8_t n = 0; n < sizeof(RX1_BUF); n++) { //  ONEMLI
 8000de8:	2300      	movs	r3, #0
 8000dea:	753b      	strb	r3, [r7, #20]
 8000dec:	e0f0      	b.n	8000fd0 <main+0x348>
							if (RX1_BUF[n] == ',' && n > i + 5)
 8000dee:	7d3b      	ldrb	r3, [r7, #20]
 8000df0:	4a3d      	ldr	r2, [pc, #244]	; (8000ee8 <main+0x260>)
 8000df2:	5cd3      	ldrb	r3, [r2, r3]
 8000df4:	2b2c      	cmp	r3, #44	; 0x2c
 8000df6:	d107      	bne.n	8000e08 <main+0x180>
 8000df8:	7d3a      	ldrb	r2, [r7, #20]
 8000dfa:	7fbb      	ldrb	r3, [r7, #30]
 8000dfc:	3305      	adds	r3, #5
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	dd02      	ble.n	8000e08 <main+0x180>
								v++;
 8000e02:	7f7b      	ldrb	r3, [r7, #29]
 8000e04:	3301      	adds	r3, #1
 8000e06:	777b      	strb	r3, [r7, #29]
							if (v == 1 && ok1 == 0) {
 8000e08:	7f7b      	ldrb	r3, [r7, #29]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d106      	bne.n	8000e1c <main+0x194>
 8000e0e:	7e7b      	ldrb	r3, [r7, #25]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d103      	bne.n	8000e1c <main+0x194>
								pos1 = n;
 8000e14:	7d3b      	ldrb	r3, [r7, #20]
 8000e16:	773b      	strb	r3, [r7, #28]
								ok1 = 1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	767b      	strb	r3, [r7, #25]
							}
							if (v == 2 && ok2 == 0) {
 8000e1c:	7f7b      	ldrb	r3, [r7, #29]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d11b      	bne.n	8000e5a <main+0x1d2>
 8000e22:	7e3b      	ldrb	r3, [r7, #24]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d118      	bne.n	8000e5a <main+0x1d2>
								pos2 = n;
 8000e28:	7d3b      	ldrb	r3, [r7, #20]
 8000e2a:	76fb      	strb	r3, [r7, #27]
								for (uint8_t count = 0; count < pos2 - pos1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	74fb      	strb	r3, [r7, #19]
 8000e30:	e00b      	b.n	8000e4a <main+0x1c2>
										count++)
									TIME[count] = RX1_BUF[pos1 + count + 1];
 8000e32:	7f3a      	ldrb	r2, [r7, #28]
 8000e34:	7cfb      	ldrb	r3, [r7, #19]
 8000e36:	4413      	add	r3, r2
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	7cfb      	ldrb	r3, [r7, #19]
 8000e3c:	492a      	ldr	r1, [pc, #168]	; (8000ee8 <main+0x260>)
 8000e3e:	5c89      	ldrb	r1, [r1, r2]
 8000e40:	4a2a      	ldr	r2, [pc, #168]	; (8000eec <main+0x264>)
 8000e42:	54d1      	strb	r1, [r2, r3]
										count++)
 8000e44:	7cfb      	ldrb	r3, [r7, #19]
 8000e46:	3301      	adds	r3, #1
 8000e48:	74fb      	strb	r3, [r7, #19]
								for (uint8_t count = 0; count < pos2 - pos1;
 8000e4a:	7cfa      	ldrb	r2, [r7, #19]
 8000e4c:	7ef9      	ldrb	r1, [r7, #27]
 8000e4e:	7f3b      	ldrb	r3, [r7, #28]
 8000e50:	1acb      	subs	r3, r1, r3
 8000e52:	429a      	cmp	r2, r3
 8000e54:	dbed      	blt.n	8000e32 <main+0x1aa>
								ok2 = 1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	763b      	strb	r3, [r7, #24]
							}
							if (v == 3 && ok3 == 0) {
 8000e5a:	7f7b      	ldrb	r3, [r7, #29]
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d11b      	bne.n	8000e98 <main+0x210>
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d118      	bne.n	8000e98 <main+0x210>
								pos3 = n;
 8000e66:	7d3b      	ldrb	r3, [r7, #20]
 8000e68:	71fb      	strb	r3, [r7, #7]
								for (uint8_t count = 0; count < pos3 - pos2;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	74bb      	strb	r3, [r7, #18]
 8000e6e:	e00b      	b.n	8000e88 <main+0x200>
										count++)
									LAT[count] = RX1_BUF[pos2 + count + 1];
 8000e70:	7efa      	ldrb	r2, [r7, #27]
 8000e72:	7cbb      	ldrb	r3, [r7, #18]
 8000e74:	4413      	add	r3, r2
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	7cbb      	ldrb	r3, [r7, #18]
 8000e7a:	491b      	ldr	r1, [pc, #108]	; (8000ee8 <main+0x260>)
 8000e7c:	5c89      	ldrb	r1, [r1, r2]
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <main+0x268>)
 8000e80:	54d1      	strb	r1, [r2, r3]
										count++)
 8000e82:	7cbb      	ldrb	r3, [r7, #18]
 8000e84:	3301      	adds	r3, #1
 8000e86:	74bb      	strb	r3, [r7, #18]
								for (uint8_t count = 0; count < pos3 - pos2;
 8000e88:	7cba      	ldrb	r2, [r7, #18]
 8000e8a:	79f9      	ldrb	r1, [r7, #7]
 8000e8c:	7efb      	ldrb	r3, [r7, #27]
 8000e8e:	1acb      	subs	r3, r1, r3
 8000e90:	429a      	cmp	r2, r3
 8000e92:	dbed      	blt.n	8000e70 <main+0x1e8>
								ok3 = 1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	75fb      	strb	r3, [r7, #23]
							}
							if (v == 4 && ok4 == 0) {
 8000e98:	7f7b      	ldrb	r3, [r7, #29]
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	d106      	bne.n	8000eac <main+0x224>
 8000e9e:	7dbb      	ldrb	r3, [r7, #22]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d103      	bne.n	8000eac <main+0x224>
								pos4 = n;
 8000ea4:	7d3b      	ldrb	r3, [r7, #20]
 8000ea6:	76bb      	strb	r3, [r7, #26]
								ok4 = 1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	75bb      	strb	r3, [r7, #22]
							}
							if (v == 5) {
 8000eac:	7f7b      	ldrb	r3, [r7, #29]
 8000eae:	2b05      	cmp	r3, #5
 8000eb0:	f040 808b 	bne.w	8000fca <main+0x342>
								pos5 = n;
 8000eb4:	7d3b      	ldrb	r3, [r7, #20]
 8000eb6:	71bb      	strb	r3, [r7, #6]
								for (uint8_t count2 = 0; count2 < pos5 - pos4;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	747b      	strb	r3, [r7, #17]
 8000ebc:	e026      	b.n	8000f0c <main+0x284>
 8000ebe:	bf00      	nop
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000001 	.word	0x20000001
 8000ec8:	20000002 	.word	0x20000002
 8000ecc:	20000003 	.word	0x20000003
 8000ed0:	48000400 	.word	0x48000400
 8000ed4:	20000308 	.word	0x20000308
 8000ed8:	20000410 	.word	0x20000410
 8000edc:	2000045c 	.word	0x2000045c
 8000ee0:	2000038c 	.word	0x2000038c
 8000ee4:	200002bc 	.word	0x200002bc
 8000ee8:	200004ec 	.word	0x200004ec
 8000eec:	200002f0 	.word	0x200002f0
 8000ef0:	200004e0 	.word	0x200004e0
										count2++)
									LONG[count2] = RX1_BUF[pos4 + count2 + 1];
 8000ef4:	7eba      	ldrb	r2, [r7, #26]
 8000ef6:	7c7b      	ldrb	r3, [r7, #17]
 8000ef8:	4413      	add	r3, r2
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	7c7b      	ldrb	r3, [r7, #17]
 8000efe:	498e      	ldr	r1, [pc, #568]	; (8001138 <main+0x4b0>)
 8000f00:	5c89      	ldrb	r1, [r1, r2]
 8000f02:	4a8e      	ldr	r2, [pc, #568]	; (800113c <main+0x4b4>)
 8000f04:	54d1      	strb	r1, [r2, r3]
										count2++)
 8000f06:	7c7b      	ldrb	r3, [r7, #17]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	747b      	strb	r3, [r7, #17]
								for (uint8_t count2 = 0; count2 < pos5 - pos4;
 8000f0c:	7c7a      	ldrb	r2, [r7, #17]
 8000f0e:	79b9      	ldrb	r1, [r7, #6]
 8000f10:	7ebb      	ldrb	r3, [r7, #26]
 8000f12:	1acb      	subs	r3, r1, r3
 8000f14:	429a      	cmp	r2, r3
 8000f16:	dbed      	blt.n	8000ef4 <main+0x26c>

								strcpy(TIME, TIME);
								strcpy(LAT, LAT);
								strcpy(LONG, LONG);
								time = atof(TIME);
 8000f18:	4889      	ldr	r0, [pc, #548]	; (8001140 <main+0x4b8>)
 8000f1a:	f004 f9ca 	bl	80052b2 <atof>
 8000f1e:	ec54 3b10 	vmov	r3, r4, d0
 8000f22:	4618      	mov	r0, r3
 8000f24:	4621      	mov	r1, r4
 8000f26:	f7ff fe17 	bl	8000b58 <__aeabi_d2iz>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	4b85      	ldr	r3, [pc, #532]	; (8001144 <main+0x4bc>)
 8000f2e:	601a      	str	r2, [r3, #0]
								ground_lat = calcoor(atof(LAT));
 8000f30:	4885      	ldr	r0, [pc, #532]	; (8001148 <main+0x4c0>)
 8000f32:	f004 f9be 	bl	80052b2 <atof>
 8000f36:	ec54 3b10 	vmov	r3, r4, d0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	4621      	mov	r1, r4
 8000f3e:	f7ff fe53 	bl	8000be8 <__aeabi_d2f>
 8000f42:	4603      	mov	r3, r0
 8000f44:	ee00 3a10 	vmov	s0, r3
 8000f48:	f000 fb54 	bl	80015f4 <calcoor>
 8000f4c:	eef0 7a40 	vmov.f32	s15, s0
 8000f50:	4b7e      	ldr	r3, [pc, #504]	; (800114c <main+0x4c4>)
 8000f52:	edc3 7a00 	vstr	s15, [r3]
								ground_lng = calcoor(atof(LONG));
 8000f56:	4879      	ldr	r0, [pc, #484]	; (800113c <main+0x4b4>)
 8000f58:	f004 f9ab 	bl	80052b2 <atof>
 8000f5c:	ec54 3b10 	vmov	r3, r4, d0
 8000f60:	4618      	mov	r0, r3
 8000f62:	4621      	mov	r1, r4
 8000f64:	f7ff fe40 	bl	8000be8 <__aeabi_d2f>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	ee00 3a10 	vmov	s0, r3
 8000f6e:	f000 fb41 	bl	80015f4 <calcoor>
 8000f72:	eef0 7a40 	vmov.f32	s15, s0
 8000f76:	4b76      	ldr	r3, [pc, #472]	; (8001150 <main+0x4c8>)
 8000f78:	edc3 7a00 	vstr	s15, [r3]
								if (/*ground_lat >= 10. && ground_lng >= 10.*/ 1) {
									sprintf(COOR, ":%2.7f:%2.7f\n", ground_lat,
 8000f7c:	4b73      	ldr	r3, [pc, #460]	; (800114c <main+0x4c4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fae1 	bl	8000548 <__aeabi_f2d>
 8000f86:	4605      	mov	r5, r0
 8000f88:	460e      	mov	r6, r1
 8000f8a:	4b71      	ldr	r3, [pc, #452]	; (8001150 <main+0x4c8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fada 	bl	8000548 <__aeabi_f2d>
 8000f94:	4603      	mov	r3, r0
 8000f96:	460c      	mov	r4, r1
 8000f98:	e9cd 3400 	strd	r3, r4, [sp]
 8000f9c:	462a      	mov	r2, r5
 8000f9e:	4633      	mov	r3, r6
 8000fa0:	496c      	ldr	r1, [pc, #432]	; (8001154 <main+0x4cc>)
 8000fa2:	486d      	ldr	r0, [pc, #436]	; (8001158 <main+0x4d0>)
 8000fa4:	f004 fe16 	bl	8005bd4 <siprintf>
											ground_lng);

//									sprintf(NEXT_BUFF, "A:%s%s", NEXT_BUFF, COOR);
//									HAL_UART_Transmit(&huart3, (uint8_t*) NEXT_BUFF,
//									 sizeof(NEXT_BUFF), 1000);
									cal_dis = 1;
 8000fa8:	4b6c      	ldr	r3, [pc, #432]	; (800115c <main+0x4d4>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
								}
								for (uint8_t c = 0; c < sizeof(RX1_BUF); c++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	743b      	strb	r3, [r7, #16]
 8000fb2:	e006      	b.n	8000fc2 <main+0x33a>
									RX1_BUF[c] = '\0';
 8000fb4:	7c3b      	ldrb	r3, [r7, #16]
 8000fb6:	4a60      	ldr	r2, [pc, #384]	; (8001138 <main+0x4b0>)
 8000fb8:	2100      	movs	r1, #0
 8000fba:	54d1      	strb	r1, [r2, r3]
								for (uint8_t c = 0; c < sizeof(RX1_BUF); c++)
 8000fbc:	7c3b      	ldrb	r3, [r7, #16]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	743b      	strb	r3, [r7, #16]
 8000fc2:	7c3b      	ldrb	r3, [r7, #16]
 8000fc4:	2b63      	cmp	r3, #99	; 0x63
 8000fc6:	d9f5      	bls.n	8000fb4 <main+0x32c>
								break;
 8000fc8:	e007      	b.n	8000fda <main+0x352>
						for (uint8_t n = 0; n < sizeof(RX1_BUF); n++) { //  ONEMLI
 8000fca:	7d3b      	ldrb	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	753b      	strb	r3, [r7, #20]
 8000fd0:	7d3b      	ldrb	r3, [r7, #20]
 8000fd2:	2b63      	cmp	r3, #99	; 0x63
 8000fd4:	f67f af0b 	bls.w	8000dee <main+0x166>
							}
						}
						break;
 8000fd8:	e009      	b.n	8000fee <main+0x366>
 8000fda:	e008      	b.n	8000fee <main+0x366>
			for (uint8_t i = 0; i < gps_size; i++) {
 8000fdc:	7fbb      	ldrb	r3, [r7, #30]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	77bb      	strb	r3, [r7, #30]
 8000fe2:	4b5f      	ldr	r3, [pc, #380]	; (8001160 <main+0x4d8>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	7fba      	ldrb	r2, [r7, #30]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f4ff ae9d 	bcc.w	8000d28 <main+0xa0>
					}
				}
			}
			gps_size = 0;
 8000fee:	4b5c      	ldr	r3, [pc, #368]	; (8001160 <main+0x4d8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
			gps = 0;
 8000ff4:	4b5b      	ldr	r3, [pc, #364]	; (8001164 <main+0x4dc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
		}
		if (RX2 == 1) {
 8000ffa:	4b5b      	ldr	r3, [pc, #364]	; (8001168 <main+0x4e0>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	f47f ae8a 	bne.w	8000d18 <main+0x90>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001004:	2201      	movs	r2, #1
 8001006:	2110      	movs	r1, #16
 8001008:	4858      	ldr	r0, [pc, #352]	; (800116c <main+0x4e4>)
 800100a:	f001 f911 	bl	8002230 <HAL_GPIO_WritePin>

			for(uint8_t i = 0 ; i < sizeof(NEXT_BUFF) ; i++)
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e006      	b.n	8001022 <main+0x39a>
				NEXT_BUFF[i] = '\0';
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	4a56      	ldr	r2, [pc, #344]	; (8001170 <main+0x4e8>)
 8001018:	2100      	movs	r1, #0
 800101a:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0 ; i < sizeof(NEXT_BUFF) ; i++)
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	3301      	adds	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	2b63      	cmp	r3, #99	; 0x63
 8001026:	d9f5      	bls.n	8001014 <main+0x38c>

			RX2 = 0;
 8001028:	4b4f      	ldr	r3, [pc, #316]	; (8001168 <main+0x4e0>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
			uint8_t m = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	73bb      	strb	r3, [r7, #14]
			uint8_t go = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	737b      	strb	r3, [r7, #13]
			for (uint8_t k = 0; k < sizeof(RX2_BUF); k++) {
 8001036:	2300      	movs	r3, #0
 8001038:	733b      	strb	r3, [r7, #12]
 800103a:	e021      	b.n	8001080 <main+0x3f8>
				if (RX2_BUF[k] == ':' && go == 0) {
 800103c:	7b3b      	ldrb	r3, [r7, #12]
 800103e:	4a4d      	ldr	r2, [pc, #308]	; (8001174 <main+0x4ec>)
 8001040:	5cd3      	ldrb	r3, [r2, r3]
 8001042:	2b3a      	cmp	r3, #58	; 0x3a
 8001044:	d104      	bne.n	8001050 <main+0x3c8>
 8001046:	7b7b      	ldrb	r3, [r7, #13]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <main+0x3c8>
					go = 1;
 800104c:	2301      	movs	r3, #1
 800104e:	737b      	strb	r3, [r7, #13]
				}
				if (go == 1) {
 8001050:	7b7b      	ldrb	r3, [r7, #13]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d109      	bne.n	800106a <main+0x3e2>
					NEXT_BUFF[m] = RX2_BUF[k - 1];
 8001056:	7b3b      	ldrb	r3, [r7, #12]
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	4945      	ldr	r1, [pc, #276]	; (8001174 <main+0x4ec>)
 800105e:	5c89      	ldrb	r1, [r1, r2]
 8001060:	4a43      	ldr	r2, [pc, #268]	; (8001170 <main+0x4e8>)
 8001062:	54d1      	strb	r1, [r2, r3]
					m++;
 8001064:	7bbb      	ldrb	r3, [r7, #14]
 8001066:	3301      	adds	r3, #1
 8001068:	73bb      	strb	r3, [r7, #14]
				}
				if (go == 1 && RX2_BUF[k] == '\0')
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d104      	bne.n	800107a <main+0x3f2>
 8001070:	7b3b      	ldrb	r3, [r7, #12]
 8001072:	4a40      	ldr	r2, [pc, #256]	; (8001174 <main+0x4ec>)
 8001074:	5cd3      	ldrb	r3, [r2, r3]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d006      	beq.n	8001088 <main+0x400>
			for (uint8_t k = 0; k < sizeof(RX2_BUF); k++) {
 800107a:	7b3b      	ldrb	r3, [r7, #12]
 800107c:	3301      	adds	r3, #1
 800107e:	733b      	strb	r3, [r7, #12]
 8001080:	7b3b      	ldrb	r3, [r7, #12]
 8001082:	2b4f      	cmp	r3, #79	; 0x4f
 8001084:	d9da      	bls.n	800103c <main+0x3b4>
 8001086:	e000      	b.n	800108a <main+0x402>
					break;
 8001088:	bf00      	nop
			}

			for(uint8_t i = 0 ; i < sizeof(RX2_BUF) ; i++)
 800108a:	2300      	movs	r3, #0
 800108c:	72fb      	strb	r3, [r7, #11]
 800108e:	e006      	b.n	800109e <main+0x416>
				RX2_BUF[i] = '\0';
 8001090:	7afb      	ldrb	r3, [r7, #11]
 8001092:	4a38      	ldr	r2, [pc, #224]	; (8001174 <main+0x4ec>)
 8001094:	2100      	movs	r1, #0
 8001096:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0 ; i < sizeof(RX2_BUF) ; i++)
 8001098:	7afb      	ldrb	r3, [r7, #11]
 800109a:	3301      	adds	r3, #1
 800109c:	72fb      	strb	r3, [r7, #11]
 800109e:	7afb      	ldrb	r3, [r7, #11]
 80010a0:	2b4f      	cmp	r3, #79	; 0x4f
 80010a2:	d9f5      	bls.n	8001090 <main+0x408>



			for (uint8_t j = 0; j < sizeof(NEXT_BUFF) + 2; j++) {
 80010a4:	2300      	movs	r3, #0
 80010a6:	72bb      	strb	r3, [r7, #10]
 80010a8:	e00d      	b.n	80010c6 <main+0x43e>
				uint8_t h = sizeof(NEXT_BUFF) + 2 - j;
 80010aa:	7abb      	ldrb	r3, [r7, #10]
 80010ac:	f1c3 0366 	rsb	r3, r3, #102	; 0x66
 80010b0:	717b      	strb	r3, [r7, #5]
				NEXT_BUFF[h] = NEXT_BUFF[h - 2];
 80010b2:	797b      	ldrb	r3, [r7, #5]
 80010b4:	1e9a      	subs	r2, r3, #2
 80010b6:	797b      	ldrb	r3, [r7, #5]
 80010b8:	492d      	ldr	r1, [pc, #180]	; (8001170 <main+0x4e8>)
 80010ba:	5c89      	ldrb	r1, [r1, r2]
 80010bc:	4a2c      	ldr	r2, [pc, #176]	; (8001170 <main+0x4e8>)
 80010be:	54d1      	strb	r1, [r2, r3]
			for (uint8_t j = 0; j < sizeof(NEXT_BUFF) + 2; j++) {
 80010c0:	7abb      	ldrb	r3, [r7, #10]
 80010c2:	3301      	adds	r3, #1
 80010c4:	72bb      	strb	r3, [r7, #10]
 80010c6:	7abb      	ldrb	r3, [r7, #10]
 80010c8:	2b65      	cmp	r3, #101	; 0x65
 80010ca:	d9ee      	bls.n	80010aa <main+0x422>
			}
			NEXT_BUFF[0] = 'A';
 80010cc:	4b28      	ldr	r3, [pc, #160]	; (8001170 <main+0x4e8>)
 80010ce:	2241      	movs	r2, #65	; 0x41
 80010d0:	701a      	strb	r2, [r3, #0]
			NEXT_BUFF[1] = ':';
 80010d2:	4b27      	ldr	r3, [pc, #156]	; (8001170 <main+0x4e8>)
 80010d4:	223a      	movs	r2, #58	; 0x3a
 80010d6:	705a      	strb	r2, [r3, #1]
			uint8_t dev = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	727b      	strb	r3, [r7, #9]
			for (uint8_t i = 0; i < sizeof(NEXT_BUFF); i++) {
 80010dc:	2300      	movs	r3, #0
 80010de:	723b      	strb	r3, [r7, #8]
 80010e0:	e01a      	b.n	8001118 <main+0x490>
				if (NEXT_BUFF[i] == '\n') {
 80010e2:	7a3b      	ldrb	r3, [r7, #8]
 80010e4:	4a22      	ldr	r2, [pc, #136]	; (8001170 <main+0x4e8>)
 80010e6:	5cd3      	ldrb	r3, [r2, r3]
 80010e8:	2b0a      	cmp	r3, #10
 80010ea:	d10a      	bne.n	8001102 <main+0x47a>
					NEXT_BUFF[i] = ':';
 80010ec:	7a3b      	ldrb	r3, [r7, #8]
 80010ee:	4a20      	ldr	r2, [pc, #128]	; (8001170 <main+0x4e8>)
 80010f0:	213a      	movs	r1, #58	; 0x3a
 80010f2:	54d1      	strb	r1, [r2, r3]
					NEXT_BUFF[i + 1] = 'B';
 80010f4:	7a3b      	ldrb	r3, [r7, #8]
 80010f6:	3301      	adds	r3, #1
 80010f8:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <main+0x4e8>)
 80010fa:	2142      	movs	r1, #66	; 0x42
 80010fc:	54d1      	strb	r1, [r2, r3]
					//NEXT_BUFF[i + 2] = '\n';
					dev = 1;
 80010fe:	2301      	movs	r3, #1
 8001100:	727b      	strb	r3, [r7, #9]
				}
				if (dev == 1) {
 8001102:	7a7b      	ldrb	r3, [r7, #9]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d104      	bne.n	8001112 <main+0x48a>
					NEXT_BUFF[i + 2] = '\0';
 8001108:	7a3b      	ldrb	r3, [r7, #8]
 800110a:	3302      	adds	r3, #2
 800110c:	4a18      	ldr	r2, [pc, #96]	; (8001170 <main+0x4e8>)
 800110e:	2100      	movs	r1, #0
 8001110:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < sizeof(NEXT_BUFF); i++) {
 8001112:	7a3b      	ldrb	r3, [r7, #8]
 8001114:	3301      	adds	r3, #1
 8001116:	723b      	strb	r3, [r7, #8]
 8001118:	7a3b      	ldrb	r3, [r7, #8]
 800111a:	2b63      	cmp	r3, #99	; 0x63
 800111c:	d9e1      	bls.n	80010e2 <main+0x45a>
				}
			}
	  			HAL_UART_Transmit(&huart3, (uint8_t*) NEXT_BUFF, sizeof(NEXT_BUFF),
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	2264      	movs	r2, #100	; 0x64
 8001124:	4912      	ldr	r1, [pc, #72]	; (8001170 <main+0x4e8>)
 8001126:	4814      	ldr	r0, [pc, #80]	; (8001178 <main+0x4f0>)
 8001128:	f002 fe68 	bl	8003dfc <HAL_UART_Transmit>
	  					1000);

	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2110      	movs	r1, #16
 8001130:	480e      	ldr	r0, [pc, #56]	; (800116c <main+0x4e4>)
 8001132:	f001 f87d 	bl	8002230 <HAL_GPIO_WritePin>
		if (gps == 1) {
 8001136:	e5ef      	b.n	8000d18 <main+0x90>
 8001138:	200004ec 	.word	0x200004ec
 800113c:	200002fc 	.word	0x200002fc
 8001140:	200002f0 	.word	0x200002f0
 8001144:	200002b8 	.word	0x200002b8
 8001148:	200004e0 	.word	0x200004e0
 800114c:	200002dc 	.word	0x200002dc
 8001150:	200002e0 	.word	0x200002e0
 8001154:	080088b8 	.word	0x080088b8
 8001158:	200002c0 	.word	0x200002c0
 800115c:	200001fc 	.word	0x200001fc
 8001160:	200002db 	.word	0x200002db
 8001164:	200002bc 	.word	0x200002bc
 8001168:	200002b4 	.word	0x200002b4
 800116c:	48000400 	.word	0x48000400
 8001170:	20000250 	.word	0x20000250
 8001174:	20000200 	.word	0x20000200
 8001178:	20000308 	.word	0x20000308

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b096      	sub	sp, #88	; 0x58
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001186:	2228      	movs	r2, #40	; 0x28
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f004 f8be 	bl	800530c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a0:	463b      	mov	r3, r7
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]
 80011ae:	615a      	str	r2, [r3, #20]
 80011b0:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011b2:	2301      	movs	r3, #1
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c0:	2301      	movs	r3, #1
 80011c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c4:	2302      	movs	r3, #2
 80011c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011d8:	4618      	mov	r0, r3
 80011da:	f001 f85b 	bl	8002294 <HAL_RCC_OscConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80011e4:	f000 fa52 	bl	800168c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e8:	230f      	movs	r3, #15
 80011ea:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ec:	2302      	movs	r3, #2
 80011ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80011f4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	2102      	movs	r1, #2
 8001204:	4618      	mov	r0, r3
 8001206:	f001 ff4d 	bl	80030a4 <HAL_RCC_ClockConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001210:	f000 fa3c 	bl	800168c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001214:	2301      	movs	r3, #1
 8001216:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	4618      	mov	r0, r3
 8001220:	f002 f976 	bl	8003510 <HAL_RCCEx_PeriphCLKConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800122a:	f000 fa2f 	bl	800168c <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3758      	adds	r7, #88	; 0x58
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001258:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001260:	f242 3227 	movw	r2, #8999	; 0x2327
 8001264:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 69;
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <MX_TIM2_Init+0x98>)
 800126e:	2245      	movs	r2, #69	; 0x45
 8001270:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MX_TIM2_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001280:	f002 fa7c 	bl	800377c <HAL_TIM_Base_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800128a:	f000 f9ff 	bl	800168c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001292:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	4619      	mov	r1, r3
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <MX_TIM2_Init+0x98>)
 800129c:	f002 fb22 	bl	80038e4 <HAL_TIM_ConfigClockSource>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012a6:	f000 f9f1 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <MX_TIM2_Init+0x98>)
 80012b8:	f002 fce4 	bl	8003c84 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012c2:	f000 f9e3 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000410 	.word	0x20000410

080012d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_USART1_UART_Init+0x58>)
 80012da:	4a15      	ldr	r2, [pc, #84]	; (8001330 <MX_USART1_UART_Init+0x5c>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <MX_USART1_UART_Init+0x58>)
 80012e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_USART1_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_USART1_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_USART1_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_USART1_UART_Init+0x58>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <MX_USART1_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_USART1_UART_Init+0x58>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <MX_USART1_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_USART1_UART_Init+0x58>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_USART1_UART_Init+0x58>)
 8001318:	f002 fd22 	bl	8003d60 <HAL_UART_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001322:	f000 f9b3 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000038c 	.word	0x2000038c
 8001330:	40013800 	.word	0x40013800

08001334 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_USART2_UART_Init+0x58>)
 800133a:	4a15      	ldr	r2, [pc, #84]	; (8001390 <MX_USART2_UART_Init+0x5c>)
 800133c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <MX_USART2_UART_Init+0x58>)
 8001340:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001344:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_USART2_UART_Init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_USART2_UART_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_USART2_UART_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_USART2_UART_Init+0x58>)
 800135a:	220c      	movs	r2, #12
 800135c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_USART2_UART_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_USART2_UART_Init+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_USART2_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_USART2_UART_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_USART2_UART_Init+0x58>)
 8001378:	f002 fcf2 	bl	8003d60 <HAL_UART_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001382:	f000 f983 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000045c 	.word	0x2000045c
 8001390:	40004400 	.word	0x40004400

08001394 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_USART3_UART_Init+0x58>)
 800139a:	4a15      	ldr	r2, [pc, #84]	; (80013f0 <MX_USART3_UART_Init+0x5c>)
 800139c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <MX_USART3_UART_Init+0x58>)
 80013a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_USART3_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_USART3_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_USART3_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_USART3_UART_Init+0x58>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_USART3_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_USART3_UART_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_USART3_UART_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_USART3_UART_Init+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_USART3_UART_Init+0x58>)
 80013d8:	f002 fcc2 	bl	8003d60 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80013e2:	f000 f953 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000308 	.word	0x20000308
 80013f0:	40004800 	.word	0x40004800

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800140a:	4b28      	ldr	r3, [pc, #160]	; (80014ac <MX_GPIO_Init+0xb8>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4a27      	ldr	r2, [pc, #156]	; (80014ac <MX_GPIO_Init+0xb8>)
 8001410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001414:	6153      	str	r3, [r2, #20]
 8001416:	4b25      	ldr	r3, [pc, #148]	; (80014ac <MX_GPIO_Init+0xb8>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_GPIO_Init+0xb8>)
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	4a21      	ldr	r2, [pc, #132]	; (80014ac <MX_GPIO_Init+0xb8>)
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	6153      	str	r3, [r2, #20]
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_GPIO_Init+0xb8>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_GPIO_Init+0xb8>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	4a1b      	ldr	r2, [pc, #108]	; (80014ac <MX_GPIO_Init+0xb8>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001444:	6153      	str	r3, [r2, #20]
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_GPIO_Init+0xb8>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M0_Pin|M1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	2183      	movs	r1, #131	; 0x83
 8001456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145a:	f000 fee9 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2111      	movs	r1, #17
 8001462:	4813      	ldr	r0, [pc, #76]	; (80014b0 <MX_GPIO_Init+0xbc>)
 8001464:	f000 fee4 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M0_Pin M1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|LED2_Pin;
 8001468:	2383      	movs	r3, #131	; 0x83
 800146a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4619      	mov	r1, r3
 800147e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001482:	f000 fd63 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BUZZER_Pin;
 8001486:	2311      	movs	r3, #17
 8001488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	4619      	mov	r1, r3
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <MX_GPIO_Init+0xbc>)
 800149e:	f000 fd55 	bl	8001f4c <HAL_GPIO_Init>

}
 80014a2:	bf00      	nop
 80014a4:	3720      	adds	r7, #32
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000
 80014b0:	48000400 	.word	0x48000400

080014b4 <LORA_CONFG>:

/* USER CODE BEGIN 4 */
void LORA_CONFG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4604      	mov	r4, r0
 80014bc:	4608      	mov	r0, r1
 80014be:	4611      	mov	r1, r2
 80014c0:	461a      	mov	r2, r3
 80014c2:	4623      	mov	r3, r4
 80014c4:	71fb      	strb	r3, [r7, #7]
 80014c6:	4603      	mov	r3, r0
 80014c8:	71bb      	strb	r3, [r7, #6]
 80014ca:	460b      	mov	r3, r1
 80014cc:	717b      	strb	r3, [r7, #5]
 80014ce:	4613      	mov	r3, r2
 80014d0:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	2101      	movs	r1, #1
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014da:	f000 fea9 	bl	8002230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2102      	movs	r1, #2
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f000 fea3 	bl	8002230 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80014ea:	2032      	movs	r0, #50	; 0x32
 80014ec:	f000 fb84 	bl	8001bf8 <HAL_Delay>

	char cfg_buff[6] = {0};
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	809a      	strh	r2, [r3, #4]
	enum lora{Transparent, Fixed} mode;
	mode = MODE;
 80014fa:	793b      	ldrb	r3, [r7, #4]
 80014fc:	73fb      	strb	r3, [r7, #15]

	cfg_buff[0] = 0xC0;  // header for saving paramater when power down C0
 80014fe:	23c0      	movs	r3, #192	; 0xc0
 8001500:	723b      	strb	r3, [r7, #8]
	cfg_buff[1] = ADDH;  // high address
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	727b      	strb	r3, [r7, #9]
	cfg_buff[2] = ADDL;  // low address
 8001506:	79bb      	ldrb	r3, [r7, #6]
 8001508:	72bb      	strb	r3, [r7, #10]
	cfg_buff[3] = 0x19;  // SPED (parity, baud, data rate)
 800150a:	2319      	movs	r3, #25
 800150c:	72fb      	strb	r3, [r7, #11]
	cfg_buff[4] = CHN;   // channel
 800150e:	797b      	ldrb	r3, [r7, #5]
 8001510:	733b      	strb	r3, [r7, #12]

	switch(mode){
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <LORA_CONFG+0x6a>
 8001518:	2b01      	cmp	r3, #1
 800151a:	d003      	beq.n	8001524 <LORA_CONFG+0x70>
 800151c:	e005      	b.n	800152a <LORA_CONFG+0x76>
	case Transparent:
		cfg_buff[5] = 0x44;  // option
 800151e:	2344      	movs	r3, #68	; 0x44
 8001520:	737b      	strb	r3, [r7, #13]
		break;
 8001522:	e004      	b.n	800152e <LORA_CONFG+0x7a>
	case Fixed:
		cfg_buff[5] = 0xC4;  // option
 8001524:	23c4      	movs	r3, #196	; 0xc4
 8001526:	737b      	strb	r3, [r7, #13]
		break;
 8001528:	e001      	b.n	800152e <LORA_CONFG+0x7a>
	default:
		cfg_buff[5] = 0x44;  // option
 800152a:	2344      	movs	r3, #68	; 0x44
 800152c:	737b      	strb	r3, [r7, #13]
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) cfg_buff, 6, 1000);
 800152e:	f107 0108 	add.w	r1, r7, #8
 8001532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001536:	2206      	movs	r2, #6
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <LORA_CONFG+0xb8>)
 800153a:	f002 fc5f 	bl	8003dfc <HAL_UART_Transmit>

	HAL_Delay(25);
 800153e:	2019      	movs	r0, #25
 8001540:	f000 fb5a 	bl	8001bf8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	2101      	movs	r1, #1
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f000 fe70 	bl	8002230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	2102      	movs	r1, #2
 8001554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001558:	f000 fe6a 	bl	8002230 <HAL_GPIO_WritePin>
	HAL_Delay(25);
 800155c:	2019      	movs	r0, #25
 800155e:	f000 fb4b 	bl	8001bf8 <HAL_Delay>
}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	bd90      	pop	{r4, r7, pc}
 800156a:	bf00      	nop
 800156c:	2000045c 	.word	0x2000045c

08001570 <LORA_READ_PARAMETER>:

void LORA_READ_PARAMETER()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 8001576:	2201      	movs	r2, #1
 8001578:	2101      	movs	r1, #1
 800157a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157e:	f000 fe57 	bl	8002230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8001582:	2201      	movs	r2, #1
 8001584:	2102      	movs	r1, #2
 8001586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158a:	f000 fe51 	bl	8002230 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800158e:	2032      	movs	r0, #50	; 0x32
 8001590:	f000 fb32 	bl	8001bf8 <HAL_Delay>

	char buff_read[6] = {0};
 8001594:	463b      	mov	r3, r7
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	809a      	strh	r2, [r3, #4]
	buff_read[0] = 0xC1;
 800159c:	23c1      	movs	r3, #193	; 0xc1
 800159e:	703b      	strb	r3, [r7, #0]
	buff_read[1] = 0xC1;
 80015a0:	23c1      	movs	r3, #193	; 0xc1
 80015a2:	707b      	strb	r3, [r7, #1]
	buff_read[2] = 0xC1;
 80015a4:	23c1      	movs	r3, #193	; 0xc1
 80015a6:	70bb      	strb	r3, [r7, #2]

	HAL_UART_Transmit(&huart2, (uint8_t*) buff_read, 3, 1000);
 80015a8:	4639      	mov	r1, r7
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	2203      	movs	r2, #3
 80015b0:	480f      	ldr	r0, [pc, #60]	; (80015f0 <LORA_READ_PARAMETER+0x80>)
 80015b2:	f002 fc23 	bl	8003dfc <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*) buff_read, 6, 1000);
 80015b6:	4639      	mov	r1, r7
 80015b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015bc:	2206      	movs	r2, #6
 80015be:	480c      	ldr	r0, [pc, #48]	; (80015f0 <LORA_READ_PARAMETER+0x80>)
 80015c0:	f002 fcb0 	bl	8003f24 <HAL_UART_Receive>

	HAL_Delay(25);
 80015c4:	2019      	movs	r0, #25
 80015c6:	f000 fb17 	bl	8001bf8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2101      	movs	r1, #1
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d2:	f000 fe2d 	bl	8002230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2102      	movs	r1, #2
 80015da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015de:	f000 fe27 	bl	8002230 <HAL_GPIO_WritePin>
	HAL_Delay(25);
 80015e2:	2019      	movs	r0, #25
 80015e4:	f000 fb08 	bl	8001bf8 <HAL_Delay>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000045c 	.word	0x2000045c

080015f4 <calcoor>:

float calcoor(float x)
{
 80015f4:	b5b0      	push	{r4, r5, r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	ed87 0a01 	vstr	s0, [r7, #4]
	float a = (int)x / 100;
 80015fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001606:	ee17 1a90 	vmov	r1, s15
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <calcoor+0x8c>)
 800160c:	fb83 2301 	smull	r2, r3, r3, r1
 8001610:	115a      	asrs	r2, r3, #5
 8001612:	17cb      	asrs	r3, r1, #31
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161e:	edc7 7a03 	vstr	s15, [r7, #12]
	float b = (x - (a * 100.0)) / 60.0;
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7fe ff90 	bl	8000548 <__aeabi_f2d>
 8001628:	4604      	mov	r4, r0
 800162a:	460d      	mov	r5, r1
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f7fe ff8b 	bl	8000548 <__aeabi_f2d>
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <calcoor+0x90>)
 8001638:	f7fe ffde 	bl	80005f8 <__aeabi_dmul>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4620      	mov	r0, r4
 8001642:	4629      	mov	r1, r5
 8001644:	f7fe fe20 	bl	8000288 <__aeabi_dsub>
 8001648:	4603      	mov	r3, r0
 800164a:	460c      	mov	r4, r1
 800164c:	4618      	mov	r0, r3
 800164e:	4621      	mov	r1, r4
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <calcoor+0x94>)
 8001656:	f7ff f8f9 	bl	800084c <__aeabi_ddiv>
 800165a:	4603      	mov	r3, r0
 800165c:	460c      	mov	r4, r1
 800165e:	4618      	mov	r0, r3
 8001660:	4621      	mov	r1, r4
 8001662:	f7ff fac1 	bl	8000be8 <__aeabi_d2f>
 8001666:	4603      	mov	r3, r0
 8001668:	60bb      	str	r3, [r7, #8]
	return a+b;
 800166a:	ed97 7a03 	vldr	s14, [r7, #12]
 800166e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001672:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bdb0      	pop	{r4, r5, r7, pc}
 8001680:	51eb851f 	.word	0x51eb851f
 8001684:	40590000 	.word	0x40590000
 8001688:	404e0000 	.word	0x404e0000

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <HAL_MspInit+0x44>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <HAL_MspInit+0x44>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6193      	str	r3, [r2, #24]
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <HAL_MspInit+0x44>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_MspInit+0x44>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <HAL_MspInit+0x44>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	61d3      	str	r3, [r2, #28]
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_MspInit+0x44>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000

080016e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f4:	d10b      	bne.n	800170e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_TIM_Base_MspInit+0x38>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a08      	ldr	r2, [pc, #32]	; (800171c <HAL_TIM_Base_MspInit+0x38>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	61d3      	str	r3, [r2, #28]
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_TIM_Base_MspInit+0x38>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000

08001720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08e      	sub	sp, #56	; 0x38
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a53      	ldr	r2, [pc, #332]	; (800188c <HAL_UART_MspInit+0x16c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d132      	bne.n	80017a8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001742:	4b53      	ldr	r3, [pc, #332]	; (8001890 <HAL_UART_MspInit+0x170>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	4a52      	ldr	r2, [pc, #328]	; (8001890 <HAL_UART_MspInit+0x170>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174c:	6193      	str	r3, [r2, #24]
 800174e:	4b50      	ldr	r3, [pc, #320]	; (8001890 <HAL_UART_MspInit+0x170>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	623b      	str	r3, [r7, #32]
 8001758:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	4b4d      	ldr	r3, [pc, #308]	; (8001890 <HAL_UART_MspInit+0x170>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	4a4c      	ldr	r2, [pc, #304]	; (8001890 <HAL_UART_MspInit+0x170>)
 8001760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001764:	6153      	str	r3, [r2, #20]
 8001766:	4b4a      	ldr	r3, [pc, #296]	; (8001890 <HAL_UART_MspInit+0x170>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	61fb      	str	r3, [r7, #28]
 8001770:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001772:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001784:	2307      	movs	r3, #7
 8001786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001792:	f000 fbdb 	bl	8001f4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2025      	movs	r0, #37	; 0x25
 800179c:	f000 fb29 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017a0:	2025      	movs	r0, #37	; 0x25
 80017a2:	f000 fb42 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017a6:	e06c      	b.n	8001882 <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a39      	ldr	r2, [pc, #228]	; (8001894 <HAL_UART_MspInit+0x174>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d131      	bne.n	8001816 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017b2:	4b37      	ldr	r3, [pc, #220]	; (8001890 <HAL_UART_MspInit+0x170>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	4a36      	ldr	r2, [pc, #216]	; (8001890 <HAL_UART_MspInit+0x170>)
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	61d3      	str	r3, [r2, #28]
 80017be:	4b34      	ldr	r3, [pc, #208]	; (8001890 <HAL_UART_MspInit+0x170>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	61bb      	str	r3, [r7, #24]
 80017c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b31      	ldr	r3, [pc, #196]	; (8001890 <HAL_UART_MspInit+0x170>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	4a30      	ldr	r2, [pc, #192]	; (8001890 <HAL_UART_MspInit+0x170>)
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	6153      	str	r3, [r2, #20]
 80017d6:	4b2e      	ldr	r3, [pc, #184]	; (8001890 <HAL_UART_MspInit+0x170>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017e2:	230c      	movs	r3, #12
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017f2:	2307      	movs	r3, #7
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fa:	4619      	mov	r1, r3
 80017fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001800:	f000 fba4 	bl	8001f4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	2026      	movs	r0, #38	; 0x26
 800180a:	f000 faf2 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800180e:	2026      	movs	r0, #38	; 0x26
 8001810:	f000 fb0b 	bl	8001e2a <HAL_NVIC_EnableIRQ>
}
 8001814:	e035      	b.n	8001882 <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART3)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1f      	ldr	r2, [pc, #124]	; (8001898 <HAL_UART_MspInit+0x178>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d130      	bne.n	8001882 <HAL_UART_MspInit+0x162>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <HAL_UART_MspInit+0x170>)
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	4a1a      	ldr	r2, [pc, #104]	; (8001890 <HAL_UART_MspInit+0x170>)
 8001826:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800182a:	61d3      	str	r3, [r2, #28]
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_UART_MspInit+0x170>)
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_UART_MspInit+0x170>)
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	4a14      	ldr	r2, [pc, #80]	; (8001890 <HAL_UART_MspInit+0x170>)
 800183e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001842:	6153      	str	r3, [r2, #20]
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_UART_MspInit+0x170>)
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001850:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001862:	2307      	movs	r3, #7
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186a:	4619      	mov	r1, r3
 800186c:	480b      	ldr	r0, [pc, #44]	; (800189c <HAL_UART_MspInit+0x17c>)
 800186e:	f000 fb6d 	bl	8001f4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2027      	movs	r0, #39	; 0x27
 8001878:	f000 fabb 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800187c:	2027      	movs	r0, #39	; 0x27
 800187e:	f000 fad4 	bl	8001e2a <HAL_NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3738      	adds	r7, #56	; 0x38
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40013800 	.word	0x40013800
 8001890:	40021000 	.word	0x40021000
 8001894:	40004400 	.word	0x40004400
 8001898:	40004800 	.word	0x40004800
 800189c:	48000400 	.word	0x48000400

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <HardFault_Handler+0x4>

080018b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <MemManage_Handler+0x4>

080018ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <BusFault_Handler+0x4>

080018c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <UsageFault_Handler+0x4>

080018c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f4:	f000 f960 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001900:	4813      	ldr	r0, [pc, #76]	; (8001950 <USART1_IRQHandler+0x54>)
 8001902:	f002 fc2f 	bl	8004164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	HAL_UART_Receive_IT(&huart1, (uint8_t*) &buff1, 1);
 8001906:	2201      	movs	r2, #1
 8001908:	4912      	ldr	r1, [pc, #72]	; (8001954 <USART1_IRQHandler+0x58>)
 800190a:	4811      	ldr	r0, [pc, #68]	; (8001950 <USART1_IRQHandler+0x54>)
 800190c:	f002 fbdb 	bl	80040c6 <HAL_UART_Receive_IT>
	RX1_BUF[c1] = buff1;
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <USART1_IRQHandler+0x5c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <USART1_IRQHandler+0x58>)
 8001918:	7819      	ldrb	r1, [r3, #0]
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <USART1_IRQHandler+0x60>)
 800191c:	5499      	strb	r1, [r3, r2]
	if (RX1_BUF[c1] == '\n') {
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <USART1_IRQHandler+0x5c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	4b0d      	ldr	r3, [pc, #52]	; (800195c <USART1_IRQHandler+0x60>)
 8001926:	5c9b      	ldrb	r3, [r3, r2]
 8001928:	2b0a      	cmp	r3, #10
 800192a:	d109      	bne.n	8001940 <USART1_IRQHandler+0x44>
		gps = 1;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <USART1_IRQHandler+0x64>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
		gps_size = c1;
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <USART1_IRQHandler+0x5c>)
 8001934:	781a      	ldrb	r2, [r3, #0]
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <USART1_IRQHandler+0x68>)
 8001938:	701a      	strb	r2, [r3, #0]
		c1 = 0;
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <USART1_IRQHandler+0x5c>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
	}
	c1++;
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <USART1_IRQHandler+0x5c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <USART1_IRQHandler+0x5c>)
 800194a:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART1_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	2000038c 	.word	0x2000038c
 8001954:	200002bd 	.word	0x200002bd
 8001958:	200002d9 	.word	0x200002d9
 800195c:	200004ec 	.word	0x200004ec
 8001960:	200002bc 	.word	0x200002bc
 8001964:	200002db 	.word	0x200002db

08001968 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800196e:	482b      	ldr	r0, [pc, #172]	; (8001a1c <USART2_IRQHandler+0xb4>)
 8001970:	f002 fbf8 	bl	8004164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*) &buff2, 1);
 8001974:	2201      	movs	r2, #1
 8001976:	492a      	ldr	r1, [pc, #168]	; (8001a20 <USART2_IRQHandler+0xb8>)
 8001978:	4828      	ldr	r0, [pc, #160]	; (8001a1c <USART2_IRQHandler+0xb4>)
 800197a:	f002 fba4 	bl	80040c6 <HAL_UART_Receive_IT>
  	if (buff2 != '\n' && buff2 != '\0' ) {
 800197e:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <USART2_IRQHandler+0xb8>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b0a      	cmp	r3, #10
 8001984:	d017      	beq.n	80019b6 <USART2_IRQHandler+0x4e>
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <USART2_IRQHandler+0xb8>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d013      	beq.n	80019b6 <USART2_IRQHandler+0x4e>
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 800198e:	2201      	movs	r2, #1
 8001990:	2180      	movs	r1, #128	; 0x80
 8001992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001996:	f000 fc4b 	bl	8002230 <HAL_GPIO_WritePin>
  		RX2_BUF[n] = buff2;
 800199a:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <USART2_IRQHandler+0xbc>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <USART2_IRQHandler+0xb8>)
 80019a2:	7819      	ldrb	r1, [r3, #0]
 80019a4:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <USART2_IRQHandler+0xc0>)
 80019a6:	5499      	strb	r1, [r3, r2]
  		n++;
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <USART2_IRQHandler+0xbc>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <USART2_IRQHandler+0xbc>)
 80019b2:	701a      	strb	r2, [r3, #0]
  		n = 0;
  		//HAL_UART_Transmit(&huart3, (uint8_t*) RX2_BUF, sizeof(RX2_BUF), 1000);  // For hard fault interrupt, you have to assign priority UART ports
  		RX2 = 1;
    	}
  /* USER CODE END USART2_IRQn 1 */
}
 80019b4:	e02e      	b.n	8001a14 <USART2_IRQHandler+0xac>
  	} else if(buff2 == '\n') {
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <USART2_IRQHandler+0xb8>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b0a      	cmp	r3, #10
 80019bc:	d12a      	bne.n	8001a14 <USART2_IRQHandler+0xac>
  		uint8_t A = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	71fb      	strb	r3, [r7, #7]
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2180      	movs	r1, #128	; 0x80
 80019c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ca:	f000 fc31 	bl	8002230 <HAL_GPIO_WritePin>
  		for (n; n < sizeof(RX2_BUF); n++) {
 80019ce:	e015      	b.n	80019fc <USART2_IRQHandler+0x94>
  			RX2_BUF[n] = COOR[A];
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <USART2_IRQHandler+0xbc>)
 80019d4:	7812      	ldrb	r2, [r2, #0]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <USART2_IRQHandler+0xc4>)
 80019da:	5cd2      	ldrb	r2, [r2, r3]
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <USART2_IRQHandler+0xc0>)
 80019de:	545a      	strb	r2, [r3, r1]
  			if (COOR[A] == '\0') {
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <USART2_IRQHandler+0xc4>)
 80019e4:	5cd3      	ldrb	r3, [r2, r3]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00d      	beq.n	8001a06 <USART2_IRQHandler+0x9e>
  			A++;
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	3301      	adds	r3, #1
 80019ee:	71fb      	strb	r3, [r7, #7]
  		for (n; n < sizeof(RX2_BUF); n++) {
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <USART2_IRQHandler+0xbc>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <USART2_IRQHandler+0xbc>)
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <USART2_IRQHandler+0xbc>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b4f      	cmp	r3, #79	; 0x4f
 8001a02:	d9e5      	bls.n	80019d0 <USART2_IRQHandler+0x68>
 8001a04:	e000      	b.n	8001a08 <USART2_IRQHandler+0xa0>
  				break;
 8001a06:	bf00      	nop
  		n = 0;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <USART2_IRQHandler+0xbc>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
  		RX2 = 1;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <USART2_IRQHandler+0xc8>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000045c 	.word	0x2000045c
 8001a20:	200002be 	.word	0x200002be
 8001a24:	200002da 	.word	0x200002da
 8001a28:	20000200 	.word	0x20000200
 8001a2c:	200002c0 	.word	0x200002c0
 8001a30:	200002b4 	.word	0x200002b4

08001a34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXT line 28.
  */
void USART3_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <USART3_IRQHandler+0x10>)
 8001a3a:	f002 fb93 	bl	8004164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000308 	.word	0x20000308

08001a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a50:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <_sbrk+0x5c>)
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <_sbrk+0x60>)
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <_sbrk+0x64>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <_sbrk+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d207      	bcs.n	8001a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a78:	f003 fc1e 	bl	80052b8 <__errno>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	230c      	movs	r3, #12
 8001a80:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	e009      	b.n	8001a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	; (8001aac <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <_sbrk+0x64>)
 8001a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20003000 	.word	0x20003000
 8001aa8:	00000400 	.word	0x00000400
 8001aac:	200002e4 	.word	0x200002e4
 8001ab0:	20000558 	.word	0x20000558

08001ab4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <SystemInit+0x20>)
 8001aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <SystemInit+0x20>)
 8001ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001adc:	480d      	ldr	r0, [pc, #52]	; (8001b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ade:	490e      	ldr	r1, [pc, #56]	; (8001b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ae0:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <LoopForever+0xe>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae4:	e002      	b.n	8001aec <LoopCopyDataInit>

08001ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aea:	3304      	adds	r3, #4

08001aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af0:	d3f9      	bcc.n	8001ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af2:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001af4:	4c0b      	ldr	r4, [pc, #44]	; (8001b24 <LoopForever+0x16>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af8:	e001      	b.n	8001afe <LoopFillZerobss>

08001afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001afc:	3204      	adds	r2, #4

08001afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b00:	d3fb      	bcc.n	8001afa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b02:	f7ff ffd7 	bl	8001ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b06:	f003 fbdd 	bl	80052c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b0a:	f7ff f8bd 	bl	8000c88 <main>

08001b0e <LoopForever>:

LoopForever:
    b LoopForever
 8001b0e:	e7fe      	b.n	8001b0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b10:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b18:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b1c:	08008bb8 	.word	0x08008bb8
  ldr r2, =_sbss
 8001b20:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b24:	20000558 	.word	0x20000558

08001b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC1_2_IRQHandler>
	...

08001b2c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_Init+0x28>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_Init+0x28>)
 8001b36:	f043 0310 	orr.w	r3, r3, #16
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 f94d 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff fda8 	bl	800169c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40022000 	.word	0x40022000

08001b58 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f965 	bl	8001e46 <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 f92d 	bl	8001df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	2000000c 	.word	0x2000000c
 8001bb4:	20000008 	.word	0x20000008

08001bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2000000c 	.word	0x2000000c
 8001bdc:	20000550 	.word	0x20000550

08001be0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000550 	.word	0x20000550

08001bf8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_Delay+0x40>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	2000000c 	.word	0x2000000c

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <__NVIC_EnableIRQ+0x38>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	; (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff8e 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff29 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff3e 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff8e 	bl	8001d30 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5d 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff31 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa2 	bl	8001d98 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d008      	beq.n	8001e82 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2204      	movs	r2, #4
 8001e74:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e020      	b.n	8001ec4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 020e 	bic.w	r2, r2, #14
 8001e90:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0201 	bic.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eaa:	2101      	movs	r1, #1
 8001eac:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d005      	beq.n	8001ef2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2204      	movs	r2, #4
 8001eea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	e027      	b.n	8001f42 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 020e 	bic.w	r2, r2, #14
 8001f00:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0201 	bic.w	r2, r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f20:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	4798      	blx	r3
    } 
  }
  return status;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5a:	e14e      	b.n	80021fa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2101      	movs	r1, #1
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8140 	beq.w	80021f4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d005      	beq.n	8001f8c <HAL_GPIO_Init+0x40>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d130      	bne.n	8001fee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	091b      	lsrs	r3, r3, #4
 8001fd8:	f003 0201 	and.w	r2, r3, #1
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d017      	beq.n	800202a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	2203      	movs	r2, #3
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d123      	bne.n	800207e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	08da      	lsrs	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3208      	adds	r2, #8
 800203e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002042:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	08da      	lsrs	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3208      	adds	r2, #8
 8002078:	6939      	ldr	r1, [r7, #16]
 800207a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0203 	and.w	r2, r3, #3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 809a 	beq.w	80021f4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c0:	4b55      	ldr	r3, [pc, #340]	; (8002218 <HAL_GPIO_Init+0x2cc>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	4a54      	ldr	r2, [pc, #336]	; (8002218 <HAL_GPIO_Init+0x2cc>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6193      	str	r3, [r2, #24]
 80020cc:	4b52      	ldr	r3, [pc, #328]	; (8002218 <HAL_GPIO_Init+0x2cc>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020d8:	4a50      	ldr	r2, [pc, #320]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002102:	d013      	beq.n	800212c <HAL_GPIO_Init+0x1e0>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a46      	ldr	r2, [pc, #280]	; (8002220 <HAL_GPIO_Init+0x2d4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00d      	beq.n	8002128 <HAL_GPIO_Init+0x1dc>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a45      	ldr	r2, [pc, #276]	; (8002224 <HAL_GPIO_Init+0x2d8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d007      	beq.n	8002124 <HAL_GPIO_Init+0x1d8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a44      	ldr	r2, [pc, #272]	; (8002228 <HAL_GPIO_Init+0x2dc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d101      	bne.n	8002120 <HAL_GPIO_Init+0x1d4>
 800211c:	2303      	movs	r3, #3
 800211e:	e006      	b.n	800212e <HAL_GPIO_Init+0x1e2>
 8002120:	2305      	movs	r3, #5
 8002122:	e004      	b.n	800212e <HAL_GPIO_Init+0x1e2>
 8002124:	2302      	movs	r3, #2
 8002126:	e002      	b.n	800212e <HAL_GPIO_Init+0x1e2>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_GPIO_Init+0x1e2>
 800212c:	2300      	movs	r3, #0
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	f002 0203 	and.w	r2, r2, #3
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	4093      	lsls	r3, r2
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800213e:	4937      	ldr	r1, [pc, #220]	; (800221c <HAL_GPIO_Init+0x2d0>)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800214c:	4b37      	ldr	r3, [pc, #220]	; (800222c <HAL_GPIO_Init+0x2e0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002170:	4a2e      	ldr	r2, [pc, #184]	; (800222c <HAL_GPIO_Init+0x2e0>)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002176:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_GPIO_Init+0x2e0>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800219a:	4a24      	ldr	r2, [pc, #144]	; (800222c <HAL_GPIO_Init+0x2e0>)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021a0:	4b22      	ldr	r3, [pc, #136]	; (800222c <HAL_GPIO_Init+0x2e0>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021c4:	4a19      	ldr	r2, [pc, #100]	; (800222c <HAL_GPIO_Init+0x2e0>)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021ca:	4b18      	ldr	r3, [pc, #96]	; (800222c <HAL_GPIO_Init+0x2e0>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021ee:	4a0f      	ldr	r2, [pc, #60]	; (800222c <HAL_GPIO_Init+0x2e0>)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3301      	adds	r3, #1
 80021f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	f47f aea9 	bne.w	8001f5c <HAL_GPIO_Init+0x10>
  }
}
 800220a:	bf00      	nop
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
 800221c:	40010000 	.word	0x40010000
 8002220:	48000400 	.word	0x48000400
 8002224:	48000800 	.word	0x48000800
 8002228:	48000c00 	.word	0x48000c00
 800222c:	40010400 	.word	0x40010400

08002230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
 800223c:	4613      	mov	r3, r2
 800223e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800224c:	e002      	b.n	8002254 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4013      	ands	r3, r2
 8002278:	041a      	lsls	r2, r3, #16
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	43d9      	mvns	r1, r3
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	400b      	ands	r3, r1
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	619a      	str	r2, [r3, #24]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800229a:	af00      	add	r7, sp, #0
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f000 bef4 	b.w	8003096 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 816a 	beq.w	8002592 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022be:	4bb3      	ldr	r3, [pc, #716]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d00c      	beq.n	80022e4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022ca:	4bb0      	ldr	r3, [pc, #704]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d159      	bne.n	800238a <HAL_RCC_OscConfig+0xf6>
 80022d6:	4bad      	ldr	r3, [pc, #692]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e2:	d152      	bne.n	800238a <HAL_RCC_OscConfig+0xf6>
 80022e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022e8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022f8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fc:	fab3 f383 	clz	r3, r3
 8002300:	b2db      	uxtb	r3, r3
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b01      	cmp	r3, #1
 800230e:	d102      	bne.n	8002316 <HAL_RCC_OscConfig+0x82>
 8002310:	4b9e      	ldr	r3, [pc, #632]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	e015      	b.n	8002342 <HAL_RCC_OscConfig+0xae>
 8002316:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800232a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800232e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002332:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800233e:	4b93      	ldr	r3, [pc, #588]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002346:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800234a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800234e:	fa92 f2a2 	rbit	r2, r2
 8002352:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002356:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800235a:	fab2 f282 	clz	r2, r2
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	f042 0220 	orr.w	r2, r2, #32
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f002 021f 	and.w	r2, r2, #31
 800236a:	2101      	movs	r1, #1
 800236c:	fa01 f202 	lsl.w	r2, r1, r2
 8002370:	4013      	ands	r3, r2
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 810c 	beq.w	8002590 <HAL_RCC_OscConfig+0x2fc>
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 8106 	bne.w	8002590 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	f000 be86 	b.w	8003096 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002394:	d106      	bne.n	80023a4 <HAL_RCC_OscConfig+0x110>
 8002396:	4b7d      	ldr	r3, [pc, #500]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a7c      	ldr	r2, [pc, #496]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e030      	b.n	8002406 <HAL_RCC_OscConfig+0x172>
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x134>
 80023ae:	4b77      	ldr	r3, [pc, #476]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a76      	ldr	r2, [pc, #472]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 80023b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b74      	ldr	r3, [pc, #464]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a73      	ldr	r2, [pc, #460]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 80023c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e01e      	b.n	8002406 <HAL_RCC_OscConfig+0x172>
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d2:	d10c      	bne.n	80023ee <HAL_RCC_OscConfig+0x15a>
 80023d4:	4b6d      	ldr	r3, [pc, #436]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a6c      	ldr	r2, [pc, #432]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 80023da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b6a      	ldr	r3, [pc, #424]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a69      	ldr	r2, [pc, #420]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 80023e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	e00b      	b.n	8002406 <HAL_RCC_OscConfig+0x172>
 80023ee:	4b67      	ldr	r3, [pc, #412]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a66      	ldr	r2, [pc, #408]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 80023f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b64      	ldr	r3, [pc, #400]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a63      	ldr	r2, [pc, #396]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 8002400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002404:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002406:	4b61      	ldr	r3, [pc, #388]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	f023 020f 	bic.w	r2, r3, #15
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	495d      	ldr	r1, [pc, #372]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 8002416:	4313      	orrs	r3, r2
 8002418:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d059      	beq.n	80024d8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff fbdc 	bl	8001be0 <HAL_GetTick>
 8002428:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800242e:	f7ff fbd7 	bl	8001be0 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	; 0x64
 800243c:	d902      	bls.n	8002444 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	f000 be29 	b.w	8003096 <HAL_RCC_OscConfig+0xe02>
 8002444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002448:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002458:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b01      	cmp	r3, #1
 800246e:	d102      	bne.n	8002476 <HAL_RCC_OscConfig+0x1e2>
 8002470:	4b46      	ldr	r3, [pc, #280]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	e015      	b.n	80024a2 <HAL_RCC_OscConfig+0x20e>
 8002476:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800247a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800248a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800248e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002492:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800249e:	4b3b      	ldr	r3, [pc, #236]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024a6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80024aa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80024ae:	fa92 f2a2 	rbit	r2, r2
 80024b2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80024b6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80024ba:	fab2 f282 	clz	r2, r2
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	f042 0220 	orr.w	r2, r2, #32
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	f002 021f 	and.w	r2, r2, #31
 80024ca:	2101      	movs	r1, #1
 80024cc:	fa01 f202 	lsl.w	r2, r1, r2
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0ab      	beq.n	800242e <HAL_RCC_OscConfig+0x19a>
 80024d6:	e05c      	b.n	8002592 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff fb82 	bl	8001be0 <HAL_GetTick>
 80024dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e2:	f7ff fb7d 	bl	8001be0 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d902      	bls.n	80024f8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	f000 bdcf 	b.w	8003096 <HAL_RCC_OscConfig+0xe02>
 80024f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024fc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800250c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	d102      	bne.n	800252a <HAL_RCC_OscConfig+0x296>
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	e015      	b.n	8002556 <HAL_RCC_OscConfig+0x2c2>
 800252a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800252e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800253e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002542:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002546:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <HAL_RCC_OscConfig+0x2f8>)
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800255a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800255e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002562:	fa92 f2a2 	rbit	r2, r2
 8002566:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800256a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800256e:	fab2 f282 	clz	r2, r2
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	f042 0220 	orr.w	r2, r2, #32
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	f002 021f 	and.w	r2, r2, #31
 800257e:	2101      	movs	r1, #1
 8002580:	fa01 f202 	lsl.w	r2, r1, r2
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1ab      	bne.n	80024e2 <HAL_RCC_OscConfig+0x24e>
 800258a:	e002      	b.n	8002592 <HAL_RCC_OscConfig+0x2fe>
 800258c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 816f 	beq.w	8002880 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025a2:	4bd0      	ldr	r3, [pc, #832]	; (80028e4 <HAL_RCC_OscConfig+0x650>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025ae:	4bcd      	ldr	r3, [pc, #820]	; (80028e4 <HAL_RCC_OscConfig+0x650>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d16c      	bne.n	8002694 <HAL_RCC_OscConfig+0x400>
 80025ba:	4bca      	ldr	r3, [pc, #808]	; (80028e4 <HAL_RCC_OscConfig+0x650>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d166      	bne.n	8002694 <HAL_RCC_OscConfig+0x400>
 80025c6:	2302      	movs	r3, #2
 80025c8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80025d0:	fa93 f3a3 	rbit	r3, r3
 80025d4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80025d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d102      	bne.n	80025f6 <HAL_RCC_OscConfig+0x362>
 80025f0:	4bbc      	ldr	r3, [pc, #752]	; (80028e4 <HAL_RCC_OscConfig+0x650>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	e013      	b.n	800261e <HAL_RCC_OscConfig+0x38a>
 80025f6:	2302      	movs	r3, #2
 80025f8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002600:	fa93 f3a3 	rbit	r3, r3
 8002604:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002608:	2302      	movs	r3, #2
 800260a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800260e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800261a:	4bb2      	ldr	r3, [pc, #712]	; (80028e4 <HAL_RCC_OscConfig+0x650>)
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	2202      	movs	r2, #2
 8002620:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002624:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002628:	fa92 f2a2 	rbit	r2, r2
 800262c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002630:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002634:	fab2 f282 	clz	r2, r2
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	f042 0220 	orr.w	r2, r2, #32
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	f002 021f 	and.w	r2, r2, #31
 8002644:	2101      	movs	r1, #1
 8002646:	fa01 f202 	lsl.w	r2, r1, r2
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_RCC_OscConfig+0x3cc>
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d002      	beq.n	8002660 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	f000 bd1b 	b.w	8003096 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002660:	4ba0      	ldr	r3, [pc, #640]	; (80028e4 <HAL_RCC_OscConfig+0x650>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	21f8      	movs	r1, #248	; 0xf8
 8002670:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002678:	fa91 f1a1 	rbit	r1, r1
 800267c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002680:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002684:	fab1 f181 	clz	r1, r1
 8002688:	b2c9      	uxtb	r1, r1
 800268a:	408b      	lsls	r3, r1
 800268c:	4995      	ldr	r1, [pc, #596]	; (80028e4 <HAL_RCC_OscConfig+0x650>)
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002692:	e0f5      	b.n	8002880 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002694:	1d3b      	adds	r3, r7, #4
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 8085 	beq.w	80027aa <HAL_RCC_OscConfig+0x516>
 80026a0:	2301      	movs	r3, #1
 80026a2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80026b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	461a      	mov	r2, r3
 80026c8:	2301      	movs	r3, #1
 80026ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7ff fa88 	bl	8001be0 <HAL_GetTick>
 80026d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d4:	e00a      	b.n	80026ec <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d6:	f7ff fa83 	bl	8001be0 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d902      	bls.n	80026ec <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	f000 bcd5 	b.w	8003096 <HAL_RCC_OscConfig+0xe02>
 80026ec:	2302      	movs	r3, #2
 80026ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80026fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	095b      	lsrs	r3, r3, #5
 800270a:	b2db      	uxtb	r3, r3
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b01      	cmp	r3, #1
 8002714:	d102      	bne.n	800271c <HAL_RCC_OscConfig+0x488>
 8002716:	4b73      	ldr	r3, [pc, #460]	; (80028e4 <HAL_RCC_OscConfig+0x650>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	e013      	b.n	8002744 <HAL_RCC_OscConfig+0x4b0>
 800271c:	2302      	movs	r3, #2
 800271e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800272e:	2302      	movs	r3, #2
 8002730:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002734:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002740:	4b68      	ldr	r3, [pc, #416]	; (80028e4 <HAL_RCC_OscConfig+0x650>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	2202      	movs	r2, #2
 8002746:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800274a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800274e:	fa92 f2a2 	rbit	r2, r2
 8002752:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002756:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800275a:	fab2 f282 	clz	r2, r2
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	f042 0220 	orr.w	r2, r2, #32
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	f002 021f 	and.w	r2, r2, #31
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f202 	lsl.w	r2, r1, r2
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0af      	beq.n	80026d6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002776:	4b5b      	ldr	r3, [pc, #364]	; (80028e4 <HAL_RCC_OscConfig+0x650>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	21f8      	movs	r1, #248	; 0xf8
 8002786:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800278e:	fa91 f1a1 	rbit	r1, r1
 8002792:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002796:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800279a:	fab1 f181 	clz	r1, r1
 800279e:	b2c9      	uxtb	r1, r1
 80027a0:	408b      	lsls	r3, r1
 80027a2:	4950      	ldr	r1, [pc, #320]	; (80028e4 <HAL_RCC_OscConfig+0x650>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
 80027a8:	e06a      	b.n	8002880 <HAL_RCC_OscConfig+0x5ec>
 80027aa:	2301      	movs	r3, #1
 80027ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80027bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	461a      	mov	r2, r3
 80027d2:	2300      	movs	r3, #0
 80027d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7ff fa03 	bl	8001be0 <HAL_GetTick>
 80027da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e0:	f7ff f9fe 	bl	8001be0 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d902      	bls.n	80027f6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	f000 bc50 	b.w	8003096 <HAL_RCC_OscConfig+0xe02>
 80027f6:	2302      	movs	r3, #2
 80027f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d102      	bne.n	8002826 <HAL_RCC_OscConfig+0x592>
 8002820:	4b30      	ldr	r3, [pc, #192]	; (80028e4 <HAL_RCC_OscConfig+0x650>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	e013      	b.n	800284e <HAL_RCC_OscConfig+0x5ba>
 8002826:	2302      	movs	r3, #2
 8002828:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002830:	fa93 f3a3 	rbit	r3, r3
 8002834:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002838:	2302      	movs	r3, #2
 800283a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800283e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800284a:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <HAL_RCC_OscConfig+0x650>)
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	2202      	movs	r2, #2
 8002850:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002854:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002858:	fa92 f2a2 	rbit	r2, r2
 800285c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002860:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002864:	fab2 f282 	clz	r2, r2
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f042 0220 	orr.w	r2, r2, #32
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f002 021f 	and.w	r2, r2, #31
 8002874:	2101      	movs	r1, #1
 8002876:	fa01 f202 	lsl.w	r2, r1, r2
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1af      	bne.n	80027e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 80da 	beq.w	8002a44 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d069      	beq.n	800296e <HAL_RCC_OscConfig+0x6da>
 800289a:	2301      	movs	r3, #1
 800289c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80028a4:	fa93 f3a3 	rbit	r3, r3
 80028a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80028ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_OscConfig+0x654>)
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	461a      	mov	r2, r3
 80028c0:	2301      	movs	r3, #1
 80028c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c4:	f7ff f98c 	bl	8001be0 <HAL_GetTick>
 80028c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028cc:	e00e      	b.n	80028ec <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ce:	f7ff f987 	bl	8001be0 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d906      	bls.n	80028ec <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e3d9      	b.n	8003096 <HAL_RCC_OscConfig+0xe02>
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
 80028e8:	10908120 	.word	0x10908120
 80028ec:	2302      	movs	r3, #2
 80028ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002902:	2202      	movs	r2, #2
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	fa93 f2a3 	rbit	r2, r3
 8002910:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800291a:	2202      	movs	r2, #2
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	fa93 f2a3 	rbit	r2, r3
 8002928:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800292c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292e:	4ba5      	ldr	r3, [pc, #660]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002932:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002936:	2102      	movs	r1, #2
 8002938:	6019      	str	r1, [r3, #0]
 800293a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	fa93 f1a3 	rbit	r1, r3
 8002944:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002948:	6019      	str	r1, [r3, #0]
  return result;
 800294a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f003 031f 	and.w	r3, r3, #31
 8002960:	2101      	movs	r1, #1
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0b0      	beq.n	80028ce <HAL_RCC_OscConfig+0x63a>
 800296c:	e06a      	b.n	8002a44 <HAL_RCC_OscConfig+0x7b0>
 800296e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002972:	2201      	movs	r2, #1
 8002974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	fa93 f2a3 	rbit	r2, r3
 8002980:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002984:	601a      	str	r2, [r3, #0]
  return result;
 8002986:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800298a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	4b8c      	ldr	r3, [pc, #560]	; (8002bc8 <HAL_RCC_OscConfig+0x934>)
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	461a      	mov	r2, r3
 800299c:	2300      	movs	r3, #0
 800299e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7ff f91e 	bl	8001be0 <HAL_GetTick>
 80029a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a8:	e009      	b.n	80029be <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029aa:	f7ff f919 	bl	8001be0 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e36b      	b.n	8003096 <HAL_RCC_OscConfig+0xe02>
 80029be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029c2:	2202      	movs	r2, #2
 80029c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	fa93 f2a3 	rbit	r2, r3
 80029d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80029da:	2202      	movs	r2, #2
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	fa93 f2a3 	rbit	r2, r3
 80029e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029f2:	2202      	movs	r2, #2
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	fa93 f2a3 	rbit	r2, r3
 8002a00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a06:	4b6f      	ldr	r3, [pc, #444]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a0a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a0e:	2102      	movs	r1, #2
 8002a10:	6019      	str	r1, [r3, #0]
 8002a12:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	fa93 f1a3 	rbit	r1, r3
 8002a1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a20:	6019      	str	r1, [r3, #0]
  return result;
 8002a22:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	2101      	movs	r1, #1
 8002a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1b2      	bne.n	80029aa <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8158 	beq.w	8002d04 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5a:	4b5a      	ldr	r3, [pc, #360]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d112      	bne.n	8002a8c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a66:	4b57      	ldr	r3, [pc, #348]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	4a56      	ldr	r2, [pc, #344]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a70:	61d3      	str	r3, [r2, #28]
 8002a72:	4b54      	ldr	r3, [pc, #336]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a7a:	f107 0308 	add.w	r3, r7, #8
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	f107 0308 	add.w	r3, r7, #8
 8002a84:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	4b4f      	ldr	r3, [pc, #316]	; (8002bcc <HAL_RCC_OscConfig+0x938>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d11a      	bne.n	8002ace <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a98:	4b4c      	ldr	r3, [pc, #304]	; (8002bcc <HAL_RCC_OscConfig+0x938>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a4b      	ldr	r2, [pc, #300]	; (8002bcc <HAL_RCC_OscConfig+0x938>)
 8002a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa4:	f7ff f89c 	bl	8001be0 <HAL_GetTick>
 8002aa8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	e009      	b.n	8002ac2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aae:	f7ff f897 	bl	8001be0 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e2e9      	b.n	8003096 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac2:	4b42      	ldr	r3, [pc, #264]	; (8002bcc <HAL_RCC_OscConfig+0x938>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0ef      	beq.n	8002aae <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x852>
 8002ad8:	4b3a      	ldr	r3, [pc, #232]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4a39      	ldr	r2, [pc, #228]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6213      	str	r3, [r2, #32]
 8002ae4:	e02f      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10c      	bne.n	8002b0a <HAL_RCC_OscConfig+0x876>
 8002af0:	4b34      	ldr	r3, [pc, #208]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4a33      	ldr	r2, [pc, #204]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	6213      	str	r3, [r2, #32]
 8002afc:	4b31      	ldr	r3, [pc, #196]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	4a30      	ldr	r2, [pc, #192]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002b02:	f023 0304 	bic.w	r3, r3, #4
 8002b06:	6213      	str	r3, [r2, #32]
 8002b08:	e01d      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d10c      	bne.n	8002b2e <HAL_RCC_OscConfig+0x89a>
 8002b14:	4b2b      	ldr	r3, [pc, #172]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4a2a      	ldr	r2, [pc, #168]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	6213      	str	r3, [r2, #32]
 8002b20:	4b28      	ldr	r3, [pc, #160]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4a27      	ldr	r2, [pc, #156]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6213      	str	r3, [r2, #32]
 8002b2c:	e00b      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
 8002b2e:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4a24      	ldr	r2, [pc, #144]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6213      	str	r3, [r2, #32]
 8002b3a:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	4a21      	ldr	r2, [pc, #132]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b46:	1d3b      	adds	r3, r7, #4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d06b      	beq.n	8002c28 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b50:	f7ff f846 	bl	8001be0 <HAL_GetTick>
 8002b54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b58:	e00b      	b.n	8002b72 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7ff f841 	bl	8001be0 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e291      	b.n	8003096 <HAL_RCC_OscConfig+0xe02>
 8002b72:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b76:	2202      	movs	r2, #2
 8002b78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	fa93 f2a3 	rbit	r2, r3
 8002b84:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b8e:	2202      	movs	r2, #2
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	fa93 f2a3 	rbit	r2, r3
 8002b9c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ba0:	601a      	str	r2, [r3, #0]
  return result;
 8002ba2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ba6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	f043 0302 	orr.w	r3, r3, #2
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d109      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x93c>
 8002bbc:	4b01      	ldr	r3, [pc, #4]	; (8002bc4 <HAL_RCC_OscConfig+0x930>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	e014      	b.n	8002bec <HAL_RCC_OscConfig+0x958>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	10908120 	.word	0x10908120
 8002bcc:	40007000 	.word	0x40007000
 8002bd0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	fa93 f2a3 	rbit	r2, r3
 8002be2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	4bbb      	ldr	r3, [pc, #748]	; (8002ed8 <HAL_RCC_OscConfig+0xc44>)
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	6011      	str	r1, [r2, #0]
 8002bf4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	fa92 f1a2 	rbit	r1, r2
 8002bfe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002c02:	6011      	str	r1, [r2, #0]
  return result;
 8002c04:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	fab2 f282 	clz	r2, r2
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	f002 021f 	and.w	r2, r2, #31
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d099      	beq.n	8002b5a <HAL_RCC_OscConfig+0x8c6>
 8002c26:	e063      	b.n	8002cf0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c28:	f7fe ffda 	bl	8001be0 <HAL_GetTick>
 8002c2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c30:	e00b      	b.n	8002c4a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c32:	f7fe ffd5 	bl	8001be0 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e225      	b.n	8003096 <HAL_RCC_OscConfig+0xe02>
 8002c4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c4e:	2202      	movs	r2, #2
 8002c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	fa93 f2a3 	rbit	r2, r3
 8002c5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c66:	2202      	movs	r2, #2
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	fa93 f2a3 	rbit	r2, r3
 8002c74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c78:	601a      	str	r2, [r3, #0]
  return result;
 8002c7a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c80:	fab3 f383 	clz	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	f043 0302 	orr.w	r3, r3, #2
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d102      	bne.n	8002c9a <HAL_RCC_OscConfig+0xa06>
 8002c94:	4b90      	ldr	r3, [pc, #576]	; (8002ed8 <HAL_RCC_OscConfig+0xc44>)
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	e00d      	b.n	8002cb6 <HAL_RCC_OscConfig+0xa22>
 8002c9a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	fa93 f2a3 	rbit	r2, r3
 8002cac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	4b89      	ldr	r3, [pc, #548]	; (8002ed8 <HAL_RCC_OscConfig+0xc44>)
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cba:	2102      	movs	r1, #2
 8002cbc:	6011      	str	r1, [r2, #0]
 8002cbe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	fa92 f1a2 	rbit	r1, r2
 8002cc8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002ccc:	6011      	str	r1, [r2, #0]
  return result;
 8002cce:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	fab2 f282 	clz	r2, r2
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	f002 021f 	and.w	r2, r2, #31
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1a0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cf0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d105      	bne.n	8002d04 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf8:	4b77      	ldr	r3, [pc, #476]	; (8002ed8 <HAL_RCC_OscConfig+0xc44>)
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	4a76      	ldr	r2, [pc, #472]	; (8002ed8 <HAL_RCC_OscConfig+0xc44>)
 8002cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d02:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d04:	1d3b      	adds	r3, r7, #4
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 81c2 	beq.w	8003094 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d10:	4b71      	ldr	r3, [pc, #452]	; (8002ed8 <HAL_RCC_OscConfig+0xc44>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	f000 819c 	beq.w	8003056 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	f040 8114 	bne.w	8002f52 <HAL_RCC_OscConfig+0xcbe>
 8002d2a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	fa93 f2a3 	rbit	r2, r3
 8002d3e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d42:	601a      	str	r2, [r3, #0]
  return result;
 8002d44:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d48:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe ff3e 	bl	8001be0 <HAL_GetTick>
 8002d64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d68:	e009      	b.n	8002d7e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6a:	f7fe ff39 	bl	8001be0 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e18b      	b.n	8003096 <HAL_RCC_OscConfig+0xe02>
 8002d7e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	fa93 f2a3 	rbit	r2, r3
 8002d92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d96:	601a      	str	r2, [r3, #0]
  return result;
 8002d98:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d102      	bne.n	8002db8 <HAL_RCC_OscConfig+0xb24>
 8002db2:	4b49      	ldr	r3, [pc, #292]	; (8002ed8 <HAL_RCC_OscConfig+0xc44>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	e01b      	b.n	8002df0 <HAL_RCC_OscConfig+0xb5c>
 8002db8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	fa93 f2a3 	rbit	r2, r3
 8002dcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002dd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	fa93 f2a3 	rbit	r2, r3
 8002de6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	4b3a      	ldr	r3, [pc, #232]	; (8002ed8 <HAL_RCC_OscConfig+0xc44>)
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002df4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002df8:	6011      	str	r1, [r2, #0]
 8002dfa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	fa92 f1a2 	rbit	r1, r2
 8002e04:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002e08:	6011      	str	r1, [r2, #0]
  return result;
 8002e0a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	fab2 f282 	clz	r2, r2
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	f042 0220 	orr.w	r2, r2, #32
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	f002 021f 	and.w	r2, r2, #31
 8002e20:	2101      	movs	r1, #1
 8002e22:	fa01 f202 	lsl.w	r2, r1, r2
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d19e      	bne.n	8002d6a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ed8 <HAL_RCC_OscConfig+0xc44>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e34:	1d3b      	adds	r3, r7, #4
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e3a:	1d3b      	adds	r3, r7, #4
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	430b      	orrs	r3, r1
 8002e42:	4925      	ldr	r1, [pc, #148]	; (8002ed8 <HAL_RCC_OscConfig+0xc44>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]
 8002e48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	fa93 f2a3 	rbit	r2, r3
 8002e5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e60:	601a      	str	r2, [r3, #0]
  return result;
 8002e62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e66:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7fe feaf 	bl	8001be0 <HAL_GetTick>
 8002e82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e86:	e009      	b.n	8002e9c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fe feaa 	bl	8001be0 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e0fc      	b.n	8003096 <HAL_RCC_OscConfig+0xe02>
 8002e9c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ea0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	fa93 f2a3 	rbit	r2, r3
 8002eb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002eb4:	601a      	str	r2, [r3, #0]
  return result;
 8002eb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002eba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d105      	bne.n	8002edc <HAL_RCC_OscConfig+0xc48>
 8002ed0:	4b01      	ldr	r3, [pc, #4]	; (8002ed8 <HAL_RCC_OscConfig+0xc44>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	e01e      	b.n	8002f14 <HAL_RCC_OscConfig+0xc80>
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ee0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	fa93 f2a3 	rbit	r2, r3
 8002ef0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002efa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	fa93 f2a3 	rbit	r2, r3
 8002f0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	4b63      	ldr	r3, [pc, #396]	; (80030a0 <HAL_RCC_OscConfig+0xe0c>)
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f1c:	6011      	str	r1, [r2, #0]
 8002f1e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	fa92 f1a2 	rbit	r1, r2
 8002f28:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002f2c:	6011      	str	r1, [r2, #0]
  return result;
 8002f2e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	fab2 f282 	clz	r2, r2
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	f042 0220 	orr.w	r2, r2, #32
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	f002 021f 	and.w	r2, r2, #31
 8002f44:	2101      	movs	r1, #1
 8002f46:	fa01 f202 	lsl.w	r2, r1, r2
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d09b      	beq.n	8002e88 <HAL_RCC_OscConfig+0xbf4>
 8002f50:	e0a0      	b.n	8003094 <HAL_RCC_OscConfig+0xe00>
 8002f52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	fa93 f2a3 	rbit	r2, r3
 8002f66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f6a:	601a      	str	r2, [r3, #0]
  return result;
 8002f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f70:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	461a      	mov	r2, r3
 8002f84:	2300      	movs	r3, #0
 8002f86:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fe fe2a 	bl	8001be0 <HAL_GetTick>
 8002f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f90:	e009      	b.n	8002fa6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f92:	f7fe fe25 	bl	8001be0 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e077      	b.n	8003096 <HAL_RCC_OscConfig+0xe02>
 8002fa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002faa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	fa93 f2a3 	rbit	r2, r3
 8002fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fbe:	601a      	str	r2, [r3, #0]
  return result;
 8002fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d102      	bne.n	8002fe0 <HAL_RCC_OscConfig+0xd4c>
 8002fda:	4b31      	ldr	r3, [pc, #196]	; (80030a0 <HAL_RCC_OscConfig+0xe0c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	e01b      	b.n	8003018 <HAL_RCC_OscConfig+0xd84>
 8002fe0:	f107 0320 	add.w	r3, r7, #32
 8002fe4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	f107 0320 	add.w	r3, r7, #32
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	fa93 f2a3 	rbit	r2, r3
 8002ff4:	f107 031c 	add.w	r3, r7, #28
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f107 0318 	add.w	r3, r7, #24
 8002ffe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	f107 0318 	add.w	r3, r7, #24
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	fa93 f2a3 	rbit	r2, r3
 800300e:	f107 0314 	add.w	r3, r7, #20
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	4b22      	ldr	r3, [pc, #136]	; (80030a0 <HAL_RCC_OscConfig+0xe0c>)
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	f107 0210 	add.w	r2, r7, #16
 800301c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003020:	6011      	str	r1, [r2, #0]
 8003022:	f107 0210 	add.w	r2, r7, #16
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	fa92 f1a2 	rbit	r1, r2
 800302c:	f107 020c 	add.w	r2, r7, #12
 8003030:	6011      	str	r1, [r2, #0]
  return result;
 8003032:	f107 020c 	add.w	r2, r7, #12
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	fab2 f282 	clz	r2, r2
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	f042 0220 	orr.w	r2, r2, #32
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	f002 021f 	and.w	r2, r2, #31
 8003048:	2101      	movs	r1, #1
 800304a:	fa01 f202 	lsl.w	r2, r1, r2
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d19e      	bne.n	8002f92 <HAL_RCC_OscConfig+0xcfe>
 8003054:	e01e      	b.n	8003094 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003056:	1d3b      	adds	r3, r7, #4
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e018      	b.n	8003096 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003064:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <HAL_RCC_OscConfig+0xe0c>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800306c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003070:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003074:	1d3b      	adds	r3, r7, #4
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	429a      	cmp	r2, r3
 800307c:	d108      	bne.n	8003090 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800307e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003086:	1d3b      	adds	r3, r7, #4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000

080030a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b09e      	sub	sp, #120	; 0x78
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e162      	b.n	8003382 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030bc:	4b90      	ldr	r3, [pc, #576]	; (8003300 <HAL_RCC_ClockConfig+0x25c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d910      	bls.n	80030ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b8d      	ldr	r3, [pc, #564]	; (8003300 <HAL_RCC_ClockConfig+0x25c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 0207 	bic.w	r2, r3, #7
 80030d2:	498b      	ldr	r1, [pc, #556]	; (8003300 <HAL_RCC_ClockConfig+0x25c>)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b89      	ldr	r3, [pc, #548]	; (8003300 <HAL_RCC_ClockConfig+0x25c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e14a      	b.n	8003382 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f8:	4b82      	ldr	r3, [pc, #520]	; (8003304 <HAL_RCC_ClockConfig+0x260>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	497f      	ldr	r1, [pc, #508]	; (8003304 <HAL_RCC_ClockConfig+0x260>)
 8003106:	4313      	orrs	r3, r2
 8003108:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 80dc 	beq.w	80032d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d13c      	bne.n	800319a <HAL_RCC_ClockConfig+0xf6>
 8003120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003124:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800312e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003130:	fab3 f383 	clz	r3, r3
 8003134:	b2db      	uxtb	r3, r3
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d102      	bne.n	800314a <HAL_RCC_ClockConfig+0xa6>
 8003144:	4b6f      	ldr	r3, [pc, #444]	; (8003304 <HAL_RCC_ClockConfig+0x260>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	e00f      	b.n	800316a <HAL_RCC_ClockConfig+0xc6>
 800314a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800314e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	667b      	str	r3, [r7, #100]	; 0x64
 8003158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800315c:	663b      	str	r3, [r7, #96]	; 0x60
 800315e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003166:	4b67      	ldr	r3, [pc, #412]	; (8003304 <HAL_RCC_ClockConfig+0x260>)
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800316e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003172:	fa92 f2a2 	rbit	r2, r2
 8003176:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003178:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800317a:	fab2 f282 	clz	r2, r2
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	f042 0220 	orr.w	r2, r2, #32
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	f002 021f 	and.w	r2, r2, #31
 800318a:	2101      	movs	r1, #1
 800318c:	fa01 f202 	lsl.w	r2, r1, r2
 8003190:	4013      	ands	r3, r2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d17b      	bne.n	800328e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e0f3      	b.n	8003382 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d13c      	bne.n	800321c <HAL_RCC_ClockConfig+0x178>
 80031a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	095b      	lsrs	r3, r3, #5
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d102      	bne.n	80031cc <HAL_RCC_ClockConfig+0x128>
 80031c6:	4b4f      	ldr	r3, [pc, #316]	; (8003304 <HAL_RCC_ClockConfig+0x260>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	e00f      	b.n	80031ec <HAL_RCC_ClockConfig+0x148>
 80031cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	647b      	str	r3, [r7, #68]	; 0x44
 80031da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031de:	643b      	str	r3, [r7, #64]	; 0x40
 80031e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e2:	fa93 f3a3 	rbit	r3, r3
 80031e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031e8:	4b46      	ldr	r3, [pc, #280]	; (8003304 <HAL_RCC_ClockConfig+0x260>)
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80031f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031f4:	fa92 f2a2 	rbit	r2, r2
 80031f8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031fc:	fab2 f282 	clz	r2, r2
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	f042 0220 	orr.w	r2, r2, #32
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	f002 021f 	and.w	r2, r2, #31
 800320c:	2101      	movs	r1, #1
 800320e:	fa01 f202 	lsl.w	r2, r1, r2
 8003212:	4013      	ands	r3, r2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d13a      	bne.n	800328e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b2      	b.n	8003382 <HAL_RCC_ClockConfig+0x2de>
 800321c:	2302      	movs	r3, #2
 800321e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	b2db      	uxtb	r3, r3
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b01      	cmp	r3, #1
 800323c:	d102      	bne.n	8003244 <HAL_RCC_ClockConfig+0x1a0>
 800323e:	4b31      	ldr	r3, [pc, #196]	; (8003304 <HAL_RCC_ClockConfig+0x260>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	e00d      	b.n	8003260 <HAL_RCC_ClockConfig+0x1bc>
 8003244:	2302      	movs	r3, #2
 8003246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
 8003250:	2302      	movs	r3, #2
 8003252:	623b      	str	r3, [r7, #32]
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	4b29      	ldr	r3, [pc, #164]	; (8003304 <HAL_RCC_ClockConfig+0x260>)
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	2202      	movs	r2, #2
 8003262:	61ba      	str	r2, [r7, #24]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	fa92 f2a2 	rbit	r2, r2
 800326a:	617a      	str	r2, [r7, #20]
  return result;
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	fab2 f282 	clz	r2, r2
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	f042 0220 	orr.w	r2, r2, #32
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	f002 021f 	and.w	r2, r2, #31
 800327e:	2101      	movs	r1, #1
 8003280:	fa01 f202 	lsl.w	r2, r1, r2
 8003284:	4013      	ands	r3, r2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e079      	b.n	8003382 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328e:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <HAL_RCC_ClockConfig+0x260>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f023 0203 	bic.w	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	491a      	ldr	r1, [pc, #104]	; (8003304 <HAL_RCC_ClockConfig+0x260>)
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a0:	f7fe fc9e 	bl	8001be0 <HAL_GetTick>
 80032a4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a6:	e00a      	b.n	80032be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a8:	f7fe fc9a 	bl	8001be0 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e061      	b.n	8003382 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_RCC_ClockConfig+0x260>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 020c 	and.w	r2, r3, #12
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d1eb      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCC_ClockConfig+0x25c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d214      	bcs.n	8003308 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032de:	4b08      	ldr	r3, [pc, #32]	; (8003300 <HAL_RCC_ClockConfig+0x25c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 0207 	bic.w	r2, r3, #7
 80032e6:	4906      	ldr	r1, [pc, #24]	; (8003300 <HAL_RCC_ClockConfig+0x25c>)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ee:	4b04      	ldr	r3, [pc, #16]	; (8003300 <HAL_RCC_ClockConfig+0x25c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e040      	b.n	8003382 <HAL_RCC_ClockConfig+0x2de>
 8003300:	40022000 	.word	0x40022000
 8003304:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_RCC_ClockConfig+0x2e8>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	491a      	ldr	r1, [pc, #104]	; (800338c <HAL_RCC_ClockConfig+0x2e8>)
 8003322:	4313      	orrs	r3, r2
 8003324:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003332:	4b16      	ldr	r3, [pc, #88]	; (800338c <HAL_RCC_ClockConfig+0x2e8>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4912      	ldr	r1, [pc, #72]	; (800338c <HAL_RCC_ClockConfig+0x2e8>)
 8003342:	4313      	orrs	r3, r2
 8003344:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003346:	f000 f829 	bl	800339c <HAL_RCC_GetSysClockFreq>
 800334a:	4601      	mov	r1, r0
 800334c:	4b0f      	ldr	r3, [pc, #60]	; (800338c <HAL_RCC_ClockConfig+0x2e8>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003354:	22f0      	movs	r2, #240	; 0xf0
 8003356:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	fa92 f2a2 	rbit	r2, r2
 800335e:	60fa      	str	r2, [r7, #12]
  return result;
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	fab2 f282 	clz	r2, r2
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	40d3      	lsrs	r3, r2
 800336a:	4a09      	ldr	r2, [pc, #36]	; (8003390 <HAL_RCC_ClockConfig+0x2ec>)
 800336c:	5cd3      	ldrb	r3, [r2, r3]
 800336e:	fa21 f303 	lsr.w	r3, r1, r3
 8003372:	4a08      	ldr	r2, [pc, #32]	; (8003394 <HAL_RCC_ClockConfig+0x2f0>)
 8003374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <HAL_RCC_ClockConfig+0x2f4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe fbec 	bl	8001b58 <HAL_InitTick>
  
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3778      	adds	r7, #120	; 0x78
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	080088c8 	.word	0x080088c8
 8003394:	20000004 	.word	0x20000004
 8003398:	20000008 	.word	0x20000008

0800339c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800339c:	b480      	push	{r7}
 800339e:	b08b      	sub	sp, #44	; 0x2c
 80033a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	2300      	movs	r3, #0
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80033b6:	4b29      	ldr	r3, [pc, #164]	; (800345c <HAL_RCC_GetSysClockFreq+0xc0>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d002      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x30>
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0x36>
 80033ca:	e03c      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033cc:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033ce:	623b      	str	r3, [r7, #32]
      break;
 80033d0:	e03c      	b.n	800344c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80033dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	fa92 f2a2 	rbit	r2, r2
 80033e4:	607a      	str	r2, [r7, #4]
  return result;
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	fab2 f282 	clz	r2, r2
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	40d3      	lsrs	r3, r2
 80033f0:	4a1c      	ldr	r2, [pc, #112]	; (8003464 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033f2:	5cd3      	ldrb	r3, [r2, r3]
 80033f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033f6:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_RCC_GetSysClockFreq+0xc0>)
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	220f      	movs	r2, #15
 8003400:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	fa92 f2a2 	rbit	r2, r2
 8003408:	60fa      	str	r2, [r7, #12]
  return result;
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	fab2 f282 	clz	r2, r2
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	40d3      	lsrs	r3, r2
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003416:	5cd3      	ldrb	r3, [r2, r3]
 8003418:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003424:	4a0e      	ldr	r2, [pc, #56]	; (8003460 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	fbb2 f2f3 	udiv	r2, r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fb02 f303 	mul.w	r3, r2, r3
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
 8003434:	e004      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	4a0c      	ldr	r2, [pc, #48]	; (800346c <HAL_RCC_GetSysClockFreq+0xd0>)
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	623b      	str	r3, [r7, #32]
      break;
 8003444:	e002      	b.n	800344c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003448:	623b      	str	r3, [r7, #32]
      break;
 800344a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800344c:	6a3b      	ldr	r3, [r7, #32]
}
 800344e:	4618      	mov	r0, r3
 8003450:	372c      	adds	r7, #44	; 0x2c
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000
 8003460:	007a1200 	.word	0x007a1200
 8003464:	080088e0 	.word	0x080088e0
 8003468:	080088f0 	.word	0x080088f0
 800346c:	003d0900 	.word	0x003d0900

08003470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_RCC_GetHCLKFreq+0x14>)
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000004 	.word	0x20000004

08003488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800348e:	f7ff ffef 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 8003492:	4601      	mov	r1, r0
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800349c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	fa92 f2a2 	rbit	r2, r2
 80034a8:	603a      	str	r2, [r7, #0]
  return result;
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	fab2 f282 	clz	r2, r2
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	40d3      	lsrs	r3, r2
 80034b4:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80034b6:	5cd3      	ldrb	r3, [r2, r3]
 80034b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	080088d8 	.word	0x080088d8

080034cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034d2:	f7ff ffcd 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 80034d6:	4601      	mov	r1, r0
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80034e0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80034e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	fa92 f2a2 	rbit	r2, r2
 80034ec:	603a      	str	r2, [r7, #0]
  return result;
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	fab2 f282 	clz	r2, r2
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	40d3      	lsrs	r3, r2
 80034f8:	4a04      	ldr	r2, [pc, #16]	; (800350c <HAL_RCC_GetPCLK2Freq+0x40>)
 80034fa:	5cd3      	ldrb	r3, [r2, r3]
 80034fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40021000 	.word	0x40021000
 800350c:	080088d8 	.word	0x080088d8

08003510 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b092      	sub	sp, #72	; 0x48
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003520:	2300      	movs	r3, #0
 8003522:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80cd 	beq.w	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003534:	4b8e      	ldr	r3, [pc, #568]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10e      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003540:	4b8b      	ldr	r3, [pc, #556]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	4a8a      	ldr	r2, [pc, #552]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354a:	61d3      	str	r3, [r2, #28]
 800354c:	4b88      	ldr	r3, [pc, #544]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003558:	2301      	movs	r3, #1
 800355a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355e:	4b85      	ldr	r3, [pc, #532]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d118      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800356a:	4b82      	ldr	r3, [pc, #520]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a81      	ldr	r2, [pc, #516]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003574:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003576:	f7fe fb33 	bl	8001be0 <HAL_GetTick>
 800357a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357c:	e008      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357e:	f7fe fb2f 	bl	8001be0 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b64      	cmp	r3, #100	; 0x64
 800358a:	d901      	bls.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e0ea      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003590:	4b78      	ldr	r3, [pc, #480]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800359c:	4b74      	ldr	r3, [pc, #464]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d07d      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d076      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035ba:	4b6d      	ldr	r3, [pc, #436]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035c8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035d4:	fab3 f383 	clz	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	4b66      	ldr	r3, [pc, #408]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	461a      	mov	r2, r3
 80035e4:	2301      	movs	r3, #1
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f0:	fa93 f3a3 	rbit	r3, r3
 80035f4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035f8:	fab3 f383 	clz	r3, r3
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	461a      	mov	r2, r3
 8003600:	4b5d      	ldr	r3, [pc, #372]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	461a      	mov	r2, r3
 8003608:	2300      	movs	r3, #0
 800360a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800360c:	4a58      	ldr	r2, [pc, #352]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003610:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d045      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361c:	f7fe fae0 	bl	8001be0 <HAL_GetTick>
 8003620:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003622:	e00a      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fe fadc 	bl	8001be0 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e095      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800363a:	2302      	movs	r3, #2
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
 8003646:	2302      	movs	r3, #2
 8003648:	623b      	str	r3, [r7, #32]
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	61fb      	str	r3, [r7, #28]
  return result;
 8003652:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003654:	fab3 f383 	clz	r3, r3
 8003658:	b2db      	uxtb	r3, r3
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f043 0302 	orr.w	r3, r3, #2
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d102      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003668:	4b41      	ldr	r3, [pc, #260]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	e007      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800366e:	2302      	movs	r3, #2
 8003670:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	4b3d      	ldr	r3, [pc, #244]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	2202      	movs	r2, #2
 8003680:	613a      	str	r2, [r7, #16]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	fa92 f2a2 	rbit	r2, r2
 8003688:	60fa      	str	r2, [r7, #12]
  return result;
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	fab2 f282 	clz	r2, r2
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	f002 021f 	and.w	r2, r2, #31
 800369c:	2101      	movs	r1, #1
 800369e:	fa01 f202 	lsl.w	r2, r1, r2
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0bd      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036a8:	4b31      	ldr	r3, [pc, #196]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	492e      	ldr	r1, [pc, #184]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d105      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c2:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	4a2a      	ldr	r2, [pc, #168]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036cc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d008      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036da:	4b25      	ldr	r3, [pc, #148]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	f023 0203 	bic.w	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	4922      	ldr	r1, [pc, #136]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036f8:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	f023 0210 	bic.w	r2, r3, #16
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	491a      	ldr	r1, [pc, #104]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003706:	4313      	orrs	r3, r2
 8003708:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003716:	4b16      	ldr	r3, [pc, #88]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	4913      	ldr	r1, [pc, #76]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003724:	4313      	orrs	r3, r2
 8003726:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	490b      	ldr	r1, [pc, #44]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003742:	4313      	orrs	r3, r2
 8003744:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d008      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003752:	4b07      	ldr	r3, [pc, #28]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	4904      	ldr	r1, [pc, #16]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003760:	4313      	orrs	r3, r2
 8003762:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3748      	adds	r7, #72	; 0x48
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	40007000 	.word	0x40007000
 8003778:	10908100 	.word	0x10908100

0800377c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e049      	b.n	8003822 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd ff9e 	bl	80016e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	4619      	mov	r1, r3
 80037ba:	4610      	mov	r0, r2
 80037bc:	f000 f950 	bl	8003a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	d001      	beq.n	8003844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e040      	b.n	80038c6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <HAL_TIM_Base_Start_IT+0xa8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00e      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x58>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386e:	d009      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x58>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a18      	ldr	r2, [pc, #96]	; (80038d8 <HAL_TIM_Base_Start_IT+0xac>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x58>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a17      	ldr	r2, [pc, #92]	; (80038dc <HAL_TIM_Base_Start_IT+0xb0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d115      	bne.n	80038b0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <HAL_TIM_Base_Start_IT+0xb4>)
 800388c:	4013      	ands	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b06      	cmp	r3, #6
 8003894:	d015      	beq.n	80038c2 <HAL_TIM_Base_Start_IT+0x96>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389c:	d011      	beq.n	80038c2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0201 	orr.w	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ae:	e008      	b.n	80038c2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	e000      	b.n	80038c4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40012c00 	.word	0x40012c00
 80038d8:	40000400 	.word	0x40000400
 80038dc:	40014000 	.word	0x40014000
 80038e0:	00010007 	.word	0x00010007

080038e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_TIM_ConfigClockSource+0x1c>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0ab      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x174>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800391e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800392a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b40      	cmp	r3, #64	; 0x40
 800393a:	d067      	beq.n	8003a0c <HAL_TIM_ConfigClockSource+0x128>
 800393c:	2b40      	cmp	r3, #64	; 0x40
 800393e:	d80b      	bhi.n	8003958 <HAL_TIM_ConfigClockSource+0x74>
 8003940:	2b10      	cmp	r3, #16
 8003942:	d073      	beq.n	8003a2c <HAL_TIM_ConfigClockSource+0x148>
 8003944:	2b10      	cmp	r3, #16
 8003946:	d802      	bhi.n	800394e <HAL_TIM_ConfigClockSource+0x6a>
 8003948:	2b00      	cmp	r3, #0
 800394a:	d06f      	beq.n	8003a2c <HAL_TIM_ConfigClockSource+0x148>
 800394c:	e077      	b.n	8003a3e <HAL_TIM_ConfigClockSource+0x15a>
 800394e:	2b20      	cmp	r3, #32
 8003950:	d06c      	beq.n	8003a2c <HAL_TIM_ConfigClockSource+0x148>
 8003952:	2b30      	cmp	r3, #48	; 0x30
 8003954:	d06a      	beq.n	8003a2c <HAL_TIM_ConfigClockSource+0x148>
 8003956:	e072      	b.n	8003a3e <HAL_TIM_ConfigClockSource+0x15a>
 8003958:	2b70      	cmp	r3, #112	; 0x70
 800395a:	d00d      	beq.n	8003978 <HAL_TIM_ConfigClockSource+0x94>
 800395c:	2b70      	cmp	r3, #112	; 0x70
 800395e:	d804      	bhi.n	800396a <HAL_TIM_ConfigClockSource+0x86>
 8003960:	2b50      	cmp	r3, #80	; 0x50
 8003962:	d033      	beq.n	80039cc <HAL_TIM_ConfigClockSource+0xe8>
 8003964:	2b60      	cmp	r3, #96	; 0x60
 8003966:	d041      	beq.n	80039ec <HAL_TIM_ConfigClockSource+0x108>
 8003968:	e069      	b.n	8003a3e <HAL_TIM_ConfigClockSource+0x15a>
 800396a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396e:	d069      	beq.n	8003a44 <HAL_TIM_ConfigClockSource+0x160>
 8003970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003974:	d017      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0xc2>
 8003976:	e062      	b.n	8003a3e <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	6899      	ldr	r1, [r3, #8]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f000 f95c 	bl	8003c44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800399a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	609a      	str	r2, [r3, #8]
      break;
 80039a4:	e04f      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	6899      	ldr	r1, [r3, #8]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f000 f945 	bl	8003c44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039c8:	609a      	str	r2, [r3, #8]
      break;
 80039ca:	e03c      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6859      	ldr	r1, [r3, #4]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	461a      	mov	r2, r3
 80039da:	f000 f8b9 	bl	8003b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2150      	movs	r1, #80	; 0x50
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 f912 	bl	8003c0e <TIM_ITRx_SetConfig>
      break;
 80039ea:	e02c      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	6859      	ldr	r1, [r3, #4]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	461a      	mov	r2, r3
 80039fa:	f000 f8d8 	bl	8003bae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2160      	movs	r1, #96	; 0x60
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 f902 	bl	8003c0e <TIM_ITRx_SetConfig>
      break;
 8003a0a:	e01c      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f000 f899 	bl	8003b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2140      	movs	r1, #64	; 0x40
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 f8f2 	bl	8003c0e <TIM_ITRx_SetConfig>
      break;
 8003a2a:	e00c      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f000 f8e9 	bl	8003c0e <TIM_ITRx_SetConfig>
      break;
 8003a3c:	e003      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
      break;
 8003a42:	e000      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8003a44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a32      	ldr	r2, [pc, #200]	; (8003b3c <TIM_Base_SetConfig+0xdc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d007      	beq.n	8003a88 <TIM_Base_SetConfig+0x28>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7e:	d003      	beq.n	8003a88 <TIM_Base_SetConfig+0x28>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a2f      	ldr	r2, [pc, #188]	; (8003b40 <TIM_Base_SetConfig+0xe0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d108      	bne.n	8003a9a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a27      	ldr	r2, [pc, #156]	; (8003b3c <TIM_Base_SetConfig+0xdc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d013      	beq.n	8003aca <TIM_Base_SetConfig+0x6a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa8:	d00f      	beq.n	8003aca <TIM_Base_SetConfig+0x6a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a24      	ldr	r2, [pc, #144]	; (8003b40 <TIM_Base_SetConfig+0xe0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00b      	beq.n	8003aca <TIM_Base_SetConfig+0x6a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a23      	ldr	r2, [pc, #140]	; (8003b44 <TIM_Base_SetConfig+0xe4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <TIM_Base_SetConfig+0x6a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <TIM_Base_SetConfig+0xe8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <TIM_Base_SetConfig+0x6a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a21      	ldr	r2, [pc, #132]	; (8003b4c <TIM_Base_SetConfig+0xec>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d108      	bne.n	8003adc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a0e      	ldr	r2, [pc, #56]	; (8003b3c <TIM_Base_SetConfig+0xdc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <TIM_Base_SetConfig+0xc0>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a0e      	ldr	r2, [pc, #56]	; (8003b44 <TIM_Base_SetConfig+0xe4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <TIM_Base_SetConfig+0xc0>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <TIM_Base_SetConfig+0xe8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_Base_SetConfig+0xc0>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a0c      	ldr	r2, [pc, #48]	; (8003b4c <TIM_Base_SetConfig+0xec>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d103      	bne.n	8003b28 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	615a      	str	r2, [r3, #20]
}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40012c00 	.word	0x40012c00
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40014000 	.word	0x40014000
 8003b48:	40014400 	.word	0x40014400
 8003b4c:	40014800 	.word	0x40014800

08003b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	f023 0201 	bic.w	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f023 030a 	bic.w	r3, r3, #10
 8003b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	621a      	str	r2, [r3, #32]
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b087      	sub	sp, #28
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f023 0210 	bic.w	r2, r3, #16
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	031b      	lsls	r3, r3, #12
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	621a      	str	r2, [r3, #32]
}
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b085      	sub	sp, #20
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f043 0307 	orr.w	r3, r3, #7
 8003c30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	609a      	str	r2, [r3, #8]
}
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	021a      	lsls	r2, r3, #8
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	431a      	orrs	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	609a      	str	r2, [r3, #8]
}
 8003c78:	bf00      	nop
 8003c7a:	371c      	adds	r7, #28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e054      	b.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a24      	ldr	r2, [pc, #144]	; (8003d54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d108      	bne.n	8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ccc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00e      	beq.n	8003d1a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d04:	d009      	beq.n	8003d1a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a13      	ldr	r2, [pc, #76]	; (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d004      	beq.n	8003d1a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a11      	ldr	r2, [pc, #68]	; (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d10c      	bne.n	8003d34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40012c00 	.word	0x40012c00
 8003d58:	40000400 	.word	0x40000400
 8003d5c:	40014000 	.word	0x40014000

08003d60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e040      	b.n	8003df4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d106      	bne.n	8003d88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fd fccc 	bl	8001720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2224      	movs	r2, #36	; 0x24
 8003d8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0201 	bic.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fcea 	bl	8004778 <UART_SetConfig>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e022      	b.n	8003df4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fe16 	bl	80049e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fe9d 	bl	8004b2c <UART_CheckIdleState>
 8003df2:	4603      	mov	r3, r0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08a      	sub	sp, #40	; 0x28
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	f040 8082 	bne.w	8003f1a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_UART_Transmit+0x26>
 8003e1c:	88fb      	ldrh	r3, [r7, #6]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e07a      	b.n	8003f1c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_UART_Transmit+0x38>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e073      	b.n	8003f1c <HAL_UART_Transmit+0x120>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2221      	movs	r2, #33	; 0x21
 8003e48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e4a:	f7fd fec9 	bl	8001be0 <HAL_GetTick>
 8003e4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	88fa      	ldrh	r2, [r7, #6]
 8003e54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	88fa      	ldrh	r2, [r7, #6]
 8003e5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e68:	d108      	bne.n	8003e7c <HAL_UART_Transmit+0x80>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d104      	bne.n	8003e7c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	e003      	b.n	8003e84 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003e8c:	e02d      	b.n	8003eea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2200      	movs	r2, #0
 8003e96:	2180      	movs	r1, #128	; 0x80
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fe90 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e039      	b.n	8003f1c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10b      	bne.n	8003ec6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	881a      	ldrh	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eba:	b292      	uxth	r2, r2
 8003ebc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	e008      	b.n	8003ed8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	781a      	ldrb	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	b292      	uxth	r2, r2
 8003ed0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1cb      	bne.n	8003e8e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2200      	movs	r2, #0
 8003efe:	2140      	movs	r1, #64	; 0x40
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 fe5c 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e005      	b.n	8003f1c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	e000      	b.n	8003f1c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003f1a:	2302      	movs	r3, #2
  }
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	; 0x28
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	4613      	mov	r3, r2
 8003f32:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	f040 80bf 	bne.w	80040bc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <HAL_UART_Receive+0x26>
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0b7      	b.n	80040be <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_UART_Receive+0x38>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e0b0      	b.n	80040be <HAL_UART_Receive+0x19a>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2222      	movs	r2, #34	; 0x22
 8003f70:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f78:	f7fd fe32 	bl	8001be0 <HAL_GetTick>
 8003f7c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	88fa      	ldrh	r2, [r7, #6]
 8003f82:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	88fa      	ldrh	r2, [r7, #6]
 8003f8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f96:	d10e      	bne.n	8003fb6 <HAL_UART_Receive+0x92>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d105      	bne.n	8003fac <HAL_UART_Receive+0x88>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003fa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003faa:	e02d      	b.n	8004008 <HAL_UART_Receive+0xe4>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	22ff      	movs	r2, #255	; 0xff
 8003fb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fb4:	e028      	b.n	8004008 <HAL_UART_Receive+0xe4>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10d      	bne.n	8003fda <HAL_UART_Receive+0xb6>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d104      	bne.n	8003fd0 <HAL_UART_Receive+0xac>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	22ff      	movs	r2, #255	; 0xff
 8003fca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fce:	e01b      	b.n	8004008 <HAL_UART_Receive+0xe4>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	227f      	movs	r2, #127	; 0x7f
 8003fd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fd8:	e016      	b.n	8004008 <HAL_UART_Receive+0xe4>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fe2:	d10d      	bne.n	8004000 <HAL_UART_Receive+0xdc>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d104      	bne.n	8003ff6 <HAL_UART_Receive+0xd2>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	227f      	movs	r2, #127	; 0x7f
 8003ff0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ff4:	e008      	b.n	8004008 <HAL_UART_Receive+0xe4>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	223f      	movs	r2, #63	; 0x3f
 8003ffa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ffe:	e003      	b.n	8004008 <HAL_UART_Receive+0xe4>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800400e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004018:	d108      	bne.n	800402c <HAL_UART_Receive+0x108>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d104      	bne.n	800402c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	e003      	b.n	8004034 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004030:	2300      	movs	r3, #0
 8004032:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800403c:	e033      	b.n	80040a6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2200      	movs	r2, #0
 8004046:	2120      	movs	r1, #32
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fdb8 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e032      	b.n	80040be <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10c      	bne.n	8004078 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004064:	b29a      	uxth	r2, r3
 8004066:	8a7b      	ldrh	r3, [r7, #18]
 8004068:	4013      	ands	r3, r2
 800406a:	b29a      	uxth	r2, r3
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	3302      	adds	r3, #2
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	e00d      	b.n	8004094 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800407e:	b29b      	uxth	r3, r3
 8004080:	b2da      	uxtb	r2, r3
 8004082:	8a7b      	ldrh	r3, [r7, #18]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	4013      	ands	r3, r2
 8004088:	b2da      	uxtb	r2, r3
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	3301      	adds	r3, #1
 8004092:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1c5      	bne.n	800403e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2220      	movs	r2, #32
 80040b6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	e000      	b.n	80040be <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80040bc:	2302      	movs	r3, #2
  }
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b08a      	sub	sp, #40	; 0x28
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	4613      	mov	r3, r2
 80040d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d13d      	bne.n	8004158 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_UART_Receive_IT+0x22>
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e036      	b.n	800415a <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_UART_Receive_IT+0x34>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e02f      	b.n	800415a <HAL_UART_Receive_IT+0x94>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d018      	beq.n	8004148 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	613b      	str	r3, [r7, #16]
   return(result);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	623b      	str	r3, [r7, #32]
 8004136:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	69f9      	ldr	r1, [r7, #28]
 800413a:	6a3a      	ldr	r2, [r7, #32]
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	61bb      	str	r3, [r7, #24]
   return(result);
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e6      	bne.n	8004116 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004148:	88fb      	ldrh	r3, [r7, #6]
 800414a:	461a      	mov	r2, r3
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 fdfa 	bl	8004d48 <UART_Start_Receive_IT>
 8004154:	4603      	mov	r3, r0
 8004156:	e000      	b.n	800415a <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004158:	2302      	movs	r3, #2
  }
}
 800415a:	4618      	mov	r0, r3
 800415c:	3728      	adds	r7, #40	; 0x28
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b0ba      	sub	sp, #232	; 0xe8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800418a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800418e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004192:	4013      	ands	r3, r2
 8004194:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d115      	bne.n	80041cc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00f      	beq.n	80041cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b0:	f003 0320 	and.w	r3, r3, #32
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d009      	beq.n	80041cc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 82a4 	beq.w	800470a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	4798      	blx	r3
      }
      return;
 80041ca:	e29e      	b.n	800470a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 8117 	beq.w	8004404 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041e6:	4b85      	ldr	r3, [pc, #532]	; (80043fc <HAL_UART_IRQHandler+0x298>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 810a 	beq.w	8004404 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d011      	beq.n	8004220 <HAL_UART_IRQHandler+0xbc>
 80041fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00b      	beq.n	8004220 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2201      	movs	r2, #1
 800420e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004216:	f043 0201 	orr.w	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d011      	beq.n	8004250 <HAL_UART_IRQHandler+0xec>
 800422c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00b      	beq.n	8004250 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2202      	movs	r2, #2
 800423e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004246:	f043 0204 	orr.w	r2, r3, #4
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d011      	beq.n	8004280 <HAL_UART_IRQHandler+0x11c>
 800425c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00b      	beq.n	8004280 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2204      	movs	r2, #4
 800426e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004276:	f043 0202 	orr.w	r2, r3, #2
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d017      	beq.n	80042bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800428c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d105      	bne.n	80042a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800429c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00b      	beq.n	80042bc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2208      	movs	r2, #8
 80042aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b2:	f043 0208 	orr.w	r2, r3, #8
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d012      	beq.n	80042ee <HAL_UART_IRQHandler+0x18a>
 80042c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00c      	beq.n	80042ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e4:	f043 0220 	orr.w	r2, r3, #32
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 820a 	beq.w	800470e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00d      	beq.n	8004322 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	d007      	beq.n	8004322 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004328:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b40      	cmp	r3, #64	; 0x40
 8004338:	d005      	beq.n	8004346 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800433a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800433e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004342:	2b00      	cmp	r3, #0
 8004344:	d04f      	beq.n	80043e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fdaa 	bl	8004ea0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b40      	cmp	r3, #64	; 0x40
 8004358:	d141      	bne.n	80043de <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3308      	adds	r3, #8
 8004360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3308      	adds	r3, #8
 8004382:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004386:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800438a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004392:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800439e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1d9      	bne.n	800435a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d013      	beq.n	80043d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	4a13      	ldr	r2, [pc, #76]	; (8004400 <HAL_UART_IRQHandler+0x29c>)
 80043b4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fd fd88 	bl	8001ed0 <HAL_DMA_Abort_IT>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d017      	beq.n	80043f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80043d0:	4610      	mov	r0, r2
 80043d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d4:	e00f      	b.n	80043f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f9b8 	bl	800474c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043dc:	e00b      	b.n	80043f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f9b4 	bl	800474c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e4:	e007      	b.n	80043f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f9b0 	bl	800474c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80043f4:	e18b      	b.n	800470e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f6:	bf00      	nop
    return;
 80043f8:	e189      	b.n	800470e <HAL_UART_IRQHandler+0x5aa>
 80043fa:	bf00      	nop
 80043fc:	04000120 	.word	0x04000120
 8004400:	08004f67 	.word	0x08004f67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004408:	2b01      	cmp	r3, #1
 800440a:	f040 8143 	bne.w	8004694 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800440e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 813c 	beq.w	8004694 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800441c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8135 	beq.w	8004694 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2210      	movs	r2, #16
 8004430:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	f040 80b1 	bne.w	80045a4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800444e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 815d 	beq.w	8004712 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800445e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004462:	429a      	cmp	r2, r3
 8004464:	f080 8155 	bcs.w	8004712 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800446e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	2b20      	cmp	r3, #32
 800447a:	f000 8085 	beq.w	8004588 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004496:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800449a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044ac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1da      	bne.n	800447e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3308      	adds	r3, #8
 80044ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044da:	f023 0301 	bic.w	r3, r3, #1
 80044de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3308      	adds	r3, #8
 80044e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e1      	bne.n	80044c8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3308      	adds	r3, #8
 800450a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800451a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3308      	adds	r3, #8
 8004524:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004528:	66fa      	str	r2, [r7, #108]	; 0x6c
 800452a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800452e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e3      	bne.n	8004504 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004558:	f023 0310 	bic.w	r3, r3, #16
 800455c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800456a:	65bb      	str	r3, [r7, #88]	; 0x58
 800456c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004570:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e4      	bne.n	8004548 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	4618      	mov	r0, r3
 8004584:	f7fd fc6b 	bl	8001e5e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004594:	b29b      	uxth	r3, r3
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	b29b      	uxth	r3, r3
 800459a:	4619      	mov	r1, r3
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f8df 	bl	8004760 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045a2:	e0b6      	b.n	8004712 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80a8 	beq.w	8004716 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80045c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80a3 	beq.w	8004716 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045f2:	647b      	str	r3, [r7, #68]	; 0x44
 80045f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e4      	bne.n	80045d0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3308      	adds	r3, #8
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	e853 3f00 	ldrex	r3, [r3]
 8004614:	623b      	str	r3, [r7, #32]
   return(result);
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	f023 0301 	bic.w	r3, r3, #1
 800461c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3308      	adds	r3, #8
 8004626:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800462a:	633a      	str	r2, [r7, #48]	; 0x30
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004632:	e841 2300 	strex	r3, r2, [r1]
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e3      	bne.n	8004606 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	60fb      	str	r3, [r7, #12]
   return(result);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f023 0310 	bic.w	r3, r3, #16
 8004664:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004672:	61fb      	str	r3, [r7, #28]
 8004674:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004676:	69b9      	ldr	r1, [r7, #24]
 8004678:	69fa      	ldr	r2, [r7, #28]
 800467a:	e841 2300 	strex	r3, r2, [r1]
 800467e:	617b      	str	r3, [r7, #20]
   return(result);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1e4      	bne.n	8004650 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004686:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800468a:	4619      	mov	r1, r3
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f867 	bl	8004760 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004692:	e040      	b.n	8004716 <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00e      	beq.n	80046be <HAL_UART_IRQHandler+0x55a>
 80046a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fdf1 	bl	800529e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046bc:	e02e      	b.n	800471c <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00e      	beq.n	80046e8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d01d      	beq.n	800471a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4798      	blx	r3
    }
    return;
 80046e6:	e018      	b.n	800471a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d013      	beq.n	800471c <HAL_UART_IRQHandler+0x5b8>
 80046f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00d      	beq.n	800471c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fc46 	bl	8004f92 <UART_EndTransmit_IT>
    return;
 8004706:	bf00      	nop
 8004708:	e008      	b.n	800471c <HAL_UART_IRQHandler+0x5b8>
      return;
 800470a:	bf00      	nop
 800470c:	e006      	b.n	800471c <HAL_UART_IRQHandler+0x5b8>
    return;
 800470e:	bf00      	nop
 8004710:	e004      	b.n	800471c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004712:	bf00      	nop
 8004714:	e002      	b.n	800471c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004716:	bf00      	nop
 8004718:	e000      	b.n	800471c <HAL_UART_IRQHandler+0x5b8>
    return;
 800471a:	bf00      	nop
  }

}
 800471c:	37e8      	adds	r7, #232	; 0xe8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop

08004724 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	4b8b      	ldr	r3, [pc, #556]	; (80049d0 <UART_SetConfig+0x258>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	6979      	ldr	r1, [r7, #20]
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a79      	ldr	r2, [pc, #484]	; (80049d4 <UART_SetConfig+0x25c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d121      	bne.n	8004838 <UART_SetConfig+0xc0>
 80047f4:	4b78      	ldr	r3, [pc, #480]	; (80049d8 <UART_SetConfig+0x260>)
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d817      	bhi.n	8004830 <UART_SetConfig+0xb8>
 8004800:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <UART_SetConfig+0x90>)
 8004802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004806:	bf00      	nop
 8004808:	08004819 	.word	0x08004819
 800480c:	08004825 	.word	0x08004825
 8004810:	0800482b 	.word	0x0800482b
 8004814:	0800481f 	.word	0x0800481f
 8004818:	2300      	movs	r3, #0
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e01e      	b.n	800485c <UART_SetConfig+0xe4>
 800481e:	2302      	movs	r3, #2
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e01b      	b.n	800485c <UART_SetConfig+0xe4>
 8004824:	2304      	movs	r3, #4
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e018      	b.n	800485c <UART_SetConfig+0xe4>
 800482a:	2308      	movs	r3, #8
 800482c:	77fb      	strb	r3, [r7, #31]
 800482e:	e015      	b.n	800485c <UART_SetConfig+0xe4>
 8004830:	2310      	movs	r3, #16
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	bf00      	nop
 8004836:	e011      	b.n	800485c <UART_SetConfig+0xe4>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a67      	ldr	r2, [pc, #412]	; (80049dc <UART_SetConfig+0x264>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d102      	bne.n	8004848 <UART_SetConfig+0xd0>
 8004842:	2300      	movs	r3, #0
 8004844:	77fb      	strb	r3, [r7, #31]
 8004846:	e009      	b.n	800485c <UART_SetConfig+0xe4>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a64      	ldr	r2, [pc, #400]	; (80049e0 <UART_SetConfig+0x268>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d102      	bne.n	8004858 <UART_SetConfig+0xe0>
 8004852:	2300      	movs	r3, #0
 8004854:	77fb      	strb	r3, [r7, #31]
 8004856:	e001      	b.n	800485c <UART_SetConfig+0xe4>
 8004858:	2310      	movs	r3, #16
 800485a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004864:	d15c      	bne.n	8004920 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8004866:	7ffb      	ldrb	r3, [r7, #31]
 8004868:	2b08      	cmp	r3, #8
 800486a:	d828      	bhi.n	80048be <UART_SetConfig+0x146>
 800486c:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <UART_SetConfig+0xfc>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	08004899 	.word	0x08004899
 8004878:	080048a1 	.word	0x080048a1
 800487c:	080048a9 	.word	0x080048a9
 8004880:	080048bf 	.word	0x080048bf
 8004884:	080048af 	.word	0x080048af
 8004888:	080048bf 	.word	0x080048bf
 800488c:	080048bf 	.word	0x080048bf
 8004890:	080048bf 	.word	0x080048bf
 8004894:	080048b7 	.word	0x080048b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004898:	f7fe fdf6 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 800489c:	61b8      	str	r0, [r7, #24]
        break;
 800489e:	e013      	b.n	80048c8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048a0:	f7fe fe14 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 80048a4:	61b8      	str	r0, [r7, #24]
        break;
 80048a6:	e00f      	b.n	80048c8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a8:	4b4e      	ldr	r3, [pc, #312]	; (80049e4 <UART_SetConfig+0x26c>)
 80048aa:	61bb      	str	r3, [r7, #24]
        break;
 80048ac:	e00c      	b.n	80048c8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ae:	f7fe fd75 	bl	800339c <HAL_RCC_GetSysClockFreq>
 80048b2:	61b8      	str	r0, [r7, #24]
        break;
 80048b4:	e008      	b.n	80048c8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ba:	61bb      	str	r3, [r7, #24]
        break;
 80048bc:	e004      	b.n	80048c8 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	77bb      	strb	r3, [r7, #30]
        break;
 80048c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d074      	beq.n	80049b8 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	005a      	lsls	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	085b      	lsrs	r3, r3, #1
 80048d8:	441a      	add	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	2b0f      	cmp	r3, #15
 80048ea:	d916      	bls.n	800491a <UART_SetConfig+0x1a2>
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f2:	d212      	bcs.n	800491a <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f023 030f 	bic.w	r3, r3, #15
 80048fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	b29b      	uxth	r3, r3
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	b29a      	uxth	r2, r3
 800490a:	89fb      	ldrh	r3, [r7, #14]
 800490c:	4313      	orrs	r3, r2
 800490e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	89fa      	ldrh	r2, [r7, #14]
 8004916:	60da      	str	r2, [r3, #12]
 8004918:	e04e      	b.n	80049b8 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	77bb      	strb	r3, [r7, #30]
 800491e:	e04b      	b.n	80049b8 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004920:	7ffb      	ldrb	r3, [r7, #31]
 8004922:	2b08      	cmp	r3, #8
 8004924:	d827      	bhi.n	8004976 <UART_SetConfig+0x1fe>
 8004926:	a201      	add	r2, pc, #4	; (adr r2, 800492c <UART_SetConfig+0x1b4>)
 8004928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492c:	08004951 	.word	0x08004951
 8004930:	08004959 	.word	0x08004959
 8004934:	08004961 	.word	0x08004961
 8004938:	08004977 	.word	0x08004977
 800493c:	08004967 	.word	0x08004967
 8004940:	08004977 	.word	0x08004977
 8004944:	08004977 	.word	0x08004977
 8004948:	08004977 	.word	0x08004977
 800494c:	0800496f 	.word	0x0800496f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004950:	f7fe fd9a 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 8004954:	61b8      	str	r0, [r7, #24]
        break;
 8004956:	e013      	b.n	8004980 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004958:	f7fe fdb8 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 800495c:	61b8      	str	r0, [r7, #24]
        break;
 800495e:	e00f      	b.n	8004980 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004960:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <UART_SetConfig+0x26c>)
 8004962:	61bb      	str	r3, [r7, #24]
        break;
 8004964:	e00c      	b.n	8004980 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004966:	f7fe fd19 	bl	800339c <HAL_RCC_GetSysClockFreq>
 800496a:	61b8      	str	r0, [r7, #24]
        break;
 800496c:	e008      	b.n	8004980 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800496e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004972:	61bb      	str	r3, [r7, #24]
        break;
 8004974:	e004      	b.n	8004980 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	77bb      	strb	r3, [r7, #30]
        break;
 800497e:	bf00      	nop
    }

    if (pclk != 0U)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d018      	beq.n	80049b8 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	085a      	lsrs	r2, r3, #1
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	441a      	add	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	b29b      	uxth	r3, r3
 800499a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	2b0f      	cmp	r3, #15
 80049a0:	d908      	bls.n	80049b4 <UART_SetConfig+0x23c>
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a8:	d204      	bcs.n	80049b4 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	60da      	str	r2, [r3, #12]
 80049b2:	e001      	b.n	80049b8 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3720      	adds	r7, #32
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	efff69f3 	.word	0xefff69f3
 80049d4:	40013800 	.word	0x40013800
 80049d8:	40021000 	.word	0x40021000
 80049dc:	40004400 	.word	0x40004400
 80049e0:	40004800 	.word	0x40004800
 80049e4:	007a1200 	.word	0x007a1200

080049e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01a      	beq.n	8004afe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae6:	d10a      	bne.n	8004afe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	605a      	str	r2, [r3, #4]
  }
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b3c:	f7fd f850 	bl	8001be0 <HAL_GetTick>
 8004b40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d10e      	bne.n	8004b6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f82d 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e023      	b.n	8004bb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d10e      	bne.n	8004b9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f817 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e00d      	b.n	8004bb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b09c      	sub	sp, #112	; 0x70
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	603b      	str	r3, [r7, #0]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bce:	e0a5      	b.n	8004d1c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	f000 80a1 	beq.w	8004d1c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bda:	f7fd f801 	bl	8001be0 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004bea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d13e      	bne.n	8004c6e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c04:	667b      	str	r3, [r7, #100]	; 0x64
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c10:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c16:	e841 2300 	strex	r3, r2, [r1]
 8004c1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1e6      	bne.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3308      	adds	r3, #8
 8004c28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	663b      	str	r3, [r7, #96]	; 0x60
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3308      	adds	r3, #8
 8004c40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c42:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c4a:	e841 2300 	strex	r3, r2, [r1]
 8004c4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1e5      	bne.n	8004c22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e067      	b.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d04f      	beq.n	8004d1c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c8a:	d147      	bne.n	8004d1c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	e853 3f00 	ldrex	r3, [r3]
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8004cb6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cbc:	e841 2300 	strex	r3, r2, [r1]
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e6      	bne.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3308      	adds	r3, #8
 8004cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f023 0301 	bic.w	r3, r3, #1
 8004cde:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ce8:	623a      	str	r2, [r7, #32]
 8004cea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	69f9      	ldr	r1, [r7, #28]
 8004cee:	6a3a      	ldr	r2, [r7, #32]
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e5      	bne.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e010      	b.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	69da      	ldr	r2, [r3, #28]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4013      	ands	r3, r2
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	bf0c      	ite	eq
 8004d2c:	2301      	moveq	r3, #1
 8004d2e:	2300      	movne	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	f43f af4a 	beq.w	8004bd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3770      	adds	r7, #112	; 0x70
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b091      	sub	sp, #68	; 0x44
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	4613      	mov	r3, r2
 8004d54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	88fa      	ldrh	r2, [r7, #6]
 8004d60:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	88fa      	ldrh	r2, [r7, #6]
 8004d68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7a:	d10e      	bne.n	8004d9a <UART_Start_Receive_IT+0x52>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d105      	bne.n	8004d90 <UART_Start_Receive_IT+0x48>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d8e:	e02d      	b.n	8004dec <UART_Start_Receive_IT+0xa4>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	22ff      	movs	r2, #255	; 0xff
 8004d94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d98:	e028      	b.n	8004dec <UART_Start_Receive_IT+0xa4>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10d      	bne.n	8004dbe <UART_Start_Receive_IT+0x76>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d104      	bne.n	8004db4 <UART_Start_Receive_IT+0x6c>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	22ff      	movs	r2, #255	; 0xff
 8004dae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004db2:	e01b      	b.n	8004dec <UART_Start_Receive_IT+0xa4>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	227f      	movs	r2, #127	; 0x7f
 8004db8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dbc:	e016      	b.n	8004dec <UART_Start_Receive_IT+0xa4>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dc6:	d10d      	bne.n	8004de4 <UART_Start_Receive_IT+0x9c>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d104      	bne.n	8004dda <UART_Start_Receive_IT+0x92>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	227f      	movs	r2, #127	; 0x7f
 8004dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dd8:	e008      	b.n	8004dec <UART_Start_Receive_IT+0xa4>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	223f      	movs	r2, #63	; 0x3f
 8004dde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004de2:	e003      	b.n	8004dec <UART_Start_Receive_IT+0xa4>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2222      	movs	r2, #34	; 0x22
 8004df8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3308      	adds	r3, #8
 8004e00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	f043 0301 	orr.w	r3, r3, #1
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3308      	adds	r3, #8
 8004e18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e1a:	637a      	str	r2, [r7, #52]	; 0x34
 8004e1c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e5      	bne.n	8004dfa <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e36:	d107      	bne.n	8004e48 <UART_Start_Receive_IT+0x100>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d103      	bne.n	8004e48 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4a15      	ldr	r2, [pc, #84]	; (8004e98 <UART_Start_Receive_IT+0x150>)
 8004e44:	665a      	str	r2, [r3, #100]	; 0x64
 8004e46:	e002      	b.n	8004e4e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4a14      	ldr	r2, [pc, #80]	; (8004e9c <UART_Start_Receive_IT+0x154>)
 8004e4c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	e853 3f00 	ldrex	r3, [r3]
 8004e62:	613b      	str	r3, [r7, #16]
   return(result);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004e6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e74:	623b      	str	r3, [r7, #32]
 8004e76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e78:	69f9      	ldr	r1, [r7, #28]
 8004e7a:	6a3a      	ldr	r2, [r7, #32]
 8004e7c:	e841 2300 	strex	r3, r2, [r1]
 8004e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e6      	bne.n	8004e56 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3744      	adds	r7, #68	; 0x44
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	08005143 	.word	0x08005143
 8004e9c:	08004fe7 	.word	0x08004fe7

08004ea0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b095      	sub	sp, #84	; 0x54
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ec8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ecc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e6      	bne.n	8004ea8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3308      	adds	r3, #8
 8004ee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004efa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004efc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e5      	bne.n	8004eda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d118      	bne.n	8004f48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f023 0310 	bic.w	r3, r3, #16
 8004f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	6979      	ldr	r1, [r7, #20]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	613b      	str	r3, [r7, #16]
   return(result);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e6      	bne.n	8004f16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004f5a:	bf00      	nop
 8004f5c:	3754      	adds	r7, #84	; 0x54
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f7ff fbe1 	bl	800474c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f8a:	bf00      	nop
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b088      	sub	sp, #32
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	e853 3f00 	ldrex	r3, [r3]
 8004fa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fae:	61fb      	str	r3, [r7, #28]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbc:	6979      	ldr	r1, [r7, #20]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	e841 2300 	strex	r3, r2, [r1]
 8004fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e6      	bne.n	8004f9a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff fba3 	bl	8004724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fde:	bf00      	nop
 8004fe0:	3720      	adds	r7, #32
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b096      	sub	sp, #88	; 0x58
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ff4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ffc:	2b22      	cmp	r3, #34	; 0x22
 8004ffe:	f040 8094 	bne.w	800512a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005008:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800500c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005010:	b2d9      	uxtb	r1, r3
 8005012:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005016:	b2da      	uxtb	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501c:	400a      	ands	r2, r1
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005032:	b29b      	uxth	r3, r3
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d177      	bne.n	800513a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800505e:	653b      	str	r3, [r7, #80]	; 0x50
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005068:	647b      	str	r3, [r7, #68]	; 0x44
 800506a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800506e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e6      	bne.n	800504a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3308      	adds	r3, #8
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	e853 3f00 	ldrex	r3, [r3]
 800508a:	623b      	str	r3, [r7, #32]
   return(result);
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	f023 0301 	bic.w	r3, r3, #1
 8005092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3308      	adds	r3, #8
 800509a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800509c:	633a      	str	r2, [r7, #48]	; 0x30
 800509e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a4:	e841 2300 	strex	r3, r2, [r1]
 80050a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1e5      	bne.n	800507c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d12e      	bne.n	8005122 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0310 	bic.w	r3, r3, #16
 80050de:	64bb      	str	r3, [r7, #72]	; 0x48
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ec:	69b9      	ldr	r1, [r7, #24]
 80050ee:	69fa      	ldr	r2, [r7, #28]
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	617b      	str	r3, [r7, #20]
   return(result);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e6      	bne.n	80050ca <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f003 0310 	and.w	r3, r3, #16
 8005106:	2b10      	cmp	r3, #16
 8005108:	d103      	bne.n	8005112 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2210      	movs	r2, #16
 8005110:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005118:	4619      	mov	r1, r3
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff fb20 	bl	8004760 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005120:	e00b      	b.n	800513a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7ff fb08 	bl	8004738 <HAL_UART_RxCpltCallback>
}
 8005128:	e007      	b.n	800513a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699a      	ldr	r2, [r3, #24]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0208 	orr.w	r2, r2, #8
 8005138:	619a      	str	r2, [r3, #24]
}
 800513a:	bf00      	nop
 800513c:	3758      	adds	r7, #88	; 0x58
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b096      	sub	sp, #88	; 0x58
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005150:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005158:	2b22      	cmp	r3, #34	; 0x22
 800515a:	f040 8094 	bne.w	8005286 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005164:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800516e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005172:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005176:	4013      	ands	r3, r2
 8005178:	b29a      	uxth	r2, r3
 800517a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800517c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005182:	1c9a      	adds	r2, r3, #2
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d177      	bne.n	8005296 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ae:	e853 3f00 	ldrex	r3, [r3]
 80051b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c4:	643b      	str	r3, [r7, #64]	; 0x40
 80051c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051cc:	e841 2300 	strex	r3, r2, [r1]
 80051d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e6      	bne.n	80051a6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3308      	adds	r3, #8
 80051de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f023 0301 	bic.w	r3, r3, #1
 80051ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3308      	adds	r3, #8
 80051f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005200:	e841 2300 	strex	r3, r2, [r1]
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e5      	bne.n	80051d8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521c:	2b01      	cmp	r3, #1
 800521e:	d12e      	bne.n	800527e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	60bb      	str	r3, [r7, #8]
   return(result);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f023 0310 	bic.w	r3, r3, #16
 800523a:	647b      	str	r3, [r7, #68]	; 0x44
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6979      	ldr	r1, [r7, #20]
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	613b      	str	r3, [r7, #16]
   return(result);
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e6      	bne.n	8005226 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	f003 0310 	and.w	r3, r3, #16
 8005262:	2b10      	cmp	r3, #16
 8005264:	d103      	bne.n	800526e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2210      	movs	r2, #16
 800526c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff fa72 	bl	8004760 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800527c:	e00b      	b.n	8005296 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff fa5a 	bl	8004738 <HAL_UART_RxCpltCallback>
}
 8005284:	e007      	b.n	8005296 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699a      	ldr	r2, [r3, #24]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 0208 	orr.w	r2, r2, #8
 8005294:	619a      	str	r2, [r3, #24]
}
 8005296:	bf00      	nop
 8005298:	3758      	adds	r7, #88	; 0x58
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800529e:	b480      	push	{r7}
 80052a0:	b083      	sub	sp, #12
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <atof>:
 80052b2:	2100      	movs	r1, #0
 80052b4:	f001 bac0 	b.w	8006838 <strtod>

080052b8 <__errno>:
 80052b8:	4b01      	ldr	r3, [pc, #4]	; (80052c0 <__errno+0x8>)
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20000010 	.word	0x20000010

080052c4 <__libc_init_array>:
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	4e0d      	ldr	r6, [pc, #52]	; (80052fc <__libc_init_array+0x38>)
 80052c8:	4c0d      	ldr	r4, [pc, #52]	; (8005300 <__libc_init_array+0x3c>)
 80052ca:	1ba4      	subs	r4, r4, r6
 80052cc:	10a4      	asrs	r4, r4, #2
 80052ce:	2500      	movs	r5, #0
 80052d0:	42a5      	cmp	r5, r4
 80052d2:	d109      	bne.n	80052e8 <__libc_init_array+0x24>
 80052d4:	4e0b      	ldr	r6, [pc, #44]	; (8005304 <__libc_init_array+0x40>)
 80052d6:	4c0c      	ldr	r4, [pc, #48]	; (8005308 <__libc_init_array+0x44>)
 80052d8:	f003 fae0 	bl	800889c <_init>
 80052dc:	1ba4      	subs	r4, r4, r6
 80052de:	10a4      	asrs	r4, r4, #2
 80052e0:	2500      	movs	r5, #0
 80052e2:	42a5      	cmp	r5, r4
 80052e4:	d105      	bne.n	80052f2 <__libc_init_array+0x2e>
 80052e6:	bd70      	pop	{r4, r5, r6, pc}
 80052e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052ec:	4798      	blx	r3
 80052ee:	3501      	adds	r5, #1
 80052f0:	e7ee      	b.n	80052d0 <__libc_init_array+0xc>
 80052f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052f6:	4798      	blx	r3
 80052f8:	3501      	adds	r5, #1
 80052fa:	e7f2      	b.n	80052e2 <__libc_init_array+0x1e>
 80052fc:	08008bb0 	.word	0x08008bb0
 8005300:	08008bb0 	.word	0x08008bb0
 8005304:	08008bb0 	.word	0x08008bb0
 8005308:	08008bb4 	.word	0x08008bb4

0800530c <memset>:
 800530c:	4402      	add	r2, r0
 800530e:	4603      	mov	r3, r0
 8005310:	4293      	cmp	r3, r2
 8005312:	d100      	bne.n	8005316 <memset+0xa>
 8005314:	4770      	bx	lr
 8005316:	f803 1b01 	strb.w	r1, [r3], #1
 800531a:	e7f9      	b.n	8005310 <memset+0x4>

0800531c <__cvt>:
 800531c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005320:	ec55 4b10 	vmov	r4, r5, d0
 8005324:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005326:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800532a:	2d00      	cmp	r5, #0
 800532c:	460e      	mov	r6, r1
 800532e:	4691      	mov	r9, r2
 8005330:	4619      	mov	r1, r3
 8005332:	bfb8      	it	lt
 8005334:	4622      	movlt	r2, r4
 8005336:	462b      	mov	r3, r5
 8005338:	f027 0720 	bic.w	r7, r7, #32
 800533c:	bfbb      	ittet	lt
 800533e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005342:	461d      	movlt	r5, r3
 8005344:	2300      	movge	r3, #0
 8005346:	232d      	movlt	r3, #45	; 0x2d
 8005348:	bfb8      	it	lt
 800534a:	4614      	movlt	r4, r2
 800534c:	2f46      	cmp	r7, #70	; 0x46
 800534e:	700b      	strb	r3, [r1, #0]
 8005350:	d004      	beq.n	800535c <__cvt+0x40>
 8005352:	2f45      	cmp	r7, #69	; 0x45
 8005354:	d100      	bne.n	8005358 <__cvt+0x3c>
 8005356:	3601      	adds	r6, #1
 8005358:	2102      	movs	r1, #2
 800535a:	e000      	b.n	800535e <__cvt+0x42>
 800535c:	2103      	movs	r1, #3
 800535e:	ab03      	add	r3, sp, #12
 8005360:	9301      	str	r3, [sp, #4]
 8005362:	ab02      	add	r3, sp, #8
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	4632      	mov	r2, r6
 8005368:	4653      	mov	r3, sl
 800536a:	ec45 4b10 	vmov	d0, r4, r5
 800536e:	f001 fb03 	bl	8006978 <_dtoa_r>
 8005372:	2f47      	cmp	r7, #71	; 0x47
 8005374:	4680      	mov	r8, r0
 8005376:	d102      	bne.n	800537e <__cvt+0x62>
 8005378:	f019 0f01 	tst.w	r9, #1
 800537c:	d026      	beq.n	80053cc <__cvt+0xb0>
 800537e:	2f46      	cmp	r7, #70	; 0x46
 8005380:	eb08 0906 	add.w	r9, r8, r6
 8005384:	d111      	bne.n	80053aa <__cvt+0x8e>
 8005386:	f898 3000 	ldrb.w	r3, [r8]
 800538a:	2b30      	cmp	r3, #48	; 0x30
 800538c:	d10a      	bne.n	80053a4 <__cvt+0x88>
 800538e:	2200      	movs	r2, #0
 8005390:	2300      	movs	r3, #0
 8005392:	4620      	mov	r0, r4
 8005394:	4629      	mov	r1, r5
 8005396:	f7fb fb97 	bl	8000ac8 <__aeabi_dcmpeq>
 800539a:	b918      	cbnz	r0, 80053a4 <__cvt+0x88>
 800539c:	f1c6 0601 	rsb	r6, r6, #1
 80053a0:	f8ca 6000 	str.w	r6, [sl]
 80053a4:	f8da 3000 	ldr.w	r3, [sl]
 80053a8:	4499      	add	r9, r3
 80053aa:	2200      	movs	r2, #0
 80053ac:	2300      	movs	r3, #0
 80053ae:	4620      	mov	r0, r4
 80053b0:	4629      	mov	r1, r5
 80053b2:	f7fb fb89 	bl	8000ac8 <__aeabi_dcmpeq>
 80053b6:	b938      	cbnz	r0, 80053c8 <__cvt+0xac>
 80053b8:	2230      	movs	r2, #48	; 0x30
 80053ba:	9b03      	ldr	r3, [sp, #12]
 80053bc:	454b      	cmp	r3, r9
 80053be:	d205      	bcs.n	80053cc <__cvt+0xb0>
 80053c0:	1c59      	adds	r1, r3, #1
 80053c2:	9103      	str	r1, [sp, #12]
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	e7f8      	b.n	80053ba <__cvt+0x9e>
 80053c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80053cc:	9b03      	ldr	r3, [sp, #12]
 80053ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053d0:	eba3 0308 	sub.w	r3, r3, r8
 80053d4:	4640      	mov	r0, r8
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	b004      	add	sp, #16
 80053da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080053de <__exponent>:
 80053de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053e0:	2900      	cmp	r1, #0
 80053e2:	4604      	mov	r4, r0
 80053e4:	bfba      	itte	lt
 80053e6:	4249      	neglt	r1, r1
 80053e8:	232d      	movlt	r3, #45	; 0x2d
 80053ea:	232b      	movge	r3, #43	; 0x2b
 80053ec:	2909      	cmp	r1, #9
 80053ee:	f804 2b02 	strb.w	r2, [r4], #2
 80053f2:	7043      	strb	r3, [r0, #1]
 80053f4:	dd20      	ble.n	8005438 <__exponent+0x5a>
 80053f6:	f10d 0307 	add.w	r3, sp, #7
 80053fa:	461f      	mov	r7, r3
 80053fc:	260a      	movs	r6, #10
 80053fe:	fb91 f5f6 	sdiv	r5, r1, r6
 8005402:	fb06 1115 	mls	r1, r6, r5, r1
 8005406:	3130      	adds	r1, #48	; 0x30
 8005408:	2d09      	cmp	r5, #9
 800540a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800540e:	f103 32ff 	add.w	r2, r3, #4294967295
 8005412:	4629      	mov	r1, r5
 8005414:	dc09      	bgt.n	800542a <__exponent+0x4c>
 8005416:	3130      	adds	r1, #48	; 0x30
 8005418:	3b02      	subs	r3, #2
 800541a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800541e:	42bb      	cmp	r3, r7
 8005420:	4622      	mov	r2, r4
 8005422:	d304      	bcc.n	800542e <__exponent+0x50>
 8005424:	1a10      	subs	r0, r2, r0
 8005426:	b003      	add	sp, #12
 8005428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800542a:	4613      	mov	r3, r2
 800542c:	e7e7      	b.n	80053fe <__exponent+0x20>
 800542e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005432:	f804 2b01 	strb.w	r2, [r4], #1
 8005436:	e7f2      	b.n	800541e <__exponent+0x40>
 8005438:	2330      	movs	r3, #48	; 0x30
 800543a:	4419      	add	r1, r3
 800543c:	7083      	strb	r3, [r0, #2]
 800543e:	1d02      	adds	r2, r0, #4
 8005440:	70c1      	strb	r1, [r0, #3]
 8005442:	e7ef      	b.n	8005424 <__exponent+0x46>

08005444 <_printf_float>:
 8005444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005448:	b08d      	sub	sp, #52	; 0x34
 800544a:	460c      	mov	r4, r1
 800544c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005450:	4616      	mov	r6, r2
 8005452:	461f      	mov	r7, r3
 8005454:	4605      	mov	r5, r0
 8005456:	f002 fb6f 	bl	8007b38 <_localeconv_r>
 800545a:	6803      	ldr	r3, [r0, #0]
 800545c:	9304      	str	r3, [sp, #16]
 800545e:	4618      	mov	r0, r3
 8005460:	f7fa feb6 	bl	80001d0 <strlen>
 8005464:	2300      	movs	r3, #0
 8005466:	930a      	str	r3, [sp, #40]	; 0x28
 8005468:	f8d8 3000 	ldr.w	r3, [r8]
 800546c:	9005      	str	r0, [sp, #20]
 800546e:	3307      	adds	r3, #7
 8005470:	f023 0307 	bic.w	r3, r3, #7
 8005474:	f103 0208 	add.w	r2, r3, #8
 8005478:	f894 a018 	ldrb.w	sl, [r4, #24]
 800547c:	f8d4 b000 	ldr.w	fp, [r4]
 8005480:	f8c8 2000 	str.w	r2, [r8]
 8005484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005488:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800548c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005490:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005494:	9307      	str	r3, [sp, #28]
 8005496:	f8cd 8018 	str.w	r8, [sp, #24]
 800549a:	f04f 32ff 	mov.w	r2, #4294967295
 800549e:	4ba7      	ldr	r3, [pc, #668]	; (800573c <_printf_float+0x2f8>)
 80054a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054a4:	f7fb fb42 	bl	8000b2c <__aeabi_dcmpun>
 80054a8:	bb70      	cbnz	r0, 8005508 <_printf_float+0xc4>
 80054aa:	f04f 32ff 	mov.w	r2, #4294967295
 80054ae:	4ba3      	ldr	r3, [pc, #652]	; (800573c <_printf_float+0x2f8>)
 80054b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054b4:	f7fb fb1c 	bl	8000af0 <__aeabi_dcmple>
 80054b8:	bb30      	cbnz	r0, 8005508 <_printf_float+0xc4>
 80054ba:	2200      	movs	r2, #0
 80054bc:	2300      	movs	r3, #0
 80054be:	4640      	mov	r0, r8
 80054c0:	4649      	mov	r1, r9
 80054c2:	f7fb fb0b 	bl	8000adc <__aeabi_dcmplt>
 80054c6:	b110      	cbz	r0, 80054ce <_printf_float+0x8a>
 80054c8:	232d      	movs	r3, #45	; 0x2d
 80054ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ce:	4a9c      	ldr	r2, [pc, #624]	; (8005740 <_printf_float+0x2fc>)
 80054d0:	4b9c      	ldr	r3, [pc, #624]	; (8005744 <_printf_float+0x300>)
 80054d2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80054d6:	bf8c      	ite	hi
 80054d8:	4690      	movhi	r8, r2
 80054da:	4698      	movls	r8, r3
 80054dc:	2303      	movs	r3, #3
 80054de:	f02b 0204 	bic.w	r2, fp, #4
 80054e2:	6123      	str	r3, [r4, #16]
 80054e4:	6022      	str	r2, [r4, #0]
 80054e6:	f04f 0900 	mov.w	r9, #0
 80054ea:	9700      	str	r7, [sp, #0]
 80054ec:	4633      	mov	r3, r6
 80054ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80054f0:	4621      	mov	r1, r4
 80054f2:	4628      	mov	r0, r5
 80054f4:	f000 f9e6 	bl	80058c4 <_printf_common>
 80054f8:	3001      	adds	r0, #1
 80054fa:	f040 808d 	bne.w	8005618 <_printf_float+0x1d4>
 80054fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005502:	b00d      	add	sp, #52	; 0x34
 8005504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005508:	4642      	mov	r2, r8
 800550a:	464b      	mov	r3, r9
 800550c:	4640      	mov	r0, r8
 800550e:	4649      	mov	r1, r9
 8005510:	f7fb fb0c 	bl	8000b2c <__aeabi_dcmpun>
 8005514:	b110      	cbz	r0, 800551c <_printf_float+0xd8>
 8005516:	4a8c      	ldr	r2, [pc, #560]	; (8005748 <_printf_float+0x304>)
 8005518:	4b8c      	ldr	r3, [pc, #560]	; (800574c <_printf_float+0x308>)
 800551a:	e7da      	b.n	80054d2 <_printf_float+0x8e>
 800551c:	6861      	ldr	r1, [r4, #4]
 800551e:	1c4b      	adds	r3, r1, #1
 8005520:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005524:	a80a      	add	r0, sp, #40	; 0x28
 8005526:	d13e      	bne.n	80055a6 <_printf_float+0x162>
 8005528:	2306      	movs	r3, #6
 800552a:	6063      	str	r3, [r4, #4]
 800552c:	2300      	movs	r3, #0
 800552e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005532:	ab09      	add	r3, sp, #36	; 0x24
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	ec49 8b10 	vmov	d0, r8, r9
 800553a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800553e:	6022      	str	r2, [r4, #0]
 8005540:	f8cd a004 	str.w	sl, [sp, #4]
 8005544:	6861      	ldr	r1, [r4, #4]
 8005546:	4628      	mov	r0, r5
 8005548:	f7ff fee8 	bl	800531c <__cvt>
 800554c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005550:	2b47      	cmp	r3, #71	; 0x47
 8005552:	4680      	mov	r8, r0
 8005554:	d109      	bne.n	800556a <_printf_float+0x126>
 8005556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005558:	1cd8      	adds	r0, r3, #3
 800555a:	db02      	blt.n	8005562 <_printf_float+0x11e>
 800555c:	6862      	ldr	r2, [r4, #4]
 800555e:	4293      	cmp	r3, r2
 8005560:	dd47      	ble.n	80055f2 <_printf_float+0x1ae>
 8005562:	f1aa 0a02 	sub.w	sl, sl, #2
 8005566:	fa5f fa8a 	uxtb.w	sl, sl
 800556a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800556e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005570:	d824      	bhi.n	80055bc <_printf_float+0x178>
 8005572:	3901      	subs	r1, #1
 8005574:	4652      	mov	r2, sl
 8005576:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800557a:	9109      	str	r1, [sp, #36]	; 0x24
 800557c:	f7ff ff2f 	bl	80053de <__exponent>
 8005580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005582:	1813      	adds	r3, r2, r0
 8005584:	2a01      	cmp	r2, #1
 8005586:	4681      	mov	r9, r0
 8005588:	6123      	str	r3, [r4, #16]
 800558a:	dc02      	bgt.n	8005592 <_printf_float+0x14e>
 800558c:	6822      	ldr	r2, [r4, #0]
 800558e:	07d1      	lsls	r1, r2, #31
 8005590:	d501      	bpl.n	8005596 <_printf_float+0x152>
 8005592:	3301      	adds	r3, #1
 8005594:	6123      	str	r3, [r4, #16]
 8005596:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0a5      	beq.n	80054ea <_printf_float+0xa6>
 800559e:	232d      	movs	r3, #45	; 0x2d
 80055a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a4:	e7a1      	b.n	80054ea <_printf_float+0xa6>
 80055a6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80055aa:	f000 8177 	beq.w	800589c <_printf_float+0x458>
 80055ae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80055b2:	d1bb      	bne.n	800552c <_printf_float+0xe8>
 80055b4:	2900      	cmp	r1, #0
 80055b6:	d1b9      	bne.n	800552c <_printf_float+0xe8>
 80055b8:	2301      	movs	r3, #1
 80055ba:	e7b6      	b.n	800552a <_printf_float+0xe6>
 80055bc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80055c0:	d119      	bne.n	80055f6 <_printf_float+0x1b2>
 80055c2:	2900      	cmp	r1, #0
 80055c4:	6863      	ldr	r3, [r4, #4]
 80055c6:	dd0c      	ble.n	80055e2 <_printf_float+0x19e>
 80055c8:	6121      	str	r1, [r4, #16]
 80055ca:	b913      	cbnz	r3, 80055d2 <_printf_float+0x18e>
 80055cc:	6822      	ldr	r2, [r4, #0]
 80055ce:	07d2      	lsls	r2, r2, #31
 80055d0:	d502      	bpl.n	80055d8 <_printf_float+0x194>
 80055d2:	3301      	adds	r3, #1
 80055d4:	440b      	add	r3, r1
 80055d6:	6123      	str	r3, [r4, #16]
 80055d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055da:	65a3      	str	r3, [r4, #88]	; 0x58
 80055dc:	f04f 0900 	mov.w	r9, #0
 80055e0:	e7d9      	b.n	8005596 <_printf_float+0x152>
 80055e2:	b913      	cbnz	r3, 80055ea <_printf_float+0x1a6>
 80055e4:	6822      	ldr	r2, [r4, #0]
 80055e6:	07d0      	lsls	r0, r2, #31
 80055e8:	d501      	bpl.n	80055ee <_printf_float+0x1aa>
 80055ea:	3302      	adds	r3, #2
 80055ec:	e7f3      	b.n	80055d6 <_printf_float+0x192>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e7f1      	b.n	80055d6 <_printf_float+0x192>
 80055f2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80055f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80055fa:	4293      	cmp	r3, r2
 80055fc:	db05      	blt.n	800560a <_printf_float+0x1c6>
 80055fe:	6822      	ldr	r2, [r4, #0]
 8005600:	6123      	str	r3, [r4, #16]
 8005602:	07d1      	lsls	r1, r2, #31
 8005604:	d5e8      	bpl.n	80055d8 <_printf_float+0x194>
 8005606:	3301      	adds	r3, #1
 8005608:	e7e5      	b.n	80055d6 <_printf_float+0x192>
 800560a:	2b00      	cmp	r3, #0
 800560c:	bfd4      	ite	le
 800560e:	f1c3 0302 	rsble	r3, r3, #2
 8005612:	2301      	movgt	r3, #1
 8005614:	4413      	add	r3, r2
 8005616:	e7de      	b.n	80055d6 <_printf_float+0x192>
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	055a      	lsls	r2, r3, #21
 800561c:	d407      	bmi.n	800562e <_printf_float+0x1ea>
 800561e:	6923      	ldr	r3, [r4, #16]
 8005620:	4642      	mov	r2, r8
 8005622:	4631      	mov	r1, r6
 8005624:	4628      	mov	r0, r5
 8005626:	47b8      	blx	r7
 8005628:	3001      	adds	r0, #1
 800562a:	d12b      	bne.n	8005684 <_printf_float+0x240>
 800562c:	e767      	b.n	80054fe <_printf_float+0xba>
 800562e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005632:	f240 80dc 	bls.w	80057ee <_printf_float+0x3aa>
 8005636:	2200      	movs	r2, #0
 8005638:	2300      	movs	r3, #0
 800563a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800563e:	f7fb fa43 	bl	8000ac8 <__aeabi_dcmpeq>
 8005642:	2800      	cmp	r0, #0
 8005644:	d033      	beq.n	80056ae <_printf_float+0x26a>
 8005646:	2301      	movs	r3, #1
 8005648:	4a41      	ldr	r2, [pc, #260]	; (8005750 <_printf_float+0x30c>)
 800564a:	4631      	mov	r1, r6
 800564c:	4628      	mov	r0, r5
 800564e:	47b8      	blx	r7
 8005650:	3001      	adds	r0, #1
 8005652:	f43f af54 	beq.w	80054fe <_printf_float+0xba>
 8005656:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800565a:	429a      	cmp	r2, r3
 800565c:	db02      	blt.n	8005664 <_printf_float+0x220>
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	07d8      	lsls	r0, r3, #31
 8005662:	d50f      	bpl.n	8005684 <_printf_float+0x240>
 8005664:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005668:	4631      	mov	r1, r6
 800566a:	4628      	mov	r0, r5
 800566c:	47b8      	blx	r7
 800566e:	3001      	adds	r0, #1
 8005670:	f43f af45 	beq.w	80054fe <_printf_float+0xba>
 8005674:	f04f 0800 	mov.w	r8, #0
 8005678:	f104 091a 	add.w	r9, r4, #26
 800567c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800567e:	3b01      	subs	r3, #1
 8005680:	4543      	cmp	r3, r8
 8005682:	dc09      	bgt.n	8005698 <_printf_float+0x254>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	079b      	lsls	r3, r3, #30
 8005688:	f100 8103 	bmi.w	8005892 <_printf_float+0x44e>
 800568c:	68e0      	ldr	r0, [r4, #12]
 800568e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005690:	4298      	cmp	r0, r3
 8005692:	bfb8      	it	lt
 8005694:	4618      	movlt	r0, r3
 8005696:	e734      	b.n	8005502 <_printf_float+0xbe>
 8005698:	2301      	movs	r3, #1
 800569a:	464a      	mov	r2, r9
 800569c:	4631      	mov	r1, r6
 800569e:	4628      	mov	r0, r5
 80056a0:	47b8      	blx	r7
 80056a2:	3001      	adds	r0, #1
 80056a4:	f43f af2b 	beq.w	80054fe <_printf_float+0xba>
 80056a8:	f108 0801 	add.w	r8, r8, #1
 80056ac:	e7e6      	b.n	800567c <_printf_float+0x238>
 80056ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	dc2b      	bgt.n	800570c <_printf_float+0x2c8>
 80056b4:	2301      	movs	r3, #1
 80056b6:	4a26      	ldr	r2, [pc, #152]	; (8005750 <_printf_float+0x30c>)
 80056b8:	4631      	mov	r1, r6
 80056ba:	4628      	mov	r0, r5
 80056bc:	47b8      	blx	r7
 80056be:	3001      	adds	r0, #1
 80056c0:	f43f af1d 	beq.w	80054fe <_printf_float+0xba>
 80056c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c6:	b923      	cbnz	r3, 80056d2 <_printf_float+0x28e>
 80056c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ca:	b913      	cbnz	r3, 80056d2 <_printf_float+0x28e>
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	07d9      	lsls	r1, r3, #31
 80056d0:	d5d8      	bpl.n	8005684 <_printf_float+0x240>
 80056d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056d6:	4631      	mov	r1, r6
 80056d8:	4628      	mov	r0, r5
 80056da:	47b8      	blx	r7
 80056dc:	3001      	adds	r0, #1
 80056de:	f43f af0e 	beq.w	80054fe <_printf_float+0xba>
 80056e2:	f04f 0900 	mov.w	r9, #0
 80056e6:	f104 0a1a 	add.w	sl, r4, #26
 80056ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ec:	425b      	negs	r3, r3
 80056ee:	454b      	cmp	r3, r9
 80056f0:	dc01      	bgt.n	80056f6 <_printf_float+0x2b2>
 80056f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056f4:	e794      	b.n	8005620 <_printf_float+0x1dc>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4652      	mov	r2, sl
 80056fa:	4631      	mov	r1, r6
 80056fc:	4628      	mov	r0, r5
 80056fe:	47b8      	blx	r7
 8005700:	3001      	adds	r0, #1
 8005702:	f43f aefc 	beq.w	80054fe <_printf_float+0xba>
 8005706:	f109 0901 	add.w	r9, r9, #1
 800570a:	e7ee      	b.n	80056ea <_printf_float+0x2a6>
 800570c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800570e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005710:	429a      	cmp	r2, r3
 8005712:	bfa8      	it	ge
 8005714:	461a      	movge	r2, r3
 8005716:	2a00      	cmp	r2, #0
 8005718:	4691      	mov	r9, r2
 800571a:	dd07      	ble.n	800572c <_printf_float+0x2e8>
 800571c:	4613      	mov	r3, r2
 800571e:	4631      	mov	r1, r6
 8005720:	4642      	mov	r2, r8
 8005722:	4628      	mov	r0, r5
 8005724:	47b8      	blx	r7
 8005726:	3001      	adds	r0, #1
 8005728:	f43f aee9 	beq.w	80054fe <_printf_float+0xba>
 800572c:	f104 031a 	add.w	r3, r4, #26
 8005730:	f04f 0b00 	mov.w	fp, #0
 8005734:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005738:	9306      	str	r3, [sp, #24]
 800573a:	e015      	b.n	8005768 <_printf_float+0x324>
 800573c:	7fefffff 	.word	0x7fefffff
 8005740:	08008904 	.word	0x08008904
 8005744:	08008900 	.word	0x08008900
 8005748:	0800890c 	.word	0x0800890c
 800574c:	08008908 	.word	0x08008908
 8005750:	08008910 	.word	0x08008910
 8005754:	2301      	movs	r3, #1
 8005756:	9a06      	ldr	r2, [sp, #24]
 8005758:	4631      	mov	r1, r6
 800575a:	4628      	mov	r0, r5
 800575c:	47b8      	blx	r7
 800575e:	3001      	adds	r0, #1
 8005760:	f43f aecd 	beq.w	80054fe <_printf_float+0xba>
 8005764:	f10b 0b01 	add.w	fp, fp, #1
 8005768:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800576c:	ebaa 0309 	sub.w	r3, sl, r9
 8005770:	455b      	cmp	r3, fp
 8005772:	dcef      	bgt.n	8005754 <_printf_float+0x310>
 8005774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005778:	429a      	cmp	r2, r3
 800577a:	44d0      	add	r8, sl
 800577c:	db15      	blt.n	80057aa <_printf_float+0x366>
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	07da      	lsls	r2, r3, #31
 8005782:	d412      	bmi.n	80057aa <_printf_float+0x366>
 8005784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005786:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005788:	eba3 020a 	sub.w	r2, r3, sl
 800578c:	eba3 0a01 	sub.w	sl, r3, r1
 8005790:	4592      	cmp	sl, r2
 8005792:	bfa8      	it	ge
 8005794:	4692      	movge	sl, r2
 8005796:	f1ba 0f00 	cmp.w	sl, #0
 800579a:	dc0e      	bgt.n	80057ba <_printf_float+0x376>
 800579c:	f04f 0800 	mov.w	r8, #0
 80057a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80057a4:	f104 091a 	add.w	r9, r4, #26
 80057a8:	e019      	b.n	80057de <_printf_float+0x39a>
 80057aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057ae:	4631      	mov	r1, r6
 80057b0:	4628      	mov	r0, r5
 80057b2:	47b8      	blx	r7
 80057b4:	3001      	adds	r0, #1
 80057b6:	d1e5      	bne.n	8005784 <_printf_float+0x340>
 80057b8:	e6a1      	b.n	80054fe <_printf_float+0xba>
 80057ba:	4653      	mov	r3, sl
 80057bc:	4642      	mov	r2, r8
 80057be:	4631      	mov	r1, r6
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b8      	blx	r7
 80057c4:	3001      	adds	r0, #1
 80057c6:	d1e9      	bne.n	800579c <_printf_float+0x358>
 80057c8:	e699      	b.n	80054fe <_printf_float+0xba>
 80057ca:	2301      	movs	r3, #1
 80057cc:	464a      	mov	r2, r9
 80057ce:	4631      	mov	r1, r6
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b8      	blx	r7
 80057d4:	3001      	adds	r0, #1
 80057d6:	f43f ae92 	beq.w	80054fe <_printf_float+0xba>
 80057da:	f108 0801 	add.w	r8, r8, #1
 80057de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	eba3 030a 	sub.w	r3, r3, sl
 80057e8:	4543      	cmp	r3, r8
 80057ea:	dcee      	bgt.n	80057ca <_printf_float+0x386>
 80057ec:	e74a      	b.n	8005684 <_printf_float+0x240>
 80057ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057f0:	2a01      	cmp	r2, #1
 80057f2:	dc01      	bgt.n	80057f8 <_printf_float+0x3b4>
 80057f4:	07db      	lsls	r3, r3, #31
 80057f6:	d53a      	bpl.n	800586e <_printf_float+0x42a>
 80057f8:	2301      	movs	r3, #1
 80057fa:	4642      	mov	r2, r8
 80057fc:	4631      	mov	r1, r6
 80057fe:	4628      	mov	r0, r5
 8005800:	47b8      	blx	r7
 8005802:	3001      	adds	r0, #1
 8005804:	f43f ae7b 	beq.w	80054fe <_printf_float+0xba>
 8005808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800580c:	4631      	mov	r1, r6
 800580e:	4628      	mov	r0, r5
 8005810:	47b8      	blx	r7
 8005812:	3001      	adds	r0, #1
 8005814:	f108 0801 	add.w	r8, r8, #1
 8005818:	f43f ae71 	beq.w	80054fe <_printf_float+0xba>
 800581c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800581e:	2200      	movs	r2, #0
 8005820:	f103 3aff 	add.w	sl, r3, #4294967295
 8005824:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005828:	2300      	movs	r3, #0
 800582a:	f7fb f94d 	bl	8000ac8 <__aeabi_dcmpeq>
 800582e:	b9c8      	cbnz	r0, 8005864 <_printf_float+0x420>
 8005830:	4653      	mov	r3, sl
 8005832:	4642      	mov	r2, r8
 8005834:	4631      	mov	r1, r6
 8005836:	4628      	mov	r0, r5
 8005838:	47b8      	blx	r7
 800583a:	3001      	adds	r0, #1
 800583c:	d10e      	bne.n	800585c <_printf_float+0x418>
 800583e:	e65e      	b.n	80054fe <_printf_float+0xba>
 8005840:	2301      	movs	r3, #1
 8005842:	4652      	mov	r2, sl
 8005844:	4631      	mov	r1, r6
 8005846:	4628      	mov	r0, r5
 8005848:	47b8      	blx	r7
 800584a:	3001      	adds	r0, #1
 800584c:	f43f ae57 	beq.w	80054fe <_printf_float+0xba>
 8005850:	f108 0801 	add.w	r8, r8, #1
 8005854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005856:	3b01      	subs	r3, #1
 8005858:	4543      	cmp	r3, r8
 800585a:	dcf1      	bgt.n	8005840 <_printf_float+0x3fc>
 800585c:	464b      	mov	r3, r9
 800585e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005862:	e6de      	b.n	8005622 <_printf_float+0x1de>
 8005864:	f04f 0800 	mov.w	r8, #0
 8005868:	f104 0a1a 	add.w	sl, r4, #26
 800586c:	e7f2      	b.n	8005854 <_printf_float+0x410>
 800586e:	2301      	movs	r3, #1
 8005870:	e7df      	b.n	8005832 <_printf_float+0x3ee>
 8005872:	2301      	movs	r3, #1
 8005874:	464a      	mov	r2, r9
 8005876:	4631      	mov	r1, r6
 8005878:	4628      	mov	r0, r5
 800587a:	47b8      	blx	r7
 800587c:	3001      	adds	r0, #1
 800587e:	f43f ae3e 	beq.w	80054fe <_printf_float+0xba>
 8005882:	f108 0801 	add.w	r8, r8, #1
 8005886:	68e3      	ldr	r3, [r4, #12]
 8005888:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800588a:	1a9b      	subs	r3, r3, r2
 800588c:	4543      	cmp	r3, r8
 800588e:	dcf0      	bgt.n	8005872 <_printf_float+0x42e>
 8005890:	e6fc      	b.n	800568c <_printf_float+0x248>
 8005892:	f04f 0800 	mov.w	r8, #0
 8005896:	f104 0919 	add.w	r9, r4, #25
 800589a:	e7f4      	b.n	8005886 <_printf_float+0x442>
 800589c:	2900      	cmp	r1, #0
 800589e:	f43f ae8b 	beq.w	80055b8 <_printf_float+0x174>
 80058a2:	2300      	movs	r3, #0
 80058a4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80058a8:	ab09      	add	r3, sp, #36	; 0x24
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	ec49 8b10 	vmov	d0, r8, r9
 80058b0:	6022      	str	r2, [r4, #0]
 80058b2:	f8cd a004 	str.w	sl, [sp, #4]
 80058b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058ba:	4628      	mov	r0, r5
 80058bc:	f7ff fd2e 	bl	800531c <__cvt>
 80058c0:	4680      	mov	r8, r0
 80058c2:	e648      	b.n	8005556 <_printf_float+0x112>

080058c4 <_printf_common>:
 80058c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c8:	4691      	mov	r9, r2
 80058ca:	461f      	mov	r7, r3
 80058cc:	688a      	ldr	r2, [r1, #8]
 80058ce:	690b      	ldr	r3, [r1, #16]
 80058d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058d4:	4293      	cmp	r3, r2
 80058d6:	bfb8      	it	lt
 80058d8:	4613      	movlt	r3, r2
 80058da:	f8c9 3000 	str.w	r3, [r9]
 80058de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058e2:	4606      	mov	r6, r0
 80058e4:	460c      	mov	r4, r1
 80058e6:	b112      	cbz	r2, 80058ee <_printf_common+0x2a>
 80058e8:	3301      	adds	r3, #1
 80058ea:	f8c9 3000 	str.w	r3, [r9]
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	0699      	lsls	r1, r3, #26
 80058f2:	bf42      	ittt	mi
 80058f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80058f8:	3302      	addmi	r3, #2
 80058fa:	f8c9 3000 	strmi.w	r3, [r9]
 80058fe:	6825      	ldr	r5, [r4, #0]
 8005900:	f015 0506 	ands.w	r5, r5, #6
 8005904:	d107      	bne.n	8005916 <_printf_common+0x52>
 8005906:	f104 0a19 	add.w	sl, r4, #25
 800590a:	68e3      	ldr	r3, [r4, #12]
 800590c:	f8d9 2000 	ldr.w	r2, [r9]
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	42ab      	cmp	r3, r5
 8005914:	dc28      	bgt.n	8005968 <_printf_common+0xa4>
 8005916:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800591a:	6822      	ldr	r2, [r4, #0]
 800591c:	3300      	adds	r3, #0
 800591e:	bf18      	it	ne
 8005920:	2301      	movne	r3, #1
 8005922:	0692      	lsls	r2, r2, #26
 8005924:	d42d      	bmi.n	8005982 <_printf_common+0xbe>
 8005926:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800592a:	4639      	mov	r1, r7
 800592c:	4630      	mov	r0, r6
 800592e:	47c0      	blx	r8
 8005930:	3001      	adds	r0, #1
 8005932:	d020      	beq.n	8005976 <_printf_common+0xb2>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	68e5      	ldr	r5, [r4, #12]
 8005938:	f8d9 2000 	ldr.w	r2, [r9]
 800593c:	f003 0306 	and.w	r3, r3, #6
 8005940:	2b04      	cmp	r3, #4
 8005942:	bf08      	it	eq
 8005944:	1aad      	subeq	r5, r5, r2
 8005946:	68a3      	ldr	r3, [r4, #8]
 8005948:	6922      	ldr	r2, [r4, #16]
 800594a:	bf0c      	ite	eq
 800594c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005950:	2500      	movne	r5, #0
 8005952:	4293      	cmp	r3, r2
 8005954:	bfc4      	itt	gt
 8005956:	1a9b      	subgt	r3, r3, r2
 8005958:	18ed      	addgt	r5, r5, r3
 800595a:	f04f 0900 	mov.w	r9, #0
 800595e:	341a      	adds	r4, #26
 8005960:	454d      	cmp	r5, r9
 8005962:	d11a      	bne.n	800599a <_printf_common+0xd6>
 8005964:	2000      	movs	r0, #0
 8005966:	e008      	b.n	800597a <_printf_common+0xb6>
 8005968:	2301      	movs	r3, #1
 800596a:	4652      	mov	r2, sl
 800596c:	4639      	mov	r1, r7
 800596e:	4630      	mov	r0, r6
 8005970:	47c0      	blx	r8
 8005972:	3001      	adds	r0, #1
 8005974:	d103      	bne.n	800597e <_printf_common+0xba>
 8005976:	f04f 30ff 	mov.w	r0, #4294967295
 800597a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800597e:	3501      	adds	r5, #1
 8005980:	e7c3      	b.n	800590a <_printf_common+0x46>
 8005982:	18e1      	adds	r1, r4, r3
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	2030      	movs	r0, #48	; 0x30
 8005988:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800598c:	4422      	add	r2, r4
 800598e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005992:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005996:	3302      	adds	r3, #2
 8005998:	e7c5      	b.n	8005926 <_printf_common+0x62>
 800599a:	2301      	movs	r3, #1
 800599c:	4622      	mov	r2, r4
 800599e:	4639      	mov	r1, r7
 80059a0:	4630      	mov	r0, r6
 80059a2:	47c0      	blx	r8
 80059a4:	3001      	adds	r0, #1
 80059a6:	d0e6      	beq.n	8005976 <_printf_common+0xb2>
 80059a8:	f109 0901 	add.w	r9, r9, #1
 80059ac:	e7d8      	b.n	8005960 <_printf_common+0x9c>
	...

080059b0 <_printf_i>:
 80059b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80059b8:	460c      	mov	r4, r1
 80059ba:	7e09      	ldrb	r1, [r1, #24]
 80059bc:	b085      	sub	sp, #20
 80059be:	296e      	cmp	r1, #110	; 0x6e
 80059c0:	4617      	mov	r7, r2
 80059c2:	4606      	mov	r6, r0
 80059c4:	4698      	mov	r8, r3
 80059c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059c8:	f000 80b3 	beq.w	8005b32 <_printf_i+0x182>
 80059cc:	d822      	bhi.n	8005a14 <_printf_i+0x64>
 80059ce:	2963      	cmp	r1, #99	; 0x63
 80059d0:	d036      	beq.n	8005a40 <_printf_i+0x90>
 80059d2:	d80a      	bhi.n	80059ea <_printf_i+0x3a>
 80059d4:	2900      	cmp	r1, #0
 80059d6:	f000 80b9 	beq.w	8005b4c <_printf_i+0x19c>
 80059da:	2958      	cmp	r1, #88	; 0x58
 80059dc:	f000 8083 	beq.w	8005ae6 <_printf_i+0x136>
 80059e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80059e8:	e032      	b.n	8005a50 <_printf_i+0xa0>
 80059ea:	2964      	cmp	r1, #100	; 0x64
 80059ec:	d001      	beq.n	80059f2 <_printf_i+0x42>
 80059ee:	2969      	cmp	r1, #105	; 0x69
 80059f0:	d1f6      	bne.n	80059e0 <_printf_i+0x30>
 80059f2:	6820      	ldr	r0, [r4, #0]
 80059f4:	6813      	ldr	r3, [r2, #0]
 80059f6:	0605      	lsls	r5, r0, #24
 80059f8:	f103 0104 	add.w	r1, r3, #4
 80059fc:	d52a      	bpl.n	8005a54 <_printf_i+0xa4>
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6011      	str	r1, [r2, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	da03      	bge.n	8005a0e <_printf_i+0x5e>
 8005a06:	222d      	movs	r2, #45	; 0x2d
 8005a08:	425b      	negs	r3, r3
 8005a0a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005a0e:	486f      	ldr	r0, [pc, #444]	; (8005bcc <_printf_i+0x21c>)
 8005a10:	220a      	movs	r2, #10
 8005a12:	e039      	b.n	8005a88 <_printf_i+0xd8>
 8005a14:	2973      	cmp	r1, #115	; 0x73
 8005a16:	f000 809d 	beq.w	8005b54 <_printf_i+0x1a4>
 8005a1a:	d808      	bhi.n	8005a2e <_printf_i+0x7e>
 8005a1c:	296f      	cmp	r1, #111	; 0x6f
 8005a1e:	d020      	beq.n	8005a62 <_printf_i+0xb2>
 8005a20:	2970      	cmp	r1, #112	; 0x70
 8005a22:	d1dd      	bne.n	80059e0 <_printf_i+0x30>
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	f043 0320 	orr.w	r3, r3, #32
 8005a2a:	6023      	str	r3, [r4, #0]
 8005a2c:	e003      	b.n	8005a36 <_printf_i+0x86>
 8005a2e:	2975      	cmp	r1, #117	; 0x75
 8005a30:	d017      	beq.n	8005a62 <_printf_i+0xb2>
 8005a32:	2978      	cmp	r1, #120	; 0x78
 8005a34:	d1d4      	bne.n	80059e0 <_printf_i+0x30>
 8005a36:	2378      	movs	r3, #120	; 0x78
 8005a38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a3c:	4864      	ldr	r0, [pc, #400]	; (8005bd0 <_printf_i+0x220>)
 8005a3e:	e055      	b.n	8005aec <_printf_i+0x13c>
 8005a40:	6813      	ldr	r3, [r2, #0]
 8005a42:	1d19      	adds	r1, r3, #4
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6011      	str	r1, [r2, #0]
 8005a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a50:	2301      	movs	r3, #1
 8005a52:	e08c      	b.n	8005b6e <_printf_i+0x1be>
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6011      	str	r1, [r2, #0]
 8005a58:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a5c:	bf18      	it	ne
 8005a5e:	b21b      	sxthne	r3, r3
 8005a60:	e7cf      	b.n	8005a02 <_printf_i+0x52>
 8005a62:	6813      	ldr	r3, [r2, #0]
 8005a64:	6825      	ldr	r5, [r4, #0]
 8005a66:	1d18      	adds	r0, r3, #4
 8005a68:	6010      	str	r0, [r2, #0]
 8005a6a:	0628      	lsls	r0, r5, #24
 8005a6c:	d501      	bpl.n	8005a72 <_printf_i+0xc2>
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	e002      	b.n	8005a78 <_printf_i+0xc8>
 8005a72:	0668      	lsls	r0, r5, #25
 8005a74:	d5fb      	bpl.n	8005a6e <_printf_i+0xbe>
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	4854      	ldr	r0, [pc, #336]	; (8005bcc <_printf_i+0x21c>)
 8005a7a:	296f      	cmp	r1, #111	; 0x6f
 8005a7c:	bf14      	ite	ne
 8005a7e:	220a      	movne	r2, #10
 8005a80:	2208      	moveq	r2, #8
 8005a82:	2100      	movs	r1, #0
 8005a84:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a88:	6865      	ldr	r5, [r4, #4]
 8005a8a:	60a5      	str	r5, [r4, #8]
 8005a8c:	2d00      	cmp	r5, #0
 8005a8e:	f2c0 8095 	blt.w	8005bbc <_printf_i+0x20c>
 8005a92:	6821      	ldr	r1, [r4, #0]
 8005a94:	f021 0104 	bic.w	r1, r1, #4
 8005a98:	6021      	str	r1, [r4, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d13d      	bne.n	8005b1a <_printf_i+0x16a>
 8005a9e:	2d00      	cmp	r5, #0
 8005aa0:	f040 808e 	bne.w	8005bc0 <_printf_i+0x210>
 8005aa4:	4665      	mov	r5, ip
 8005aa6:	2a08      	cmp	r2, #8
 8005aa8:	d10b      	bne.n	8005ac2 <_printf_i+0x112>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	07db      	lsls	r3, r3, #31
 8005aae:	d508      	bpl.n	8005ac2 <_printf_i+0x112>
 8005ab0:	6923      	ldr	r3, [r4, #16]
 8005ab2:	6862      	ldr	r2, [r4, #4]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	bfde      	ittt	le
 8005ab8:	2330      	movle	r3, #48	; 0x30
 8005aba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005abe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ac2:	ebac 0305 	sub.w	r3, ip, r5
 8005ac6:	6123      	str	r3, [r4, #16]
 8005ac8:	f8cd 8000 	str.w	r8, [sp]
 8005acc:	463b      	mov	r3, r7
 8005ace:	aa03      	add	r2, sp, #12
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	f7ff fef6 	bl	80058c4 <_printf_common>
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d14d      	bne.n	8005b78 <_printf_i+0x1c8>
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae0:	b005      	add	sp, #20
 8005ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ae6:	4839      	ldr	r0, [pc, #228]	; (8005bcc <_printf_i+0x21c>)
 8005ae8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005aec:	6813      	ldr	r3, [r2, #0]
 8005aee:	6821      	ldr	r1, [r4, #0]
 8005af0:	1d1d      	adds	r5, r3, #4
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6015      	str	r5, [r2, #0]
 8005af6:	060a      	lsls	r2, r1, #24
 8005af8:	d50b      	bpl.n	8005b12 <_printf_i+0x162>
 8005afa:	07ca      	lsls	r2, r1, #31
 8005afc:	bf44      	itt	mi
 8005afe:	f041 0120 	orrmi.w	r1, r1, #32
 8005b02:	6021      	strmi	r1, [r4, #0]
 8005b04:	b91b      	cbnz	r3, 8005b0e <_printf_i+0x15e>
 8005b06:	6822      	ldr	r2, [r4, #0]
 8005b08:	f022 0220 	bic.w	r2, r2, #32
 8005b0c:	6022      	str	r2, [r4, #0]
 8005b0e:	2210      	movs	r2, #16
 8005b10:	e7b7      	b.n	8005a82 <_printf_i+0xd2>
 8005b12:	064d      	lsls	r5, r1, #25
 8005b14:	bf48      	it	mi
 8005b16:	b29b      	uxthmi	r3, r3
 8005b18:	e7ef      	b.n	8005afa <_printf_i+0x14a>
 8005b1a:	4665      	mov	r5, ip
 8005b1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b20:	fb02 3311 	mls	r3, r2, r1, r3
 8005b24:	5cc3      	ldrb	r3, [r0, r3]
 8005b26:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	2900      	cmp	r1, #0
 8005b2e:	d1f5      	bne.n	8005b1c <_printf_i+0x16c>
 8005b30:	e7b9      	b.n	8005aa6 <_printf_i+0xf6>
 8005b32:	6813      	ldr	r3, [r2, #0]
 8005b34:	6825      	ldr	r5, [r4, #0]
 8005b36:	6961      	ldr	r1, [r4, #20]
 8005b38:	1d18      	adds	r0, r3, #4
 8005b3a:	6010      	str	r0, [r2, #0]
 8005b3c:	0628      	lsls	r0, r5, #24
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	d501      	bpl.n	8005b46 <_printf_i+0x196>
 8005b42:	6019      	str	r1, [r3, #0]
 8005b44:	e002      	b.n	8005b4c <_printf_i+0x19c>
 8005b46:	066a      	lsls	r2, r5, #25
 8005b48:	d5fb      	bpl.n	8005b42 <_printf_i+0x192>
 8005b4a:	8019      	strh	r1, [r3, #0]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	6123      	str	r3, [r4, #16]
 8005b50:	4665      	mov	r5, ip
 8005b52:	e7b9      	b.n	8005ac8 <_printf_i+0x118>
 8005b54:	6813      	ldr	r3, [r2, #0]
 8005b56:	1d19      	adds	r1, r3, #4
 8005b58:	6011      	str	r1, [r2, #0]
 8005b5a:	681d      	ldr	r5, [r3, #0]
 8005b5c:	6862      	ldr	r2, [r4, #4]
 8005b5e:	2100      	movs	r1, #0
 8005b60:	4628      	mov	r0, r5
 8005b62:	f7fa fb3d 	bl	80001e0 <memchr>
 8005b66:	b108      	cbz	r0, 8005b6c <_printf_i+0x1bc>
 8005b68:	1b40      	subs	r0, r0, r5
 8005b6a:	6060      	str	r0, [r4, #4]
 8005b6c:	6863      	ldr	r3, [r4, #4]
 8005b6e:	6123      	str	r3, [r4, #16]
 8005b70:	2300      	movs	r3, #0
 8005b72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b76:	e7a7      	b.n	8005ac8 <_printf_i+0x118>
 8005b78:	6923      	ldr	r3, [r4, #16]
 8005b7a:	462a      	mov	r2, r5
 8005b7c:	4639      	mov	r1, r7
 8005b7e:	4630      	mov	r0, r6
 8005b80:	47c0      	blx	r8
 8005b82:	3001      	adds	r0, #1
 8005b84:	d0aa      	beq.n	8005adc <_printf_i+0x12c>
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	079b      	lsls	r3, r3, #30
 8005b8a:	d413      	bmi.n	8005bb4 <_printf_i+0x204>
 8005b8c:	68e0      	ldr	r0, [r4, #12]
 8005b8e:	9b03      	ldr	r3, [sp, #12]
 8005b90:	4298      	cmp	r0, r3
 8005b92:	bfb8      	it	lt
 8005b94:	4618      	movlt	r0, r3
 8005b96:	e7a3      	b.n	8005ae0 <_printf_i+0x130>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	464a      	mov	r2, r9
 8005b9c:	4639      	mov	r1, r7
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	47c0      	blx	r8
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	d09a      	beq.n	8005adc <_printf_i+0x12c>
 8005ba6:	3501      	adds	r5, #1
 8005ba8:	68e3      	ldr	r3, [r4, #12]
 8005baa:	9a03      	ldr	r2, [sp, #12]
 8005bac:	1a9b      	subs	r3, r3, r2
 8005bae:	42ab      	cmp	r3, r5
 8005bb0:	dcf2      	bgt.n	8005b98 <_printf_i+0x1e8>
 8005bb2:	e7eb      	b.n	8005b8c <_printf_i+0x1dc>
 8005bb4:	2500      	movs	r5, #0
 8005bb6:	f104 0919 	add.w	r9, r4, #25
 8005bba:	e7f5      	b.n	8005ba8 <_printf_i+0x1f8>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1ac      	bne.n	8005b1a <_printf_i+0x16a>
 8005bc0:	7803      	ldrb	r3, [r0, #0]
 8005bc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bca:	e76c      	b.n	8005aa6 <_printf_i+0xf6>
 8005bcc:	08008912 	.word	0x08008912
 8005bd0:	08008923 	.word	0x08008923

08005bd4 <siprintf>:
 8005bd4:	b40e      	push	{r1, r2, r3}
 8005bd6:	b500      	push	{lr}
 8005bd8:	b09c      	sub	sp, #112	; 0x70
 8005bda:	ab1d      	add	r3, sp, #116	; 0x74
 8005bdc:	9002      	str	r0, [sp, #8]
 8005bde:	9006      	str	r0, [sp, #24]
 8005be0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005be4:	4809      	ldr	r0, [pc, #36]	; (8005c0c <siprintf+0x38>)
 8005be6:	9107      	str	r1, [sp, #28]
 8005be8:	9104      	str	r1, [sp, #16]
 8005bea:	4909      	ldr	r1, [pc, #36]	; (8005c10 <siprintf+0x3c>)
 8005bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bf0:	9105      	str	r1, [sp, #20]
 8005bf2:	6800      	ldr	r0, [r0, #0]
 8005bf4:	9301      	str	r3, [sp, #4]
 8005bf6:	a902      	add	r1, sp, #8
 8005bf8:	f002 fce0 	bl	80085bc <_svfiprintf_r>
 8005bfc:	9b02      	ldr	r3, [sp, #8]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	b01c      	add	sp, #112	; 0x70
 8005c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c08:	b003      	add	sp, #12
 8005c0a:	4770      	bx	lr
 8005c0c:	20000010 	.word	0x20000010
 8005c10:	ffff0208 	.word	0xffff0208

08005c14 <sulp>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	4604      	mov	r4, r0
 8005c18:	460d      	mov	r5, r1
 8005c1a:	ec45 4b10 	vmov	d0, r4, r5
 8005c1e:	4616      	mov	r6, r2
 8005c20:	f002 fa88 	bl	8008134 <__ulp>
 8005c24:	ec51 0b10 	vmov	r0, r1, d0
 8005c28:	b17e      	cbz	r6, 8005c4a <sulp+0x36>
 8005c2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005c2e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	dd09      	ble.n	8005c4a <sulp+0x36>
 8005c36:	051b      	lsls	r3, r3, #20
 8005c38:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005c3c:	2400      	movs	r4, #0
 8005c3e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005c42:	4622      	mov	r2, r4
 8005c44:	462b      	mov	r3, r5
 8005c46:	f7fa fcd7 	bl	80005f8 <__aeabi_dmul>
 8005c4a:	bd70      	pop	{r4, r5, r6, pc}
 8005c4c:	0000      	movs	r0, r0
	...

08005c50 <_strtod_l>:
 8005c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c54:	461f      	mov	r7, r3
 8005c56:	b0a1      	sub	sp, #132	; 0x84
 8005c58:	2300      	movs	r3, #0
 8005c5a:	4681      	mov	r9, r0
 8005c5c:	4638      	mov	r0, r7
 8005c5e:	460e      	mov	r6, r1
 8005c60:	9217      	str	r2, [sp, #92]	; 0x5c
 8005c62:	931c      	str	r3, [sp, #112]	; 0x70
 8005c64:	f001 ff66 	bl	8007b34 <__localeconv_l>
 8005c68:	4680      	mov	r8, r0
 8005c6a:	6800      	ldr	r0, [r0, #0]
 8005c6c:	f7fa fab0 	bl	80001d0 <strlen>
 8005c70:	f04f 0a00 	mov.w	sl, #0
 8005c74:	4604      	mov	r4, r0
 8005c76:	f04f 0b00 	mov.w	fp, #0
 8005c7a:	961b      	str	r6, [sp, #108]	; 0x6c
 8005c7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c7e:	781a      	ldrb	r2, [r3, #0]
 8005c80:	2a0d      	cmp	r2, #13
 8005c82:	d832      	bhi.n	8005cea <_strtod_l+0x9a>
 8005c84:	2a09      	cmp	r2, #9
 8005c86:	d236      	bcs.n	8005cf6 <_strtod_l+0xa6>
 8005c88:	2a00      	cmp	r2, #0
 8005c8a:	d03e      	beq.n	8005d0a <_strtod_l+0xba>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	930d      	str	r3, [sp, #52]	; 0x34
 8005c90:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005c92:	782b      	ldrb	r3, [r5, #0]
 8005c94:	2b30      	cmp	r3, #48	; 0x30
 8005c96:	f040 80ac 	bne.w	8005df2 <_strtod_l+0x1a2>
 8005c9a:	786b      	ldrb	r3, [r5, #1]
 8005c9c:	2b58      	cmp	r3, #88	; 0x58
 8005c9e:	d001      	beq.n	8005ca4 <_strtod_l+0x54>
 8005ca0:	2b78      	cmp	r3, #120	; 0x78
 8005ca2:	d167      	bne.n	8005d74 <_strtod_l+0x124>
 8005ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ca6:	9301      	str	r3, [sp, #4]
 8005ca8:	ab1c      	add	r3, sp, #112	; 0x70
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	9702      	str	r7, [sp, #8]
 8005cae:	ab1d      	add	r3, sp, #116	; 0x74
 8005cb0:	4a88      	ldr	r2, [pc, #544]	; (8005ed4 <_strtod_l+0x284>)
 8005cb2:	a91b      	add	r1, sp, #108	; 0x6c
 8005cb4:	4648      	mov	r0, r9
 8005cb6:	f001 fc66 	bl	8007586 <__gethex>
 8005cba:	f010 0407 	ands.w	r4, r0, #7
 8005cbe:	4606      	mov	r6, r0
 8005cc0:	d005      	beq.n	8005cce <_strtod_l+0x7e>
 8005cc2:	2c06      	cmp	r4, #6
 8005cc4:	d12b      	bne.n	8005d1e <_strtod_l+0xce>
 8005cc6:	3501      	adds	r5, #1
 8005cc8:	2300      	movs	r3, #0
 8005cca:	951b      	str	r5, [sp, #108]	; 0x6c
 8005ccc:	930d      	str	r3, [sp, #52]	; 0x34
 8005cce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f040 859a 	bne.w	800680a <_strtod_l+0xbba>
 8005cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cd8:	b1e3      	cbz	r3, 8005d14 <_strtod_l+0xc4>
 8005cda:	4652      	mov	r2, sl
 8005cdc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005ce0:	ec43 2b10 	vmov	d0, r2, r3
 8005ce4:	b021      	add	sp, #132	; 0x84
 8005ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cea:	2a2b      	cmp	r2, #43	; 0x2b
 8005cec:	d015      	beq.n	8005d1a <_strtod_l+0xca>
 8005cee:	2a2d      	cmp	r2, #45	; 0x2d
 8005cf0:	d004      	beq.n	8005cfc <_strtod_l+0xac>
 8005cf2:	2a20      	cmp	r2, #32
 8005cf4:	d1ca      	bne.n	8005c8c <_strtod_l+0x3c>
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	931b      	str	r3, [sp, #108]	; 0x6c
 8005cfa:	e7bf      	b.n	8005c7c <_strtod_l+0x2c>
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	920d      	str	r2, [sp, #52]	; 0x34
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	921b      	str	r2, [sp, #108]	; 0x6c
 8005d04:	785b      	ldrb	r3, [r3, #1]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1c2      	bne.n	8005c90 <_strtod_l+0x40>
 8005d0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d0c:	961b      	str	r6, [sp, #108]	; 0x6c
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f040 8579 	bne.w	8006806 <_strtod_l+0xbb6>
 8005d14:	4652      	mov	r2, sl
 8005d16:	465b      	mov	r3, fp
 8005d18:	e7e2      	b.n	8005ce0 <_strtod_l+0x90>
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	e7ef      	b.n	8005cfe <_strtod_l+0xae>
 8005d1e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005d20:	b13a      	cbz	r2, 8005d32 <_strtod_l+0xe2>
 8005d22:	2135      	movs	r1, #53	; 0x35
 8005d24:	a81e      	add	r0, sp, #120	; 0x78
 8005d26:	f002 fafd 	bl	8008324 <__copybits>
 8005d2a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005d2c:	4648      	mov	r0, r9
 8005d2e:	f001 ff6a 	bl	8007c06 <_Bfree>
 8005d32:	3c01      	subs	r4, #1
 8005d34:	2c04      	cmp	r4, #4
 8005d36:	d806      	bhi.n	8005d46 <_strtod_l+0xf6>
 8005d38:	e8df f004 	tbb	[pc, r4]
 8005d3c:	1714030a 	.word	0x1714030a
 8005d40:	0a          	.byte	0x0a
 8005d41:	00          	.byte	0x00
 8005d42:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005d46:	0730      	lsls	r0, r6, #28
 8005d48:	d5c1      	bpl.n	8005cce <_strtod_l+0x7e>
 8005d4a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005d4e:	e7be      	b.n	8005cce <_strtod_l+0x7e>
 8005d50:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005d54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005d56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d5a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005d5e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005d62:	e7f0      	b.n	8005d46 <_strtod_l+0xf6>
 8005d64:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005ed8 <_strtod_l+0x288>
 8005d68:	e7ed      	b.n	8005d46 <_strtod_l+0xf6>
 8005d6a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005d6e:	f04f 3aff 	mov.w	sl, #4294967295
 8005d72:	e7e8      	b.n	8005d46 <_strtod_l+0xf6>
 8005d74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d76:	1c5a      	adds	r2, r3, #1
 8005d78:	921b      	str	r2, [sp, #108]	; 0x6c
 8005d7a:	785b      	ldrb	r3, [r3, #1]
 8005d7c:	2b30      	cmp	r3, #48	; 0x30
 8005d7e:	d0f9      	beq.n	8005d74 <_strtod_l+0x124>
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0a4      	beq.n	8005cce <_strtod_l+0x7e>
 8005d84:	2301      	movs	r3, #1
 8005d86:	2500      	movs	r5, #0
 8005d88:	9306      	str	r3, [sp, #24]
 8005d8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d8c:	9308      	str	r3, [sp, #32]
 8005d8e:	9507      	str	r5, [sp, #28]
 8005d90:	9505      	str	r5, [sp, #20]
 8005d92:	220a      	movs	r2, #10
 8005d94:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005d96:	7807      	ldrb	r7, [r0, #0]
 8005d98:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005d9c:	b2d9      	uxtb	r1, r3
 8005d9e:	2909      	cmp	r1, #9
 8005da0:	d929      	bls.n	8005df6 <_strtod_l+0x1a6>
 8005da2:	4622      	mov	r2, r4
 8005da4:	f8d8 1000 	ldr.w	r1, [r8]
 8005da8:	f002 fd10 	bl	80087cc <strncmp>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d031      	beq.n	8005e14 <_strtod_l+0x1c4>
 8005db0:	2000      	movs	r0, #0
 8005db2:	9c05      	ldr	r4, [sp, #20]
 8005db4:	9004      	str	r0, [sp, #16]
 8005db6:	463b      	mov	r3, r7
 8005db8:	4602      	mov	r2, r0
 8005dba:	2b65      	cmp	r3, #101	; 0x65
 8005dbc:	d001      	beq.n	8005dc2 <_strtod_l+0x172>
 8005dbe:	2b45      	cmp	r3, #69	; 0x45
 8005dc0:	d114      	bne.n	8005dec <_strtod_l+0x19c>
 8005dc2:	b924      	cbnz	r4, 8005dce <_strtod_l+0x17e>
 8005dc4:	b910      	cbnz	r0, 8005dcc <_strtod_l+0x17c>
 8005dc6:	9b06      	ldr	r3, [sp, #24]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d09e      	beq.n	8005d0a <_strtod_l+0xba>
 8005dcc:	2400      	movs	r4, #0
 8005dce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005dd0:	1c73      	adds	r3, r6, #1
 8005dd2:	931b      	str	r3, [sp, #108]	; 0x6c
 8005dd4:	7873      	ldrb	r3, [r6, #1]
 8005dd6:	2b2b      	cmp	r3, #43	; 0x2b
 8005dd8:	d078      	beq.n	8005ecc <_strtod_l+0x27c>
 8005dda:	2b2d      	cmp	r3, #45	; 0x2d
 8005ddc:	d070      	beq.n	8005ec0 <_strtod_l+0x270>
 8005dde:	f04f 0c00 	mov.w	ip, #0
 8005de2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005de6:	2f09      	cmp	r7, #9
 8005de8:	d97c      	bls.n	8005ee4 <_strtod_l+0x294>
 8005dea:	961b      	str	r6, [sp, #108]	; 0x6c
 8005dec:	f04f 0e00 	mov.w	lr, #0
 8005df0:	e09a      	b.n	8005f28 <_strtod_l+0x2d8>
 8005df2:	2300      	movs	r3, #0
 8005df4:	e7c7      	b.n	8005d86 <_strtod_l+0x136>
 8005df6:	9905      	ldr	r1, [sp, #20]
 8005df8:	2908      	cmp	r1, #8
 8005dfa:	bfdd      	ittte	le
 8005dfc:	9907      	ldrle	r1, [sp, #28]
 8005dfe:	fb02 3301 	mlale	r3, r2, r1, r3
 8005e02:	9307      	strle	r3, [sp, #28]
 8005e04:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005e08:	9b05      	ldr	r3, [sp, #20]
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	9305      	str	r3, [sp, #20]
 8005e10:	901b      	str	r0, [sp, #108]	; 0x6c
 8005e12:	e7bf      	b.n	8005d94 <_strtod_l+0x144>
 8005e14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e16:	191a      	adds	r2, r3, r4
 8005e18:	921b      	str	r2, [sp, #108]	; 0x6c
 8005e1a:	9a05      	ldr	r2, [sp, #20]
 8005e1c:	5d1b      	ldrb	r3, [r3, r4]
 8005e1e:	2a00      	cmp	r2, #0
 8005e20:	d037      	beq.n	8005e92 <_strtod_l+0x242>
 8005e22:	9c05      	ldr	r4, [sp, #20]
 8005e24:	4602      	mov	r2, r0
 8005e26:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005e2a:	2909      	cmp	r1, #9
 8005e2c:	d913      	bls.n	8005e56 <_strtod_l+0x206>
 8005e2e:	2101      	movs	r1, #1
 8005e30:	9104      	str	r1, [sp, #16]
 8005e32:	e7c2      	b.n	8005dba <_strtod_l+0x16a>
 8005e34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	921b      	str	r2, [sp, #108]	; 0x6c
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	2b30      	cmp	r3, #48	; 0x30
 8005e40:	d0f8      	beq.n	8005e34 <_strtod_l+0x1e4>
 8005e42:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005e46:	2a08      	cmp	r2, #8
 8005e48:	f200 84e4 	bhi.w	8006814 <_strtod_l+0xbc4>
 8005e4c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005e4e:	9208      	str	r2, [sp, #32]
 8005e50:	4602      	mov	r2, r0
 8005e52:	2000      	movs	r0, #0
 8005e54:	4604      	mov	r4, r0
 8005e56:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005e5a:	f100 0101 	add.w	r1, r0, #1
 8005e5e:	d012      	beq.n	8005e86 <_strtod_l+0x236>
 8005e60:	440a      	add	r2, r1
 8005e62:	eb00 0c04 	add.w	ip, r0, r4
 8005e66:	4621      	mov	r1, r4
 8005e68:	270a      	movs	r7, #10
 8005e6a:	458c      	cmp	ip, r1
 8005e6c:	d113      	bne.n	8005e96 <_strtod_l+0x246>
 8005e6e:	1821      	adds	r1, r4, r0
 8005e70:	2908      	cmp	r1, #8
 8005e72:	f104 0401 	add.w	r4, r4, #1
 8005e76:	4404      	add	r4, r0
 8005e78:	dc19      	bgt.n	8005eae <_strtod_l+0x25e>
 8005e7a:	9b07      	ldr	r3, [sp, #28]
 8005e7c:	210a      	movs	r1, #10
 8005e7e:	fb01 e303 	mla	r3, r1, r3, lr
 8005e82:	9307      	str	r3, [sp, #28]
 8005e84:	2100      	movs	r1, #0
 8005e86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e88:	1c58      	adds	r0, r3, #1
 8005e8a:	901b      	str	r0, [sp, #108]	; 0x6c
 8005e8c:	785b      	ldrb	r3, [r3, #1]
 8005e8e:	4608      	mov	r0, r1
 8005e90:	e7c9      	b.n	8005e26 <_strtod_l+0x1d6>
 8005e92:	9805      	ldr	r0, [sp, #20]
 8005e94:	e7d3      	b.n	8005e3e <_strtod_l+0x1ee>
 8005e96:	2908      	cmp	r1, #8
 8005e98:	f101 0101 	add.w	r1, r1, #1
 8005e9c:	dc03      	bgt.n	8005ea6 <_strtod_l+0x256>
 8005e9e:	9b07      	ldr	r3, [sp, #28]
 8005ea0:	437b      	muls	r3, r7
 8005ea2:	9307      	str	r3, [sp, #28]
 8005ea4:	e7e1      	b.n	8005e6a <_strtod_l+0x21a>
 8005ea6:	2910      	cmp	r1, #16
 8005ea8:	bfd8      	it	le
 8005eaa:	437d      	mulle	r5, r7
 8005eac:	e7dd      	b.n	8005e6a <_strtod_l+0x21a>
 8005eae:	2c10      	cmp	r4, #16
 8005eb0:	bfdc      	itt	le
 8005eb2:	210a      	movle	r1, #10
 8005eb4:	fb01 e505 	mlale	r5, r1, r5, lr
 8005eb8:	e7e4      	b.n	8005e84 <_strtod_l+0x234>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	9304      	str	r3, [sp, #16]
 8005ebe:	e781      	b.n	8005dc4 <_strtod_l+0x174>
 8005ec0:	f04f 0c01 	mov.w	ip, #1
 8005ec4:	1cb3      	adds	r3, r6, #2
 8005ec6:	931b      	str	r3, [sp, #108]	; 0x6c
 8005ec8:	78b3      	ldrb	r3, [r6, #2]
 8005eca:	e78a      	b.n	8005de2 <_strtod_l+0x192>
 8005ecc:	f04f 0c00 	mov.w	ip, #0
 8005ed0:	e7f8      	b.n	8005ec4 <_strtod_l+0x274>
 8005ed2:	bf00      	nop
 8005ed4:	08008934 	.word	0x08008934
 8005ed8:	7ff00000 	.word	0x7ff00000
 8005edc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ede:	1c5f      	adds	r7, r3, #1
 8005ee0:	971b      	str	r7, [sp, #108]	; 0x6c
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	2b30      	cmp	r3, #48	; 0x30
 8005ee6:	d0f9      	beq.n	8005edc <_strtod_l+0x28c>
 8005ee8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005eec:	2f08      	cmp	r7, #8
 8005eee:	f63f af7d 	bhi.w	8005dec <_strtod_l+0x19c>
 8005ef2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005ef6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ef8:	930a      	str	r3, [sp, #40]	; 0x28
 8005efa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005efc:	1c5f      	adds	r7, r3, #1
 8005efe:	971b      	str	r7, [sp, #108]	; 0x6c
 8005f00:	785b      	ldrb	r3, [r3, #1]
 8005f02:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005f06:	f1b8 0f09 	cmp.w	r8, #9
 8005f0a:	d937      	bls.n	8005f7c <_strtod_l+0x32c>
 8005f0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f0e:	1a7f      	subs	r7, r7, r1
 8005f10:	2f08      	cmp	r7, #8
 8005f12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005f16:	dc37      	bgt.n	8005f88 <_strtod_l+0x338>
 8005f18:	45be      	cmp	lr, r7
 8005f1a:	bfa8      	it	ge
 8005f1c:	46be      	movge	lr, r7
 8005f1e:	f1bc 0f00 	cmp.w	ip, #0
 8005f22:	d001      	beq.n	8005f28 <_strtod_l+0x2d8>
 8005f24:	f1ce 0e00 	rsb	lr, lr, #0
 8005f28:	2c00      	cmp	r4, #0
 8005f2a:	d151      	bne.n	8005fd0 <_strtod_l+0x380>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	f47f aece 	bne.w	8005cce <_strtod_l+0x7e>
 8005f32:	9a06      	ldr	r2, [sp, #24]
 8005f34:	2a00      	cmp	r2, #0
 8005f36:	f47f aeca 	bne.w	8005cce <_strtod_l+0x7e>
 8005f3a:	9a04      	ldr	r2, [sp, #16]
 8005f3c:	2a00      	cmp	r2, #0
 8005f3e:	f47f aee4 	bne.w	8005d0a <_strtod_l+0xba>
 8005f42:	2b4e      	cmp	r3, #78	; 0x4e
 8005f44:	d027      	beq.n	8005f96 <_strtod_l+0x346>
 8005f46:	dc21      	bgt.n	8005f8c <_strtod_l+0x33c>
 8005f48:	2b49      	cmp	r3, #73	; 0x49
 8005f4a:	f47f aede 	bne.w	8005d0a <_strtod_l+0xba>
 8005f4e:	49a0      	ldr	r1, [pc, #640]	; (80061d0 <_strtod_l+0x580>)
 8005f50:	a81b      	add	r0, sp, #108	; 0x6c
 8005f52:	f001 fd4b 	bl	80079ec <__match>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	f43f aed7 	beq.w	8005d0a <_strtod_l+0xba>
 8005f5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f5e:	499d      	ldr	r1, [pc, #628]	; (80061d4 <_strtod_l+0x584>)
 8005f60:	3b01      	subs	r3, #1
 8005f62:	a81b      	add	r0, sp, #108	; 0x6c
 8005f64:	931b      	str	r3, [sp, #108]	; 0x6c
 8005f66:	f001 fd41 	bl	80079ec <__match>
 8005f6a:	b910      	cbnz	r0, 8005f72 <_strtod_l+0x322>
 8005f6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f6e:	3301      	adds	r3, #1
 8005f70:	931b      	str	r3, [sp, #108]	; 0x6c
 8005f72:	f8df b274 	ldr.w	fp, [pc, #628]	; 80061e8 <_strtod_l+0x598>
 8005f76:	f04f 0a00 	mov.w	sl, #0
 8005f7a:	e6a8      	b.n	8005cce <_strtod_l+0x7e>
 8005f7c:	210a      	movs	r1, #10
 8005f7e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005f82:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005f86:	e7b8      	b.n	8005efa <_strtod_l+0x2aa>
 8005f88:	46be      	mov	lr, r7
 8005f8a:	e7c8      	b.n	8005f1e <_strtod_l+0x2ce>
 8005f8c:	2b69      	cmp	r3, #105	; 0x69
 8005f8e:	d0de      	beq.n	8005f4e <_strtod_l+0x2fe>
 8005f90:	2b6e      	cmp	r3, #110	; 0x6e
 8005f92:	f47f aeba 	bne.w	8005d0a <_strtod_l+0xba>
 8005f96:	4990      	ldr	r1, [pc, #576]	; (80061d8 <_strtod_l+0x588>)
 8005f98:	a81b      	add	r0, sp, #108	; 0x6c
 8005f9a:	f001 fd27 	bl	80079ec <__match>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	f43f aeb3 	beq.w	8005d0a <_strtod_l+0xba>
 8005fa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b28      	cmp	r3, #40	; 0x28
 8005faa:	d10e      	bne.n	8005fca <_strtod_l+0x37a>
 8005fac:	aa1e      	add	r2, sp, #120	; 0x78
 8005fae:	498b      	ldr	r1, [pc, #556]	; (80061dc <_strtod_l+0x58c>)
 8005fb0:	a81b      	add	r0, sp, #108	; 0x6c
 8005fb2:	f001 fd2f 	bl	8007a14 <__hexnan>
 8005fb6:	2805      	cmp	r0, #5
 8005fb8:	d107      	bne.n	8005fca <_strtod_l+0x37a>
 8005fba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005fbc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005fc0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005fc4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005fc8:	e681      	b.n	8005cce <_strtod_l+0x7e>
 8005fca:	f8df b224 	ldr.w	fp, [pc, #548]	; 80061f0 <_strtod_l+0x5a0>
 8005fce:	e7d2      	b.n	8005f76 <_strtod_l+0x326>
 8005fd0:	ebae 0302 	sub.w	r3, lr, r2
 8005fd4:	9306      	str	r3, [sp, #24]
 8005fd6:	9b05      	ldr	r3, [sp, #20]
 8005fd8:	9807      	ldr	r0, [sp, #28]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	bf08      	it	eq
 8005fde:	4623      	moveq	r3, r4
 8005fe0:	2c10      	cmp	r4, #16
 8005fe2:	9305      	str	r3, [sp, #20]
 8005fe4:	46a0      	mov	r8, r4
 8005fe6:	bfa8      	it	ge
 8005fe8:	f04f 0810 	movge.w	r8, #16
 8005fec:	f7fa fa8a 	bl	8000504 <__aeabi_ui2d>
 8005ff0:	2c09      	cmp	r4, #9
 8005ff2:	4682      	mov	sl, r0
 8005ff4:	468b      	mov	fp, r1
 8005ff6:	dc13      	bgt.n	8006020 <_strtod_l+0x3d0>
 8005ff8:	9b06      	ldr	r3, [sp, #24]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f43f ae67 	beq.w	8005cce <_strtod_l+0x7e>
 8006000:	9b06      	ldr	r3, [sp, #24]
 8006002:	dd7a      	ble.n	80060fa <_strtod_l+0x4aa>
 8006004:	2b16      	cmp	r3, #22
 8006006:	dc61      	bgt.n	80060cc <_strtod_l+0x47c>
 8006008:	4a75      	ldr	r2, [pc, #468]	; (80061e0 <_strtod_l+0x590>)
 800600a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800600e:	e9de 0100 	ldrd	r0, r1, [lr]
 8006012:	4652      	mov	r2, sl
 8006014:	465b      	mov	r3, fp
 8006016:	f7fa faef 	bl	80005f8 <__aeabi_dmul>
 800601a:	4682      	mov	sl, r0
 800601c:	468b      	mov	fp, r1
 800601e:	e656      	b.n	8005cce <_strtod_l+0x7e>
 8006020:	4b6f      	ldr	r3, [pc, #444]	; (80061e0 <_strtod_l+0x590>)
 8006022:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006026:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800602a:	f7fa fae5 	bl	80005f8 <__aeabi_dmul>
 800602e:	4606      	mov	r6, r0
 8006030:	4628      	mov	r0, r5
 8006032:	460f      	mov	r7, r1
 8006034:	f7fa fa66 	bl	8000504 <__aeabi_ui2d>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	4630      	mov	r0, r6
 800603e:	4639      	mov	r1, r7
 8006040:	f7fa f924 	bl	800028c <__adddf3>
 8006044:	2c0f      	cmp	r4, #15
 8006046:	4682      	mov	sl, r0
 8006048:	468b      	mov	fp, r1
 800604a:	ddd5      	ble.n	8005ff8 <_strtod_l+0x3a8>
 800604c:	9b06      	ldr	r3, [sp, #24]
 800604e:	eba4 0808 	sub.w	r8, r4, r8
 8006052:	4498      	add	r8, r3
 8006054:	f1b8 0f00 	cmp.w	r8, #0
 8006058:	f340 8096 	ble.w	8006188 <_strtod_l+0x538>
 800605c:	f018 030f 	ands.w	r3, r8, #15
 8006060:	d00a      	beq.n	8006078 <_strtod_l+0x428>
 8006062:	495f      	ldr	r1, [pc, #380]	; (80061e0 <_strtod_l+0x590>)
 8006064:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006068:	4652      	mov	r2, sl
 800606a:	465b      	mov	r3, fp
 800606c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006070:	f7fa fac2 	bl	80005f8 <__aeabi_dmul>
 8006074:	4682      	mov	sl, r0
 8006076:	468b      	mov	fp, r1
 8006078:	f038 080f 	bics.w	r8, r8, #15
 800607c:	d073      	beq.n	8006166 <_strtod_l+0x516>
 800607e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006082:	dd47      	ble.n	8006114 <_strtod_l+0x4c4>
 8006084:	2400      	movs	r4, #0
 8006086:	46a0      	mov	r8, r4
 8006088:	9407      	str	r4, [sp, #28]
 800608a:	9405      	str	r4, [sp, #20]
 800608c:	2322      	movs	r3, #34	; 0x22
 800608e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80061e8 <_strtod_l+0x598>
 8006092:	f8c9 3000 	str.w	r3, [r9]
 8006096:	f04f 0a00 	mov.w	sl, #0
 800609a:	9b07      	ldr	r3, [sp, #28]
 800609c:	2b00      	cmp	r3, #0
 800609e:	f43f ae16 	beq.w	8005cce <_strtod_l+0x7e>
 80060a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80060a4:	4648      	mov	r0, r9
 80060a6:	f001 fdae 	bl	8007c06 <_Bfree>
 80060aa:	9905      	ldr	r1, [sp, #20]
 80060ac:	4648      	mov	r0, r9
 80060ae:	f001 fdaa 	bl	8007c06 <_Bfree>
 80060b2:	4641      	mov	r1, r8
 80060b4:	4648      	mov	r0, r9
 80060b6:	f001 fda6 	bl	8007c06 <_Bfree>
 80060ba:	9907      	ldr	r1, [sp, #28]
 80060bc:	4648      	mov	r0, r9
 80060be:	f001 fda2 	bl	8007c06 <_Bfree>
 80060c2:	4621      	mov	r1, r4
 80060c4:	4648      	mov	r0, r9
 80060c6:	f001 fd9e 	bl	8007c06 <_Bfree>
 80060ca:	e600      	b.n	8005cce <_strtod_l+0x7e>
 80060cc:	9a06      	ldr	r2, [sp, #24]
 80060ce:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80060d2:	4293      	cmp	r3, r2
 80060d4:	dbba      	blt.n	800604c <_strtod_l+0x3fc>
 80060d6:	4d42      	ldr	r5, [pc, #264]	; (80061e0 <_strtod_l+0x590>)
 80060d8:	f1c4 040f 	rsb	r4, r4, #15
 80060dc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80060e0:	4652      	mov	r2, sl
 80060e2:	465b      	mov	r3, fp
 80060e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060e8:	f7fa fa86 	bl	80005f8 <__aeabi_dmul>
 80060ec:	9b06      	ldr	r3, [sp, #24]
 80060ee:	1b1c      	subs	r4, r3, r4
 80060f0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80060f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060f8:	e78d      	b.n	8006016 <_strtod_l+0x3c6>
 80060fa:	f113 0f16 	cmn.w	r3, #22
 80060fe:	dba5      	blt.n	800604c <_strtod_l+0x3fc>
 8006100:	4a37      	ldr	r2, [pc, #220]	; (80061e0 <_strtod_l+0x590>)
 8006102:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006106:	e9d2 2300 	ldrd	r2, r3, [r2]
 800610a:	4650      	mov	r0, sl
 800610c:	4659      	mov	r1, fp
 800610e:	f7fa fb9d 	bl	800084c <__aeabi_ddiv>
 8006112:	e782      	b.n	800601a <_strtod_l+0x3ca>
 8006114:	2300      	movs	r3, #0
 8006116:	4e33      	ldr	r6, [pc, #204]	; (80061e4 <_strtod_l+0x594>)
 8006118:	ea4f 1828 	mov.w	r8, r8, asr #4
 800611c:	4650      	mov	r0, sl
 800611e:	4659      	mov	r1, fp
 8006120:	461d      	mov	r5, r3
 8006122:	f1b8 0f01 	cmp.w	r8, #1
 8006126:	dc21      	bgt.n	800616c <_strtod_l+0x51c>
 8006128:	b10b      	cbz	r3, 800612e <_strtod_l+0x4de>
 800612a:	4682      	mov	sl, r0
 800612c:	468b      	mov	fp, r1
 800612e:	4b2d      	ldr	r3, [pc, #180]	; (80061e4 <_strtod_l+0x594>)
 8006130:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006134:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006138:	4652      	mov	r2, sl
 800613a:	465b      	mov	r3, fp
 800613c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006140:	f7fa fa5a 	bl	80005f8 <__aeabi_dmul>
 8006144:	4b28      	ldr	r3, [pc, #160]	; (80061e8 <_strtod_l+0x598>)
 8006146:	460a      	mov	r2, r1
 8006148:	400b      	ands	r3, r1
 800614a:	4928      	ldr	r1, [pc, #160]	; (80061ec <_strtod_l+0x59c>)
 800614c:	428b      	cmp	r3, r1
 800614e:	4682      	mov	sl, r0
 8006150:	d898      	bhi.n	8006084 <_strtod_l+0x434>
 8006152:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006156:	428b      	cmp	r3, r1
 8006158:	bf86      	itte	hi
 800615a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80061f4 <_strtod_l+0x5a4>
 800615e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006162:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006166:	2300      	movs	r3, #0
 8006168:	9304      	str	r3, [sp, #16]
 800616a:	e077      	b.n	800625c <_strtod_l+0x60c>
 800616c:	f018 0f01 	tst.w	r8, #1
 8006170:	d006      	beq.n	8006180 <_strtod_l+0x530>
 8006172:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617a:	f7fa fa3d 	bl	80005f8 <__aeabi_dmul>
 800617e:	2301      	movs	r3, #1
 8006180:	3501      	adds	r5, #1
 8006182:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006186:	e7cc      	b.n	8006122 <_strtod_l+0x4d2>
 8006188:	d0ed      	beq.n	8006166 <_strtod_l+0x516>
 800618a:	f1c8 0800 	rsb	r8, r8, #0
 800618e:	f018 020f 	ands.w	r2, r8, #15
 8006192:	d00a      	beq.n	80061aa <_strtod_l+0x55a>
 8006194:	4b12      	ldr	r3, [pc, #72]	; (80061e0 <_strtod_l+0x590>)
 8006196:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800619a:	4650      	mov	r0, sl
 800619c:	4659      	mov	r1, fp
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	f7fa fb53 	bl	800084c <__aeabi_ddiv>
 80061a6:	4682      	mov	sl, r0
 80061a8:	468b      	mov	fp, r1
 80061aa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80061ae:	d0da      	beq.n	8006166 <_strtod_l+0x516>
 80061b0:	f1b8 0f1f 	cmp.w	r8, #31
 80061b4:	dd20      	ble.n	80061f8 <_strtod_l+0x5a8>
 80061b6:	2400      	movs	r4, #0
 80061b8:	46a0      	mov	r8, r4
 80061ba:	9407      	str	r4, [sp, #28]
 80061bc:	9405      	str	r4, [sp, #20]
 80061be:	2322      	movs	r3, #34	; 0x22
 80061c0:	f04f 0a00 	mov.w	sl, #0
 80061c4:	f04f 0b00 	mov.w	fp, #0
 80061c8:	f8c9 3000 	str.w	r3, [r9]
 80061cc:	e765      	b.n	800609a <_strtod_l+0x44a>
 80061ce:	bf00      	nop
 80061d0:	08008905 	.word	0x08008905
 80061d4:	0800898b 	.word	0x0800898b
 80061d8:	0800890d 	.word	0x0800890d
 80061dc:	08008948 	.word	0x08008948
 80061e0:	080089c8 	.word	0x080089c8
 80061e4:	080089a0 	.word	0x080089a0
 80061e8:	7ff00000 	.word	0x7ff00000
 80061ec:	7ca00000 	.word	0x7ca00000
 80061f0:	fff80000 	.word	0xfff80000
 80061f4:	7fefffff 	.word	0x7fefffff
 80061f8:	f018 0310 	ands.w	r3, r8, #16
 80061fc:	bf18      	it	ne
 80061fe:	236a      	movne	r3, #106	; 0x6a
 8006200:	4da0      	ldr	r5, [pc, #640]	; (8006484 <_strtod_l+0x834>)
 8006202:	9304      	str	r3, [sp, #16]
 8006204:	4650      	mov	r0, sl
 8006206:	4659      	mov	r1, fp
 8006208:	2300      	movs	r3, #0
 800620a:	f1b8 0f00 	cmp.w	r8, #0
 800620e:	f300 810a 	bgt.w	8006426 <_strtod_l+0x7d6>
 8006212:	b10b      	cbz	r3, 8006218 <_strtod_l+0x5c8>
 8006214:	4682      	mov	sl, r0
 8006216:	468b      	mov	fp, r1
 8006218:	9b04      	ldr	r3, [sp, #16]
 800621a:	b1bb      	cbz	r3, 800624c <_strtod_l+0x5fc>
 800621c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006220:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006224:	2b00      	cmp	r3, #0
 8006226:	4659      	mov	r1, fp
 8006228:	dd10      	ble.n	800624c <_strtod_l+0x5fc>
 800622a:	2b1f      	cmp	r3, #31
 800622c:	f340 8107 	ble.w	800643e <_strtod_l+0x7ee>
 8006230:	2b34      	cmp	r3, #52	; 0x34
 8006232:	bfde      	ittt	le
 8006234:	3b20      	suble	r3, #32
 8006236:	f04f 32ff 	movle.w	r2, #4294967295
 800623a:	fa02 f303 	lslle.w	r3, r2, r3
 800623e:	f04f 0a00 	mov.w	sl, #0
 8006242:	bfcc      	ite	gt
 8006244:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006248:	ea03 0b01 	andle.w	fp, r3, r1
 800624c:	2200      	movs	r2, #0
 800624e:	2300      	movs	r3, #0
 8006250:	4650      	mov	r0, sl
 8006252:	4659      	mov	r1, fp
 8006254:	f7fa fc38 	bl	8000ac8 <__aeabi_dcmpeq>
 8006258:	2800      	cmp	r0, #0
 800625a:	d1ac      	bne.n	80061b6 <_strtod_l+0x566>
 800625c:	9b07      	ldr	r3, [sp, #28]
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	9a05      	ldr	r2, [sp, #20]
 8006262:	9908      	ldr	r1, [sp, #32]
 8006264:	4623      	mov	r3, r4
 8006266:	4648      	mov	r0, r9
 8006268:	f001 fd1f 	bl	8007caa <__s2b>
 800626c:	9007      	str	r0, [sp, #28]
 800626e:	2800      	cmp	r0, #0
 8006270:	f43f af08 	beq.w	8006084 <_strtod_l+0x434>
 8006274:	9a06      	ldr	r2, [sp, #24]
 8006276:	9b06      	ldr	r3, [sp, #24]
 8006278:	2a00      	cmp	r2, #0
 800627a:	f1c3 0300 	rsb	r3, r3, #0
 800627e:	bfa8      	it	ge
 8006280:	2300      	movge	r3, #0
 8006282:	930e      	str	r3, [sp, #56]	; 0x38
 8006284:	2400      	movs	r4, #0
 8006286:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800628a:	9316      	str	r3, [sp, #88]	; 0x58
 800628c:	46a0      	mov	r8, r4
 800628e:	9b07      	ldr	r3, [sp, #28]
 8006290:	4648      	mov	r0, r9
 8006292:	6859      	ldr	r1, [r3, #4]
 8006294:	f001 fc83 	bl	8007b9e <_Balloc>
 8006298:	9005      	str	r0, [sp, #20]
 800629a:	2800      	cmp	r0, #0
 800629c:	f43f aef6 	beq.w	800608c <_strtod_l+0x43c>
 80062a0:	9b07      	ldr	r3, [sp, #28]
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	3202      	adds	r2, #2
 80062a6:	f103 010c 	add.w	r1, r3, #12
 80062aa:	0092      	lsls	r2, r2, #2
 80062ac:	300c      	adds	r0, #12
 80062ae:	f001 fc6b 	bl	8007b88 <memcpy>
 80062b2:	aa1e      	add	r2, sp, #120	; 0x78
 80062b4:	a91d      	add	r1, sp, #116	; 0x74
 80062b6:	ec4b ab10 	vmov	d0, sl, fp
 80062ba:	4648      	mov	r0, r9
 80062bc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80062c0:	f001 ffae 	bl	8008220 <__d2b>
 80062c4:	901c      	str	r0, [sp, #112]	; 0x70
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f43f aee0 	beq.w	800608c <_strtod_l+0x43c>
 80062cc:	2101      	movs	r1, #1
 80062ce:	4648      	mov	r0, r9
 80062d0:	f001 fd77 	bl	8007dc2 <__i2b>
 80062d4:	4680      	mov	r8, r0
 80062d6:	2800      	cmp	r0, #0
 80062d8:	f43f aed8 	beq.w	800608c <_strtod_l+0x43c>
 80062dc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80062de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80062e0:	2e00      	cmp	r6, #0
 80062e2:	bfab      	itete	ge
 80062e4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80062e6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80062e8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80062ea:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80062ec:	bfac      	ite	ge
 80062ee:	18f7      	addge	r7, r6, r3
 80062f0:	1b9d      	sublt	r5, r3, r6
 80062f2:	9b04      	ldr	r3, [sp, #16]
 80062f4:	1af6      	subs	r6, r6, r3
 80062f6:	4416      	add	r6, r2
 80062f8:	4b63      	ldr	r3, [pc, #396]	; (8006488 <_strtod_l+0x838>)
 80062fa:	3e01      	subs	r6, #1
 80062fc:	429e      	cmp	r6, r3
 80062fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006302:	f280 80af 	bge.w	8006464 <_strtod_l+0x814>
 8006306:	1b9b      	subs	r3, r3, r6
 8006308:	2b1f      	cmp	r3, #31
 800630a:	eba2 0203 	sub.w	r2, r2, r3
 800630e:	f04f 0101 	mov.w	r1, #1
 8006312:	f300 809b 	bgt.w	800644c <_strtod_l+0x7fc>
 8006316:	fa01 f303 	lsl.w	r3, r1, r3
 800631a:	930f      	str	r3, [sp, #60]	; 0x3c
 800631c:	2300      	movs	r3, #0
 800631e:	930a      	str	r3, [sp, #40]	; 0x28
 8006320:	18be      	adds	r6, r7, r2
 8006322:	9b04      	ldr	r3, [sp, #16]
 8006324:	42b7      	cmp	r7, r6
 8006326:	4415      	add	r5, r2
 8006328:	441d      	add	r5, r3
 800632a:	463b      	mov	r3, r7
 800632c:	bfa8      	it	ge
 800632e:	4633      	movge	r3, r6
 8006330:	42ab      	cmp	r3, r5
 8006332:	bfa8      	it	ge
 8006334:	462b      	movge	r3, r5
 8006336:	2b00      	cmp	r3, #0
 8006338:	bfc2      	ittt	gt
 800633a:	1af6      	subgt	r6, r6, r3
 800633c:	1aed      	subgt	r5, r5, r3
 800633e:	1aff      	subgt	r7, r7, r3
 8006340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006342:	b1bb      	cbz	r3, 8006374 <_strtod_l+0x724>
 8006344:	4641      	mov	r1, r8
 8006346:	461a      	mov	r2, r3
 8006348:	4648      	mov	r0, r9
 800634a:	f001 fdd9 	bl	8007f00 <__pow5mult>
 800634e:	4680      	mov	r8, r0
 8006350:	2800      	cmp	r0, #0
 8006352:	f43f ae9b 	beq.w	800608c <_strtod_l+0x43c>
 8006356:	4601      	mov	r1, r0
 8006358:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800635a:	4648      	mov	r0, r9
 800635c:	f001 fd3a 	bl	8007dd4 <__multiply>
 8006360:	900c      	str	r0, [sp, #48]	; 0x30
 8006362:	2800      	cmp	r0, #0
 8006364:	f43f ae92 	beq.w	800608c <_strtod_l+0x43c>
 8006368:	991c      	ldr	r1, [sp, #112]	; 0x70
 800636a:	4648      	mov	r0, r9
 800636c:	f001 fc4b 	bl	8007c06 <_Bfree>
 8006370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006372:	931c      	str	r3, [sp, #112]	; 0x70
 8006374:	2e00      	cmp	r6, #0
 8006376:	dc7a      	bgt.n	800646e <_strtod_l+0x81e>
 8006378:	9b06      	ldr	r3, [sp, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	dd08      	ble.n	8006390 <_strtod_l+0x740>
 800637e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006380:	9905      	ldr	r1, [sp, #20]
 8006382:	4648      	mov	r0, r9
 8006384:	f001 fdbc 	bl	8007f00 <__pow5mult>
 8006388:	9005      	str	r0, [sp, #20]
 800638a:	2800      	cmp	r0, #0
 800638c:	f43f ae7e 	beq.w	800608c <_strtod_l+0x43c>
 8006390:	2d00      	cmp	r5, #0
 8006392:	dd08      	ble.n	80063a6 <_strtod_l+0x756>
 8006394:	462a      	mov	r2, r5
 8006396:	9905      	ldr	r1, [sp, #20]
 8006398:	4648      	mov	r0, r9
 800639a:	f001 fdff 	bl	8007f9c <__lshift>
 800639e:	9005      	str	r0, [sp, #20]
 80063a0:	2800      	cmp	r0, #0
 80063a2:	f43f ae73 	beq.w	800608c <_strtod_l+0x43c>
 80063a6:	2f00      	cmp	r7, #0
 80063a8:	dd08      	ble.n	80063bc <_strtod_l+0x76c>
 80063aa:	4641      	mov	r1, r8
 80063ac:	463a      	mov	r2, r7
 80063ae:	4648      	mov	r0, r9
 80063b0:	f001 fdf4 	bl	8007f9c <__lshift>
 80063b4:	4680      	mov	r8, r0
 80063b6:	2800      	cmp	r0, #0
 80063b8:	f43f ae68 	beq.w	800608c <_strtod_l+0x43c>
 80063bc:	9a05      	ldr	r2, [sp, #20]
 80063be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80063c0:	4648      	mov	r0, r9
 80063c2:	f001 fe59 	bl	8008078 <__mdiff>
 80063c6:	4604      	mov	r4, r0
 80063c8:	2800      	cmp	r0, #0
 80063ca:	f43f ae5f 	beq.w	800608c <_strtod_l+0x43c>
 80063ce:	68c3      	ldr	r3, [r0, #12]
 80063d0:	930c      	str	r3, [sp, #48]	; 0x30
 80063d2:	2300      	movs	r3, #0
 80063d4:	60c3      	str	r3, [r0, #12]
 80063d6:	4641      	mov	r1, r8
 80063d8:	f001 fe34 	bl	8008044 <__mcmp>
 80063dc:	2800      	cmp	r0, #0
 80063de:	da55      	bge.n	800648c <_strtod_l+0x83c>
 80063e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063e2:	b9e3      	cbnz	r3, 800641e <_strtod_l+0x7ce>
 80063e4:	f1ba 0f00 	cmp.w	sl, #0
 80063e8:	d119      	bne.n	800641e <_strtod_l+0x7ce>
 80063ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063ee:	b9b3      	cbnz	r3, 800641e <_strtod_l+0x7ce>
 80063f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80063f4:	0d1b      	lsrs	r3, r3, #20
 80063f6:	051b      	lsls	r3, r3, #20
 80063f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80063fc:	d90f      	bls.n	800641e <_strtod_l+0x7ce>
 80063fe:	6963      	ldr	r3, [r4, #20]
 8006400:	b913      	cbnz	r3, 8006408 <_strtod_l+0x7b8>
 8006402:	6923      	ldr	r3, [r4, #16]
 8006404:	2b01      	cmp	r3, #1
 8006406:	dd0a      	ble.n	800641e <_strtod_l+0x7ce>
 8006408:	4621      	mov	r1, r4
 800640a:	2201      	movs	r2, #1
 800640c:	4648      	mov	r0, r9
 800640e:	f001 fdc5 	bl	8007f9c <__lshift>
 8006412:	4641      	mov	r1, r8
 8006414:	4604      	mov	r4, r0
 8006416:	f001 fe15 	bl	8008044 <__mcmp>
 800641a:	2800      	cmp	r0, #0
 800641c:	dc67      	bgt.n	80064ee <_strtod_l+0x89e>
 800641e:	9b04      	ldr	r3, [sp, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d171      	bne.n	8006508 <_strtod_l+0x8b8>
 8006424:	e63d      	b.n	80060a2 <_strtod_l+0x452>
 8006426:	f018 0f01 	tst.w	r8, #1
 800642a:	d004      	beq.n	8006436 <_strtod_l+0x7e6>
 800642c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006430:	f7fa f8e2 	bl	80005f8 <__aeabi_dmul>
 8006434:	2301      	movs	r3, #1
 8006436:	ea4f 0868 	mov.w	r8, r8, asr #1
 800643a:	3508      	adds	r5, #8
 800643c:	e6e5      	b.n	800620a <_strtod_l+0x5ba>
 800643e:	f04f 32ff 	mov.w	r2, #4294967295
 8006442:	fa02 f303 	lsl.w	r3, r2, r3
 8006446:	ea03 0a0a 	and.w	sl, r3, sl
 800644a:	e6ff      	b.n	800624c <_strtod_l+0x5fc>
 800644c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006450:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006454:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006458:	36e2      	adds	r6, #226	; 0xe2
 800645a:	fa01 f306 	lsl.w	r3, r1, r6
 800645e:	930a      	str	r3, [sp, #40]	; 0x28
 8006460:	910f      	str	r1, [sp, #60]	; 0x3c
 8006462:	e75d      	b.n	8006320 <_strtod_l+0x6d0>
 8006464:	2300      	movs	r3, #0
 8006466:	930a      	str	r3, [sp, #40]	; 0x28
 8006468:	2301      	movs	r3, #1
 800646a:	930f      	str	r3, [sp, #60]	; 0x3c
 800646c:	e758      	b.n	8006320 <_strtod_l+0x6d0>
 800646e:	4632      	mov	r2, r6
 8006470:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006472:	4648      	mov	r0, r9
 8006474:	f001 fd92 	bl	8007f9c <__lshift>
 8006478:	901c      	str	r0, [sp, #112]	; 0x70
 800647a:	2800      	cmp	r0, #0
 800647c:	f47f af7c 	bne.w	8006378 <_strtod_l+0x728>
 8006480:	e604      	b.n	800608c <_strtod_l+0x43c>
 8006482:	bf00      	nop
 8006484:	08008960 	.word	0x08008960
 8006488:	fffffc02 	.word	0xfffffc02
 800648c:	465d      	mov	r5, fp
 800648e:	f040 8086 	bne.w	800659e <_strtod_l+0x94e>
 8006492:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006494:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006498:	b32a      	cbz	r2, 80064e6 <_strtod_l+0x896>
 800649a:	4aaf      	ldr	r2, [pc, #700]	; (8006758 <_strtod_l+0xb08>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d153      	bne.n	8006548 <_strtod_l+0x8f8>
 80064a0:	9b04      	ldr	r3, [sp, #16]
 80064a2:	4650      	mov	r0, sl
 80064a4:	b1d3      	cbz	r3, 80064dc <_strtod_l+0x88c>
 80064a6:	4aad      	ldr	r2, [pc, #692]	; (800675c <_strtod_l+0xb0c>)
 80064a8:	402a      	ands	r2, r5
 80064aa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80064ae:	f04f 31ff 	mov.w	r1, #4294967295
 80064b2:	d816      	bhi.n	80064e2 <_strtod_l+0x892>
 80064b4:	0d12      	lsrs	r2, r2, #20
 80064b6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80064ba:	fa01 f303 	lsl.w	r3, r1, r3
 80064be:	4298      	cmp	r0, r3
 80064c0:	d142      	bne.n	8006548 <_strtod_l+0x8f8>
 80064c2:	4ba7      	ldr	r3, [pc, #668]	; (8006760 <_strtod_l+0xb10>)
 80064c4:	429d      	cmp	r5, r3
 80064c6:	d102      	bne.n	80064ce <_strtod_l+0x87e>
 80064c8:	3001      	adds	r0, #1
 80064ca:	f43f addf 	beq.w	800608c <_strtod_l+0x43c>
 80064ce:	4ba3      	ldr	r3, [pc, #652]	; (800675c <_strtod_l+0xb0c>)
 80064d0:	402b      	ands	r3, r5
 80064d2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80064d6:	f04f 0a00 	mov.w	sl, #0
 80064da:	e7a0      	b.n	800641e <_strtod_l+0x7ce>
 80064dc:	f04f 33ff 	mov.w	r3, #4294967295
 80064e0:	e7ed      	b.n	80064be <_strtod_l+0x86e>
 80064e2:	460b      	mov	r3, r1
 80064e4:	e7eb      	b.n	80064be <_strtod_l+0x86e>
 80064e6:	bb7b      	cbnz	r3, 8006548 <_strtod_l+0x8f8>
 80064e8:	f1ba 0f00 	cmp.w	sl, #0
 80064ec:	d12c      	bne.n	8006548 <_strtod_l+0x8f8>
 80064ee:	9904      	ldr	r1, [sp, #16]
 80064f0:	4a9a      	ldr	r2, [pc, #616]	; (800675c <_strtod_l+0xb0c>)
 80064f2:	465b      	mov	r3, fp
 80064f4:	b1f1      	cbz	r1, 8006534 <_strtod_l+0x8e4>
 80064f6:	ea02 010b 	and.w	r1, r2, fp
 80064fa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80064fe:	dc19      	bgt.n	8006534 <_strtod_l+0x8e4>
 8006500:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006504:	f77f ae5b 	ble.w	80061be <_strtod_l+0x56e>
 8006508:	4a96      	ldr	r2, [pc, #600]	; (8006764 <_strtod_l+0xb14>)
 800650a:	2300      	movs	r3, #0
 800650c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006510:	4650      	mov	r0, sl
 8006512:	4659      	mov	r1, fp
 8006514:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006518:	f7fa f86e 	bl	80005f8 <__aeabi_dmul>
 800651c:	4682      	mov	sl, r0
 800651e:	468b      	mov	fp, r1
 8006520:	2900      	cmp	r1, #0
 8006522:	f47f adbe 	bne.w	80060a2 <_strtod_l+0x452>
 8006526:	2800      	cmp	r0, #0
 8006528:	f47f adbb 	bne.w	80060a2 <_strtod_l+0x452>
 800652c:	2322      	movs	r3, #34	; 0x22
 800652e:	f8c9 3000 	str.w	r3, [r9]
 8006532:	e5b6      	b.n	80060a2 <_strtod_l+0x452>
 8006534:	4013      	ands	r3, r2
 8006536:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800653a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800653e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006542:	f04f 3aff 	mov.w	sl, #4294967295
 8006546:	e76a      	b.n	800641e <_strtod_l+0x7ce>
 8006548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800654a:	b193      	cbz	r3, 8006572 <_strtod_l+0x922>
 800654c:	422b      	tst	r3, r5
 800654e:	f43f af66 	beq.w	800641e <_strtod_l+0x7ce>
 8006552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006554:	9a04      	ldr	r2, [sp, #16]
 8006556:	4650      	mov	r0, sl
 8006558:	4659      	mov	r1, fp
 800655a:	b173      	cbz	r3, 800657a <_strtod_l+0x92a>
 800655c:	f7ff fb5a 	bl	8005c14 <sulp>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006568:	f7f9 fe90 	bl	800028c <__adddf3>
 800656c:	4682      	mov	sl, r0
 800656e:	468b      	mov	fp, r1
 8006570:	e755      	b.n	800641e <_strtod_l+0x7ce>
 8006572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006574:	ea13 0f0a 	tst.w	r3, sl
 8006578:	e7e9      	b.n	800654e <_strtod_l+0x8fe>
 800657a:	f7ff fb4b 	bl	8005c14 <sulp>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006586:	f7f9 fe7f 	bl	8000288 <__aeabi_dsub>
 800658a:	2200      	movs	r2, #0
 800658c:	2300      	movs	r3, #0
 800658e:	4682      	mov	sl, r0
 8006590:	468b      	mov	fp, r1
 8006592:	f7fa fa99 	bl	8000ac8 <__aeabi_dcmpeq>
 8006596:	2800      	cmp	r0, #0
 8006598:	f47f ae11 	bne.w	80061be <_strtod_l+0x56e>
 800659c:	e73f      	b.n	800641e <_strtod_l+0x7ce>
 800659e:	4641      	mov	r1, r8
 80065a0:	4620      	mov	r0, r4
 80065a2:	f001 fe8c 	bl	80082be <__ratio>
 80065a6:	ec57 6b10 	vmov	r6, r7, d0
 80065aa:	2200      	movs	r2, #0
 80065ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065b0:	ee10 0a10 	vmov	r0, s0
 80065b4:	4639      	mov	r1, r7
 80065b6:	f7fa fa9b 	bl	8000af0 <__aeabi_dcmple>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d077      	beq.n	80066ae <_strtod_l+0xa5e>
 80065be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d04a      	beq.n	800665a <_strtod_l+0xa0a>
 80065c4:	4b68      	ldr	r3, [pc, #416]	; (8006768 <_strtod_l+0xb18>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80065cc:	4f66      	ldr	r7, [pc, #408]	; (8006768 <_strtod_l+0xb18>)
 80065ce:	2600      	movs	r6, #0
 80065d0:	4b62      	ldr	r3, [pc, #392]	; (800675c <_strtod_l+0xb0c>)
 80065d2:	402b      	ands	r3, r5
 80065d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80065d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065d8:	4b64      	ldr	r3, [pc, #400]	; (800676c <_strtod_l+0xb1c>)
 80065da:	429a      	cmp	r2, r3
 80065dc:	f040 80ce 	bne.w	800677c <_strtod_l+0xb2c>
 80065e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80065e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065e8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80065ec:	ec4b ab10 	vmov	d0, sl, fp
 80065f0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80065f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80065f8:	f001 fd9c 	bl	8008134 <__ulp>
 80065fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006600:	ec53 2b10 	vmov	r2, r3, d0
 8006604:	f7f9 fff8 	bl	80005f8 <__aeabi_dmul>
 8006608:	4652      	mov	r2, sl
 800660a:	465b      	mov	r3, fp
 800660c:	f7f9 fe3e 	bl	800028c <__adddf3>
 8006610:	460b      	mov	r3, r1
 8006612:	4952      	ldr	r1, [pc, #328]	; (800675c <_strtod_l+0xb0c>)
 8006614:	4a56      	ldr	r2, [pc, #344]	; (8006770 <_strtod_l+0xb20>)
 8006616:	4019      	ands	r1, r3
 8006618:	4291      	cmp	r1, r2
 800661a:	4682      	mov	sl, r0
 800661c:	d95b      	bls.n	80066d6 <_strtod_l+0xa86>
 800661e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006620:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006624:	4293      	cmp	r3, r2
 8006626:	d103      	bne.n	8006630 <_strtod_l+0x9e0>
 8006628:	9b08      	ldr	r3, [sp, #32]
 800662a:	3301      	adds	r3, #1
 800662c:	f43f ad2e 	beq.w	800608c <_strtod_l+0x43c>
 8006630:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006760 <_strtod_l+0xb10>
 8006634:	f04f 3aff 	mov.w	sl, #4294967295
 8006638:	991c      	ldr	r1, [sp, #112]	; 0x70
 800663a:	4648      	mov	r0, r9
 800663c:	f001 fae3 	bl	8007c06 <_Bfree>
 8006640:	9905      	ldr	r1, [sp, #20]
 8006642:	4648      	mov	r0, r9
 8006644:	f001 fadf 	bl	8007c06 <_Bfree>
 8006648:	4641      	mov	r1, r8
 800664a:	4648      	mov	r0, r9
 800664c:	f001 fadb 	bl	8007c06 <_Bfree>
 8006650:	4621      	mov	r1, r4
 8006652:	4648      	mov	r0, r9
 8006654:	f001 fad7 	bl	8007c06 <_Bfree>
 8006658:	e619      	b.n	800628e <_strtod_l+0x63e>
 800665a:	f1ba 0f00 	cmp.w	sl, #0
 800665e:	d11a      	bne.n	8006696 <_strtod_l+0xa46>
 8006660:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006664:	b9eb      	cbnz	r3, 80066a2 <_strtod_l+0xa52>
 8006666:	2200      	movs	r2, #0
 8006668:	4b3f      	ldr	r3, [pc, #252]	; (8006768 <_strtod_l+0xb18>)
 800666a:	4630      	mov	r0, r6
 800666c:	4639      	mov	r1, r7
 800666e:	f7fa fa35 	bl	8000adc <__aeabi_dcmplt>
 8006672:	b9c8      	cbnz	r0, 80066a8 <_strtod_l+0xa58>
 8006674:	4630      	mov	r0, r6
 8006676:	4639      	mov	r1, r7
 8006678:	2200      	movs	r2, #0
 800667a:	4b3e      	ldr	r3, [pc, #248]	; (8006774 <_strtod_l+0xb24>)
 800667c:	f7f9 ffbc 	bl	80005f8 <__aeabi_dmul>
 8006680:	4606      	mov	r6, r0
 8006682:	460f      	mov	r7, r1
 8006684:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006688:	9618      	str	r6, [sp, #96]	; 0x60
 800668a:	9319      	str	r3, [sp, #100]	; 0x64
 800668c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006690:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006694:	e79c      	b.n	80065d0 <_strtod_l+0x980>
 8006696:	f1ba 0f01 	cmp.w	sl, #1
 800669a:	d102      	bne.n	80066a2 <_strtod_l+0xa52>
 800669c:	2d00      	cmp	r5, #0
 800669e:	f43f ad8e 	beq.w	80061be <_strtod_l+0x56e>
 80066a2:	2200      	movs	r2, #0
 80066a4:	4b34      	ldr	r3, [pc, #208]	; (8006778 <_strtod_l+0xb28>)
 80066a6:	e78f      	b.n	80065c8 <_strtod_l+0x978>
 80066a8:	2600      	movs	r6, #0
 80066aa:	4f32      	ldr	r7, [pc, #200]	; (8006774 <_strtod_l+0xb24>)
 80066ac:	e7ea      	b.n	8006684 <_strtod_l+0xa34>
 80066ae:	4b31      	ldr	r3, [pc, #196]	; (8006774 <_strtod_l+0xb24>)
 80066b0:	4630      	mov	r0, r6
 80066b2:	4639      	mov	r1, r7
 80066b4:	2200      	movs	r2, #0
 80066b6:	f7f9 ff9f 	bl	80005f8 <__aeabi_dmul>
 80066ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066bc:	4606      	mov	r6, r0
 80066be:	460f      	mov	r7, r1
 80066c0:	b933      	cbnz	r3, 80066d0 <_strtod_l+0xa80>
 80066c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066c6:	9010      	str	r0, [sp, #64]	; 0x40
 80066c8:	9311      	str	r3, [sp, #68]	; 0x44
 80066ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066ce:	e7df      	b.n	8006690 <_strtod_l+0xa40>
 80066d0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80066d4:	e7f9      	b.n	80066ca <_strtod_l+0xa7a>
 80066d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80066da:	9b04      	ldr	r3, [sp, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1ab      	bne.n	8006638 <_strtod_l+0x9e8>
 80066e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80066e4:	0d1b      	lsrs	r3, r3, #20
 80066e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066e8:	051b      	lsls	r3, r3, #20
 80066ea:	429a      	cmp	r2, r3
 80066ec:	465d      	mov	r5, fp
 80066ee:	d1a3      	bne.n	8006638 <_strtod_l+0x9e8>
 80066f0:	4639      	mov	r1, r7
 80066f2:	4630      	mov	r0, r6
 80066f4:	f7fa fa30 	bl	8000b58 <__aeabi_d2iz>
 80066f8:	f7f9 ff14 	bl	8000524 <__aeabi_i2d>
 80066fc:	460b      	mov	r3, r1
 80066fe:	4602      	mov	r2, r0
 8006700:	4639      	mov	r1, r7
 8006702:	4630      	mov	r0, r6
 8006704:	f7f9 fdc0 	bl	8000288 <__aeabi_dsub>
 8006708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800670a:	4606      	mov	r6, r0
 800670c:	460f      	mov	r7, r1
 800670e:	b933      	cbnz	r3, 800671e <_strtod_l+0xace>
 8006710:	f1ba 0f00 	cmp.w	sl, #0
 8006714:	d103      	bne.n	800671e <_strtod_l+0xace>
 8006716:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800671a:	2d00      	cmp	r5, #0
 800671c:	d06d      	beq.n	80067fa <_strtod_l+0xbaa>
 800671e:	a30a      	add	r3, pc, #40	; (adr r3, 8006748 <_strtod_l+0xaf8>)
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	4630      	mov	r0, r6
 8006726:	4639      	mov	r1, r7
 8006728:	f7fa f9d8 	bl	8000adc <__aeabi_dcmplt>
 800672c:	2800      	cmp	r0, #0
 800672e:	f47f acb8 	bne.w	80060a2 <_strtod_l+0x452>
 8006732:	a307      	add	r3, pc, #28	; (adr r3, 8006750 <_strtod_l+0xb00>)
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	4630      	mov	r0, r6
 800673a:	4639      	mov	r1, r7
 800673c:	f7fa f9ec 	bl	8000b18 <__aeabi_dcmpgt>
 8006740:	2800      	cmp	r0, #0
 8006742:	f43f af79 	beq.w	8006638 <_strtod_l+0x9e8>
 8006746:	e4ac      	b.n	80060a2 <_strtod_l+0x452>
 8006748:	94a03595 	.word	0x94a03595
 800674c:	3fdfffff 	.word	0x3fdfffff
 8006750:	35afe535 	.word	0x35afe535
 8006754:	3fe00000 	.word	0x3fe00000
 8006758:	000fffff 	.word	0x000fffff
 800675c:	7ff00000 	.word	0x7ff00000
 8006760:	7fefffff 	.word	0x7fefffff
 8006764:	39500000 	.word	0x39500000
 8006768:	3ff00000 	.word	0x3ff00000
 800676c:	7fe00000 	.word	0x7fe00000
 8006770:	7c9fffff 	.word	0x7c9fffff
 8006774:	3fe00000 	.word	0x3fe00000
 8006778:	bff00000 	.word	0xbff00000
 800677c:	9b04      	ldr	r3, [sp, #16]
 800677e:	b333      	cbz	r3, 80067ce <_strtod_l+0xb7e>
 8006780:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006782:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006786:	d822      	bhi.n	80067ce <_strtod_l+0xb7e>
 8006788:	a327      	add	r3, pc, #156	; (adr r3, 8006828 <_strtod_l+0xbd8>)
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	4630      	mov	r0, r6
 8006790:	4639      	mov	r1, r7
 8006792:	f7fa f9ad 	bl	8000af0 <__aeabi_dcmple>
 8006796:	b1a0      	cbz	r0, 80067c2 <_strtod_l+0xb72>
 8006798:	4639      	mov	r1, r7
 800679a:	4630      	mov	r0, r6
 800679c:	f7fa fa04 	bl	8000ba8 <__aeabi_d2uiz>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	bf08      	it	eq
 80067a4:	2001      	moveq	r0, #1
 80067a6:	f7f9 fead 	bl	8000504 <__aeabi_ui2d>
 80067aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067ac:	4606      	mov	r6, r0
 80067ae:	460f      	mov	r7, r1
 80067b0:	bb03      	cbnz	r3, 80067f4 <_strtod_l+0xba4>
 80067b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067b6:	9012      	str	r0, [sp, #72]	; 0x48
 80067b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80067ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80067be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80067c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067c6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80067ca:	1a9b      	subs	r3, r3, r2
 80067cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80067ce:	ed9d 0b08 	vldr	d0, [sp, #32]
 80067d2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80067d6:	f001 fcad 	bl	8008134 <__ulp>
 80067da:	4650      	mov	r0, sl
 80067dc:	ec53 2b10 	vmov	r2, r3, d0
 80067e0:	4659      	mov	r1, fp
 80067e2:	f7f9 ff09 	bl	80005f8 <__aeabi_dmul>
 80067e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067ea:	f7f9 fd4f 	bl	800028c <__adddf3>
 80067ee:	4682      	mov	sl, r0
 80067f0:	468b      	mov	fp, r1
 80067f2:	e772      	b.n	80066da <_strtod_l+0xa8a>
 80067f4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80067f8:	e7df      	b.n	80067ba <_strtod_l+0xb6a>
 80067fa:	a30d      	add	r3, pc, #52	; (adr r3, 8006830 <_strtod_l+0xbe0>)
 80067fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006800:	f7fa f96c 	bl	8000adc <__aeabi_dcmplt>
 8006804:	e79c      	b.n	8006740 <_strtod_l+0xaf0>
 8006806:	2300      	movs	r3, #0
 8006808:	930d      	str	r3, [sp, #52]	; 0x34
 800680a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800680c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	f7ff ba61 	b.w	8005cd6 <_strtod_l+0x86>
 8006814:	2b65      	cmp	r3, #101	; 0x65
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	f43f ab4e 	beq.w	8005eba <_strtod_l+0x26a>
 800681e:	2101      	movs	r1, #1
 8006820:	4614      	mov	r4, r2
 8006822:	9104      	str	r1, [sp, #16]
 8006824:	f7ff bacb 	b.w	8005dbe <_strtod_l+0x16e>
 8006828:	ffc00000 	.word	0xffc00000
 800682c:	41dfffff 	.word	0x41dfffff
 8006830:	94a03595 	.word	0x94a03595
 8006834:	3fcfffff 	.word	0x3fcfffff

08006838 <strtod>:
 8006838:	4b07      	ldr	r3, [pc, #28]	; (8006858 <strtod+0x20>)
 800683a:	4a08      	ldr	r2, [pc, #32]	; (800685c <strtod+0x24>)
 800683c:	b410      	push	{r4}
 800683e:	681c      	ldr	r4, [r3, #0]
 8006840:	6a23      	ldr	r3, [r4, #32]
 8006842:	2b00      	cmp	r3, #0
 8006844:	bf08      	it	eq
 8006846:	4613      	moveq	r3, r2
 8006848:	460a      	mov	r2, r1
 800684a:	4601      	mov	r1, r0
 800684c:	4620      	mov	r0, r4
 800684e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006852:	f7ff b9fd 	b.w	8005c50 <_strtod_l>
 8006856:	bf00      	nop
 8006858:	20000010 	.word	0x20000010
 800685c:	20000074 	.word	0x20000074

08006860 <quorem>:
 8006860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006864:	6903      	ldr	r3, [r0, #16]
 8006866:	690c      	ldr	r4, [r1, #16]
 8006868:	42a3      	cmp	r3, r4
 800686a:	4680      	mov	r8, r0
 800686c:	f2c0 8082 	blt.w	8006974 <quorem+0x114>
 8006870:	3c01      	subs	r4, #1
 8006872:	f101 0714 	add.w	r7, r1, #20
 8006876:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800687a:	f100 0614 	add.w	r6, r0, #20
 800687e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006882:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006886:	eb06 030c 	add.w	r3, r6, ip
 800688a:	3501      	adds	r5, #1
 800688c:	eb07 090c 	add.w	r9, r7, ip
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	fbb0 f5f5 	udiv	r5, r0, r5
 8006896:	b395      	cbz	r5, 80068fe <quorem+0x9e>
 8006898:	f04f 0a00 	mov.w	sl, #0
 800689c:	4638      	mov	r0, r7
 800689e:	46b6      	mov	lr, r6
 80068a0:	46d3      	mov	fp, sl
 80068a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80068a6:	b293      	uxth	r3, r2
 80068a8:	fb05 a303 	mla	r3, r5, r3, sl
 80068ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	ebab 0303 	sub.w	r3, fp, r3
 80068b6:	0c12      	lsrs	r2, r2, #16
 80068b8:	f8de b000 	ldr.w	fp, [lr]
 80068bc:	fb05 a202 	mla	r2, r5, r2, sl
 80068c0:	fa13 f38b 	uxtah	r3, r3, fp
 80068c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80068c8:	fa1f fb82 	uxth.w	fp, r2
 80068cc:	f8de 2000 	ldr.w	r2, [lr]
 80068d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80068d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068d8:	b29b      	uxth	r3, r3
 80068da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068de:	4581      	cmp	r9, r0
 80068e0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80068e4:	f84e 3b04 	str.w	r3, [lr], #4
 80068e8:	d2db      	bcs.n	80068a2 <quorem+0x42>
 80068ea:	f856 300c 	ldr.w	r3, [r6, ip]
 80068ee:	b933      	cbnz	r3, 80068fe <quorem+0x9e>
 80068f0:	9b01      	ldr	r3, [sp, #4]
 80068f2:	3b04      	subs	r3, #4
 80068f4:	429e      	cmp	r6, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	d330      	bcc.n	800695c <quorem+0xfc>
 80068fa:	f8c8 4010 	str.w	r4, [r8, #16]
 80068fe:	4640      	mov	r0, r8
 8006900:	f001 fba0 	bl	8008044 <__mcmp>
 8006904:	2800      	cmp	r0, #0
 8006906:	db25      	blt.n	8006954 <quorem+0xf4>
 8006908:	3501      	adds	r5, #1
 800690a:	4630      	mov	r0, r6
 800690c:	f04f 0c00 	mov.w	ip, #0
 8006910:	f857 2b04 	ldr.w	r2, [r7], #4
 8006914:	f8d0 e000 	ldr.w	lr, [r0]
 8006918:	b293      	uxth	r3, r2
 800691a:	ebac 0303 	sub.w	r3, ip, r3
 800691e:	0c12      	lsrs	r2, r2, #16
 8006920:	fa13 f38e 	uxtah	r3, r3, lr
 8006924:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006928:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800692c:	b29b      	uxth	r3, r3
 800692e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006932:	45b9      	cmp	r9, r7
 8006934:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006938:	f840 3b04 	str.w	r3, [r0], #4
 800693c:	d2e8      	bcs.n	8006910 <quorem+0xb0>
 800693e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006942:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006946:	b92a      	cbnz	r2, 8006954 <quorem+0xf4>
 8006948:	3b04      	subs	r3, #4
 800694a:	429e      	cmp	r6, r3
 800694c:	461a      	mov	r2, r3
 800694e:	d30b      	bcc.n	8006968 <quorem+0x108>
 8006950:	f8c8 4010 	str.w	r4, [r8, #16]
 8006954:	4628      	mov	r0, r5
 8006956:	b003      	add	sp, #12
 8006958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695c:	6812      	ldr	r2, [r2, #0]
 800695e:	3b04      	subs	r3, #4
 8006960:	2a00      	cmp	r2, #0
 8006962:	d1ca      	bne.n	80068fa <quorem+0x9a>
 8006964:	3c01      	subs	r4, #1
 8006966:	e7c5      	b.n	80068f4 <quorem+0x94>
 8006968:	6812      	ldr	r2, [r2, #0]
 800696a:	3b04      	subs	r3, #4
 800696c:	2a00      	cmp	r2, #0
 800696e:	d1ef      	bne.n	8006950 <quorem+0xf0>
 8006970:	3c01      	subs	r4, #1
 8006972:	e7ea      	b.n	800694a <quorem+0xea>
 8006974:	2000      	movs	r0, #0
 8006976:	e7ee      	b.n	8006956 <quorem+0xf6>

08006978 <_dtoa_r>:
 8006978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697c:	ec57 6b10 	vmov	r6, r7, d0
 8006980:	b097      	sub	sp, #92	; 0x5c
 8006982:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006984:	9106      	str	r1, [sp, #24]
 8006986:	4604      	mov	r4, r0
 8006988:	920b      	str	r2, [sp, #44]	; 0x2c
 800698a:	9312      	str	r3, [sp, #72]	; 0x48
 800698c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006990:	e9cd 6700 	strd	r6, r7, [sp]
 8006994:	b93d      	cbnz	r5, 80069a6 <_dtoa_r+0x2e>
 8006996:	2010      	movs	r0, #16
 8006998:	f001 f8dc 	bl	8007b54 <malloc>
 800699c:	6260      	str	r0, [r4, #36]	; 0x24
 800699e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80069a2:	6005      	str	r5, [r0, #0]
 80069a4:	60c5      	str	r5, [r0, #12]
 80069a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069a8:	6819      	ldr	r1, [r3, #0]
 80069aa:	b151      	cbz	r1, 80069c2 <_dtoa_r+0x4a>
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	604a      	str	r2, [r1, #4]
 80069b0:	2301      	movs	r3, #1
 80069b2:	4093      	lsls	r3, r2
 80069b4:	608b      	str	r3, [r1, #8]
 80069b6:	4620      	mov	r0, r4
 80069b8:	f001 f925 	bl	8007c06 <_Bfree>
 80069bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	1e3b      	subs	r3, r7, #0
 80069c4:	bfbb      	ittet	lt
 80069c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80069ca:	9301      	strlt	r3, [sp, #4]
 80069cc:	2300      	movge	r3, #0
 80069ce:	2201      	movlt	r2, #1
 80069d0:	bfac      	ite	ge
 80069d2:	f8c8 3000 	strge.w	r3, [r8]
 80069d6:	f8c8 2000 	strlt.w	r2, [r8]
 80069da:	4baf      	ldr	r3, [pc, #700]	; (8006c98 <_dtoa_r+0x320>)
 80069dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80069e0:	ea33 0308 	bics.w	r3, r3, r8
 80069e4:	d114      	bne.n	8006a10 <_dtoa_r+0x98>
 80069e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	9b00      	ldr	r3, [sp, #0]
 80069f0:	b923      	cbnz	r3, 80069fc <_dtoa_r+0x84>
 80069f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80069f6:	2800      	cmp	r0, #0
 80069f8:	f000 8542 	beq.w	8007480 <_dtoa_r+0xb08>
 80069fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006cac <_dtoa_r+0x334>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 8544 	beq.w	8007490 <_dtoa_r+0xb18>
 8006a08:	f10b 0303 	add.w	r3, fp, #3
 8006a0c:	f000 bd3e 	b.w	800748c <_dtoa_r+0xb14>
 8006a10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006a14:	2200      	movs	r2, #0
 8006a16:	2300      	movs	r3, #0
 8006a18:	4630      	mov	r0, r6
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	f7fa f854 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a20:	4681      	mov	r9, r0
 8006a22:	b168      	cbz	r0, 8006a40 <_dtoa_r+0xc8>
 8006a24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a26:	2301      	movs	r3, #1
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 8524 	beq.w	800747a <_dtoa_r+0xb02>
 8006a32:	4b9a      	ldr	r3, [pc, #616]	; (8006c9c <_dtoa_r+0x324>)
 8006a34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a36:	f103 3bff 	add.w	fp, r3, #4294967295
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	f000 bd28 	b.w	8007490 <_dtoa_r+0xb18>
 8006a40:	aa14      	add	r2, sp, #80	; 0x50
 8006a42:	a915      	add	r1, sp, #84	; 0x54
 8006a44:	ec47 6b10 	vmov	d0, r6, r7
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f001 fbe9 	bl	8008220 <__d2b>
 8006a4e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006a52:	9004      	str	r0, [sp, #16]
 8006a54:	2d00      	cmp	r5, #0
 8006a56:	d07c      	beq.n	8006b52 <_dtoa_r+0x1da>
 8006a58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a5c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006a60:	46b2      	mov	sl, r6
 8006a62:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006a66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a6a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006a6e:	2200      	movs	r2, #0
 8006a70:	4b8b      	ldr	r3, [pc, #556]	; (8006ca0 <_dtoa_r+0x328>)
 8006a72:	4650      	mov	r0, sl
 8006a74:	4659      	mov	r1, fp
 8006a76:	f7f9 fc07 	bl	8000288 <__aeabi_dsub>
 8006a7a:	a381      	add	r3, pc, #516	; (adr r3, 8006c80 <_dtoa_r+0x308>)
 8006a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a80:	f7f9 fdba 	bl	80005f8 <__aeabi_dmul>
 8006a84:	a380      	add	r3, pc, #512	; (adr r3, 8006c88 <_dtoa_r+0x310>)
 8006a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8a:	f7f9 fbff 	bl	800028c <__adddf3>
 8006a8e:	4606      	mov	r6, r0
 8006a90:	4628      	mov	r0, r5
 8006a92:	460f      	mov	r7, r1
 8006a94:	f7f9 fd46 	bl	8000524 <__aeabi_i2d>
 8006a98:	a37d      	add	r3, pc, #500	; (adr r3, 8006c90 <_dtoa_r+0x318>)
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	f7f9 fdab 	bl	80005f8 <__aeabi_dmul>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	f7f9 fbef 	bl	800028c <__adddf3>
 8006aae:	4606      	mov	r6, r0
 8006ab0:	460f      	mov	r7, r1
 8006ab2:	f7fa f851 	bl	8000b58 <__aeabi_d2iz>
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	4682      	mov	sl, r0
 8006aba:	2300      	movs	r3, #0
 8006abc:	4630      	mov	r0, r6
 8006abe:	4639      	mov	r1, r7
 8006ac0:	f7fa f80c 	bl	8000adc <__aeabi_dcmplt>
 8006ac4:	b148      	cbz	r0, 8006ada <_dtoa_r+0x162>
 8006ac6:	4650      	mov	r0, sl
 8006ac8:	f7f9 fd2c 	bl	8000524 <__aeabi_i2d>
 8006acc:	4632      	mov	r2, r6
 8006ace:	463b      	mov	r3, r7
 8006ad0:	f7f9 fffa 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ad4:	b908      	cbnz	r0, 8006ada <_dtoa_r+0x162>
 8006ad6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ada:	f1ba 0f16 	cmp.w	sl, #22
 8006ade:	d859      	bhi.n	8006b94 <_dtoa_r+0x21c>
 8006ae0:	4970      	ldr	r1, [pc, #448]	; (8006ca4 <_dtoa_r+0x32c>)
 8006ae2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006ae6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006aea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aee:	f7fa f813 	bl	8000b18 <__aeabi_dcmpgt>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	d050      	beq.n	8006b98 <_dtoa_r+0x220>
 8006af6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006afa:	2300      	movs	r3, #0
 8006afc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006afe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b00:	1b5d      	subs	r5, r3, r5
 8006b02:	f1b5 0801 	subs.w	r8, r5, #1
 8006b06:	bf49      	itett	mi
 8006b08:	f1c5 0301 	rsbmi	r3, r5, #1
 8006b0c:	2300      	movpl	r3, #0
 8006b0e:	9305      	strmi	r3, [sp, #20]
 8006b10:	f04f 0800 	movmi.w	r8, #0
 8006b14:	bf58      	it	pl
 8006b16:	9305      	strpl	r3, [sp, #20]
 8006b18:	f1ba 0f00 	cmp.w	sl, #0
 8006b1c:	db3e      	blt.n	8006b9c <_dtoa_r+0x224>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	44d0      	add	r8, sl
 8006b22:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006b26:	9307      	str	r3, [sp, #28]
 8006b28:	9b06      	ldr	r3, [sp, #24]
 8006b2a:	2b09      	cmp	r3, #9
 8006b2c:	f200 8090 	bhi.w	8006c50 <_dtoa_r+0x2d8>
 8006b30:	2b05      	cmp	r3, #5
 8006b32:	bfc4      	itt	gt
 8006b34:	3b04      	subgt	r3, #4
 8006b36:	9306      	strgt	r3, [sp, #24]
 8006b38:	9b06      	ldr	r3, [sp, #24]
 8006b3a:	f1a3 0302 	sub.w	r3, r3, #2
 8006b3e:	bfcc      	ite	gt
 8006b40:	2500      	movgt	r5, #0
 8006b42:	2501      	movle	r5, #1
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	f200 808f 	bhi.w	8006c68 <_dtoa_r+0x2f0>
 8006b4a:	e8df f003 	tbb	[pc, r3]
 8006b4e:	7f7d      	.short	0x7f7d
 8006b50:	7131      	.short	0x7131
 8006b52:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006b56:	441d      	add	r5, r3
 8006b58:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006b5c:	2820      	cmp	r0, #32
 8006b5e:	dd13      	ble.n	8006b88 <_dtoa_r+0x210>
 8006b60:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006b64:	9b00      	ldr	r3, [sp, #0]
 8006b66:	fa08 f800 	lsl.w	r8, r8, r0
 8006b6a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006b6e:	fa23 f000 	lsr.w	r0, r3, r0
 8006b72:	ea48 0000 	orr.w	r0, r8, r0
 8006b76:	f7f9 fcc5 	bl	8000504 <__aeabi_ui2d>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	4682      	mov	sl, r0
 8006b7e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006b82:	3d01      	subs	r5, #1
 8006b84:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b86:	e772      	b.n	8006a6e <_dtoa_r+0xf6>
 8006b88:	9b00      	ldr	r3, [sp, #0]
 8006b8a:	f1c0 0020 	rsb	r0, r0, #32
 8006b8e:	fa03 f000 	lsl.w	r0, r3, r0
 8006b92:	e7f0      	b.n	8006b76 <_dtoa_r+0x1fe>
 8006b94:	2301      	movs	r3, #1
 8006b96:	e7b1      	b.n	8006afc <_dtoa_r+0x184>
 8006b98:	900f      	str	r0, [sp, #60]	; 0x3c
 8006b9a:	e7b0      	b.n	8006afe <_dtoa_r+0x186>
 8006b9c:	9b05      	ldr	r3, [sp, #20]
 8006b9e:	eba3 030a 	sub.w	r3, r3, sl
 8006ba2:	9305      	str	r3, [sp, #20]
 8006ba4:	f1ca 0300 	rsb	r3, sl, #0
 8006ba8:	9307      	str	r3, [sp, #28]
 8006baa:	2300      	movs	r3, #0
 8006bac:	930e      	str	r3, [sp, #56]	; 0x38
 8006bae:	e7bb      	b.n	8006b28 <_dtoa_r+0x1b0>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8006bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	dd59      	ble.n	8006c6e <_dtoa_r+0x2f6>
 8006bba:	9302      	str	r3, [sp, #8]
 8006bbc:	4699      	mov	r9, r3
 8006bbe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	6072      	str	r2, [r6, #4]
 8006bc4:	2204      	movs	r2, #4
 8006bc6:	f102 0014 	add.w	r0, r2, #20
 8006bca:	4298      	cmp	r0, r3
 8006bcc:	6871      	ldr	r1, [r6, #4]
 8006bce:	d953      	bls.n	8006c78 <_dtoa_r+0x300>
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f000 ffe4 	bl	8007b9e <_Balloc>
 8006bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd8:	6030      	str	r0, [r6, #0]
 8006bda:	f1b9 0f0e 	cmp.w	r9, #14
 8006bde:	f8d3 b000 	ldr.w	fp, [r3]
 8006be2:	f200 80e6 	bhi.w	8006db2 <_dtoa_r+0x43a>
 8006be6:	2d00      	cmp	r5, #0
 8006be8:	f000 80e3 	beq.w	8006db2 <_dtoa_r+0x43a>
 8006bec:	ed9d 7b00 	vldr	d7, [sp]
 8006bf0:	f1ba 0f00 	cmp.w	sl, #0
 8006bf4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006bf8:	dd74      	ble.n	8006ce4 <_dtoa_r+0x36c>
 8006bfa:	4a2a      	ldr	r2, [pc, #168]	; (8006ca4 <_dtoa_r+0x32c>)
 8006bfc:	f00a 030f 	and.w	r3, sl, #15
 8006c00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c04:	ed93 7b00 	vldr	d7, [r3]
 8006c08:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006c0c:	06f0      	lsls	r0, r6, #27
 8006c0e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006c12:	d565      	bpl.n	8006ce0 <_dtoa_r+0x368>
 8006c14:	4b24      	ldr	r3, [pc, #144]	; (8006ca8 <_dtoa_r+0x330>)
 8006c16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c1e:	f7f9 fe15 	bl	800084c <__aeabi_ddiv>
 8006c22:	e9cd 0100 	strd	r0, r1, [sp]
 8006c26:	f006 060f 	and.w	r6, r6, #15
 8006c2a:	2503      	movs	r5, #3
 8006c2c:	4f1e      	ldr	r7, [pc, #120]	; (8006ca8 <_dtoa_r+0x330>)
 8006c2e:	e04c      	b.n	8006cca <_dtoa_r+0x352>
 8006c30:	2301      	movs	r3, #1
 8006c32:	930a      	str	r3, [sp, #40]	; 0x28
 8006c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c36:	4453      	add	r3, sl
 8006c38:	f103 0901 	add.w	r9, r3, #1
 8006c3c:	9302      	str	r3, [sp, #8]
 8006c3e:	464b      	mov	r3, r9
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	bfb8      	it	lt
 8006c44:	2301      	movlt	r3, #1
 8006c46:	e7ba      	b.n	8006bbe <_dtoa_r+0x246>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	e7b2      	b.n	8006bb2 <_dtoa_r+0x23a>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e7f0      	b.n	8006c32 <_dtoa_r+0x2ba>
 8006c50:	2501      	movs	r5, #1
 8006c52:	2300      	movs	r3, #0
 8006c54:	9306      	str	r3, [sp, #24]
 8006c56:	950a      	str	r5, [sp, #40]	; 0x28
 8006c58:	f04f 33ff 	mov.w	r3, #4294967295
 8006c5c:	9302      	str	r3, [sp, #8]
 8006c5e:	4699      	mov	r9, r3
 8006c60:	2200      	movs	r2, #0
 8006c62:	2312      	movs	r3, #18
 8006c64:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c66:	e7aa      	b.n	8006bbe <_dtoa_r+0x246>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8006c6c:	e7f4      	b.n	8006c58 <_dtoa_r+0x2e0>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	9302      	str	r3, [sp, #8]
 8006c72:	4699      	mov	r9, r3
 8006c74:	461a      	mov	r2, r3
 8006c76:	e7f5      	b.n	8006c64 <_dtoa_r+0x2ec>
 8006c78:	3101      	adds	r1, #1
 8006c7a:	6071      	str	r1, [r6, #4]
 8006c7c:	0052      	lsls	r2, r2, #1
 8006c7e:	e7a2      	b.n	8006bc6 <_dtoa_r+0x24e>
 8006c80:	636f4361 	.word	0x636f4361
 8006c84:	3fd287a7 	.word	0x3fd287a7
 8006c88:	8b60c8b3 	.word	0x8b60c8b3
 8006c8c:	3fc68a28 	.word	0x3fc68a28
 8006c90:	509f79fb 	.word	0x509f79fb
 8006c94:	3fd34413 	.word	0x3fd34413
 8006c98:	7ff00000 	.word	0x7ff00000
 8006c9c:	08008911 	.word	0x08008911
 8006ca0:	3ff80000 	.word	0x3ff80000
 8006ca4:	080089c8 	.word	0x080089c8
 8006ca8:	080089a0 	.word	0x080089a0
 8006cac:	08008991 	.word	0x08008991
 8006cb0:	07f1      	lsls	r1, r6, #31
 8006cb2:	d508      	bpl.n	8006cc6 <_dtoa_r+0x34e>
 8006cb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cbc:	f7f9 fc9c 	bl	80005f8 <__aeabi_dmul>
 8006cc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006cc4:	3501      	adds	r5, #1
 8006cc6:	1076      	asrs	r6, r6, #1
 8006cc8:	3708      	adds	r7, #8
 8006cca:	2e00      	cmp	r6, #0
 8006ccc:	d1f0      	bne.n	8006cb0 <_dtoa_r+0x338>
 8006cce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006cd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cd6:	f7f9 fdb9 	bl	800084c <__aeabi_ddiv>
 8006cda:	e9cd 0100 	strd	r0, r1, [sp]
 8006cde:	e01a      	b.n	8006d16 <_dtoa_r+0x39e>
 8006ce0:	2502      	movs	r5, #2
 8006ce2:	e7a3      	b.n	8006c2c <_dtoa_r+0x2b4>
 8006ce4:	f000 80a0 	beq.w	8006e28 <_dtoa_r+0x4b0>
 8006ce8:	f1ca 0600 	rsb	r6, sl, #0
 8006cec:	4b9f      	ldr	r3, [pc, #636]	; (8006f6c <_dtoa_r+0x5f4>)
 8006cee:	4fa0      	ldr	r7, [pc, #640]	; (8006f70 <_dtoa_r+0x5f8>)
 8006cf0:	f006 020f 	and.w	r2, r6, #15
 8006cf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d00:	f7f9 fc7a 	bl	80005f8 <__aeabi_dmul>
 8006d04:	e9cd 0100 	strd	r0, r1, [sp]
 8006d08:	1136      	asrs	r6, r6, #4
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	2502      	movs	r5, #2
 8006d0e:	2e00      	cmp	r6, #0
 8006d10:	d17f      	bne.n	8006e12 <_dtoa_r+0x49a>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1e1      	bne.n	8006cda <_dtoa_r+0x362>
 8006d16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8087 	beq.w	8006e2c <_dtoa_r+0x4b4>
 8006d1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006d22:	2200      	movs	r2, #0
 8006d24:	4b93      	ldr	r3, [pc, #588]	; (8006f74 <_dtoa_r+0x5fc>)
 8006d26:	4630      	mov	r0, r6
 8006d28:	4639      	mov	r1, r7
 8006d2a:	f7f9 fed7 	bl	8000adc <__aeabi_dcmplt>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	d07c      	beq.n	8006e2c <_dtoa_r+0x4b4>
 8006d32:	f1b9 0f00 	cmp.w	r9, #0
 8006d36:	d079      	beq.n	8006e2c <_dtoa_r+0x4b4>
 8006d38:	9b02      	ldr	r3, [sp, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	dd35      	ble.n	8006daa <_dtoa_r+0x432>
 8006d3e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006d42:	9308      	str	r3, [sp, #32]
 8006d44:	4639      	mov	r1, r7
 8006d46:	2200      	movs	r2, #0
 8006d48:	4b8b      	ldr	r3, [pc, #556]	; (8006f78 <_dtoa_r+0x600>)
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	f7f9 fc54 	bl	80005f8 <__aeabi_dmul>
 8006d50:	e9cd 0100 	strd	r0, r1, [sp]
 8006d54:	9f02      	ldr	r7, [sp, #8]
 8006d56:	3501      	adds	r5, #1
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f7f9 fbe3 	bl	8000524 <__aeabi_i2d>
 8006d5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d62:	f7f9 fc49 	bl	80005f8 <__aeabi_dmul>
 8006d66:	2200      	movs	r2, #0
 8006d68:	4b84      	ldr	r3, [pc, #528]	; (8006f7c <_dtoa_r+0x604>)
 8006d6a:	f7f9 fa8f 	bl	800028c <__adddf3>
 8006d6e:	4605      	mov	r5, r0
 8006d70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006d74:	2f00      	cmp	r7, #0
 8006d76:	d15d      	bne.n	8006e34 <_dtoa_r+0x4bc>
 8006d78:	2200      	movs	r2, #0
 8006d7a:	4b81      	ldr	r3, [pc, #516]	; (8006f80 <_dtoa_r+0x608>)
 8006d7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d80:	f7f9 fa82 	bl	8000288 <__aeabi_dsub>
 8006d84:	462a      	mov	r2, r5
 8006d86:	4633      	mov	r3, r6
 8006d88:	e9cd 0100 	strd	r0, r1, [sp]
 8006d8c:	f7f9 fec4 	bl	8000b18 <__aeabi_dcmpgt>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	f040 8288 	bne.w	80072a6 <_dtoa_r+0x92e>
 8006d96:	462a      	mov	r2, r5
 8006d98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006d9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006da0:	f7f9 fe9c 	bl	8000adc <__aeabi_dcmplt>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	f040 827c 	bne.w	80072a2 <_dtoa_r+0x92a>
 8006daa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006dae:	e9cd 2300 	strd	r2, r3, [sp]
 8006db2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f2c0 8150 	blt.w	800705a <_dtoa_r+0x6e2>
 8006dba:	f1ba 0f0e 	cmp.w	sl, #14
 8006dbe:	f300 814c 	bgt.w	800705a <_dtoa_r+0x6e2>
 8006dc2:	4b6a      	ldr	r3, [pc, #424]	; (8006f6c <_dtoa_r+0x5f4>)
 8006dc4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006dc8:	ed93 7b00 	vldr	d7, [r3]
 8006dcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006dd4:	f280 80d8 	bge.w	8006f88 <_dtoa_r+0x610>
 8006dd8:	f1b9 0f00 	cmp.w	r9, #0
 8006ddc:	f300 80d4 	bgt.w	8006f88 <_dtoa_r+0x610>
 8006de0:	f040 825e 	bne.w	80072a0 <_dtoa_r+0x928>
 8006de4:	2200      	movs	r2, #0
 8006de6:	4b66      	ldr	r3, [pc, #408]	; (8006f80 <_dtoa_r+0x608>)
 8006de8:	ec51 0b17 	vmov	r0, r1, d7
 8006dec:	f7f9 fc04 	bl	80005f8 <__aeabi_dmul>
 8006df0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006df4:	f7f9 fe86 	bl	8000b04 <__aeabi_dcmpge>
 8006df8:	464f      	mov	r7, r9
 8006dfa:	464e      	mov	r6, r9
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	f040 8234 	bne.w	800726a <_dtoa_r+0x8f2>
 8006e02:	2331      	movs	r3, #49	; 0x31
 8006e04:	f10b 0501 	add.w	r5, fp, #1
 8006e08:	f88b 3000 	strb.w	r3, [fp]
 8006e0c:	f10a 0a01 	add.w	sl, sl, #1
 8006e10:	e22f      	b.n	8007272 <_dtoa_r+0x8fa>
 8006e12:	07f2      	lsls	r2, r6, #31
 8006e14:	d505      	bpl.n	8006e22 <_dtoa_r+0x4aa>
 8006e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e1a:	f7f9 fbed 	bl	80005f8 <__aeabi_dmul>
 8006e1e:	3501      	adds	r5, #1
 8006e20:	2301      	movs	r3, #1
 8006e22:	1076      	asrs	r6, r6, #1
 8006e24:	3708      	adds	r7, #8
 8006e26:	e772      	b.n	8006d0e <_dtoa_r+0x396>
 8006e28:	2502      	movs	r5, #2
 8006e2a:	e774      	b.n	8006d16 <_dtoa_r+0x39e>
 8006e2c:	f8cd a020 	str.w	sl, [sp, #32]
 8006e30:	464f      	mov	r7, r9
 8006e32:	e791      	b.n	8006d58 <_dtoa_r+0x3e0>
 8006e34:	4b4d      	ldr	r3, [pc, #308]	; (8006f6c <_dtoa_r+0x5f4>)
 8006e36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e3a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d047      	beq.n	8006ed4 <_dtoa_r+0x55c>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	2000      	movs	r0, #0
 8006e4a:	494e      	ldr	r1, [pc, #312]	; (8006f84 <_dtoa_r+0x60c>)
 8006e4c:	f7f9 fcfe 	bl	800084c <__aeabi_ddiv>
 8006e50:	462a      	mov	r2, r5
 8006e52:	4633      	mov	r3, r6
 8006e54:	f7f9 fa18 	bl	8000288 <__aeabi_dsub>
 8006e58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006e5c:	465d      	mov	r5, fp
 8006e5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e62:	f7f9 fe79 	bl	8000b58 <__aeabi_d2iz>
 8006e66:	4606      	mov	r6, r0
 8006e68:	f7f9 fb5c 	bl	8000524 <__aeabi_i2d>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e74:	f7f9 fa08 	bl	8000288 <__aeabi_dsub>
 8006e78:	3630      	adds	r6, #48	; 0x30
 8006e7a:	f805 6b01 	strb.w	r6, [r5], #1
 8006e7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e82:	e9cd 0100 	strd	r0, r1, [sp]
 8006e86:	f7f9 fe29 	bl	8000adc <__aeabi_dcmplt>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d163      	bne.n	8006f56 <_dtoa_r+0x5de>
 8006e8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e92:	2000      	movs	r0, #0
 8006e94:	4937      	ldr	r1, [pc, #220]	; (8006f74 <_dtoa_r+0x5fc>)
 8006e96:	f7f9 f9f7 	bl	8000288 <__aeabi_dsub>
 8006e9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e9e:	f7f9 fe1d 	bl	8000adc <__aeabi_dcmplt>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	f040 80b7 	bne.w	8007016 <_dtoa_r+0x69e>
 8006ea8:	eba5 030b 	sub.w	r3, r5, fp
 8006eac:	429f      	cmp	r7, r3
 8006eae:	f77f af7c 	ble.w	8006daa <_dtoa_r+0x432>
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	4b30      	ldr	r3, [pc, #192]	; (8006f78 <_dtoa_r+0x600>)
 8006eb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006eba:	f7f9 fb9d 	bl	80005f8 <__aeabi_dmul>
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006ec4:	4b2c      	ldr	r3, [pc, #176]	; (8006f78 <_dtoa_r+0x600>)
 8006ec6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006eca:	f7f9 fb95 	bl	80005f8 <__aeabi_dmul>
 8006ece:	e9cd 0100 	strd	r0, r1, [sp]
 8006ed2:	e7c4      	b.n	8006e5e <_dtoa_r+0x4e6>
 8006ed4:	462a      	mov	r2, r5
 8006ed6:	4633      	mov	r3, r6
 8006ed8:	f7f9 fb8e 	bl	80005f8 <__aeabi_dmul>
 8006edc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006ee0:	eb0b 0507 	add.w	r5, fp, r7
 8006ee4:	465e      	mov	r6, fp
 8006ee6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006eea:	f7f9 fe35 	bl	8000b58 <__aeabi_d2iz>
 8006eee:	4607      	mov	r7, r0
 8006ef0:	f7f9 fb18 	bl	8000524 <__aeabi_i2d>
 8006ef4:	3730      	adds	r7, #48	; 0x30
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006efe:	f7f9 f9c3 	bl	8000288 <__aeabi_dsub>
 8006f02:	f806 7b01 	strb.w	r7, [r6], #1
 8006f06:	42ae      	cmp	r6, r5
 8006f08:	e9cd 0100 	strd	r0, r1, [sp]
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	d126      	bne.n	8006f60 <_dtoa_r+0x5e8>
 8006f12:	4b1c      	ldr	r3, [pc, #112]	; (8006f84 <_dtoa_r+0x60c>)
 8006f14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f18:	f7f9 f9b8 	bl	800028c <__adddf3>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f24:	f7f9 fdf8 	bl	8000b18 <__aeabi_dcmpgt>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d174      	bne.n	8007016 <_dtoa_r+0x69e>
 8006f2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f30:	2000      	movs	r0, #0
 8006f32:	4914      	ldr	r1, [pc, #80]	; (8006f84 <_dtoa_r+0x60c>)
 8006f34:	f7f9 f9a8 	bl	8000288 <__aeabi_dsub>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f40:	f7f9 fdcc 	bl	8000adc <__aeabi_dcmplt>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	f43f af30 	beq.w	8006daa <_dtoa_r+0x432>
 8006f4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f4e:	2b30      	cmp	r3, #48	; 0x30
 8006f50:	f105 32ff 	add.w	r2, r5, #4294967295
 8006f54:	d002      	beq.n	8006f5c <_dtoa_r+0x5e4>
 8006f56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006f5a:	e04a      	b.n	8006ff2 <_dtoa_r+0x67a>
 8006f5c:	4615      	mov	r5, r2
 8006f5e:	e7f4      	b.n	8006f4a <_dtoa_r+0x5d2>
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <_dtoa_r+0x600>)
 8006f62:	f7f9 fb49 	bl	80005f8 <__aeabi_dmul>
 8006f66:	e9cd 0100 	strd	r0, r1, [sp]
 8006f6a:	e7bc      	b.n	8006ee6 <_dtoa_r+0x56e>
 8006f6c:	080089c8 	.word	0x080089c8
 8006f70:	080089a0 	.word	0x080089a0
 8006f74:	3ff00000 	.word	0x3ff00000
 8006f78:	40240000 	.word	0x40240000
 8006f7c:	401c0000 	.word	0x401c0000
 8006f80:	40140000 	.word	0x40140000
 8006f84:	3fe00000 	.word	0x3fe00000
 8006f88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006f8c:	465d      	mov	r5, fp
 8006f8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f92:	4630      	mov	r0, r6
 8006f94:	4639      	mov	r1, r7
 8006f96:	f7f9 fc59 	bl	800084c <__aeabi_ddiv>
 8006f9a:	f7f9 fddd 	bl	8000b58 <__aeabi_d2iz>
 8006f9e:	4680      	mov	r8, r0
 8006fa0:	f7f9 fac0 	bl	8000524 <__aeabi_i2d>
 8006fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fa8:	f7f9 fb26 	bl	80005f8 <__aeabi_dmul>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006fb8:	f7f9 f966 	bl	8000288 <__aeabi_dsub>
 8006fbc:	f805 6b01 	strb.w	r6, [r5], #1
 8006fc0:	eba5 060b 	sub.w	r6, r5, fp
 8006fc4:	45b1      	cmp	r9, r6
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	d139      	bne.n	8007040 <_dtoa_r+0x6c8>
 8006fcc:	f7f9 f95e 	bl	800028c <__adddf3>
 8006fd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fd4:	4606      	mov	r6, r0
 8006fd6:	460f      	mov	r7, r1
 8006fd8:	f7f9 fd9e 	bl	8000b18 <__aeabi_dcmpgt>
 8006fdc:	b9c8      	cbnz	r0, 8007012 <_dtoa_r+0x69a>
 8006fde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	f7f9 fd6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fea:	b110      	cbz	r0, 8006ff2 <_dtoa_r+0x67a>
 8006fec:	f018 0f01 	tst.w	r8, #1
 8006ff0:	d10f      	bne.n	8007012 <_dtoa_r+0x69a>
 8006ff2:	9904      	ldr	r1, [sp, #16]
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f000 fe06 	bl	8007c06 <_Bfree>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ffe:	702b      	strb	r3, [r5, #0]
 8007000:	f10a 0301 	add.w	r3, sl, #1
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 8241 	beq.w	8007490 <_dtoa_r+0xb18>
 800700e:	601d      	str	r5, [r3, #0]
 8007010:	e23e      	b.n	8007490 <_dtoa_r+0xb18>
 8007012:	f8cd a020 	str.w	sl, [sp, #32]
 8007016:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800701a:	2a39      	cmp	r2, #57	; 0x39
 800701c:	f105 33ff 	add.w	r3, r5, #4294967295
 8007020:	d108      	bne.n	8007034 <_dtoa_r+0x6bc>
 8007022:	459b      	cmp	fp, r3
 8007024:	d10a      	bne.n	800703c <_dtoa_r+0x6c4>
 8007026:	9b08      	ldr	r3, [sp, #32]
 8007028:	3301      	adds	r3, #1
 800702a:	9308      	str	r3, [sp, #32]
 800702c:	2330      	movs	r3, #48	; 0x30
 800702e:	f88b 3000 	strb.w	r3, [fp]
 8007032:	465b      	mov	r3, fp
 8007034:	781a      	ldrb	r2, [r3, #0]
 8007036:	3201      	adds	r2, #1
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	e78c      	b.n	8006f56 <_dtoa_r+0x5de>
 800703c:	461d      	mov	r5, r3
 800703e:	e7ea      	b.n	8007016 <_dtoa_r+0x69e>
 8007040:	2200      	movs	r2, #0
 8007042:	4b9b      	ldr	r3, [pc, #620]	; (80072b0 <_dtoa_r+0x938>)
 8007044:	f7f9 fad8 	bl	80005f8 <__aeabi_dmul>
 8007048:	2200      	movs	r2, #0
 800704a:	2300      	movs	r3, #0
 800704c:	4606      	mov	r6, r0
 800704e:	460f      	mov	r7, r1
 8007050:	f7f9 fd3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007054:	2800      	cmp	r0, #0
 8007056:	d09a      	beq.n	8006f8e <_dtoa_r+0x616>
 8007058:	e7cb      	b.n	8006ff2 <_dtoa_r+0x67a>
 800705a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800705c:	2a00      	cmp	r2, #0
 800705e:	f000 808b 	beq.w	8007178 <_dtoa_r+0x800>
 8007062:	9a06      	ldr	r2, [sp, #24]
 8007064:	2a01      	cmp	r2, #1
 8007066:	dc6e      	bgt.n	8007146 <_dtoa_r+0x7ce>
 8007068:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800706a:	2a00      	cmp	r2, #0
 800706c:	d067      	beq.n	800713e <_dtoa_r+0x7c6>
 800706e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007072:	9f07      	ldr	r7, [sp, #28]
 8007074:	9d05      	ldr	r5, [sp, #20]
 8007076:	9a05      	ldr	r2, [sp, #20]
 8007078:	2101      	movs	r1, #1
 800707a:	441a      	add	r2, r3
 800707c:	4620      	mov	r0, r4
 800707e:	9205      	str	r2, [sp, #20]
 8007080:	4498      	add	r8, r3
 8007082:	f000 fe9e 	bl	8007dc2 <__i2b>
 8007086:	4606      	mov	r6, r0
 8007088:	2d00      	cmp	r5, #0
 800708a:	dd0c      	ble.n	80070a6 <_dtoa_r+0x72e>
 800708c:	f1b8 0f00 	cmp.w	r8, #0
 8007090:	dd09      	ble.n	80070a6 <_dtoa_r+0x72e>
 8007092:	4545      	cmp	r5, r8
 8007094:	9a05      	ldr	r2, [sp, #20]
 8007096:	462b      	mov	r3, r5
 8007098:	bfa8      	it	ge
 800709a:	4643      	movge	r3, r8
 800709c:	1ad2      	subs	r2, r2, r3
 800709e:	9205      	str	r2, [sp, #20]
 80070a0:	1aed      	subs	r5, r5, r3
 80070a2:	eba8 0803 	sub.w	r8, r8, r3
 80070a6:	9b07      	ldr	r3, [sp, #28]
 80070a8:	b1eb      	cbz	r3, 80070e6 <_dtoa_r+0x76e>
 80070aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d067      	beq.n	8007180 <_dtoa_r+0x808>
 80070b0:	b18f      	cbz	r7, 80070d6 <_dtoa_r+0x75e>
 80070b2:	4631      	mov	r1, r6
 80070b4:	463a      	mov	r2, r7
 80070b6:	4620      	mov	r0, r4
 80070b8:	f000 ff22 	bl	8007f00 <__pow5mult>
 80070bc:	9a04      	ldr	r2, [sp, #16]
 80070be:	4601      	mov	r1, r0
 80070c0:	4606      	mov	r6, r0
 80070c2:	4620      	mov	r0, r4
 80070c4:	f000 fe86 	bl	8007dd4 <__multiply>
 80070c8:	9904      	ldr	r1, [sp, #16]
 80070ca:	9008      	str	r0, [sp, #32]
 80070cc:	4620      	mov	r0, r4
 80070ce:	f000 fd9a 	bl	8007c06 <_Bfree>
 80070d2:	9b08      	ldr	r3, [sp, #32]
 80070d4:	9304      	str	r3, [sp, #16]
 80070d6:	9b07      	ldr	r3, [sp, #28]
 80070d8:	1bda      	subs	r2, r3, r7
 80070da:	d004      	beq.n	80070e6 <_dtoa_r+0x76e>
 80070dc:	9904      	ldr	r1, [sp, #16]
 80070de:	4620      	mov	r0, r4
 80070e0:	f000 ff0e 	bl	8007f00 <__pow5mult>
 80070e4:	9004      	str	r0, [sp, #16]
 80070e6:	2101      	movs	r1, #1
 80070e8:	4620      	mov	r0, r4
 80070ea:	f000 fe6a 	bl	8007dc2 <__i2b>
 80070ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070f0:	4607      	mov	r7, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 81d0 	beq.w	8007498 <_dtoa_r+0xb20>
 80070f8:	461a      	mov	r2, r3
 80070fa:	4601      	mov	r1, r0
 80070fc:	4620      	mov	r0, r4
 80070fe:	f000 feff 	bl	8007f00 <__pow5mult>
 8007102:	9b06      	ldr	r3, [sp, #24]
 8007104:	2b01      	cmp	r3, #1
 8007106:	4607      	mov	r7, r0
 8007108:	dc40      	bgt.n	800718c <_dtoa_r+0x814>
 800710a:	9b00      	ldr	r3, [sp, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d139      	bne.n	8007184 <_dtoa_r+0x80c>
 8007110:	9b01      	ldr	r3, [sp, #4]
 8007112:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007116:	2b00      	cmp	r3, #0
 8007118:	d136      	bne.n	8007188 <_dtoa_r+0x810>
 800711a:	9b01      	ldr	r3, [sp, #4]
 800711c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007120:	0d1b      	lsrs	r3, r3, #20
 8007122:	051b      	lsls	r3, r3, #20
 8007124:	b12b      	cbz	r3, 8007132 <_dtoa_r+0x7ba>
 8007126:	9b05      	ldr	r3, [sp, #20]
 8007128:	3301      	adds	r3, #1
 800712a:	9305      	str	r3, [sp, #20]
 800712c:	f108 0801 	add.w	r8, r8, #1
 8007130:	2301      	movs	r3, #1
 8007132:	9307      	str	r3, [sp, #28]
 8007134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007136:	2b00      	cmp	r3, #0
 8007138:	d12a      	bne.n	8007190 <_dtoa_r+0x818>
 800713a:	2001      	movs	r0, #1
 800713c:	e030      	b.n	80071a0 <_dtoa_r+0x828>
 800713e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007140:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007144:	e795      	b.n	8007072 <_dtoa_r+0x6fa>
 8007146:	9b07      	ldr	r3, [sp, #28]
 8007148:	f109 37ff 	add.w	r7, r9, #4294967295
 800714c:	42bb      	cmp	r3, r7
 800714e:	bfbf      	itttt	lt
 8007150:	9b07      	ldrlt	r3, [sp, #28]
 8007152:	9707      	strlt	r7, [sp, #28]
 8007154:	1afa      	sublt	r2, r7, r3
 8007156:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007158:	bfbb      	ittet	lt
 800715a:	189b      	addlt	r3, r3, r2
 800715c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800715e:	1bdf      	subge	r7, r3, r7
 8007160:	2700      	movlt	r7, #0
 8007162:	f1b9 0f00 	cmp.w	r9, #0
 8007166:	bfb5      	itete	lt
 8007168:	9b05      	ldrlt	r3, [sp, #20]
 800716a:	9d05      	ldrge	r5, [sp, #20]
 800716c:	eba3 0509 	sublt.w	r5, r3, r9
 8007170:	464b      	movge	r3, r9
 8007172:	bfb8      	it	lt
 8007174:	2300      	movlt	r3, #0
 8007176:	e77e      	b.n	8007076 <_dtoa_r+0x6fe>
 8007178:	9f07      	ldr	r7, [sp, #28]
 800717a:	9d05      	ldr	r5, [sp, #20]
 800717c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800717e:	e783      	b.n	8007088 <_dtoa_r+0x710>
 8007180:	9a07      	ldr	r2, [sp, #28]
 8007182:	e7ab      	b.n	80070dc <_dtoa_r+0x764>
 8007184:	2300      	movs	r3, #0
 8007186:	e7d4      	b.n	8007132 <_dtoa_r+0x7ba>
 8007188:	9b00      	ldr	r3, [sp, #0]
 800718a:	e7d2      	b.n	8007132 <_dtoa_r+0x7ba>
 800718c:	2300      	movs	r3, #0
 800718e:	9307      	str	r3, [sp, #28]
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007196:	6918      	ldr	r0, [r3, #16]
 8007198:	f000 fdc5 	bl	8007d26 <__hi0bits>
 800719c:	f1c0 0020 	rsb	r0, r0, #32
 80071a0:	4440      	add	r0, r8
 80071a2:	f010 001f 	ands.w	r0, r0, #31
 80071a6:	d047      	beq.n	8007238 <_dtoa_r+0x8c0>
 80071a8:	f1c0 0320 	rsb	r3, r0, #32
 80071ac:	2b04      	cmp	r3, #4
 80071ae:	dd3b      	ble.n	8007228 <_dtoa_r+0x8b0>
 80071b0:	9b05      	ldr	r3, [sp, #20]
 80071b2:	f1c0 001c 	rsb	r0, r0, #28
 80071b6:	4403      	add	r3, r0
 80071b8:	9305      	str	r3, [sp, #20]
 80071ba:	4405      	add	r5, r0
 80071bc:	4480      	add	r8, r0
 80071be:	9b05      	ldr	r3, [sp, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	dd05      	ble.n	80071d0 <_dtoa_r+0x858>
 80071c4:	461a      	mov	r2, r3
 80071c6:	9904      	ldr	r1, [sp, #16]
 80071c8:	4620      	mov	r0, r4
 80071ca:	f000 fee7 	bl	8007f9c <__lshift>
 80071ce:	9004      	str	r0, [sp, #16]
 80071d0:	f1b8 0f00 	cmp.w	r8, #0
 80071d4:	dd05      	ble.n	80071e2 <_dtoa_r+0x86a>
 80071d6:	4639      	mov	r1, r7
 80071d8:	4642      	mov	r2, r8
 80071da:	4620      	mov	r0, r4
 80071dc:	f000 fede 	bl	8007f9c <__lshift>
 80071e0:	4607      	mov	r7, r0
 80071e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071e4:	b353      	cbz	r3, 800723c <_dtoa_r+0x8c4>
 80071e6:	4639      	mov	r1, r7
 80071e8:	9804      	ldr	r0, [sp, #16]
 80071ea:	f000 ff2b 	bl	8008044 <__mcmp>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	da24      	bge.n	800723c <_dtoa_r+0x8c4>
 80071f2:	2300      	movs	r3, #0
 80071f4:	220a      	movs	r2, #10
 80071f6:	9904      	ldr	r1, [sp, #16]
 80071f8:	4620      	mov	r0, r4
 80071fa:	f000 fd1b 	bl	8007c34 <__multadd>
 80071fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007200:	9004      	str	r0, [sp, #16]
 8007202:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 814d 	beq.w	80074a6 <_dtoa_r+0xb2e>
 800720c:	2300      	movs	r3, #0
 800720e:	4631      	mov	r1, r6
 8007210:	220a      	movs	r2, #10
 8007212:	4620      	mov	r0, r4
 8007214:	f000 fd0e 	bl	8007c34 <__multadd>
 8007218:	9b02      	ldr	r3, [sp, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	4606      	mov	r6, r0
 800721e:	dc4f      	bgt.n	80072c0 <_dtoa_r+0x948>
 8007220:	9b06      	ldr	r3, [sp, #24]
 8007222:	2b02      	cmp	r3, #2
 8007224:	dd4c      	ble.n	80072c0 <_dtoa_r+0x948>
 8007226:	e011      	b.n	800724c <_dtoa_r+0x8d4>
 8007228:	d0c9      	beq.n	80071be <_dtoa_r+0x846>
 800722a:	9a05      	ldr	r2, [sp, #20]
 800722c:	331c      	adds	r3, #28
 800722e:	441a      	add	r2, r3
 8007230:	9205      	str	r2, [sp, #20]
 8007232:	441d      	add	r5, r3
 8007234:	4498      	add	r8, r3
 8007236:	e7c2      	b.n	80071be <_dtoa_r+0x846>
 8007238:	4603      	mov	r3, r0
 800723a:	e7f6      	b.n	800722a <_dtoa_r+0x8b2>
 800723c:	f1b9 0f00 	cmp.w	r9, #0
 8007240:	dc38      	bgt.n	80072b4 <_dtoa_r+0x93c>
 8007242:	9b06      	ldr	r3, [sp, #24]
 8007244:	2b02      	cmp	r3, #2
 8007246:	dd35      	ble.n	80072b4 <_dtoa_r+0x93c>
 8007248:	f8cd 9008 	str.w	r9, [sp, #8]
 800724c:	9b02      	ldr	r3, [sp, #8]
 800724e:	b963      	cbnz	r3, 800726a <_dtoa_r+0x8f2>
 8007250:	4639      	mov	r1, r7
 8007252:	2205      	movs	r2, #5
 8007254:	4620      	mov	r0, r4
 8007256:	f000 fced 	bl	8007c34 <__multadd>
 800725a:	4601      	mov	r1, r0
 800725c:	4607      	mov	r7, r0
 800725e:	9804      	ldr	r0, [sp, #16]
 8007260:	f000 fef0 	bl	8008044 <__mcmp>
 8007264:	2800      	cmp	r0, #0
 8007266:	f73f adcc 	bgt.w	8006e02 <_dtoa_r+0x48a>
 800726a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800726c:	465d      	mov	r5, fp
 800726e:	ea6f 0a03 	mvn.w	sl, r3
 8007272:	f04f 0900 	mov.w	r9, #0
 8007276:	4639      	mov	r1, r7
 8007278:	4620      	mov	r0, r4
 800727a:	f000 fcc4 	bl	8007c06 <_Bfree>
 800727e:	2e00      	cmp	r6, #0
 8007280:	f43f aeb7 	beq.w	8006ff2 <_dtoa_r+0x67a>
 8007284:	f1b9 0f00 	cmp.w	r9, #0
 8007288:	d005      	beq.n	8007296 <_dtoa_r+0x91e>
 800728a:	45b1      	cmp	r9, r6
 800728c:	d003      	beq.n	8007296 <_dtoa_r+0x91e>
 800728e:	4649      	mov	r1, r9
 8007290:	4620      	mov	r0, r4
 8007292:	f000 fcb8 	bl	8007c06 <_Bfree>
 8007296:	4631      	mov	r1, r6
 8007298:	4620      	mov	r0, r4
 800729a:	f000 fcb4 	bl	8007c06 <_Bfree>
 800729e:	e6a8      	b.n	8006ff2 <_dtoa_r+0x67a>
 80072a0:	2700      	movs	r7, #0
 80072a2:	463e      	mov	r6, r7
 80072a4:	e7e1      	b.n	800726a <_dtoa_r+0x8f2>
 80072a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80072aa:	463e      	mov	r6, r7
 80072ac:	e5a9      	b.n	8006e02 <_dtoa_r+0x48a>
 80072ae:	bf00      	nop
 80072b0:	40240000 	.word	0x40240000
 80072b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 80fa 	beq.w	80074b4 <_dtoa_r+0xb3c>
 80072c0:	2d00      	cmp	r5, #0
 80072c2:	dd05      	ble.n	80072d0 <_dtoa_r+0x958>
 80072c4:	4631      	mov	r1, r6
 80072c6:	462a      	mov	r2, r5
 80072c8:	4620      	mov	r0, r4
 80072ca:	f000 fe67 	bl	8007f9c <__lshift>
 80072ce:	4606      	mov	r6, r0
 80072d0:	9b07      	ldr	r3, [sp, #28]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d04c      	beq.n	8007370 <_dtoa_r+0x9f8>
 80072d6:	6871      	ldr	r1, [r6, #4]
 80072d8:	4620      	mov	r0, r4
 80072da:	f000 fc60 	bl	8007b9e <_Balloc>
 80072de:	6932      	ldr	r2, [r6, #16]
 80072e0:	3202      	adds	r2, #2
 80072e2:	4605      	mov	r5, r0
 80072e4:	0092      	lsls	r2, r2, #2
 80072e6:	f106 010c 	add.w	r1, r6, #12
 80072ea:	300c      	adds	r0, #12
 80072ec:	f000 fc4c 	bl	8007b88 <memcpy>
 80072f0:	2201      	movs	r2, #1
 80072f2:	4629      	mov	r1, r5
 80072f4:	4620      	mov	r0, r4
 80072f6:	f000 fe51 	bl	8007f9c <__lshift>
 80072fa:	9b00      	ldr	r3, [sp, #0]
 80072fc:	f8cd b014 	str.w	fp, [sp, #20]
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	46b1      	mov	r9, r6
 8007306:	9307      	str	r3, [sp, #28]
 8007308:	4606      	mov	r6, r0
 800730a:	4639      	mov	r1, r7
 800730c:	9804      	ldr	r0, [sp, #16]
 800730e:	f7ff faa7 	bl	8006860 <quorem>
 8007312:	4649      	mov	r1, r9
 8007314:	4605      	mov	r5, r0
 8007316:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800731a:	9804      	ldr	r0, [sp, #16]
 800731c:	f000 fe92 	bl	8008044 <__mcmp>
 8007320:	4632      	mov	r2, r6
 8007322:	9000      	str	r0, [sp, #0]
 8007324:	4639      	mov	r1, r7
 8007326:	4620      	mov	r0, r4
 8007328:	f000 fea6 	bl	8008078 <__mdiff>
 800732c:	68c3      	ldr	r3, [r0, #12]
 800732e:	4602      	mov	r2, r0
 8007330:	bb03      	cbnz	r3, 8007374 <_dtoa_r+0x9fc>
 8007332:	4601      	mov	r1, r0
 8007334:	9008      	str	r0, [sp, #32]
 8007336:	9804      	ldr	r0, [sp, #16]
 8007338:	f000 fe84 	bl	8008044 <__mcmp>
 800733c:	9a08      	ldr	r2, [sp, #32]
 800733e:	4603      	mov	r3, r0
 8007340:	4611      	mov	r1, r2
 8007342:	4620      	mov	r0, r4
 8007344:	9308      	str	r3, [sp, #32]
 8007346:	f000 fc5e 	bl	8007c06 <_Bfree>
 800734a:	9b08      	ldr	r3, [sp, #32]
 800734c:	b9a3      	cbnz	r3, 8007378 <_dtoa_r+0xa00>
 800734e:	9a06      	ldr	r2, [sp, #24]
 8007350:	b992      	cbnz	r2, 8007378 <_dtoa_r+0xa00>
 8007352:	9a07      	ldr	r2, [sp, #28]
 8007354:	b982      	cbnz	r2, 8007378 <_dtoa_r+0xa00>
 8007356:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800735a:	d029      	beq.n	80073b0 <_dtoa_r+0xa38>
 800735c:	9b00      	ldr	r3, [sp, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	dd01      	ble.n	8007366 <_dtoa_r+0x9ee>
 8007362:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007366:	9b05      	ldr	r3, [sp, #20]
 8007368:	1c5d      	adds	r5, r3, #1
 800736a:	f883 8000 	strb.w	r8, [r3]
 800736e:	e782      	b.n	8007276 <_dtoa_r+0x8fe>
 8007370:	4630      	mov	r0, r6
 8007372:	e7c2      	b.n	80072fa <_dtoa_r+0x982>
 8007374:	2301      	movs	r3, #1
 8007376:	e7e3      	b.n	8007340 <_dtoa_r+0x9c8>
 8007378:	9a00      	ldr	r2, [sp, #0]
 800737a:	2a00      	cmp	r2, #0
 800737c:	db04      	blt.n	8007388 <_dtoa_r+0xa10>
 800737e:	d125      	bne.n	80073cc <_dtoa_r+0xa54>
 8007380:	9a06      	ldr	r2, [sp, #24]
 8007382:	bb1a      	cbnz	r2, 80073cc <_dtoa_r+0xa54>
 8007384:	9a07      	ldr	r2, [sp, #28]
 8007386:	bb0a      	cbnz	r2, 80073cc <_dtoa_r+0xa54>
 8007388:	2b00      	cmp	r3, #0
 800738a:	ddec      	ble.n	8007366 <_dtoa_r+0x9ee>
 800738c:	2201      	movs	r2, #1
 800738e:	9904      	ldr	r1, [sp, #16]
 8007390:	4620      	mov	r0, r4
 8007392:	f000 fe03 	bl	8007f9c <__lshift>
 8007396:	4639      	mov	r1, r7
 8007398:	9004      	str	r0, [sp, #16]
 800739a:	f000 fe53 	bl	8008044 <__mcmp>
 800739e:	2800      	cmp	r0, #0
 80073a0:	dc03      	bgt.n	80073aa <_dtoa_r+0xa32>
 80073a2:	d1e0      	bne.n	8007366 <_dtoa_r+0x9ee>
 80073a4:	f018 0f01 	tst.w	r8, #1
 80073a8:	d0dd      	beq.n	8007366 <_dtoa_r+0x9ee>
 80073aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80073ae:	d1d8      	bne.n	8007362 <_dtoa_r+0x9ea>
 80073b0:	9b05      	ldr	r3, [sp, #20]
 80073b2:	9a05      	ldr	r2, [sp, #20]
 80073b4:	1c5d      	adds	r5, r3, #1
 80073b6:	2339      	movs	r3, #57	; 0x39
 80073b8:	7013      	strb	r3, [r2, #0]
 80073ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80073be:	2b39      	cmp	r3, #57	; 0x39
 80073c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80073c4:	d04f      	beq.n	8007466 <_dtoa_r+0xaee>
 80073c6:	3301      	adds	r3, #1
 80073c8:	7013      	strb	r3, [r2, #0]
 80073ca:	e754      	b.n	8007276 <_dtoa_r+0x8fe>
 80073cc:	9a05      	ldr	r2, [sp, #20]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f102 0501 	add.w	r5, r2, #1
 80073d4:	dd06      	ble.n	80073e4 <_dtoa_r+0xa6c>
 80073d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80073da:	d0e9      	beq.n	80073b0 <_dtoa_r+0xa38>
 80073dc:	f108 0801 	add.w	r8, r8, #1
 80073e0:	9b05      	ldr	r3, [sp, #20]
 80073e2:	e7c2      	b.n	800736a <_dtoa_r+0x9f2>
 80073e4:	9a02      	ldr	r2, [sp, #8]
 80073e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80073ea:	eba5 030b 	sub.w	r3, r5, fp
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d021      	beq.n	8007436 <_dtoa_r+0xabe>
 80073f2:	2300      	movs	r3, #0
 80073f4:	220a      	movs	r2, #10
 80073f6:	9904      	ldr	r1, [sp, #16]
 80073f8:	4620      	mov	r0, r4
 80073fa:	f000 fc1b 	bl	8007c34 <__multadd>
 80073fe:	45b1      	cmp	r9, r6
 8007400:	9004      	str	r0, [sp, #16]
 8007402:	f04f 0300 	mov.w	r3, #0
 8007406:	f04f 020a 	mov.w	r2, #10
 800740a:	4649      	mov	r1, r9
 800740c:	4620      	mov	r0, r4
 800740e:	d105      	bne.n	800741c <_dtoa_r+0xaa4>
 8007410:	f000 fc10 	bl	8007c34 <__multadd>
 8007414:	4681      	mov	r9, r0
 8007416:	4606      	mov	r6, r0
 8007418:	9505      	str	r5, [sp, #20]
 800741a:	e776      	b.n	800730a <_dtoa_r+0x992>
 800741c:	f000 fc0a 	bl	8007c34 <__multadd>
 8007420:	4631      	mov	r1, r6
 8007422:	4681      	mov	r9, r0
 8007424:	2300      	movs	r3, #0
 8007426:	220a      	movs	r2, #10
 8007428:	4620      	mov	r0, r4
 800742a:	f000 fc03 	bl	8007c34 <__multadd>
 800742e:	4606      	mov	r6, r0
 8007430:	e7f2      	b.n	8007418 <_dtoa_r+0xaa0>
 8007432:	f04f 0900 	mov.w	r9, #0
 8007436:	2201      	movs	r2, #1
 8007438:	9904      	ldr	r1, [sp, #16]
 800743a:	4620      	mov	r0, r4
 800743c:	f000 fdae 	bl	8007f9c <__lshift>
 8007440:	4639      	mov	r1, r7
 8007442:	9004      	str	r0, [sp, #16]
 8007444:	f000 fdfe 	bl	8008044 <__mcmp>
 8007448:	2800      	cmp	r0, #0
 800744a:	dcb6      	bgt.n	80073ba <_dtoa_r+0xa42>
 800744c:	d102      	bne.n	8007454 <_dtoa_r+0xadc>
 800744e:	f018 0f01 	tst.w	r8, #1
 8007452:	d1b2      	bne.n	80073ba <_dtoa_r+0xa42>
 8007454:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007458:	2b30      	cmp	r3, #48	; 0x30
 800745a:	f105 32ff 	add.w	r2, r5, #4294967295
 800745e:	f47f af0a 	bne.w	8007276 <_dtoa_r+0x8fe>
 8007462:	4615      	mov	r5, r2
 8007464:	e7f6      	b.n	8007454 <_dtoa_r+0xadc>
 8007466:	4593      	cmp	fp, r2
 8007468:	d105      	bne.n	8007476 <_dtoa_r+0xafe>
 800746a:	2331      	movs	r3, #49	; 0x31
 800746c:	f10a 0a01 	add.w	sl, sl, #1
 8007470:	f88b 3000 	strb.w	r3, [fp]
 8007474:	e6ff      	b.n	8007276 <_dtoa_r+0x8fe>
 8007476:	4615      	mov	r5, r2
 8007478:	e79f      	b.n	80073ba <_dtoa_r+0xa42>
 800747a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80074e0 <_dtoa_r+0xb68>
 800747e:	e007      	b.n	8007490 <_dtoa_r+0xb18>
 8007480:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007482:	f8df b060 	ldr.w	fp, [pc, #96]	; 80074e4 <_dtoa_r+0xb6c>
 8007486:	b11b      	cbz	r3, 8007490 <_dtoa_r+0xb18>
 8007488:	f10b 0308 	add.w	r3, fp, #8
 800748c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	4658      	mov	r0, fp
 8007492:	b017      	add	sp, #92	; 0x5c
 8007494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007498:	9b06      	ldr	r3, [sp, #24]
 800749a:	2b01      	cmp	r3, #1
 800749c:	f77f ae35 	ble.w	800710a <_dtoa_r+0x792>
 80074a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074a2:	9307      	str	r3, [sp, #28]
 80074a4:	e649      	b.n	800713a <_dtoa_r+0x7c2>
 80074a6:	9b02      	ldr	r3, [sp, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	dc03      	bgt.n	80074b4 <_dtoa_r+0xb3c>
 80074ac:	9b06      	ldr	r3, [sp, #24]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	f73f aecc 	bgt.w	800724c <_dtoa_r+0x8d4>
 80074b4:	465d      	mov	r5, fp
 80074b6:	4639      	mov	r1, r7
 80074b8:	9804      	ldr	r0, [sp, #16]
 80074ba:	f7ff f9d1 	bl	8006860 <quorem>
 80074be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80074c2:	f805 8b01 	strb.w	r8, [r5], #1
 80074c6:	9a02      	ldr	r2, [sp, #8]
 80074c8:	eba5 030b 	sub.w	r3, r5, fp
 80074cc:	429a      	cmp	r2, r3
 80074ce:	ddb0      	ble.n	8007432 <_dtoa_r+0xaba>
 80074d0:	2300      	movs	r3, #0
 80074d2:	220a      	movs	r2, #10
 80074d4:	9904      	ldr	r1, [sp, #16]
 80074d6:	4620      	mov	r0, r4
 80074d8:	f000 fbac 	bl	8007c34 <__multadd>
 80074dc:	9004      	str	r0, [sp, #16]
 80074de:	e7ea      	b.n	80074b6 <_dtoa_r+0xb3e>
 80074e0:	08008910 	.word	0x08008910
 80074e4:	08008988 	.word	0x08008988

080074e8 <rshift>:
 80074e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ea:	6906      	ldr	r6, [r0, #16]
 80074ec:	114b      	asrs	r3, r1, #5
 80074ee:	429e      	cmp	r6, r3
 80074f0:	f100 0414 	add.w	r4, r0, #20
 80074f4:	dd30      	ble.n	8007558 <rshift+0x70>
 80074f6:	f011 011f 	ands.w	r1, r1, #31
 80074fa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80074fe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007502:	d108      	bne.n	8007516 <rshift+0x2e>
 8007504:	4621      	mov	r1, r4
 8007506:	42b2      	cmp	r2, r6
 8007508:	460b      	mov	r3, r1
 800750a:	d211      	bcs.n	8007530 <rshift+0x48>
 800750c:	f852 3b04 	ldr.w	r3, [r2], #4
 8007510:	f841 3b04 	str.w	r3, [r1], #4
 8007514:	e7f7      	b.n	8007506 <rshift+0x1e>
 8007516:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800751a:	f1c1 0c20 	rsb	ip, r1, #32
 800751e:	40cd      	lsrs	r5, r1
 8007520:	3204      	adds	r2, #4
 8007522:	4623      	mov	r3, r4
 8007524:	42b2      	cmp	r2, r6
 8007526:	4617      	mov	r7, r2
 8007528:	d30c      	bcc.n	8007544 <rshift+0x5c>
 800752a:	601d      	str	r5, [r3, #0]
 800752c:	b105      	cbz	r5, 8007530 <rshift+0x48>
 800752e:	3304      	adds	r3, #4
 8007530:	1b1a      	subs	r2, r3, r4
 8007532:	42a3      	cmp	r3, r4
 8007534:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007538:	bf08      	it	eq
 800753a:	2300      	moveq	r3, #0
 800753c:	6102      	str	r2, [r0, #16]
 800753e:	bf08      	it	eq
 8007540:	6143      	streq	r3, [r0, #20]
 8007542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007544:	683f      	ldr	r7, [r7, #0]
 8007546:	fa07 f70c 	lsl.w	r7, r7, ip
 800754a:	433d      	orrs	r5, r7
 800754c:	f843 5b04 	str.w	r5, [r3], #4
 8007550:	f852 5b04 	ldr.w	r5, [r2], #4
 8007554:	40cd      	lsrs	r5, r1
 8007556:	e7e5      	b.n	8007524 <rshift+0x3c>
 8007558:	4623      	mov	r3, r4
 800755a:	e7e9      	b.n	8007530 <rshift+0x48>

0800755c <__hexdig_fun>:
 800755c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007560:	2b09      	cmp	r3, #9
 8007562:	d802      	bhi.n	800756a <__hexdig_fun+0xe>
 8007564:	3820      	subs	r0, #32
 8007566:	b2c0      	uxtb	r0, r0
 8007568:	4770      	bx	lr
 800756a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800756e:	2b05      	cmp	r3, #5
 8007570:	d801      	bhi.n	8007576 <__hexdig_fun+0x1a>
 8007572:	3847      	subs	r0, #71	; 0x47
 8007574:	e7f7      	b.n	8007566 <__hexdig_fun+0xa>
 8007576:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800757a:	2b05      	cmp	r3, #5
 800757c:	d801      	bhi.n	8007582 <__hexdig_fun+0x26>
 800757e:	3827      	subs	r0, #39	; 0x27
 8007580:	e7f1      	b.n	8007566 <__hexdig_fun+0xa>
 8007582:	2000      	movs	r0, #0
 8007584:	4770      	bx	lr

08007586 <__gethex>:
 8007586:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758a:	b08b      	sub	sp, #44	; 0x2c
 800758c:	468a      	mov	sl, r1
 800758e:	9002      	str	r0, [sp, #8]
 8007590:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007592:	9306      	str	r3, [sp, #24]
 8007594:	4690      	mov	r8, r2
 8007596:	f000 facd 	bl	8007b34 <__localeconv_l>
 800759a:	6803      	ldr	r3, [r0, #0]
 800759c:	9303      	str	r3, [sp, #12]
 800759e:	4618      	mov	r0, r3
 80075a0:	f7f8 fe16 	bl	80001d0 <strlen>
 80075a4:	9b03      	ldr	r3, [sp, #12]
 80075a6:	9001      	str	r0, [sp, #4]
 80075a8:	4403      	add	r3, r0
 80075aa:	f04f 0b00 	mov.w	fp, #0
 80075ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80075b2:	9307      	str	r3, [sp, #28]
 80075b4:	f8da 3000 	ldr.w	r3, [sl]
 80075b8:	3302      	adds	r3, #2
 80075ba:	461f      	mov	r7, r3
 80075bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80075c0:	2830      	cmp	r0, #48	; 0x30
 80075c2:	d06c      	beq.n	800769e <__gethex+0x118>
 80075c4:	f7ff ffca 	bl	800755c <__hexdig_fun>
 80075c8:	4604      	mov	r4, r0
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d16a      	bne.n	80076a4 <__gethex+0x11e>
 80075ce:	9a01      	ldr	r2, [sp, #4]
 80075d0:	9903      	ldr	r1, [sp, #12]
 80075d2:	4638      	mov	r0, r7
 80075d4:	f001 f8fa 	bl	80087cc <strncmp>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d166      	bne.n	80076aa <__gethex+0x124>
 80075dc:	9b01      	ldr	r3, [sp, #4]
 80075de:	5cf8      	ldrb	r0, [r7, r3]
 80075e0:	18fe      	adds	r6, r7, r3
 80075e2:	f7ff ffbb 	bl	800755c <__hexdig_fun>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d062      	beq.n	80076b0 <__gethex+0x12a>
 80075ea:	4633      	mov	r3, r6
 80075ec:	7818      	ldrb	r0, [r3, #0]
 80075ee:	2830      	cmp	r0, #48	; 0x30
 80075f0:	461f      	mov	r7, r3
 80075f2:	f103 0301 	add.w	r3, r3, #1
 80075f6:	d0f9      	beq.n	80075ec <__gethex+0x66>
 80075f8:	f7ff ffb0 	bl	800755c <__hexdig_fun>
 80075fc:	fab0 f580 	clz	r5, r0
 8007600:	096d      	lsrs	r5, r5, #5
 8007602:	4634      	mov	r4, r6
 8007604:	f04f 0b01 	mov.w	fp, #1
 8007608:	463a      	mov	r2, r7
 800760a:	4616      	mov	r6, r2
 800760c:	3201      	adds	r2, #1
 800760e:	7830      	ldrb	r0, [r6, #0]
 8007610:	f7ff ffa4 	bl	800755c <__hexdig_fun>
 8007614:	2800      	cmp	r0, #0
 8007616:	d1f8      	bne.n	800760a <__gethex+0x84>
 8007618:	9a01      	ldr	r2, [sp, #4]
 800761a:	9903      	ldr	r1, [sp, #12]
 800761c:	4630      	mov	r0, r6
 800761e:	f001 f8d5 	bl	80087cc <strncmp>
 8007622:	b950      	cbnz	r0, 800763a <__gethex+0xb4>
 8007624:	b954      	cbnz	r4, 800763c <__gethex+0xb6>
 8007626:	9b01      	ldr	r3, [sp, #4]
 8007628:	18f4      	adds	r4, r6, r3
 800762a:	4622      	mov	r2, r4
 800762c:	4616      	mov	r6, r2
 800762e:	3201      	adds	r2, #1
 8007630:	7830      	ldrb	r0, [r6, #0]
 8007632:	f7ff ff93 	bl	800755c <__hexdig_fun>
 8007636:	2800      	cmp	r0, #0
 8007638:	d1f8      	bne.n	800762c <__gethex+0xa6>
 800763a:	b10c      	cbz	r4, 8007640 <__gethex+0xba>
 800763c:	1ba4      	subs	r4, r4, r6
 800763e:	00a4      	lsls	r4, r4, #2
 8007640:	7833      	ldrb	r3, [r6, #0]
 8007642:	2b50      	cmp	r3, #80	; 0x50
 8007644:	d001      	beq.n	800764a <__gethex+0xc4>
 8007646:	2b70      	cmp	r3, #112	; 0x70
 8007648:	d140      	bne.n	80076cc <__gethex+0x146>
 800764a:	7873      	ldrb	r3, [r6, #1]
 800764c:	2b2b      	cmp	r3, #43	; 0x2b
 800764e:	d031      	beq.n	80076b4 <__gethex+0x12e>
 8007650:	2b2d      	cmp	r3, #45	; 0x2d
 8007652:	d033      	beq.n	80076bc <__gethex+0x136>
 8007654:	1c71      	adds	r1, r6, #1
 8007656:	f04f 0900 	mov.w	r9, #0
 800765a:	7808      	ldrb	r0, [r1, #0]
 800765c:	f7ff ff7e 	bl	800755c <__hexdig_fun>
 8007660:	1e43      	subs	r3, r0, #1
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b18      	cmp	r3, #24
 8007666:	d831      	bhi.n	80076cc <__gethex+0x146>
 8007668:	f1a0 0210 	sub.w	r2, r0, #16
 800766c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007670:	f7ff ff74 	bl	800755c <__hexdig_fun>
 8007674:	1e43      	subs	r3, r0, #1
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b18      	cmp	r3, #24
 800767a:	d922      	bls.n	80076c2 <__gethex+0x13c>
 800767c:	f1b9 0f00 	cmp.w	r9, #0
 8007680:	d000      	beq.n	8007684 <__gethex+0xfe>
 8007682:	4252      	negs	r2, r2
 8007684:	4414      	add	r4, r2
 8007686:	f8ca 1000 	str.w	r1, [sl]
 800768a:	b30d      	cbz	r5, 80076d0 <__gethex+0x14a>
 800768c:	f1bb 0f00 	cmp.w	fp, #0
 8007690:	bf0c      	ite	eq
 8007692:	2706      	moveq	r7, #6
 8007694:	2700      	movne	r7, #0
 8007696:	4638      	mov	r0, r7
 8007698:	b00b      	add	sp, #44	; 0x2c
 800769a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769e:	f10b 0b01 	add.w	fp, fp, #1
 80076a2:	e78a      	b.n	80075ba <__gethex+0x34>
 80076a4:	2500      	movs	r5, #0
 80076a6:	462c      	mov	r4, r5
 80076a8:	e7ae      	b.n	8007608 <__gethex+0x82>
 80076aa:	463e      	mov	r6, r7
 80076ac:	2501      	movs	r5, #1
 80076ae:	e7c7      	b.n	8007640 <__gethex+0xba>
 80076b0:	4604      	mov	r4, r0
 80076b2:	e7fb      	b.n	80076ac <__gethex+0x126>
 80076b4:	f04f 0900 	mov.w	r9, #0
 80076b8:	1cb1      	adds	r1, r6, #2
 80076ba:	e7ce      	b.n	800765a <__gethex+0xd4>
 80076bc:	f04f 0901 	mov.w	r9, #1
 80076c0:	e7fa      	b.n	80076b8 <__gethex+0x132>
 80076c2:	230a      	movs	r3, #10
 80076c4:	fb03 0202 	mla	r2, r3, r2, r0
 80076c8:	3a10      	subs	r2, #16
 80076ca:	e7cf      	b.n	800766c <__gethex+0xe6>
 80076cc:	4631      	mov	r1, r6
 80076ce:	e7da      	b.n	8007686 <__gethex+0x100>
 80076d0:	1bf3      	subs	r3, r6, r7
 80076d2:	3b01      	subs	r3, #1
 80076d4:	4629      	mov	r1, r5
 80076d6:	2b07      	cmp	r3, #7
 80076d8:	dc49      	bgt.n	800776e <__gethex+0x1e8>
 80076da:	9802      	ldr	r0, [sp, #8]
 80076dc:	f000 fa5f 	bl	8007b9e <_Balloc>
 80076e0:	9b01      	ldr	r3, [sp, #4]
 80076e2:	f100 0914 	add.w	r9, r0, #20
 80076e6:	f04f 0b00 	mov.w	fp, #0
 80076ea:	f1c3 0301 	rsb	r3, r3, #1
 80076ee:	4605      	mov	r5, r0
 80076f0:	f8cd 9010 	str.w	r9, [sp, #16]
 80076f4:	46da      	mov	sl, fp
 80076f6:	9308      	str	r3, [sp, #32]
 80076f8:	42b7      	cmp	r7, r6
 80076fa:	d33b      	bcc.n	8007774 <__gethex+0x1ee>
 80076fc:	9804      	ldr	r0, [sp, #16]
 80076fe:	f840 ab04 	str.w	sl, [r0], #4
 8007702:	eba0 0009 	sub.w	r0, r0, r9
 8007706:	1080      	asrs	r0, r0, #2
 8007708:	6128      	str	r0, [r5, #16]
 800770a:	0147      	lsls	r7, r0, #5
 800770c:	4650      	mov	r0, sl
 800770e:	f000 fb0a 	bl	8007d26 <__hi0bits>
 8007712:	f8d8 6000 	ldr.w	r6, [r8]
 8007716:	1a3f      	subs	r7, r7, r0
 8007718:	42b7      	cmp	r7, r6
 800771a:	dd64      	ble.n	80077e6 <__gethex+0x260>
 800771c:	1bbf      	subs	r7, r7, r6
 800771e:	4639      	mov	r1, r7
 8007720:	4628      	mov	r0, r5
 8007722:	f000 fe19 	bl	8008358 <__any_on>
 8007726:	4682      	mov	sl, r0
 8007728:	b178      	cbz	r0, 800774a <__gethex+0x1c4>
 800772a:	1e7b      	subs	r3, r7, #1
 800772c:	1159      	asrs	r1, r3, #5
 800772e:	f003 021f 	and.w	r2, r3, #31
 8007732:	f04f 0a01 	mov.w	sl, #1
 8007736:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800773a:	fa0a f202 	lsl.w	r2, sl, r2
 800773e:	420a      	tst	r2, r1
 8007740:	d003      	beq.n	800774a <__gethex+0x1c4>
 8007742:	4553      	cmp	r3, sl
 8007744:	dc46      	bgt.n	80077d4 <__gethex+0x24e>
 8007746:	f04f 0a02 	mov.w	sl, #2
 800774a:	4639      	mov	r1, r7
 800774c:	4628      	mov	r0, r5
 800774e:	f7ff fecb 	bl	80074e8 <rshift>
 8007752:	443c      	add	r4, r7
 8007754:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007758:	42a3      	cmp	r3, r4
 800775a:	da52      	bge.n	8007802 <__gethex+0x27c>
 800775c:	4629      	mov	r1, r5
 800775e:	9802      	ldr	r0, [sp, #8]
 8007760:	f000 fa51 	bl	8007c06 <_Bfree>
 8007764:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007766:	2300      	movs	r3, #0
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	27a3      	movs	r7, #163	; 0xa3
 800776c:	e793      	b.n	8007696 <__gethex+0x110>
 800776e:	3101      	adds	r1, #1
 8007770:	105b      	asrs	r3, r3, #1
 8007772:	e7b0      	b.n	80076d6 <__gethex+0x150>
 8007774:	1e73      	subs	r3, r6, #1
 8007776:	9305      	str	r3, [sp, #20]
 8007778:	9a07      	ldr	r2, [sp, #28]
 800777a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800777e:	4293      	cmp	r3, r2
 8007780:	d018      	beq.n	80077b4 <__gethex+0x22e>
 8007782:	f1bb 0f20 	cmp.w	fp, #32
 8007786:	d107      	bne.n	8007798 <__gethex+0x212>
 8007788:	9b04      	ldr	r3, [sp, #16]
 800778a:	f8c3 a000 	str.w	sl, [r3]
 800778e:	3304      	adds	r3, #4
 8007790:	f04f 0a00 	mov.w	sl, #0
 8007794:	9304      	str	r3, [sp, #16]
 8007796:	46d3      	mov	fp, sl
 8007798:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800779c:	f7ff fede 	bl	800755c <__hexdig_fun>
 80077a0:	f000 000f 	and.w	r0, r0, #15
 80077a4:	fa00 f00b 	lsl.w	r0, r0, fp
 80077a8:	ea4a 0a00 	orr.w	sl, sl, r0
 80077ac:	f10b 0b04 	add.w	fp, fp, #4
 80077b0:	9b05      	ldr	r3, [sp, #20]
 80077b2:	e00d      	b.n	80077d0 <__gethex+0x24a>
 80077b4:	9b05      	ldr	r3, [sp, #20]
 80077b6:	9a08      	ldr	r2, [sp, #32]
 80077b8:	4413      	add	r3, r2
 80077ba:	42bb      	cmp	r3, r7
 80077bc:	d3e1      	bcc.n	8007782 <__gethex+0x1fc>
 80077be:	4618      	mov	r0, r3
 80077c0:	9a01      	ldr	r2, [sp, #4]
 80077c2:	9903      	ldr	r1, [sp, #12]
 80077c4:	9309      	str	r3, [sp, #36]	; 0x24
 80077c6:	f001 f801 	bl	80087cc <strncmp>
 80077ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d1d8      	bne.n	8007782 <__gethex+0x1fc>
 80077d0:	461e      	mov	r6, r3
 80077d2:	e791      	b.n	80076f8 <__gethex+0x172>
 80077d4:	1eb9      	subs	r1, r7, #2
 80077d6:	4628      	mov	r0, r5
 80077d8:	f000 fdbe 	bl	8008358 <__any_on>
 80077dc:	2800      	cmp	r0, #0
 80077de:	d0b2      	beq.n	8007746 <__gethex+0x1c0>
 80077e0:	f04f 0a03 	mov.w	sl, #3
 80077e4:	e7b1      	b.n	800774a <__gethex+0x1c4>
 80077e6:	da09      	bge.n	80077fc <__gethex+0x276>
 80077e8:	1bf7      	subs	r7, r6, r7
 80077ea:	4629      	mov	r1, r5
 80077ec:	463a      	mov	r2, r7
 80077ee:	9802      	ldr	r0, [sp, #8]
 80077f0:	f000 fbd4 	bl	8007f9c <__lshift>
 80077f4:	1be4      	subs	r4, r4, r7
 80077f6:	4605      	mov	r5, r0
 80077f8:	f100 0914 	add.w	r9, r0, #20
 80077fc:	f04f 0a00 	mov.w	sl, #0
 8007800:	e7a8      	b.n	8007754 <__gethex+0x1ce>
 8007802:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007806:	42a0      	cmp	r0, r4
 8007808:	dd6a      	ble.n	80078e0 <__gethex+0x35a>
 800780a:	1b04      	subs	r4, r0, r4
 800780c:	42a6      	cmp	r6, r4
 800780e:	dc2e      	bgt.n	800786e <__gethex+0x2e8>
 8007810:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007814:	2b02      	cmp	r3, #2
 8007816:	d022      	beq.n	800785e <__gethex+0x2d8>
 8007818:	2b03      	cmp	r3, #3
 800781a:	d024      	beq.n	8007866 <__gethex+0x2e0>
 800781c:	2b01      	cmp	r3, #1
 800781e:	d115      	bne.n	800784c <__gethex+0x2c6>
 8007820:	42a6      	cmp	r6, r4
 8007822:	d113      	bne.n	800784c <__gethex+0x2c6>
 8007824:	2e01      	cmp	r6, #1
 8007826:	dc0b      	bgt.n	8007840 <__gethex+0x2ba>
 8007828:	9a06      	ldr	r2, [sp, #24]
 800782a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	2301      	movs	r3, #1
 8007832:	612b      	str	r3, [r5, #16]
 8007834:	f8c9 3000 	str.w	r3, [r9]
 8007838:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800783a:	2762      	movs	r7, #98	; 0x62
 800783c:	601d      	str	r5, [r3, #0]
 800783e:	e72a      	b.n	8007696 <__gethex+0x110>
 8007840:	1e71      	subs	r1, r6, #1
 8007842:	4628      	mov	r0, r5
 8007844:	f000 fd88 	bl	8008358 <__any_on>
 8007848:	2800      	cmp	r0, #0
 800784a:	d1ed      	bne.n	8007828 <__gethex+0x2a2>
 800784c:	4629      	mov	r1, r5
 800784e:	9802      	ldr	r0, [sp, #8]
 8007850:	f000 f9d9 	bl	8007c06 <_Bfree>
 8007854:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007856:	2300      	movs	r3, #0
 8007858:	6013      	str	r3, [r2, #0]
 800785a:	2750      	movs	r7, #80	; 0x50
 800785c:	e71b      	b.n	8007696 <__gethex+0x110>
 800785e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0e1      	beq.n	8007828 <__gethex+0x2a2>
 8007864:	e7f2      	b.n	800784c <__gethex+0x2c6>
 8007866:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1dd      	bne.n	8007828 <__gethex+0x2a2>
 800786c:	e7ee      	b.n	800784c <__gethex+0x2c6>
 800786e:	1e67      	subs	r7, r4, #1
 8007870:	f1ba 0f00 	cmp.w	sl, #0
 8007874:	d131      	bne.n	80078da <__gethex+0x354>
 8007876:	b127      	cbz	r7, 8007882 <__gethex+0x2fc>
 8007878:	4639      	mov	r1, r7
 800787a:	4628      	mov	r0, r5
 800787c:	f000 fd6c 	bl	8008358 <__any_on>
 8007880:	4682      	mov	sl, r0
 8007882:	117a      	asrs	r2, r7, #5
 8007884:	2301      	movs	r3, #1
 8007886:	f007 071f 	and.w	r7, r7, #31
 800788a:	fa03 f707 	lsl.w	r7, r3, r7
 800788e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007892:	4621      	mov	r1, r4
 8007894:	421f      	tst	r7, r3
 8007896:	4628      	mov	r0, r5
 8007898:	bf18      	it	ne
 800789a:	f04a 0a02 	orrne.w	sl, sl, #2
 800789e:	1b36      	subs	r6, r6, r4
 80078a0:	f7ff fe22 	bl	80074e8 <rshift>
 80078a4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80078a8:	2702      	movs	r7, #2
 80078aa:	f1ba 0f00 	cmp.w	sl, #0
 80078ae:	d048      	beq.n	8007942 <__gethex+0x3bc>
 80078b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d015      	beq.n	80078e4 <__gethex+0x35e>
 80078b8:	2b03      	cmp	r3, #3
 80078ba:	d017      	beq.n	80078ec <__gethex+0x366>
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d109      	bne.n	80078d4 <__gethex+0x34e>
 80078c0:	f01a 0f02 	tst.w	sl, #2
 80078c4:	d006      	beq.n	80078d4 <__gethex+0x34e>
 80078c6:	f8d9 3000 	ldr.w	r3, [r9]
 80078ca:	ea4a 0a03 	orr.w	sl, sl, r3
 80078ce:	f01a 0f01 	tst.w	sl, #1
 80078d2:	d10e      	bne.n	80078f2 <__gethex+0x36c>
 80078d4:	f047 0710 	orr.w	r7, r7, #16
 80078d8:	e033      	b.n	8007942 <__gethex+0x3bc>
 80078da:	f04f 0a01 	mov.w	sl, #1
 80078de:	e7d0      	b.n	8007882 <__gethex+0x2fc>
 80078e0:	2701      	movs	r7, #1
 80078e2:	e7e2      	b.n	80078aa <__gethex+0x324>
 80078e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078e6:	f1c3 0301 	rsb	r3, r3, #1
 80078ea:	9315      	str	r3, [sp, #84]	; 0x54
 80078ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0f0      	beq.n	80078d4 <__gethex+0x34e>
 80078f2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80078f6:	f105 0314 	add.w	r3, r5, #20
 80078fa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80078fe:	eb03 010a 	add.w	r1, r3, sl
 8007902:	f04f 0c00 	mov.w	ip, #0
 8007906:	4618      	mov	r0, r3
 8007908:	f853 2b04 	ldr.w	r2, [r3], #4
 800790c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007910:	d01c      	beq.n	800794c <__gethex+0x3c6>
 8007912:	3201      	adds	r2, #1
 8007914:	6002      	str	r2, [r0, #0]
 8007916:	2f02      	cmp	r7, #2
 8007918:	f105 0314 	add.w	r3, r5, #20
 800791c:	d138      	bne.n	8007990 <__gethex+0x40a>
 800791e:	f8d8 2000 	ldr.w	r2, [r8]
 8007922:	3a01      	subs	r2, #1
 8007924:	42b2      	cmp	r2, r6
 8007926:	d10a      	bne.n	800793e <__gethex+0x3b8>
 8007928:	1171      	asrs	r1, r6, #5
 800792a:	2201      	movs	r2, #1
 800792c:	f006 061f 	and.w	r6, r6, #31
 8007930:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007934:	fa02 f606 	lsl.w	r6, r2, r6
 8007938:	421e      	tst	r6, r3
 800793a:	bf18      	it	ne
 800793c:	4617      	movne	r7, r2
 800793e:	f047 0720 	orr.w	r7, r7, #32
 8007942:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007944:	601d      	str	r5, [r3, #0]
 8007946:	9b06      	ldr	r3, [sp, #24]
 8007948:	601c      	str	r4, [r3, #0]
 800794a:	e6a4      	b.n	8007696 <__gethex+0x110>
 800794c:	4299      	cmp	r1, r3
 800794e:	f843 cc04 	str.w	ip, [r3, #-4]
 8007952:	d8d8      	bhi.n	8007906 <__gethex+0x380>
 8007954:	68ab      	ldr	r3, [r5, #8]
 8007956:	4599      	cmp	r9, r3
 8007958:	db12      	blt.n	8007980 <__gethex+0x3fa>
 800795a:	6869      	ldr	r1, [r5, #4]
 800795c:	9802      	ldr	r0, [sp, #8]
 800795e:	3101      	adds	r1, #1
 8007960:	f000 f91d 	bl	8007b9e <_Balloc>
 8007964:	692a      	ldr	r2, [r5, #16]
 8007966:	3202      	adds	r2, #2
 8007968:	f105 010c 	add.w	r1, r5, #12
 800796c:	4683      	mov	fp, r0
 800796e:	0092      	lsls	r2, r2, #2
 8007970:	300c      	adds	r0, #12
 8007972:	f000 f909 	bl	8007b88 <memcpy>
 8007976:	4629      	mov	r1, r5
 8007978:	9802      	ldr	r0, [sp, #8]
 800797a:	f000 f944 	bl	8007c06 <_Bfree>
 800797e:	465d      	mov	r5, fp
 8007980:	692b      	ldr	r3, [r5, #16]
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007988:	612a      	str	r2, [r5, #16]
 800798a:	2201      	movs	r2, #1
 800798c:	615a      	str	r2, [r3, #20]
 800798e:	e7c2      	b.n	8007916 <__gethex+0x390>
 8007990:	692a      	ldr	r2, [r5, #16]
 8007992:	454a      	cmp	r2, r9
 8007994:	dd0b      	ble.n	80079ae <__gethex+0x428>
 8007996:	2101      	movs	r1, #1
 8007998:	4628      	mov	r0, r5
 800799a:	f7ff fda5 	bl	80074e8 <rshift>
 800799e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079a2:	3401      	adds	r4, #1
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	f6ff aed9 	blt.w	800775c <__gethex+0x1d6>
 80079aa:	2701      	movs	r7, #1
 80079ac:	e7c7      	b.n	800793e <__gethex+0x3b8>
 80079ae:	f016 061f 	ands.w	r6, r6, #31
 80079b2:	d0fa      	beq.n	80079aa <__gethex+0x424>
 80079b4:	449a      	add	sl, r3
 80079b6:	f1c6 0620 	rsb	r6, r6, #32
 80079ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80079be:	f000 f9b2 	bl	8007d26 <__hi0bits>
 80079c2:	42b0      	cmp	r0, r6
 80079c4:	dbe7      	blt.n	8007996 <__gethex+0x410>
 80079c6:	e7f0      	b.n	80079aa <__gethex+0x424>

080079c8 <L_shift>:
 80079c8:	f1c2 0208 	rsb	r2, r2, #8
 80079cc:	0092      	lsls	r2, r2, #2
 80079ce:	b570      	push	{r4, r5, r6, lr}
 80079d0:	f1c2 0620 	rsb	r6, r2, #32
 80079d4:	6843      	ldr	r3, [r0, #4]
 80079d6:	6804      	ldr	r4, [r0, #0]
 80079d8:	fa03 f506 	lsl.w	r5, r3, r6
 80079dc:	432c      	orrs	r4, r5
 80079de:	40d3      	lsrs	r3, r2
 80079e0:	6004      	str	r4, [r0, #0]
 80079e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80079e6:	4288      	cmp	r0, r1
 80079e8:	d3f4      	bcc.n	80079d4 <L_shift+0xc>
 80079ea:	bd70      	pop	{r4, r5, r6, pc}

080079ec <__match>:
 80079ec:	b530      	push	{r4, r5, lr}
 80079ee:	6803      	ldr	r3, [r0, #0]
 80079f0:	3301      	adds	r3, #1
 80079f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079f6:	b914      	cbnz	r4, 80079fe <__match+0x12>
 80079f8:	6003      	str	r3, [r0, #0]
 80079fa:	2001      	movs	r0, #1
 80079fc:	bd30      	pop	{r4, r5, pc}
 80079fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a02:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007a06:	2d19      	cmp	r5, #25
 8007a08:	bf98      	it	ls
 8007a0a:	3220      	addls	r2, #32
 8007a0c:	42a2      	cmp	r2, r4
 8007a0e:	d0f0      	beq.n	80079f2 <__match+0x6>
 8007a10:	2000      	movs	r0, #0
 8007a12:	e7f3      	b.n	80079fc <__match+0x10>

08007a14 <__hexnan>:
 8007a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a18:	680b      	ldr	r3, [r1, #0]
 8007a1a:	6801      	ldr	r1, [r0, #0]
 8007a1c:	115f      	asrs	r7, r3, #5
 8007a1e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007a22:	f013 031f 	ands.w	r3, r3, #31
 8007a26:	b087      	sub	sp, #28
 8007a28:	bf18      	it	ne
 8007a2a:	3704      	addne	r7, #4
 8007a2c:	2500      	movs	r5, #0
 8007a2e:	1f3e      	subs	r6, r7, #4
 8007a30:	4682      	mov	sl, r0
 8007a32:	4690      	mov	r8, r2
 8007a34:	9301      	str	r3, [sp, #4]
 8007a36:	f847 5c04 	str.w	r5, [r7, #-4]
 8007a3a:	46b1      	mov	r9, r6
 8007a3c:	4634      	mov	r4, r6
 8007a3e:	9502      	str	r5, [sp, #8]
 8007a40:	46ab      	mov	fp, r5
 8007a42:	784a      	ldrb	r2, [r1, #1]
 8007a44:	1c4b      	adds	r3, r1, #1
 8007a46:	9303      	str	r3, [sp, #12]
 8007a48:	b342      	cbz	r2, 8007a9c <__hexnan+0x88>
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	9105      	str	r1, [sp, #20]
 8007a4e:	9204      	str	r2, [sp, #16]
 8007a50:	f7ff fd84 	bl	800755c <__hexdig_fun>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d143      	bne.n	8007ae0 <__hexnan+0xcc>
 8007a58:	9a04      	ldr	r2, [sp, #16]
 8007a5a:	9905      	ldr	r1, [sp, #20]
 8007a5c:	2a20      	cmp	r2, #32
 8007a5e:	d818      	bhi.n	8007a92 <__hexnan+0x7e>
 8007a60:	9b02      	ldr	r3, [sp, #8]
 8007a62:	459b      	cmp	fp, r3
 8007a64:	dd13      	ble.n	8007a8e <__hexnan+0x7a>
 8007a66:	454c      	cmp	r4, r9
 8007a68:	d206      	bcs.n	8007a78 <__hexnan+0x64>
 8007a6a:	2d07      	cmp	r5, #7
 8007a6c:	dc04      	bgt.n	8007a78 <__hexnan+0x64>
 8007a6e:	462a      	mov	r2, r5
 8007a70:	4649      	mov	r1, r9
 8007a72:	4620      	mov	r0, r4
 8007a74:	f7ff ffa8 	bl	80079c8 <L_shift>
 8007a78:	4544      	cmp	r4, r8
 8007a7a:	d944      	bls.n	8007b06 <__hexnan+0xf2>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f1a4 0904 	sub.w	r9, r4, #4
 8007a82:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a86:	f8cd b008 	str.w	fp, [sp, #8]
 8007a8a:	464c      	mov	r4, r9
 8007a8c:	461d      	mov	r5, r3
 8007a8e:	9903      	ldr	r1, [sp, #12]
 8007a90:	e7d7      	b.n	8007a42 <__hexnan+0x2e>
 8007a92:	2a29      	cmp	r2, #41	; 0x29
 8007a94:	d14a      	bne.n	8007b2c <__hexnan+0x118>
 8007a96:	3102      	adds	r1, #2
 8007a98:	f8ca 1000 	str.w	r1, [sl]
 8007a9c:	f1bb 0f00 	cmp.w	fp, #0
 8007aa0:	d044      	beq.n	8007b2c <__hexnan+0x118>
 8007aa2:	454c      	cmp	r4, r9
 8007aa4:	d206      	bcs.n	8007ab4 <__hexnan+0xa0>
 8007aa6:	2d07      	cmp	r5, #7
 8007aa8:	dc04      	bgt.n	8007ab4 <__hexnan+0xa0>
 8007aaa:	462a      	mov	r2, r5
 8007aac:	4649      	mov	r1, r9
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f7ff ff8a 	bl	80079c8 <L_shift>
 8007ab4:	4544      	cmp	r4, r8
 8007ab6:	d928      	bls.n	8007b0a <__hexnan+0xf6>
 8007ab8:	4643      	mov	r3, r8
 8007aba:	f854 2b04 	ldr.w	r2, [r4], #4
 8007abe:	f843 2b04 	str.w	r2, [r3], #4
 8007ac2:	42a6      	cmp	r6, r4
 8007ac4:	d2f9      	bcs.n	8007aba <__hexnan+0xa6>
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f843 2b04 	str.w	r2, [r3], #4
 8007acc:	429e      	cmp	r6, r3
 8007ace:	d2fb      	bcs.n	8007ac8 <__hexnan+0xb4>
 8007ad0:	6833      	ldr	r3, [r6, #0]
 8007ad2:	b91b      	cbnz	r3, 8007adc <__hexnan+0xc8>
 8007ad4:	4546      	cmp	r6, r8
 8007ad6:	d127      	bne.n	8007b28 <__hexnan+0x114>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	6033      	str	r3, [r6, #0]
 8007adc:	2005      	movs	r0, #5
 8007ade:	e026      	b.n	8007b2e <__hexnan+0x11a>
 8007ae0:	3501      	adds	r5, #1
 8007ae2:	2d08      	cmp	r5, #8
 8007ae4:	f10b 0b01 	add.w	fp, fp, #1
 8007ae8:	dd06      	ble.n	8007af8 <__hexnan+0xe4>
 8007aea:	4544      	cmp	r4, r8
 8007aec:	d9cf      	bls.n	8007a8e <__hexnan+0x7a>
 8007aee:	2300      	movs	r3, #0
 8007af0:	f844 3c04 	str.w	r3, [r4, #-4]
 8007af4:	2501      	movs	r5, #1
 8007af6:	3c04      	subs	r4, #4
 8007af8:	6822      	ldr	r2, [r4, #0]
 8007afa:	f000 000f 	and.w	r0, r0, #15
 8007afe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007b02:	6020      	str	r0, [r4, #0]
 8007b04:	e7c3      	b.n	8007a8e <__hexnan+0x7a>
 8007b06:	2508      	movs	r5, #8
 8007b08:	e7c1      	b.n	8007a8e <__hexnan+0x7a>
 8007b0a:	9b01      	ldr	r3, [sp, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d0df      	beq.n	8007ad0 <__hexnan+0xbc>
 8007b10:	f04f 32ff 	mov.w	r2, #4294967295
 8007b14:	f1c3 0320 	rsb	r3, r3, #32
 8007b18:	fa22 f303 	lsr.w	r3, r2, r3
 8007b1c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007b20:	401a      	ands	r2, r3
 8007b22:	f847 2c04 	str.w	r2, [r7, #-4]
 8007b26:	e7d3      	b.n	8007ad0 <__hexnan+0xbc>
 8007b28:	3e04      	subs	r6, #4
 8007b2a:	e7d1      	b.n	8007ad0 <__hexnan+0xbc>
 8007b2c:	2004      	movs	r0, #4
 8007b2e:	b007      	add	sp, #28
 8007b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b34 <__localeconv_l>:
 8007b34:	30f0      	adds	r0, #240	; 0xf0
 8007b36:	4770      	bx	lr

08007b38 <_localeconv_r>:
 8007b38:	4b04      	ldr	r3, [pc, #16]	; (8007b4c <_localeconv_r+0x14>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6a18      	ldr	r0, [r3, #32]
 8007b3e:	4b04      	ldr	r3, [pc, #16]	; (8007b50 <_localeconv_r+0x18>)
 8007b40:	2800      	cmp	r0, #0
 8007b42:	bf08      	it	eq
 8007b44:	4618      	moveq	r0, r3
 8007b46:	30f0      	adds	r0, #240	; 0xf0
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	20000010 	.word	0x20000010
 8007b50:	20000074 	.word	0x20000074

08007b54 <malloc>:
 8007b54:	4b02      	ldr	r3, [pc, #8]	; (8007b60 <malloc+0xc>)
 8007b56:	4601      	mov	r1, r0
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	f000 bc7b 	b.w	8008454 <_malloc_r>
 8007b5e:	bf00      	nop
 8007b60:	20000010 	.word	0x20000010

08007b64 <__ascii_mbtowc>:
 8007b64:	b082      	sub	sp, #8
 8007b66:	b901      	cbnz	r1, 8007b6a <__ascii_mbtowc+0x6>
 8007b68:	a901      	add	r1, sp, #4
 8007b6a:	b142      	cbz	r2, 8007b7e <__ascii_mbtowc+0x1a>
 8007b6c:	b14b      	cbz	r3, 8007b82 <__ascii_mbtowc+0x1e>
 8007b6e:	7813      	ldrb	r3, [r2, #0]
 8007b70:	600b      	str	r3, [r1, #0]
 8007b72:	7812      	ldrb	r2, [r2, #0]
 8007b74:	1c10      	adds	r0, r2, #0
 8007b76:	bf18      	it	ne
 8007b78:	2001      	movne	r0, #1
 8007b7a:	b002      	add	sp, #8
 8007b7c:	4770      	bx	lr
 8007b7e:	4610      	mov	r0, r2
 8007b80:	e7fb      	b.n	8007b7a <__ascii_mbtowc+0x16>
 8007b82:	f06f 0001 	mvn.w	r0, #1
 8007b86:	e7f8      	b.n	8007b7a <__ascii_mbtowc+0x16>

08007b88 <memcpy>:
 8007b88:	b510      	push	{r4, lr}
 8007b8a:	1e43      	subs	r3, r0, #1
 8007b8c:	440a      	add	r2, r1
 8007b8e:	4291      	cmp	r1, r2
 8007b90:	d100      	bne.n	8007b94 <memcpy+0xc>
 8007b92:	bd10      	pop	{r4, pc}
 8007b94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b9c:	e7f7      	b.n	8007b8e <memcpy+0x6>

08007b9e <_Balloc>:
 8007b9e:	b570      	push	{r4, r5, r6, lr}
 8007ba0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	460e      	mov	r6, r1
 8007ba6:	b93d      	cbnz	r5, 8007bb8 <_Balloc+0x1a>
 8007ba8:	2010      	movs	r0, #16
 8007baa:	f7ff ffd3 	bl	8007b54 <malloc>
 8007bae:	6260      	str	r0, [r4, #36]	; 0x24
 8007bb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007bb4:	6005      	str	r5, [r0, #0]
 8007bb6:	60c5      	str	r5, [r0, #12]
 8007bb8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007bba:	68eb      	ldr	r3, [r5, #12]
 8007bbc:	b183      	cbz	r3, 8007be0 <_Balloc+0x42>
 8007bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007bc6:	b9b8      	cbnz	r0, 8007bf8 <_Balloc+0x5a>
 8007bc8:	2101      	movs	r1, #1
 8007bca:	fa01 f506 	lsl.w	r5, r1, r6
 8007bce:	1d6a      	adds	r2, r5, #5
 8007bd0:	0092      	lsls	r2, r2, #2
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 fbe1 	bl	800839a <_calloc_r>
 8007bd8:	b160      	cbz	r0, 8007bf4 <_Balloc+0x56>
 8007bda:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007bde:	e00e      	b.n	8007bfe <_Balloc+0x60>
 8007be0:	2221      	movs	r2, #33	; 0x21
 8007be2:	2104      	movs	r1, #4
 8007be4:	4620      	mov	r0, r4
 8007be6:	f000 fbd8 	bl	800839a <_calloc_r>
 8007bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bec:	60e8      	str	r0, [r5, #12]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e4      	bne.n	8007bbe <_Balloc+0x20>
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	bd70      	pop	{r4, r5, r6, pc}
 8007bf8:	6802      	ldr	r2, [r0, #0]
 8007bfa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c04:	e7f7      	b.n	8007bf6 <_Balloc+0x58>

08007c06 <_Bfree>:
 8007c06:	b570      	push	{r4, r5, r6, lr}
 8007c08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	460d      	mov	r5, r1
 8007c0e:	b93c      	cbnz	r4, 8007c20 <_Bfree+0x1a>
 8007c10:	2010      	movs	r0, #16
 8007c12:	f7ff ff9f 	bl	8007b54 <malloc>
 8007c16:	6270      	str	r0, [r6, #36]	; 0x24
 8007c18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c1c:	6004      	str	r4, [r0, #0]
 8007c1e:	60c4      	str	r4, [r0, #12]
 8007c20:	b13d      	cbz	r5, 8007c32 <_Bfree+0x2c>
 8007c22:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007c24:	686a      	ldr	r2, [r5, #4]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c2c:	6029      	str	r1, [r5, #0]
 8007c2e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007c32:	bd70      	pop	{r4, r5, r6, pc}

08007c34 <__multadd>:
 8007c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c38:	690d      	ldr	r5, [r1, #16]
 8007c3a:	461f      	mov	r7, r3
 8007c3c:	4606      	mov	r6, r0
 8007c3e:	460c      	mov	r4, r1
 8007c40:	f101 0c14 	add.w	ip, r1, #20
 8007c44:	2300      	movs	r3, #0
 8007c46:	f8dc 0000 	ldr.w	r0, [ip]
 8007c4a:	b281      	uxth	r1, r0
 8007c4c:	fb02 7101 	mla	r1, r2, r1, r7
 8007c50:	0c0f      	lsrs	r7, r1, #16
 8007c52:	0c00      	lsrs	r0, r0, #16
 8007c54:	fb02 7000 	mla	r0, r2, r0, r7
 8007c58:	b289      	uxth	r1, r1
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007c60:	429d      	cmp	r5, r3
 8007c62:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007c66:	f84c 1b04 	str.w	r1, [ip], #4
 8007c6a:	dcec      	bgt.n	8007c46 <__multadd+0x12>
 8007c6c:	b1d7      	cbz	r7, 8007ca4 <__multadd+0x70>
 8007c6e:	68a3      	ldr	r3, [r4, #8]
 8007c70:	42ab      	cmp	r3, r5
 8007c72:	dc12      	bgt.n	8007c9a <__multadd+0x66>
 8007c74:	6861      	ldr	r1, [r4, #4]
 8007c76:	4630      	mov	r0, r6
 8007c78:	3101      	adds	r1, #1
 8007c7a:	f7ff ff90 	bl	8007b9e <_Balloc>
 8007c7e:	6922      	ldr	r2, [r4, #16]
 8007c80:	3202      	adds	r2, #2
 8007c82:	f104 010c 	add.w	r1, r4, #12
 8007c86:	4680      	mov	r8, r0
 8007c88:	0092      	lsls	r2, r2, #2
 8007c8a:	300c      	adds	r0, #12
 8007c8c:	f7ff ff7c 	bl	8007b88 <memcpy>
 8007c90:	4621      	mov	r1, r4
 8007c92:	4630      	mov	r0, r6
 8007c94:	f7ff ffb7 	bl	8007c06 <_Bfree>
 8007c98:	4644      	mov	r4, r8
 8007c9a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c9e:	3501      	adds	r5, #1
 8007ca0:	615f      	str	r7, [r3, #20]
 8007ca2:	6125      	str	r5, [r4, #16]
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007caa <__s2b>:
 8007caa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cae:	460c      	mov	r4, r1
 8007cb0:	4615      	mov	r5, r2
 8007cb2:	461f      	mov	r7, r3
 8007cb4:	2209      	movs	r2, #9
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	4606      	mov	r6, r0
 8007cba:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	db20      	blt.n	8007d08 <__s2b+0x5e>
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	f7ff ff69 	bl	8007b9e <_Balloc>
 8007ccc:	9b08      	ldr	r3, [sp, #32]
 8007cce:	6143      	str	r3, [r0, #20]
 8007cd0:	2d09      	cmp	r5, #9
 8007cd2:	f04f 0301 	mov.w	r3, #1
 8007cd6:	6103      	str	r3, [r0, #16]
 8007cd8:	dd19      	ble.n	8007d0e <__s2b+0x64>
 8007cda:	f104 0809 	add.w	r8, r4, #9
 8007cde:	46c1      	mov	r9, r8
 8007ce0:	442c      	add	r4, r5
 8007ce2:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007ce6:	4601      	mov	r1, r0
 8007ce8:	3b30      	subs	r3, #48	; 0x30
 8007cea:	220a      	movs	r2, #10
 8007cec:	4630      	mov	r0, r6
 8007cee:	f7ff ffa1 	bl	8007c34 <__multadd>
 8007cf2:	45a1      	cmp	r9, r4
 8007cf4:	d1f5      	bne.n	8007ce2 <__s2b+0x38>
 8007cf6:	eb08 0405 	add.w	r4, r8, r5
 8007cfa:	3c08      	subs	r4, #8
 8007cfc:	1b2d      	subs	r5, r5, r4
 8007cfe:	1963      	adds	r3, r4, r5
 8007d00:	42bb      	cmp	r3, r7
 8007d02:	db07      	blt.n	8007d14 <__s2b+0x6a>
 8007d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d08:	0052      	lsls	r2, r2, #1
 8007d0a:	3101      	adds	r1, #1
 8007d0c:	e7d9      	b.n	8007cc2 <__s2b+0x18>
 8007d0e:	340a      	adds	r4, #10
 8007d10:	2509      	movs	r5, #9
 8007d12:	e7f3      	b.n	8007cfc <__s2b+0x52>
 8007d14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d18:	4601      	mov	r1, r0
 8007d1a:	3b30      	subs	r3, #48	; 0x30
 8007d1c:	220a      	movs	r2, #10
 8007d1e:	4630      	mov	r0, r6
 8007d20:	f7ff ff88 	bl	8007c34 <__multadd>
 8007d24:	e7eb      	b.n	8007cfe <__s2b+0x54>

08007d26 <__hi0bits>:
 8007d26:	0c02      	lsrs	r2, r0, #16
 8007d28:	0412      	lsls	r2, r2, #16
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	b9b2      	cbnz	r2, 8007d5c <__hi0bits+0x36>
 8007d2e:	0403      	lsls	r3, r0, #16
 8007d30:	2010      	movs	r0, #16
 8007d32:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007d36:	bf04      	itt	eq
 8007d38:	021b      	lsleq	r3, r3, #8
 8007d3a:	3008      	addeq	r0, #8
 8007d3c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007d40:	bf04      	itt	eq
 8007d42:	011b      	lsleq	r3, r3, #4
 8007d44:	3004      	addeq	r0, #4
 8007d46:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007d4a:	bf04      	itt	eq
 8007d4c:	009b      	lsleq	r3, r3, #2
 8007d4e:	3002      	addeq	r0, #2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	db06      	blt.n	8007d62 <__hi0bits+0x3c>
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	d503      	bpl.n	8007d60 <__hi0bits+0x3a>
 8007d58:	3001      	adds	r0, #1
 8007d5a:	4770      	bx	lr
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	e7e8      	b.n	8007d32 <__hi0bits+0xc>
 8007d60:	2020      	movs	r0, #32
 8007d62:	4770      	bx	lr

08007d64 <__lo0bits>:
 8007d64:	6803      	ldr	r3, [r0, #0]
 8007d66:	f013 0207 	ands.w	r2, r3, #7
 8007d6a:	4601      	mov	r1, r0
 8007d6c:	d00b      	beq.n	8007d86 <__lo0bits+0x22>
 8007d6e:	07da      	lsls	r2, r3, #31
 8007d70:	d423      	bmi.n	8007dba <__lo0bits+0x56>
 8007d72:	0798      	lsls	r0, r3, #30
 8007d74:	bf49      	itett	mi
 8007d76:	085b      	lsrmi	r3, r3, #1
 8007d78:	089b      	lsrpl	r3, r3, #2
 8007d7a:	2001      	movmi	r0, #1
 8007d7c:	600b      	strmi	r3, [r1, #0]
 8007d7e:	bf5c      	itt	pl
 8007d80:	600b      	strpl	r3, [r1, #0]
 8007d82:	2002      	movpl	r0, #2
 8007d84:	4770      	bx	lr
 8007d86:	b298      	uxth	r0, r3
 8007d88:	b9a8      	cbnz	r0, 8007db6 <__lo0bits+0x52>
 8007d8a:	0c1b      	lsrs	r3, r3, #16
 8007d8c:	2010      	movs	r0, #16
 8007d8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007d92:	bf04      	itt	eq
 8007d94:	0a1b      	lsreq	r3, r3, #8
 8007d96:	3008      	addeq	r0, #8
 8007d98:	071a      	lsls	r2, r3, #28
 8007d9a:	bf04      	itt	eq
 8007d9c:	091b      	lsreq	r3, r3, #4
 8007d9e:	3004      	addeq	r0, #4
 8007da0:	079a      	lsls	r2, r3, #30
 8007da2:	bf04      	itt	eq
 8007da4:	089b      	lsreq	r3, r3, #2
 8007da6:	3002      	addeq	r0, #2
 8007da8:	07da      	lsls	r2, r3, #31
 8007daa:	d402      	bmi.n	8007db2 <__lo0bits+0x4e>
 8007dac:	085b      	lsrs	r3, r3, #1
 8007dae:	d006      	beq.n	8007dbe <__lo0bits+0x5a>
 8007db0:	3001      	adds	r0, #1
 8007db2:	600b      	str	r3, [r1, #0]
 8007db4:	4770      	bx	lr
 8007db6:	4610      	mov	r0, r2
 8007db8:	e7e9      	b.n	8007d8e <__lo0bits+0x2a>
 8007dba:	2000      	movs	r0, #0
 8007dbc:	4770      	bx	lr
 8007dbe:	2020      	movs	r0, #32
 8007dc0:	4770      	bx	lr

08007dc2 <__i2b>:
 8007dc2:	b510      	push	{r4, lr}
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	f7ff fee9 	bl	8007b9e <_Balloc>
 8007dcc:	2201      	movs	r2, #1
 8007dce:	6144      	str	r4, [r0, #20]
 8007dd0:	6102      	str	r2, [r0, #16]
 8007dd2:	bd10      	pop	{r4, pc}

08007dd4 <__multiply>:
 8007dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd8:	4614      	mov	r4, r2
 8007dda:	690a      	ldr	r2, [r1, #16]
 8007ddc:	6923      	ldr	r3, [r4, #16]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	bfb8      	it	lt
 8007de2:	460b      	movlt	r3, r1
 8007de4:	4688      	mov	r8, r1
 8007de6:	bfbc      	itt	lt
 8007de8:	46a0      	movlt	r8, r4
 8007dea:	461c      	movlt	r4, r3
 8007dec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007df0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007df4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007df8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007dfc:	eb07 0609 	add.w	r6, r7, r9
 8007e00:	42b3      	cmp	r3, r6
 8007e02:	bfb8      	it	lt
 8007e04:	3101      	addlt	r1, #1
 8007e06:	f7ff feca 	bl	8007b9e <_Balloc>
 8007e0a:	f100 0514 	add.w	r5, r0, #20
 8007e0e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007e12:	462b      	mov	r3, r5
 8007e14:	2200      	movs	r2, #0
 8007e16:	4573      	cmp	r3, lr
 8007e18:	d316      	bcc.n	8007e48 <__multiply+0x74>
 8007e1a:	f104 0214 	add.w	r2, r4, #20
 8007e1e:	f108 0114 	add.w	r1, r8, #20
 8007e22:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007e26:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	9b00      	ldr	r3, [sp, #0]
 8007e2e:	9201      	str	r2, [sp, #4]
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d80c      	bhi.n	8007e4e <__multiply+0x7a>
 8007e34:	2e00      	cmp	r6, #0
 8007e36:	dd03      	ble.n	8007e40 <__multiply+0x6c>
 8007e38:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d05d      	beq.n	8007efc <__multiply+0x128>
 8007e40:	6106      	str	r6, [r0, #16]
 8007e42:	b003      	add	sp, #12
 8007e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e48:	f843 2b04 	str.w	r2, [r3], #4
 8007e4c:	e7e3      	b.n	8007e16 <__multiply+0x42>
 8007e4e:	f8b2 b000 	ldrh.w	fp, [r2]
 8007e52:	f1bb 0f00 	cmp.w	fp, #0
 8007e56:	d023      	beq.n	8007ea0 <__multiply+0xcc>
 8007e58:	4689      	mov	r9, r1
 8007e5a:	46ac      	mov	ip, r5
 8007e5c:	f04f 0800 	mov.w	r8, #0
 8007e60:	f859 4b04 	ldr.w	r4, [r9], #4
 8007e64:	f8dc a000 	ldr.w	sl, [ip]
 8007e68:	b2a3      	uxth	r3, r4
 8007e6a:	fa1f fa8a 	uxth.w	sl, sl
 8007e6e:	fb0b a303 	mla	r3, fp, r3, sl
 8007e72:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007e76:	f8dc 4000 	ldr.w	r4, [ip]
 8007e7a:	4443      	add	r3, r8
 8007e7c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007e80:	fb0b 840a 	mla	r4, fp, sl, r8
 8007e84:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007e88:	46e2      	mov	sl, ip
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007e90:	454f      	cmp	r7, r9
 8007e92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007e96:	f84a 3b04 	str.w	r3, [sl], #4
 8007e9a:	d82b      	bhi.n	8007ef4 <__multiply+0x120>
 8007e9c:	f8cc 8004 	str.w	r8, [ip, #4]
 8007ea0:	9b01      	ldr	r3, [sp, #4]
 8007ea2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007ea6:	3204      	adds	r2, #4
 8007ea8:	f1ba 0f00 	cmp.w	sl, #0
 8007eac:	d020      	beq.n	8007ef0 <__multiply+0x11c>
 8007eae:	682b      	ldr	r3, [r5, #0]
 8007eb0:	4689      	mov	r9, r1
 8007eb2:	46a8      	mov	r8, r5
 8007eb4:	f04f 0b00 	mov.w	fp, #0
 8007eb8:	f8b9 c000 	ldrh.w	ip, [r9]
 8007ebc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007ec0:	fb0a 440c 	mla	r4, sl, ip, r4
 8007ec4:	445c      	add	r4, fp
 8007ec6:	46c4      	mov	ip, r8
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007ece:	f84c 3b04 	str.w	r3, [ip], #4
 8007ed2:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ed6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007eda:	0c1b      	lsrs	r3, r3, #16
 8007edc:	fb0a b303 	mla	r3, sl, r3, fp
 8007ee0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007ee4:	454f      	cmp	r7, r9
 8007ee6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007eea:	d805      	bhi.n	8007ef8 <__multiply+0x124>
 8007eec:	f8c8 3004 	str.w	r3, [r8, #4]
 8007ef0:	3504      	adds	r5, #4
 8007ef2:	e79b      	b.n	8007e2c <__multiply+0x58>
 8007ef4:	46d4      	mov	ip, sl
 8007ef6:	e7b3      	b.n	8007e60 <__multiply+0x8c>
 8007ef8:	46e0      	mov	r8, ip
 8007efa:	e7dd      	b.n	8007eb8 <__multiply+0xe4>
 8007efc:	3e01      	subs	r6, #1
 8007efe:	e799      	b.n	8007e34 <__multiply+0x60>

08007f00 <__pow5mult>:
 8007f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f04:	4615      	mov	r5, r2
 8007f06:	f012 0203 	ands.w	r2, r2, #3
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	460f      	mov	r7, r1
 8007f0e:	d007      	beq.n	8007f20 <__pow5mult+0x20>
 8007f10:	3a01      	subs	r2, #1
 8007f12:	4c21      	ldr	r4, [pc, #132]	; (8007f98 <__pow5mult+0x98>)
 8007f14:	2300      	movs	r3, #0
 8007f16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f1a:	f7ff fe8b 	bl	8007c34 <__multadd>
 8007f1e:	4607      	mov	r7, r0
 8007f20:	10ad      	asrs	r5, r5, #2
 8007f22:	d035      	beq.n	8007f90 <__pow5mult+0x90>
 8007f24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f26:	b93c      	cbnz	r4, 8007f38 <__pow5mult+0x38>
 8007f28:	2010      	movs	r0, #16
 8007f2a:	f7ff fe13 	bl	8007b54 <malloc>
 8007f2e:	6270      	str	r0, [r6, #36]	; 0x24
 8007f30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f34:	6004      	str	r4, [r0, #0]
 8007f36:	60c4      	str	r4, [r0, #12]
 8007f38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f40:	b94c      	cbnz	r4, 8007f56 <__pow5mult+0x56>
 8007f42:	f240 2171 	movw	r1, #625	; 0x271
 8007f46:	4630      	mov	r0, r6
 8007f48:	f7ff ff3b 	bl	8007dc2 <__i2b>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f52:	4604      	mov	r4, r0
 8007f54:	6003      	str	r3, [r0, #0]
 8007f56:	f04f 0800 	mov.w	r8, #0
 8007f5a:	07eb      	lsls	r3, r5, #31
 8007f5c:	d50a      	bpl.n	8007f74 <__pow5mult+0x74>
 8007f5e:	4639      	mov	r1, r7
 8007f60:	4622      	mov	r2, r4
 8007f62:	4630      	mov	r0, r6
 8007f64:	f7ff ff36 	bl	8007dd4 <__multiply>
 8007f68:	4639      	mov	r1, r7
 8007f6a:	4681      	mov	r9, r0
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f7ff fe4a 	bl	8007c06 <_Bfree>
 8007f72:	464f      	mov	r7, r9
 8007f74:	106d      	asrs	r5, r5, #1
 8007f76:	d00b      	beq.n	8007f90 <__pow5mult+0x90>
 8007f78:	6820      	ldr	r0, [r4, #0]
 8007f7a:	b938      	cbnz	r0, 8007f8c <__pow5mult+0x8c>
 8007f7c:	4622      	mov	r2, r4
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7ff ff27 	bl	8007dd4 <__multiply>
 8007f86:	6020      	str	r0, [r4, #0]
 8007f88:	f8c0 8000 	str.w	r8, [r0]
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	e7e4      	b.n	8007f5a <__pow5mult+0x5a>
 8007f90:	4638      	mov	r0, r7
 8007f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f96:	bf00      	nop
 8007f98:	08008a90 	.word	0x08008a90

08007f9c <__lshift>:
 8007f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fa6:	6923      	ldr	r3, [r4, #16]
 8007fa8:	6849      	ldr	r1, [r1, #4]
 8007faa:	eb0a 0903 	add.w	r9, sl, r3
 8007fae:	68a3      	ldr	r3, [r4, #8]
 8007fb0:	4607      	mov	r7, r0
 8007fb2:	4616      	mov	r6, r2
 8007fb4:	f109 0501 	add.w	r5, r9, #1
 8007fb8:	42ab      	cmp	r3, r5
 8007fba:	db32      	blt.n	8008022 <__lshift+0x86>
 8007fbc:	4638      	mov	r0, r7
 8007fbe:	f7ff fdee 	bl	8007b9e <_Balloc>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	4680      	mov	r8, r0
 8007fc6:	f100 0114 	add.w	r1, r0, #20
 8007fca:	461a      	mov	r2, r3
 8007fcc:	4553      	cmp	r3, sl
 8007fce:	db2b      	blt.n	8008028 <__lshift+0x8c>
 8007fd0:	6920      	ldr	r0, [r4, #16]
 8007fd2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fd6:	f104 0314 	add.w	r3, r4, #20
 8007fda:	f016 021f 	ands.w	r2, r6, #31
 8007fde:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fe2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007fe6:	d025      	beq.n	8008034 <__lshift+0x98>
 8007fe8:	f1c2 0e20 	rsb	lr, r2, #32
 8007fec:	2000      	movs	r0, #0
 8007fee:	681e      	ldr	r6, [r3, #0]
 8007ff0:	468a      	mov	sl, r1
 8007ff2:	4096      	lsls	r6, r2
 8007ff4:	4330      	orrs	r0, r6
 8007ff6:	f84a 0b04 	str.w	r0, [sl], #4
 8007ffa:	f853 0b04 	ldr.w	r0, [r3], #4
 8007ffe:	459c      	cmp	ip, r3
 8008000:	fa20 f00e 	lsr.w	r0, r0, lr
 8008004:	d814      	bhi.n	8008030 <__lshift+0x94>
 8008006:	6048      	str	r0, [r1, #4]
 8008008:	b108      	cbz	r0, 800800e <__lshift+0x72>
 800800a:	f109 0502 	add.w	r5, r9, #2
 800800e:	3d01      	subs	r5, #1
 8008010:	4638      	mov	r0, r7
 8008012:	f8c8 5010 	str.w	r5, [r8, #16]
 8008016:	4621      	mov	r1, r4
 8008018:	f7ff fdf5 	bl	8007c06 <_Bfree>
 800801c:	4640      	mov	r0, r8
 800801e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008022:	3101      	adds	r1, #1
 8008024:	005b      	lsls	r3, r3, #1
 8008026:	e7c7      	b.n	8007fb8 <__lshift+0x1c>
 8008028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800802c:	3301      	adds	r3, #1
 800802e:	e7cd      	b.n	8007fcc <__lshift+0x30>
 8008030:	4651      	mov	r1, sl
 8008032:	e7dc      	b.n	8007fee <__lshift+0x52>
 8008034:	3904      	subs	r1, #4
 8008036:	f853 2b04 	ldr.w	r2, [r3], #4
 800803a:	f841 2f04 	str.w	r2, [r1, #4]!
 800803e:	459c      	cmp	ip, r3
 8008040:	d8f9      	bhi.n	8008036 <__lshift+0x9a>
 8008042:	e7e4      	b.n	800800e <__lshift+0x72>

08008044 <__mcmp>:
 8008044:	6903      	ldr	r3, [r0, #16]
 8008046:	690a      	ldr	r2, [r1, #16]
 8008048:	1a9b      	subs	r3, r3, r2
 800804a:	b530      	push	{r4, r5, lr}
 800804c:	d10c      	bne.n	8008068 <__mcmp+0x24>
 800804e:	0092      	lsls	r2, r2, #2
 8008050:	3014      	adds	r0, #20
 8008052:	3114      	adds	r1, #20
 8008054:	1884      	adds	r4, r0, r2
 8008056:	4411      	add	r1, r2
 8008058:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800805c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008060:	4295      	cmp	r5, r2
 8008062:	d003      	beq.n	800806c <__mcmp+0x28>
 8008064:	d305      	bcc.n	8008072 <__mcmp+0x2e>
 8008066:	2301      	movs	r3, #1
 8008068:	4618      	mov	r0, r3
 800806a:	bd30      	pop	{r4, r5, pc}
 800806c:	42a0      	cmp	r0, r4
 800806e:	d3f3      	bcc.n	8008058 <__mcmp+0x14>
 8008070:	e7fa      	b.n	8008068 <__mcmp+0x24>
 8008072:	f04f 33ff 	mov.w	r3, #4294967295
 8008076:	e7f7      	b.n	8008068 <__mcmp+0x24>

08008078 <__mdiff>:
 8008078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800807c:	460d      	mov	r5, r1
 800807e:	4607      	mov	r7, r0
 8008080:	4611      	mov	r1, r2
 8008082:	4628      	mov	r0, r5
 8008084:	4614      	mov	r4, r2
 8008086:	f7ff ffdd 	bl	8008044 <__mcmp>
 800808a:	1e06      	subs	r6, r0, #0
 800808c:	d108      	bne.n	80080a0 <__mdiff+0x28>
 800808e:	4631      	mov	r1, r6
 8008090:	4638      	mov	r0, r7
 8008092:	f7ff fd84 	bl	8007b9e <_Balloc>
 8008096:	2301      	movs	r3, #1
 8008098:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800809c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a0:	bfa4      	itt	ge
 80080a2:	4623      	movge	r3, r4
 80080a4:	462c      	movge	r4, r5
 80080a6:	4638      	mov	r0, r7
 80080a8:	6861      	ldr	r1, [r4, #4]
 80080aa:	bfa6      	itte	ge
 80080ac:	461d      	movge	r5, r3
 80080ae:	2600      	movge	r6, #0
 80080b0:	2601      	movlt	r6, #1
 80080b2:	f7ff fd74 	bl	8007b9e <_Balloc>
 80080b6:	692b      	ldr	r3, [r5, #16]
 80080b8:	60c6      	str	r6, [r0, #12]
 80080ba:	6926      	ldr	r6, [r4, #16]
 80080bc:	f105 0914 	add.w	r9, r5, #20
 80080c0:	f104 0214 	add.w	r2, r4, #20
 80080c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80080c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80080cc:	f100 0514 	add.w	r5, r0, #20
 80080d0:	f04f 0e00 	mov.w	lr, #0
 80080d4:	f852 ab04 	ldr.w	sl, [r2], #4
 80080d8:	f859 4b04 	ldr.w	r4, [r9], #4
 80080dc:	fa1e f18a 	uxtah	r1, lr, sl
 80080e0:	b2a3      	uxth	r3, r4
 80080e2:	1ac9      	subs	r1, r1, r3
 80080e4:	0c23      	lsrs	r3, r4, #16
 80080e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80080ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80080ee:	b289      	uxth	r1, r1
 80080f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80080f4:	45c8      	cmp	r8, r9
 80080f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80080fa:	4694      	mov	ip, r2
 80080fc:	f845 3b04 	str.w	r3, [r5], #4
 8008100:	d8e8      	bhi.n	80080d4 <__mdiff+0x5c>
 8008102:	45bc      	cmp	ip, r7
 8008104:	d304      	bcc.n	8008110 <__mdiff+0x98>
 8008106:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800810a:	b183      	cbz	r3, 800812e <__mdiff+0xb6>
 800810c:	6106      	str	r6, [r0, #16]
 800810e:	e7c5      	b.n	800809c <__mdiff+0x24>
 8008110:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008114:	fa1e f381 	uxtah	r3, lr, r1
 8008118:	141a      	asrs	r2, r3, #16
 800811a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800811e:	b29b      	uxth	r3, r3
 8008120:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008124:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008128:	f845 3b04 	str.w	r3, [r5], #4
 800812c:	e7e9      	b.n	8008102 <__mdiff+0x8a>
 800812e:	3e01      	subs	r6, #1
 8008130:	e7e9      	b.n	8008106 <__mdiff+0x8e>
	...

08008134 <__ulp>:
 8008134:	4b12      	ldr	r3, [pc, #72]	; (8008180 <__ulp+0x4c>)
 8008136:	ee10 2a90 	vmov	r2, s1
 800813a:	401a      	ands	r2, r3
 800813c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008140:	2b00      	cmp	r3, #0
 8008142:	dd04      	ble.n	800814e <__ulp+0x1a>
 8008144:	2000      	movs	r0, #0
 8008146:	4619      	mov	r1, r3
 8008148:	ec41 0b10 	vmov	d0, r0, r1
 800814c:	4770      	bx	lr
 800814e:	425b      	negs	r3, r3
 8008150:	151b      	asrs	r3, r3, #20
 8008152:	2b13      	cmp	r3, #19
 8008154:	f04f 0000 	mov.w	r0, #0
 8008158:	f04f 0100 	mov.w	r1, #0
 800815c:	dc04      	bgt.n	8008168 <__ulp+0x34>
 800815e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008162:	fa42 f103 	asr.w	r1, r2, r3
 8008166:	e7ef      	b.n	8008148 <__ulp+0x14>
 8008168:	3b14      	subs	r3, #20
 800816a:	2b1e      	cmp	r3, #30
 800816c:	f04f 0201 	mov.w	r2, #1
 8008170:	bfda      	itte	le
 8008172:	f1c3 031f 	rsble	r3, r3, #31
 8008176:	fa02 f303 	lslle.w	r3, r2, r3
 800817a:	4613      	movgt	r3, r2
 800817c:	4618      	mov	r0, r3
 800817e:	e7e3      	b.n	8008148 <__ulp+0x14>
 8008180:	7ff00000 	.word	0x7ff00000

08008184 <__b2d>:
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008186:	6905      	ldr	r5, [r0, #16]
 8008188:	f100 0714 	add.w	r7, r0, #20
 800818c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008190:	1f2e      	subs	r6, r5, #4
 8008192:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008196:	4620      	mov	r0, r4
 8008198:	f7ff fdc5 	bl	8007d26 <__hi0bits>
 800819c:	f1c0 0320 	rsb	r3, r0, #32
 80081a0:	280a      	cmp	r0, #10
 80081a2:	600b      	str	r3, [r1, #0]
 80081a4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800821c <__b2d+0x98>
 80081a8:	dc14      	bgt.n	80081d4 <__b2d+0x50>
 80081aa:	f1c0 0e0b 	rsb	lr, r0, #11
 80081ae:	fa24 f10e 	lsr.w	r1, r4, lr
 80081b2:	42b7      	cmp	r7, r6
 80081b4:	ea41 030c 	orr.w	r3, r1, ip
 80081b8:	bf34      	ite	cc
 80081ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80081be:	2100      	movcs	r1, #0
 80081c0:	3015      	adds	r0, #21
 80081c2:	fa04 f000 	lsl.w	r0, r4, r0
 80081c6:	fa21 f10e 	lsr.w	r1, r1, lr
 80081ca:	ea40 0201 	orr.w	r2, r0, r1
 80081ce:	ec43 2b10 	vmov	d0, r2, r3
 80081d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081d4:	42b7      	cmp	r7, r6
 80081d6:	bf3a      	itte	cc
 80081d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80081dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80081e0:	2100      	movcs	r1, #0
 80081e2:	380b      	subs	r0, #11
 80081e4:	d015      	beq.n	8008212 <__b2d+0x8e>
 80081e6:	4084      	lsls	r4, r0
 80081e8:	f1c0 0520 	rsb	r5, r0, #32
 80081ec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80081f0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80081f4:	42be      	cmp	r6, r7
 80081f6:	fa21 fc05 	lsr.w	ip, r1, r5
 80081fa:	ea44 030c 	orr.w	r3, r4, ip
 80081fe:	bf8c      	ite	hi
 8008200:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008204:	2400      	movls	r4, #0
 8008206:	fa01 f000 	lsl.w	r0, r1, r0
 800820a:	40ec      	lsrs	r4, r5
 800820c:	ea40 0204 	orr.w	r2, r0, r4
 8008210:	e7dd      	b.n	80081ce <__b2d+0x4a>
 8008212:	ea44 030c 	orr.w	r3, r4, ip
 8008216:	460a      	mov	r2, r1
 8008218:	e7d9      	b.n	80081ce <__b2d+0x4a>
 800821a:	bf00      	nop
 800821c:	3ff00000 	.word	0x3ff00000

08008220 <__d2b>:
 8008220:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008224:	460e      	mov	r6, r1
 8008226:	2101      	movs	r1, #1
 8008228:	ec59 8b10 	vmov	r8, r9, d0
 800822c:	4615      	mov	r5, r2
 800822e:	f7ff fcb6 	bl	8007b9e <_Balloc>
 8008232:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008236:	4607      	mov	r7, r0
 8008238:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800823c:	bb34      	cbnz	r4, 800828c <__d2b+0x6c>
 800823e:	9301      	str	r3, [sp, #4]
 8008240:	f1b8 0300 	subs.w	r3, r8, #0
 8008244:	d027      	beq.n	8008296 <__d2b+0x76>
 8008246:	a802      	add	r0, sp, #8
 8008248:	f840 3d08 	str.w	r3, [r0, #-8]!
 800824c:	f7ff fd8a 	bl	8007d64 <__lo0bits>
 8008250:	9900      	ldr	r1, [sp, #0]
 8008252:	b1f0      	cbz	r0, 8008292 <__d2b+0x72>
 8008254:	9a01      	ldr	r2, [sp, #4]
 8008256:	f1c0 0320 	rsb	r3, r0, #32
 800825a:	fa02 f303 	lsl.w	r3, r2, r3
 800825e:	430b      	orrs	r3, r1
 8008260:	40c2      	lsrs	r2, r0
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	9201      	str	r2, [sp, #4]
 8008266:	9b01      	ldr	r3, [sp, #4]
 8008268:	61bb      	str	r3, [r7, #24]
 800826a:	2b00      	cmp	r3, #0
 800826c:	bf14      	ite	ne
 800826e:	2102      	movne	r1, #2
 8008270:	2101      	moveq	r1, #1
 8008272:	6139      	str	r1, [r7, #16]
 8008274:	b1c4      	cbz	r4, 80082a8 <__d2b+0x88>
 8008276:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800827a:	4404      	add	r4, r0
 800827c:	6034      	str	r4, [r6, #0]
 800827e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008282:	6028      	str	r0, [r5, #0]
 8008284:	4638      	mov	r0, r7
 8008286:	b003      	add	sp, #12
 8008288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800828c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008290:	e7d5      	b.n	800823e <__d2b+0x1e>
 8008292:	6179      	str	r1, [r7, #20]
 8008294:	e7e7      	b.n	8008266 <__d2b+0x46>
 8008296:	a801      	add	r0, sp, #4
 8008298:	f7ff fd64 	bl	8007d64 <__lo0bits>
 800829c:	9b01      	ldr	r3, [sp, #4]
 800829e:	617b      	str	r3, [r7, #20]
 80082a0:	2101      	movs	r1, #1
 80082a2:	6139      	str	r1, [r7, #16]
 80082a4:	3020      	adds	r0, #32
 80082a6:	e7e5      	b.n	8008274 <__d2b+0x54>
 80082a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80082ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80082b0:	6030      	str	r0, [r6, #0]
 80082b2:	6918      	ldr	r0, [r3, #16]
 80082b4:	f7ff fd37 	bl	8007d26 <__hi0bits>
 80082b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80082bc:	e7e1      	b.n	8008282 <__d2b+0x62>

080082be <__ratio>:
 80082be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c2:	4688      	mov	r8, r1
 80082c4:	4669      	mov	r1, sp
 80082c6:	4681      	mov	r9, r0
 80082c8:	f7ff ff5c 	bl	8008184 <__b2d>
 80082cc:	a901      	add	r1, sp, #4
 80082ce:	4640      	mov	r0, r8
 80082d0:	ec57 6b10 	vmov	r6, r7, d0
 80082d4:	f7ff ff56 	bl	8008184 <__b2d>
 80082d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80082dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80082e0:	eba3 0c02 	sub.w	ip, r3, r2
 80082e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80082e8:	1a9b      	subs	r3, r3, r2
 80082ea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80082ee:	ec5b ab10 	vmov	sl, fp, d0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	bfce      	itee	gt
 80082f6:	463a      	movgt	r2, r7
 80082f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80082fc:	465a      	movle	r2, fp
 80082fe:	4659      	mov	r1, fp
 8008300:	463d      	mov	r5, r7
 8008302:	bfd4      	ite	le
 8008304:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008308:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800830c:	4630      	mov	r0, r6
 800830e:	ee10 2a10 	vmov	r2, s0
 8008312:	460b      	mov	r3, r1
 8008314:	4629      	mov	r1, r5
 8008316:	f7f8 fa99 	bl	800084c <__aeabi_ddiv>
 800831a:	ec41 0b10 	vmov	d0, r0, r1
 800831e:	b003      	add	sp, #12
 8008320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008324 <__copybits>:
 8008324:	3901      	subs	r1, #1
 8008326:	b510      	push	{r4, lr}
 8008328:	1149      	asrs	r1, r1, #5
 800832a:	6914      	ldr	r4, [r2, #16]
 800832c:	3101      	adds	r1, #1
 800832e:	f102 0314 	add.w	r3, r2, #20
 8008332:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008336:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800833a:	42a3      	cmp	r3, r4
 800833c:	4602      	mov	r2, r0
 800833e:	d303      	bcc.n	8008348 <__copybits+0x24>
 8008340:	2300      	movs	r3, #0
 8008342:	428a      	cmp	r2, r1
 8008344:	d305      	bcc.n	8008352 <__copybits+0x2e>
 8008346:	bd10      	pop	{r4, pc}
 8008348:	f853 2b04 	ldr.w	r2, [r3], #4
 800834c:	f840 2b04 	str.w	r2, [r0], #4
 8008350:	e7f3      	b.n	800833a <__copybits+0x16>
 8008352:	f842 3b04 	str.w	r3, [r2], #4
 8008356:	e7f4      	b.n	8008342 <__copybits+0x1e>

08008358 <__any_on>:
 8008358:	f100 0214 	add.w	r2, r0, #20
 800835c:	6900      	ldr	r0, [r0, #16]
 800835e:	114b      	asrs	r3, r1, #5
 8008360:	4298      	cmp	r0, r3
 8008362:	b510      	push	{r4, lr}
 8008364:	db11      	blt.n	800838a <__any_on+0x32>
 8008366:	dd0a      	ble.n	800837e <__any_on+0x26>
 8008368:	f011 011f 	ands.w	r1, r1, #31
 800836c:	d007      	beq.n	800837e <__any_on+0x26>
 800836e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008372:	fa24 f001 	lsr.w	r0, r4, r1
 8008376:	fa00 f101 	lsl.w	r1, r0, r1
 800837a:	428c      	cmp	r4, r1
 800837c:	d10b      	bne.n	8008396 <__any_on+0x3e>
 800837e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008382:	4293      	cmp	r3, r2
 8008384:	d803      	bhi.n	800838e <__any_on+0x36>
 8008386:	2000      	movs	r0, #0
 8008388:	bd10      	pop	{r4, pc}
 800838a:	4603      	mov	r3, r0
 800838c:	e7f7      	b.n	800837e <__any_on+0x26>
 800838e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008392:	2900      	cmp	r1, #0
 8008394:	d0f5      	beq.n	8008382 <__any_on+0x2a>
 8008396:	2001      	movs	r0, #1
 8008398:	e7f6      	b.n	8008388 <__any_on+0x30>

0800839a <_calloc_r>:
 800839a:	b538      	push	{r3, r4, r5, lr}
 800839c:	fb02 f401 	mul.w	r4, r2, r1
 80083a0:	4621      	mov	r1, r4
 80083a2:	f000 f857 	bl	8008454 <_malloc_r>
 80083a6:	4605      	mov	r5, r0
 80083a8:	b118      	cbz	r0, 80083b2 <_calloc_r+0x18>
 80083aa:	4622      	mov	r2, r4
 80083ac:	2100      	movs	r1, #0
 80083ae:	f7fc ffad 	bl	800530c <memset>
 80083b2:	4628      	mov	r0, r5
 80083b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080083b8 <_free_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4605      	mov	r5, r0
 80083bc:	2900      	cmp	r1, #0
 80083be:	d045      	beq.n	800844c <_free_r+0x94>
 80083c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083c4:	1f0c      	subs	r4, r1, #4
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	bfb8      	it	lt
 80083ca:	18e4      	addlt	r4, r4, r3
 80083cc:	f000 fa36 	bl	800883c <__malloc_lock>
 80083d0:	4a1f      	ldr	r2, [pc, #124]	; (8008450 <_free_r+0x98>)
 80083d2:	6813      	ldr	r3, [r2, #0]
 80083d4:	4610      	mov	r0, r2
 80083d6:	b933      	cbnz	r3, 80083e6 <_free_r+0x2e>
 80083d8:	6063      	str	r3, [r4, #4]
 80083da:	6014      	str	r4, [r2, #0]
 80083dc:	4628      	mov	r0, r5
 80083de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083e2:	f000 ba2c 	b.w	800883e <__malloc_unlock>
 80083e6:	42a3      	cmp	r3, r4
 80083e8:	d90c      	bls.n	8008404 <_free_r+0x4c>
 80083ea:	6821      	ldr	r1, [r4, #0]
 80083ec:	1862      	adds	r2, r4, r1
 80083ee:	4293      	cmp	r3, r2
 80083f0:	bf04      	itt	eq
 80083f2:	681a      	ldreq	r2, [r3, #0]
 80083f4:	685b      	ldreq	r3, [r3, #4]
 80083f6:	6063      	str	r3, [r4, #4]
 80083f8:	bf04      	itt	eq
 80083fa:	1852      	addeq	r2, r2, r1
 80083fc:	6022      	streq	r2, [r4, #0]
 80083fe:	6004      	str	r4, [r0, #0]
 8008400:	e7ec      	b.n	80083dc <_free_r+0x24>
 8008402:	4613      	mov	r3, r2
 8008404:	685a      	ldr	r2, [r3, #4]
 8008406:	b10a      	cbz	r2, 800840c <_free_r+0x54>
 8008408:	42a2      	cmp	r2, r4
 800840a:	d9fa      	bls.n	8008402 <_free_r+0x4a>
 800840c:	6819      	ldr	r1, [r3, #0]
 800840e:	1858      	adds	r0, r3, r1
 8008410:	42a0      	cmp	r0, r4
 8008412:	d10b      	bne.n	800842c <_free_r+0x74>
 8008414:	6820      	ldr	r0, [r4, #0]
 8008416:	4401      	add	r1, r0
 8008418:	1858      	adds	r0, r3, r1
 800841a:	4282      	cmp	r2, r0
 800841c:	6019      	str	r1, [r3, #0]
 800841e:	d1dd      	bne.n	80083dc <_free_r+0x24>
 8008420:	6810      	ldr	r0, [r2, #0]
 8008422:	6852      	ldr	r2, [r2, #4]
 8008424:	605a      	str	r2, [r3, #4]
 8008426:	4401      	add	r1, r0
 8008428:	6019      	str	r1, [r3, #0]
 800842a:	e7d7      	b.n	80083dc <_free_r+0x24>
 800842c:	d902      	bls.n	8008434 <_free_r+0x7c>
 800842e:	230c      	movs	r3, #12
 8008430:	602b      	str	r3, [r5, #0]
 8008432:	e7d3      	b.n	80083dc <_free_r+0x24>
 8008434:	6820      	ldr	r0, [r4, #0]
 8008436:	1821      	adds	r1, r4, r0
 8008438:	428a      	cmp	r2, r1
 800843a:	bf04      	itt	eq
 800843c:	6811      	ldreq	r1, [r2, #0]
 800843e:	6852      	ldreq	r2, [r2, #4]
 8008440:	6062      	str	r2, [r4, #4]
 8008442:	bf04      	itt	eq
 8008444:	1809      	addeq	r1, r1, r0
 8008446:	6021      	streq	r1, [r4, #0]
 8008448:	605c      	str	r4, [r3, #4]
 800844a:	e7c7      	b.n	80083dc <_free_r+0x24>
 800844c:	bd38      	pop	{r3, r4, r5, pc}
 800844e:	bf00      	nop
 8008450:	200002e8 	.word	0x200002e8

08008454 <_malloc_r>:
 8008454:	b570      	push	{r4, r5, r6, lr}
 8008456:	1ccd      	adds	r5, r1, #3
 8008458:	f025 0503 	bic.w	r5, r5, #3
 800845c:	3508      	adds	r5, #8
 800845e:	2d0c      	cmp	r5, #12
 8008460:	bf38      	it	cc
 8008462:	250c      	movcc	r5, #12
 8008464:	2d00      	cmp	r5, #0
 8008466:	4606      	mov	r6, r0
 8008468:	db01      	blt.n	800846e <_malloc_r+0x1a>
 800846a:	42a9      	cmp	r1, r5
 800846c:	d903      	bls.n	8008476 <_malloc_r+0x22>
 800846e:	230c      	movs	r3, #12
 8008470:	6033      	str	r3, [r6, #0]
 8008472:	2000      	movs	r0, #0
 8008474:	bd70      	pop	{r4, r5, r6, pc}
 8008476:	f000 f9e1 	bl	800883c <__malloc_lock>
 800847a:	4a21      	ldr	r2, [pc, #132]	; (8008500 <_malloc_r+0xac>)
 800847c:	6814      	ldr	r4, [r2, #0]
 800847e:	4621      	mov	r1, r4
 8008480:	b991      	cbnz	r1, 80084a8 <_malloc_r+0x54>
 8008482:	4c20      	ldr	r4, [pc, #128]	; (8008504 <_malloc_r+0xb0>)
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	b91b      	cbnz	r3, 8008490 <_malloc_r+0x3c>
 8008488:	4630      	mov	r0, r6
 800848a:	f000 f98f 	bl	80087ac <_sbrk_r>
 800848e:	6020      	str	r0, [r4, #0]
 8008490:	4629      	mov	r1, r5
 8008492:	4630      	mov	r0, r6
 8008494:	f000 f98a 	bl	80087ac <_sbrk_r>
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	d124      	bne.n	80084e6 <_malloc_r+0x92>
 800849c:	230c      	movs	r3, #12
 800849e:	6033      	str	r3, [r6, #0]
 80084a0:	4630      	mov	r0, r6
 80084a2:	f000 f9cc 	bl	800883e <__malloc_unlock>
 80084a6:	e7e4      	b.n	8008472 <_malloc_r+0x1e>
 80084a8:	680b      	ldr	r3, [r1, #0]
 80084aa:	1b5b      	subs	r3, r3, r5
 80084ac:	d418      	bmi.n	80084e0 <_malloc_r+0x8c>
 80084ae:	2b0b      	cmp	r3, #11
 80084b0:	d90f      	bls.n	80084d2 <_malloc_r+0x7e>
 80084b2:	600b      	str	r3, [r1, #0]
 80084b4:	50cd      	str	r5, [r1, r3]
 80084b6:	18cc      	adds	r4, r1, r3
 80084b8:	4630      	mov	r0, r6
 80084ba:	f000 f9c0 	bl	800883e <__malloc_unlock>
 80084be:	f104 000b 	add.w	r0, r4, #11
 80084c2:	1d23      	adds	r3, r4, #4
 80084c4:	f020 0007 	bic.w	r0, r0, #7
 80084c8:	1ac3      	subs	r3, r0, r3
 80084ca:	d0d3      	beq.n	8008474 <_malloc_r+0x20>
 80084cc:	425a      	negs	r2, r3
 80084ce:	50e2      	str	r2, [r4, r3]
 80084d0:	e7d0      	b.n	8008474 <_malloc_r+0x20>
 80084d2:	428c      	cmp	r4, r1
 80084d4:	684b      	ldr	r3, [r1, #4]
 80084d6:	bf16      	itet	ne
 80084d8:	6063      	strne	r3, [r4, #4]
 80084da:	6013      	streq	r3, [r2, #0]
 80084dc:	460c      	movne	r4, r1
 80084de:	e7eb      	b.n	80084b8 <_malloc_r+0x64>
 80084e0:	460c      	mov	r4, r1
 80084e2:	6849      	ldr	r1, [r1, #4]
 80084e4:	e7cc      	b.n	8008480 <_malloc_r+0x2c>
 80084e6:	1cc4      	adds	r4, r0, #3
 80084e8:	f024 0403 	bic.w	r4, r4, #3
 80084ec:	42a0      	cmp	r0, r4
 80084ee:	d005      	beq.n	80084fc <_malloc_r+0xa8>
 80084f0:	1a21      	subs	r1, r4, r0
 80084f2:	4630      	mov	r0, r6
 80084f4:	f000 f95a 	bl	80087ac <_sbrk_r>
 80084f8:	3001      	adds	r0, #1
 80084fa:	d0cf      	beq.n	800849c <_malloc_r+0x48>
 80084fc:	6025      	str	r5, [r4, #0]
 80084fe:	e7db      	b.n	80084b8 <_malloc_r+0x64>
 8008500:	200002e8 	.word	0x200002e8
 8008504:	200002ec 	.word	0x200002ec

08008508 <__ssputs_r>:
 8008508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800850c:	688e      	ldr	r6, [r1, #8]
 800850e:	429e      	cmp	r6, r3
 8008510:	4682      	mov	sl, r0
 8008512:	460c      	mov	r4, r1
 8008514:	4690      	mov	r8, r2
 8008516:	4699      	mov	r9, r3
 8008518:	d837      	bhi.n	800858a <__ssputs_r+0x82>
 800851a:	898a      	ldrh	r2, [r1, #12]
 800851c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008520:	d031      	beq.n	8008586 <__ssputs_r+0x7e>
 8008522:	6825      	ldr	r5, [r4, #0]
 8008524:	6909      	ldr	r1, [r1, #16]
 8008526:	1a6f      	subs	r7, r5, r1
 8008528:	6965      	ldr	r5, [r4, #20]
 800852a:	2302      	movs	r3, #2
 800852c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008530:	fb95 f5f3 	sdiv	r5, r5, r3
 8008534:	f109 0301 	add.w	r3, r9, #1
 8008538:	443b      	add	r3, r7
 800853a:	429d      	cmp	r5, r3
 800853c:	bf38      	it	cc
 800853e:	461d      	movcc	r5, r3
 8008540:	0553      	lsls	r3, r2, #21
 8008542:	d530      	bpl.n	80085a6 <__ssputs_r+0x9e>
 8008544:	4629      	mov	r1, r5
 8008546:	f7ff ff85 	bl	8008454 <_malloc_r>
 800854a:	4606      	mov	r6, r0
 800854c:	b950      	cbnz	r0, 8008564 <__ssputs_r+0x5c>
 800854e:	230c      	movs	r3, #12
 8008550:	f8ca 3000 	str.w	r3, [sl]
 8008554:	89a3      	ldrh	r3, [r4, #12]
 8008556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800855a:	81a3      	strh	r3, [r4, #12]
 800855c:	f04f 30ff 	mov.w	r0, #4294967295
 8008560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008564:	463a      	mov	r2, r7
 8008566:	6921      	ldr	r1, [r4, #16]
 8008568:	f7ff fb0e 	bl	8007b88 <memcpy>
 800856c:	89a3      	ldrh	r3, [r4, #12]
 800856e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008576:	81a3      	strh	r3, [r4, #12]
 8008578:	6126      	str	r6, [r4, #16]
 800857a:	6165      	str	r5, [r4, #20]
 800857c:	443e      	add	r6, r7
 800857e:	1bed      	subs	r5, r5, r7
 8008580:	6026      	str	r6, [r4, #0]
 8008582:	60a5      	str	r5, [r4, #8]
 8008584:	464e      	mov	r6, r9
 8008586:	454e      	cmp	r6, r9
 8008588:	d900      	bls.n	800858c <__ssputs_r+0x84>
 800858a:	464e      	mov	r6, r9
 800858c:	4632      	mov	r2, r6
 800858e:	4641      	mov	r1, r8
 8008590:	6820      	ldr	r0, [r4, #0]
 8008592:	f000 f93a 	bl	800880a <memmove>
 8008596:	68a3      	ldr	r3, [r4, #8]
 8008598:	1b9b      	subs	r3, r3, r6
 800859a:	60a3      	str	r3, [r4, #8]
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	441e      	add	r6, r3
 80085a0:	6026      	str	r6, [r4, #0]
 80085a2:	2000      	movs	r0, #0
 80085a4:	e7dc      	b.n	8008560 <__ssputs_r+0x58>
 80085a6:	462a      	mov	r2, r5
 80085a8:	f000 f94a 	bl	8008840 <_realloc_r>
 80085ac:	4606      	mov	r6, r0
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d1e2      	bne.n	8008578 <__ssputs_r+0x70>
 80085b2:	6921      	ldr	r1, [r4, #16]
 80085b4:	4650      	mov	r0, sl
 80085b6:	f7ff feff 	bl	80083b8 <_free_r>
 80085ba:	e7c8      	b.n	800854e <__ssputs_r+0x46>

080085bc <_svfiprintf_r>:
 80085bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	461d      	mov	r5, r3
 80085c2:	898b      	ldrh	r3, [r1, #12]
 80085c4:	061f      	lsls	r7, r3, #24
 80085c6:	b09d      	sub	sp, #116	; 0x74
 80085c8:	4680      	mov	r8, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	4616      	mov	r6, r2
 80085ce:	d50f      	bpl.n	80085f0 <_svfiprintf_r+0x34>
 80085d0:	690b      	ldr	r3, [r1, #16]
 80085d2:	b96b      	cbnz	r3, 80085f0 <_svfiprintf_r+0x34>
 80085d4:	2140      	movs	r1, #64	; 0x40
 80085d6:	f7ff ff3d 	bl	8008454 <_malloc_r>
 80085da:	6020      	str	r0, [r4, #0]
 80085dc:	6120      	str	r0, [r4, #16]
 80085de:	b928      	cbnz	r0, 80085ec <_svfiprintf_r+0x30>
 80085e0:	230c      	movs	r3, #12
 80085e2:	f8c8 3000 	str.w	r3, [r8]
 80085e6:	f04f 30ff 	mov.w	r0, #4294967295
 80085ea:	e0c8      	b.n	800877e <_svfiprintf_r+0x1c2>
 80085ec:	2340      	movs	r3, #64	; 0x40
 80085ee:	6163      	str	r3, [r4, #20]
 80085f0:	2300      	movs	r3, #0
 80085f2:	9309      	str	r3, [sp, #36]	; 0x24
 80085f4:	2320      	movs	r3, #32
 80085f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085fa:	2330      	movs	r3, #48	; 0x30
 80085fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008600:	9503      	str	r5, [sp, #12]
 8008602:	f04f 0b01 	mov.w	fp, #1
 8008606:	4637      	mov	r7, r6
 8008608:	463d      	mov	r5, r7
 800860a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800860e:	b10b      	cbz	r3, 8008614 <_svfiprintf_r+0x58>
 8008610:	2b25      	cmp	r3, #37	; 0x25
 8008612:	d13e      	bne.n	8008692 <_svfiprintf_r+0xd6>
 8008614:	ebb7 0a06 	subs.w	sl, r7, r6
 8008618:	d00b      	beq.n	8008632 <_svfiprintf_r+0x76>
 800861a:	4653      	mov	r3, sl
 800861c:	4632      	mov	r2, r6
 800861e:	4621      	mov	r1, r4
 8008620:	4640      	mov	r0, r8
 8008622:	f7ff ff71 	bl	8008508 <__ssputs_r>
 8008626:	3001      	adds	r0, #1
 8008628:	f000 80a4 	beq.w	8008774 <_svfiprintf_r+0x1b8>
 800862c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800862e:	4453      	add	r3, sl
 8008630:	9309      	str	r3, [sp, #36]	; 0x24
 8008632:	783b      	ldrb	r3, [r7, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 809d 	beq.w	8008774 <_svfiprintf_r+0x1b8>
 800863a:	2300      	movs	r3, #0
 800863c:	f04f 32ff 	mov.w	r2, #4294967295
 8008640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008644:	9304      	str	r3, [sp, #16]
 8008646:	9307      	str	r3, [sp, #28]
 8008648:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800864c:	931a      	str	r3, [sp, #104]	; 0x68
 800864e:	462f      	mov	r7, r5
 8008650:	2205      	movs	r2, #5
 8008652:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008656:	4850      	ldr	r0, [pc, #320]	; (8008798 <_svfiprintf_r+0x1dc>)
 8008658:	f7f7 fdc2 	bl	80001e0 <memchr>
 800865c:	9b04      	ldr	r3, [sp, #16]
 800865e:	b9d0      	cbnz	r0, 8008696 <_svfiprintf_r+0xda>
 8008660:	06d9      	lsls	r1, r3, #27
 8008662:	bf44      	itt	mi
 8008664:	2220      	movmi	r2, #32
 8008666:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800866a:	071a      	lsls	r2, r3, #28
 800866c:	bf44      	itt	mi
 800866e:	222b      	movmi	r2, #43	; 0x2b
 8008670:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008674:	782a      	ldrb	r2, [r5, #0]
 8008676:	2a2a      	cmp	r2, #42	; 0x2a
 8008678:	d015      	beq.n	80086a6 <_svfiprintf_r+0xea>
 800867a:	9a07      	ldr	r2, [sp, #28]
 800867c:	462f      	mov	r7, r5
 800867e:	2000      	movs	r0, #0
 8008680:	250a      	movs	r5, #10
 8008682:	4639      	mov	r1, r7
 8008684:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008688:	3b30      	subs	r3, #48	; 0x30
 800868a:	2b09      	cmp	r3, #9
 800868c:	d94d      	bls.n	800872a <_svfiprintf_r+0x16e>
 800868e:	b1b8      	cbz	r0, 80086c0 <_svfiprintf_r+0x104>
 8008690:	e00f      	b.n	80086b2 <_svfiprintf_r+0xf6>
 8008692:	462f      	mov	r7, r5
 8008694:	e7b8      	b.n	8008608 <_svfiprintf_r+0x4c>
 8008696:	4a40      	ldr	r2, [pc, #256]	; (8008798 <_svfiprintf_r+0x1dc>)
 8008698:	1a80      	subs	r0, r0, r2
 800869a:	fa0b f000 	lsl.w	r0, fp, r0
 800869e:	4318      	orrs	r0, r3
 80086a0:	9004      	str	r0, [sp, #16]
 80086a2:	463d      	mov	r5, r7
 80086a4:	e7d3      	b.n	800864e <_svfiprintf_r+0x92>
 80086a6:	9a03      	ldr	r2, [sp, #12]
 80086a8:	1d11      	adds	r1, r2, #4
 80086aa:	6812      	ldr	r2, [r2, #0]
 80086ac:	9103      	str	r1, [sp, #12]
 80086ae:	2a00      	cmp	r2, #0
 80086b0:	db01      	blt.n	80086b6 <_svfiprintf_r+0xfa>
 80086b2:	9207      	str	r2, [sp, #28]
 80086b4:	e004      	b.n	80086c0 <_svfiprintf_r+0x104>
 80086b6:	4252      	negs	r2, r2
 80086b8:	f043 0302 	orr.w	r3, r3, #2
 80086bc:	9207      	str	r2, [sp, #28]
 80086be:	9304      	str	r3, [sp, #16]
 80086c0:	783b      	ldrb	r3, [r7, #0]
 80086c2:	2b2e      	cmp	r3, #46	; 0x2e
 80086c4:	d10c      	bne.n	80086e0 <_svfiprintf_r+0x124>
 80086c6:	787b      	ldrb	r3, [r7, #1]
 80086c8:	2b2a      	cmp	r3, #42	; 0x2a
 80086ca:	d133      	bne.n	8008734 <_svfiprintf_r+0x178>
 80086cc:	9b03      	ldr	r3, [sp, #12]
 80086ce:	1d1a      	adds	r2, r3, #4
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	9203      	str	r2, [sp, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	bfb8      	it	lt
 80086d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80086dc:	3702      	adds	r7, #2
 80086de:	9305      	str	r3, [sp, #20]
 80086e0:	4d2e      	ldr	r5, [pc, #184]	; (800879c <_svfiprintf_r+0x1e0>)
 80086e2:	7839      	ldrb	r1, [r7, #0]
 80086e4:	2203      	movs	r2, #3
 80086e6:	4628      	mov	r0, r5
 80086e8:	f7f7 fd7a 	bl	80001e0 <memchr>
 80086ec:	b138      	cbz	r0, 80086fe <_svfiprintf_r+0x142>
 80086ee:	2340      	movs	r3, #64	; 0x40
 80086f0:	1b40      	subs	r0, r0, r5
 80086f2:	fa03 f000 	lsl.w	r0, r3, r0
 80086f6:	9b04      	ldr	r3, [sp, #16]
 80086f8:	4303      	orrs	r3, r0
 80086fa:	3701      	adds	r7, #1
 80086fc:	9304      	str	r3, [sp, #16]
 80086fe:	7839      	ldrb	r1, [r7, #0]
 8008700:	4827      	ldr	r0, [pc, #156]	; (80087a0 <_svfiprintf_r+0x1e4>)
 8008702:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008706:	2206      	movs	r2, #6
 8008708:	1c7e      	adds	r6, r7, #1
 800870a:	f7f7 fd69 	bl	80001e0 <memchr>
 800870e:	2800      	cmp	r0, #0
 8008710:	d038      	beq.n	8008784 <_svfiprintf_r+0x1c8>
 8008712:	4b24      	ldr	r3, [pc, #144]	; (80087a4 <_svfiprintf_r+0x1e8>)
 8008714:	bb13      	cbnz	r3, 800875c <_svfiprintf_r+0x1a0>
 8008716:	9b03      	ldr	r3, [sp, #12]
 8008718:	3307      	adds	r3, #7
 800871a:	f023 0307 	bic.w	r3, r3, #7
 800871e:	3308      	adds	r3, #8
 8008720:	9303      	str	r3, [sp, #12]
 8008722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008724:	444b      	add	r3, r9
 8008726:	9309      	str	r3, [sp, #36]	; 0x24
 8008728:	e76d      	b.n	8008606 <_svfiprintf_r+0x4a>
 800872a:	fb05 3202 	mla	r2, r5, r2, r3
 800872e:	2001      	movs	r0, #1
 8008730:	460f      	mov	r7, r1
 8008732:	e7a6      	b.n	8008682 <_svfiprintf_r+0xc6>
 8008734:	2300      	movs	r3, #0
 8008736:	3701      	adds	r7, #1
 8008738:	9305      	str	r3, [sp, #20]
 800873a:	4619      	mov	r1, r3
 800873c:	250a      	movs	r5, #10
 800873e:	4638      	mov	r0, r7
 8008740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008744:	3a30      	subs	r2, #48	; 0x30
 8008746:	2a09      	cmp	r2, #9
 8008748:	d903      	bls.n	8008752 <_svfiprintf_r+0x196>
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0c8      	beq.n	80086e0 <_svfiprintf_r+0x124>
 800874e:	9105      	str	r1, [sp, #20]
 8008750:	e7c6      	b.n	80086e0 <_svfiprintf_r+0x124>
 8008752:	fb05 2101 	mla	r1, r5, r1, r2
 8008756:	2301      	movs	r3, #1
 8008758:	4607      	mov	r7, r0
 800875a:	e7f0      	b.n	800873e <_svfiprintf_r+0x182>
 800875c:	ab03      	add	r3, sp, #12
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	4622      	mov	r2, r4
 8008762:	4b11      	ldr	r3, [pc, #68]	; (80087a8 <_svfiprintf_r+0x1ec>)
 8008764:	a904      	add	r1, sp, #16
 8008766:	4640      	mov	r0, r8
 8008768:	f7fc fe6c 	bl	8005444 <_printf_float>
 800876c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008770:	4681      	mov	r9, r0
 8008772:	d1d6      	bne.n	8008722 <_svfiprintf_r+0x166>
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	065b      	lsls	r3, r3, #25
 8008778:	f53f af35 	bmi.w	80085e6 <_svfiprintf_r+0x2a>
 800877c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800877e:	b01d      	add	sp, #116	; 0x74
 8008780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008784:	ab03      	add	r3, sp, #12
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	4622      	mov	r2, r4
 800878a:	4b07      	ldr	r3, [pc, #28]	; (80087a8 <_svfiprintf_r+0x1ec>)
 800878c:	a904      	add	r1, sp, #16
 800878e:	4640      	mov	r0, r8
 8008790:	f7fd f90e 	bl	80059b0 <_printf_i>
 8008794:	e7ea      	b.n	800876c <_svfiprintf_r+0x1b0>
 8008796:	bf00      	nop
 8008798:	08008a9c 	.word	0x08008a9c
 800879c:	08008aa2 	.word	0x08008aa2
 80087a0:	08008aa6 	.word	0x08008aa6
 80087a4:	08005445 	.word	0x08005445
 80087a8:	08008509 	.word	0x08008509

080087ac <_sbrk_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4c06      	ldr	r4, [pc, #24]	; (80087c8 <_sbrk_r+0x1c>)
 80087b0:	2300      	movs	r3, #0
 80087b2:	4605      	mov	r5, r0
 80087b4:	4608      	mov	r0, r1
 80087b6:	6023      	str	r3, [r4, #0]
 80087b8:	f7f9 f946 	bl	8001a48 <_sbrk>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_sbrk_r+0x1a>
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_sbrk_r+0x1a>
 80087c4:	602b      	str	r3, [r5, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	20000554 	.word	0x20000554

080087cc <strncmp>:
 80087cc:	b510      	push	{r4, lr}
 80087ce:	b16a      	cbz	r2, 80087ec <strncmp+0x20>
 80087d0:	3901      	subs	r1, #1
 80087d2:	1884      	adds	r4, r0, r2
 80087d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80087d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80087dc:	4293      	cmp	r3, r2
 80087de:	d103      	bne.n	80087e8 <strncmp+0x1c>
 80087e0:	42a0      	cmp	r0, r4
 80087e2:	d001      	beq.n	80087e8 <strncmp+0x1c>
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1f5      	bne.n	80087d4 <strncmp+0x8>
 80087e8:	1a98      	subs	r0, r3, r2
 80087ea:	bd10      	pop	{r4, pc}
 80087ec:	4610      	mov	r0, r2
 80087ee:	e7fc      	b.n	80087ea <strncmp+0x1e>

080087f0 <__ascii_wctomb>:
 80087f0:	b149      	cbz	r1, 8008806 <__ascii_wctomb+0x16>
 80087f2:	2aff      	cmp	r2, #255	; 0xff
 80087f4:	bf85      	ittet	hi
 80087f6:	238a      	movhi	r3, #138	; 0x8a
 80087f8:	6003      	strhi	r3, [r0, #0]
 80087fa:	700a      	strbls	r2, [r1, #0]
 80087fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008800:	bf98      	it	ls
 8008802:	2001      	movls	r0, #1
 8008804:	4770      	bx	lr
 8008806:	4608      	mov	r0, r1
 8008808:	4770      	bx	lr

0800880a <memmove>:
 800880a:	4288      	cmp	r0, r1
 800880c:	b510      	push	{r4, lr}
 800880e:	eb01 0302 	add.w	r3, r1, r2
 8008812:	d807      	bhi.n	8008824 <memmove+0x1a>
 8008814:	1e42      	subs	r2, r0, #1
 8008816:	4299      	cmp	r1, r3
 8008818:	d00a      	beq.n	8008830 <memmove+0x26>
 800881a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800881e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008822:	e7f8      	b.n	8008816 <memmove+0xc>
 8008824:	4283      	cmp	r3, r0
 8008826:	d9f5      	bls.n	8008814 <memmove+0xa>
 8008828:	1881      	adds	r1, r0, r2
 800882a:	1ad2      	subs	r2, r2, r3
 800882c:	42d3      	cmn	r3, r2
 800882e:	d100      	bne.n	8008832 <memmove+0x28>
 8008830:	bd10      	pop	{r4, pc}
 8008832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008836:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800883a:	e7f7      	b.n	800882c <memmove+0x22>

0800883c <__malloc_lock>:
 800883c:	4770      	bx	lr

0800883e <__malloc_unlock>:
 800883e:	4770      	bx	lr

08008840 <_realloc_r>:
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008842:	4607      	mov	r7, r0
 8008844:	4614      	mov	r4, r2
 8008846:	460e      	mov	r6, r1
 8008848:	b921      	cbnz	r1, 8008854 <_realloc_r+0x14>
 800884a:	4611      	mov	r1, r2
 800884c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008850:	f7ff be00 	b.w	8008454 <_malloc_r>
 8008854:	b922      	cbnz	r2, 8008860 <_realloc_r+0x20>
 8008856:	f7ff fdaf 	bl	80083b8 <_free_r>
 800885a:	4625      	mov	r5, r4
 800885c:	4628      	mov	r0, r5
 800885e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008860:	f000 f814 	bl	800888c <_malloc_usable_size_r>
 8008864:	42a0      	cmp	r0, r4
 8008866:	d20f      	bcs.n	8008888 <_realloc_r+0x48>
 8008868:	4621      	mov	r1, r4
 800886a:	4638      	mov	r0, r7
 800886c:	f7ff fdf2 	bl	8008454 <_malloc_r>
 8008870:	4605      	mov	r5, r0
 8008872:	2800      	cmp	r0, #0
 8008874:	d0f2      	beq.n	800885c <_realloc_r+0x1c>
 8008876:	4631      	mov	r1, r6
 8008878:	4622      	mov	r2, r4
 800887a:	f7ff f985 	bl	8007b88 <memcpy>
 800887e:	4631      	mov	r1, r6
 8008880:	4638      	mov	r0, r7
 8008882:	f7ff fd99 	bl	80083b8 <_free_r>
 8008886:	e7e9      	b.n	800885c <_realloc_r+0x1c>
 8008888:	4635      	mov	r5, r6
 800888a:	e7e7      	b.n	800885c <_realloc_r+0x1c>

0800888c <_malloc_usable_size_r>:
 800888c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008890:	1f18      	subs	r0, r3, #4
 8008892:	2b00      	cmp	r3, #0
 8008894:	bfbc      	itt	lt
 8008896:	580b      	ldrlt	r3, [r1, r0]
 8008898:	18c0      	addlt	r0, r0, r3
 800889a:	4770      	bx	lr

0800889c <_init>:
 800889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889e:	bf00      	nop
 80088a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088a2:	bc08      	pop	{r3}
 80088a4:	469e      	mov	lr, r3
 80088a6:	4770      	bx	lr

080088a8 <_fini>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	bf00      	nop
 80088ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ae:	bc08      	pop	{r3}
 80088b0:	469e      	mov	lr, r3
 80088b2:	4770      	bx	lr
