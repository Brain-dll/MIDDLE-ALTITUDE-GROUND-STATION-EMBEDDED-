
BASE_STATION_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  0800c6d8  0800c6d8  0001c6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ced0  0800ced0  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800ced0  0800ced0  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ced0  0800ced0  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ced0  0800ced0  0001ced0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ced4  0800ced4  0001ced4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800ced8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000200  0800d0d8  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  0800d0d8  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b0b  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026dd  00000000  00000000  00033d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f8  00000000  00000000  00036418  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001128  00000000  00000000  00037610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019185  00000000  00000000  00038738  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e378  00000000  00000000  000518bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fc10  00000000  00000000  0005fc35  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef845  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e50  00000000  00000000  000ef8c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c6bc 	.word	0x0800c6bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800c6bc 	.word	0x0800c6bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <magneto_Init>:
uint8_t countm = 0;

int16_t Xmax, Xmin, Ymax, Ymin;
float Xsf, Ysf, Xoff, Yoff;

void magneto_Init(uint8_t confg_c) {
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	/*
	HAL_I2C_Mem_Write(&hi2c2, MGN_WRITE_ADD, setr[0], 1, &setr[1], 1, 100);
	HAL_I2C_Mem_Write(&hi2c2, MGN_WRITE_ADD, cntr[0], 1, &cntr[1], 1, 100);
	*/

	HAL_I2C_Mem_Write(&hi2c1, MGN_WRITE_ADD, 0x00, 1, &command[0], 1, 100);
 80011a6:	2364      	movs	r3, #100	; 0x64
 80011a8:	9302      	str	r3, [sp, #8]
 80011aa:	2301      	movs	r3, #1
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	4ba3      	ldr	r3, [pc, #652]	; (800143c <magneto_Init+0x2a0>)
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2301      	movs	r3, #1
 80011b4:	2200      	movs	r2, #0
 80011b6:	213c      	movs	r1, #60	; 0x3c
 80011b8:	48a1      	ldr	r0, [pc, #644]	; (8001440 <magneto_Init+0x2a4>)
 80011ba:	f003 fb6b 	bl	8004894 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MGN_WRITE_ADD, 0x01, 1, &command[1], 1, 100);
 80011be:	2364      	movs	r3, #100	; 0x64
 80011c0:	9302      	str	r3, [sp, #8]
 80011c2:	2301      	movs	r3, #1
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	4b9f      	ldr	r3, [pc, #636]	; (8001444 <magneto_Init+0x2a8>)
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	2201      	movs	r2, #1
 80011ce:	213c      	movs	r1, #60	; 0x3c
 80011d0:	489b      	ldr	r0, [pc, #620]	; (8001440 <magneto_Init+0x2a4>)
 80011d2:	f003 fb5f 	bl	8004894 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MGN_WRITE_ADD, 0x02, 1, &command[2], 1, 100);
 80011d6:	2364      	movs	r3, #100	; 0x64
 80011d8:	9302      	str	r3, [sp, #8]
 80011da:	2301      	movs	r3, #1
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	4b9a      	ldr	r3, [pc, #616]	; (8001448 <magneto_Init+0x2ac>)
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	2202      	movs	r2, #2
 80011e6:	213c      	movs	r1, #60	; 0x3c
 80011e8:	4895      	ldr	r0, [pc, #596]	; (8001440 <magneto_Init+0x2a4>)
 80011ea:	f003 fb53 	bl	8004894 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80011ee:	2064      	movs	r0, #100	; 0x64
 80011f0:	f002 fdae 	bl	8003d50 <HAL_Delay>
	uint32_t full = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
	NXT_SEND_STR("page page0");
 80011f8:	4894      	ldr	r0, [pc, #592]	; (800144c <magneto_Init+0x2b0>)
 80011fa:	f001 ff5b 	bl	80030b4 <NXT_SEND_STR>
	for (uint8_t i = 0; i < confg_c; i++) {
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	e067      	b.n	80012d4 <magneto_Init+0x138>
		Read_mgn();
 8001204:	f000 f942 	bl	800148c <Read_mgn>
		HAL_Delay(70);
 8001208:	2046      	movs	r0, #70	; 0x46
 800120a:	f002 fda1 	bl	8003d50 <HAL_Delay>
		if (enter == 0) {
 800120e:	4b90      	ldr	r3, [pc, #576]	; (8001450 <magneto_Init+0x2b4>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10a      	bne.n	800122c <magneto_Init+0x90>
			Ymin = Ym;
 8001216:	4b8f      	ldr	r3, [pc, #572]	; (8001454 <magneto_Init+0x2b8>)
 8001218:	f9b3 2000 	ldrsh.w	r2, [r3]
 800121c:	4b8e      	ldr	r3, [pc, #568]	; (8001458 <magneto_Init+0x2bc>)
 800121e:	801a      	strh	r2, [r3, #0]
			enter++;
 8001220:	4b8b      	ldr	r3, [pc, #556]	; (8001450 <magneto_Init+0x2b4>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b89      	ldr	r3, [pc, #548]	; (8001450 <magneto_Init+0x2b4>)
 800122a:	701a      	strb	r2, [r3, #0]
		}
		if (Xm < Xmin)
 800122c:	4b8b      	ldr	r3, [pc, #556]	; (800145c <magneto_Init+0x2c0>)
 800122e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001232:	4b8b      	ldr	r3, [pc, #556]	; (8001460 <magneto_Init+0x2c4>)
 8001234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001238:	429a      	cmp	r2, r3
 800123a:	da04      	bge.n	8001246 <magneto_Init+0xaa>
			Xmin = Xm;
 800123c:	4b87      	ldr	r3, [pc, #540]	; (800145c <magneto_Init+0x2c0>)
 800123e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001242:	4b87      	ldr	r3, [pc, #540]	; (8001460 <magneto_Init+0x2c4>)
 8001244:	801a      	strh	r2, [r3, #0]
		if (Xm > Xmax)
 8001246:	4b85      	ldr	r3, [pc, #532]	; (800145c <magneto_Init+0x2c0>)
 8001248:	f9b3 2000 	ldrsh.w	r2, [r3]
 800124c:	4b85      	ldr	r3, [pc, #532]	; (8001464 <magneto_Init+0x2c8>)
 800124e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001252:	429a      	cmp	r2, r3
 8001254:	dd04      	ble.n	8001260 <magneto_Init+0xc4>
			Xmax = Xm;
 8001256:	4b81      	ldr	r3, [pc, #516]	; (800145c <magneto_Init+0x2c0>)
 8001258:	f9b3 2000 	ldrsh.w	r2, [r3]
 800125c:	4b81      	ldr	r3, [pc, #516]	; (8001464 <magneto_Init+0x2c8>)
 800125e:	801a      	strh	r2, [r3, #0]
		if (Ym < Ymin)
 8001260:	4b7c      	ldr	r3, [pc, #496]	; (8001454 <magneto_Init+0x2b8>)
 8001262:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001266:	4b7c      	ldr	r3, [pc, #496]	; (8001458 <magneto_Init+0x2bc>)
 8001268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126c:	429a      	cmp	r2, r3
 800126e:	da04      	bge.n	800127a <magneto_Init+0xde>
			Ymin = Ym;
 8001270:	4b78      	ldr	r3, [pc, #480]	; (8001454 <magneto_Init+0x2b8>)
 8001272:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001276:	4b78      	ldr	r3, [pc, #480]	; (8001458 <magneto_Init+0x2bc>)
 8001278:	801a      	strh	r2, [r3, #0]
		if (Ym > Ymax)
 800127a:	4b76      	ldr	r3, [pc, #472]	; (8001454 <magneto_Init+0x2b8>)
 800127c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001280:	4b79      	ldr	r3, [pc, #484]	; (8001468 <magneto_Init+0x2cc>)
 8001282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001286:	429a      	cmp	r2, r3
 8001288:	dd04      	ble.n	8001294 <magneto_Init+0xf8>
			Ymax = Ym;
 800128a:	4b72      	ldr	r3, [pc, #456]	; (8001454 <magneto_Init+0x2b8>)
 800128c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001290:	4b75      	ldr	r3, [pc, #468]	; (8001468 <magneto_Init+0x2cc>)
 8001292:	801a      	strh	r2, [r3, #0]
		full = ((float)i / (float)confg_c) * 100;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fd1c 	bl	8000cd4 <__aeabi_ui2f>
 800129c:	4604      	mov	r4, r0
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fd17 	bl	8000cd4 <__aeabi_ui2f>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4619      	mov	r1, r3
 80012aa:	4620      	mov	r0, r4
 80012ac:	f7ff fe1e 	bl	8000eec <__aeabi_fdiv>
 80012b0:	4603      	mov	r3, r0
 80012b2:	496e      	ldr	r1, [pc, #440]	; (800146c <magneto_Init+0x2d0>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fd65 	bl	8000d84 <__aeabi_fmul>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff4d 	bl	800115c <__aeabi_f2uiz>
 80012c2:	4603      	mov	r3, r0
 80012c4:	60bb      	str	r3, [r7, #8]
		NXT_SEND_VAL("j0.val", full);
 80012c6:	68b9      	ldr	r1, [r7, #8]
 80012c8:	4869      	ldr	r0, [pc, #420]	; (8001470 <magneto_Init+0x2d4>)
 80012ca:	f001 fe69 	bl	8002fa0 <NXT_SEND_VAL>
	for (uint8_t i = 0; i < confg_c; i++) {
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	3301      	adds	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	7bfa      	ldrb	r2, [r7, #15]
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d393      	bcc.n	8001204 <magneto_Init+0x68>
	}
	NXT_SEND_STR("page page1");
 80012dc:	4865      	ldr	r0, [pc, #404]	; (8001474 <magneto_Init+0x2d8>)
 80012de:	f001 fee9 	bl	80030b4 <NXT_SEND_STR>
	Xsf = (float) (Ymax - Ymin) / (float) (Xmax - Xmin);
 80012e2:	4b61      	ldr	r3, [pc, #388]	; (8001468 <magneto_Init+0x2cc>)
 80012e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b5b      	ldr	r3, [pc, #364]	; (8001458 <magneto_Init+0x2bc>)
 80012ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fcf2 	bl	8000cdc <__aeabi_i2f>
 80012f8:	4604      	mov	r4, r0
 80012fa:	4b5a      	ldr	r3, [pc, #360]	; (8001464 <magneto_Init+0x2c8>)
 80012fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001300:	461a      	mov	r2, r3
 8001302:	4b57      	ldr	r3, [pc, #348]	; (8001460 <magneto_Init+0x2c4>)
 8001304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fce6 	bl	8000cdc <__aeabi_i2f>
 8001310:	4603      	mov	r3, r0
 8001312:	4619      	mov	r1, r3
 8001314:	4620      	mov	r0, r4
 8001316:	f7ff fde9 	bl	8000eec <__aeabi_fdiv>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b56      	ldr	r3, [pc, #344]	; (8001478 <magneto_Init+0x2dc>)
 8001320:	601a      	str	r2, [r3, #0]
	Ysf = (float) (Xmax - Xmin) / (float) (Ymax - Ymin);
 8001322:	4b50      	ldr	r3, [pc, #320]	; (8001464 <magneto_Init+0x2c8>)
 8001324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001328:	461a      	mov	r2, r3
 800132a:	4b4d      	ldr	r3, [pc, #308]	; (8001460 <magneto_Init+0x2c4>)
 800132c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fcd2 	bl	8000cdc <__aeabi_i2f>
 8001338:	4604      	mov	r4, r0
 800133a:	4b4b      	ldr	r3, [pc, #300]	; (8001468 <magneto_Init+0x2cc>)
 800133c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001340:	461a      	mov	r2, r3
 8001342:	4b45      	ldr	r3, [pc, #276]	; (8001458 <magneto_Init+0x2bc>)
 8001344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fcc6 	bl	8000cdc <__aeabi_i2f>
 8001350:	4603      	mov	r3, r0
 8001352:	4619      	mov	r1, r3
 8001354:	4620      	mov	r0, r4
 8001356:	f7ff fdc9 	bl	8000eec <__aeabi_fdiv>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b47      	ldr	r3, [pc, #284]	; (800147c <magneto_Init+0x2e0>)
 8001360:	601a      	str	r2, [r3, #0]
	if (Xsf < 1)
 8001362:	4b45      	ldr	r3, [pc, #276]	; (8001478 <magneto_Init+0x2dc>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fea8 	bl	80010c0 <__aeabi_fcmplt>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d004      	beq.n	8001380 <magneto_Init+0x1e4>
		Xsf = 1.0;
 8001376:	4b40      	ldr	r3, [pc, #256]	; (8001478 <magneto_Init+0x2dc>)
 8001378:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e00d      	b.n	800139c <magneto_Init+0x200>
	else if (Ysf < 1)
 8001380:	4b3e      	ldr	r3, [pc, #248]	; (800147c <magneto_Init+0x2e0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fe99 	bl	80010c0 <__aeabi_fcmplt>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <magneto_Init+0x200>
		Ysf = 1.0;
 8001394:	4b39      	ldr	r3, [pc, #228]	; (800147c <magneto_Init+0x2e0>)
 8001396:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800139a:	601a      	str	r2, [r3, #0]

	Xoff = ((Xmax - Xmin) / 2 - Xmax) * Xsf;
 800139c:	4b31      	ldr	r3, [pc, #196]	; (8001464 <magneto_Init+0x2c8>)
 800139e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <magneto_Init+0x2c4>)
 80013a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	0fda      	lsrs	r2, r3, #31
 80013ae:	4413      	add	r3, r2
 80013b0:	105b      	asrs	r3, r3, #1
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <magneto_Init+0x2c8>)
 80013b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fc8d 	bl	8000cdc <__aeabi_i2f>
 80013c2:	4602      	mov	r2, r0
 80013c4:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <magneto_Init+0x2dc>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	4610      	mov	r0, r2
 80013cc:	f7ff fcda 	bl	8000d84 <__aeabi_fmul>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <magneto_Init+0x2e4>)
 80013d6:	601a      	str	r2, [r3, #0]
	Yoff = ((Ymax - Ymin) / 2 - Ymax) * Ysf;
 80013d8:	4b23      	ldr	r3, [pc, #140]	; (8001468 <magneto_Init+0x2cc>)
 80013da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013de:	461a      	mov	r2, r3
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <magneto_Init+0x2bc>)
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	0fda      	lsrs	r2, r3, #31
 80013ea:	4413      	add	r3, r2
 80013ec:	105b      	asrs	r3, r3, #1
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <magneto_Init+0x2cc>)
 80013f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fc6f 	bl	8000cdc <__aeabi_i2f>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <magneto_Init+0x2e0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	4610      	mov	r0, r2
 8001408:	f7ff fcbc 	bl	8000d84 <__aeabi_fmul>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <magneto_Init+0x2e8>)
 8001412:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800141a:	481b      	ldr	r0, [pc, #108]	; (8001488 <magneto_Init+0x2ec>)
 800141c:	f002 ffd2 	bl	80043c4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001420:	2064      	movs	r0, #100	; 0x64
 8001422:	f002 fc95 	bl	8003d50 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142c:	4816      	ldr	r0, [pc, #88]	; (8001488 <magneto_Init+0x2ec>)
 800142e:	f002 ffc9 	bl	80043c4 <HAL_GPIO_WritePin>
}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	bd90      	pop	{r4, r7, pc}
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000
 8001440:	200004f0 	.word	0x200004f0
 8001444:	20000001 	.word	0x20000001
 8001448:	20000002 	.word	0x20000002
 800144c:	0800c6d8 	.word	0x0800c6d8
 8001450:	2000022c 	.word	0x2000022c
 8001454:	2000021e 	.word	0x2000021e
 8001458:	20000420 	.word	0x20000420
 800145c:	2000021c 	.word	0x2000021c
 8001460:	20000444 	.word	0x20000444
 8001464:	20000422 	.word	0x20000422
 8001468:	20000438 	.word	0x20000438
 800146c:	42c80000 	.word	0x42c80000
 8001470:	0800c6e4 	.word	0x0800c6e4
 8001474:	0800c6ec 	.word	0x0800c6ec
 8001478:	20000418 	.word	0x20000418
 800147c:	2000041c 	.word	0x2000041c
 8001480:	20000424 	.word	0x20000424
 8001484:	20000430 	.word	0x20000430
 8001488:	40010c00 	.word	0x40010c00

0800148c <Read_mgn>:

void Read_mgn(void) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, MGN_READ_ADD, 0x03, 1, data, 6, 100);
 8001492:	2364      	movs	r3, #100	; 0x64
 8001494:	9302      	str	r3, [sp, #8]
 8001496:	2306      	movs	r3, #6
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <Read_mgn+0x78>)
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2301      	movs	r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	213d      	movs	r1, #61	; 0x3d
 80014a4:	4818      	ldr	r0, [pc, #96]	; (8001508 <Read_mgn+0x7c>)
 80014a6:	f003 faef 	bl	8004a88 <HAL_I2C_Mem_Read>
	HAL_I2C_Master_Transmit(&hi2c1, MGN_WRITE_ADD, &command[3], 1, 100);
 80014aa:	2364      	movs	r3, #100	; 0x64
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	4a16      	ldr	r2, [pc, #88]	; (800150c <Read_mgn+0x80>)
 80014b2:	213c      	movs	r1, #60	; 0x3c
 80014b4:	4814      	ldr	r0, [pc, #80]	; (8001508 <Read_mgn+0x7c>)
 80014b6:	f003 f8ef 	bl	8004698 <HAL_I2C_Master_Transmit>

	Xm = (int16_t)(data[0] << 8) | data[1];
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <Read_mgn+0x78>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <Read_mgn+0x78>)
 80014c4:	785b      	ldrb	r3, [r3, #1]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <Read_mgn+0x84>)
 80014ce:	801a      	strh	r2, [r3, #0]
	Ym = (int16_t)(data[4] << 8) | data[5];
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <Read_mgn+0x78>)
 80014d2:	791b      	ldrb	r3, [r3, #4]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <Read_mgn+0x78>)
 80014da:	795b      	ldrb	r3, [r3, #5]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <Read_mgn+0x88>)
 80014e4:	801a      	strh	r2, [r3, #0]
	Zm = (int16_t)(data[2] << 8) | data[3];
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <Read_mgn+0x78>)
 80014e8:	789b      	ldrb	r3, [r3, #2]
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	b21a      	sxth	r2, r3
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <Read_mgn+0x78>)
 80014f0:	78db      	ldrb	r3, [r3, #3]
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <Read_mgn+0x8c>)
 80014fa:	801a      	strh	r2, [r3, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000230 	.word	0x20000230
 8001508:	200004f0 	.word	0x200004f0
 800150c:	20000003 	.word	0x20000003
 8001510:	2000021c 	.word	0x2000021c
 8001514:	2000021e 	.word	0x2000021e
 8001518:	20000220 	.word	0x20000220
 800151c:	00000000 	.word	0x00000000

08001520 <Read_compass>:

float Read_compass(void) {
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001522:	af00      	add	r7, sp, #0
	Read_mgn();
 8001524:	f7ff ffb2 	bl	800148c <Read_mgn>

	Az = MPU6050_AccZ();
 8001528:	f000 fa7a 	bl	8001a20 <MPU6050_AccZ>
 800152c:	4602      	mov	r2, r0
 800152e:	4ba6      	ldr	r3, [pc, #664]	; (80017c8 <Read_compass+0x2a8>)
 8001530:	601a      	str	r2, [r3, #0]
	Ay = MPU6050_AccX();
 8001532:	f000 fa49 	bl	80019c8 <MPU6050_AccX>
 8001536:	4602      	mov	r2, r0
 8001538:	4ba4      	ldr	r3, [pc, #656]	; (80017cc <Read_compass+0x2ac>)
 800153a:	601a      	str	r2, [r3, #0]
	Ax = MPU6050_AccY();
 800153c:	f000 fa5a 	bl	80019f4 <MPU6050_AccY>
 8001540:	4602      	mov	r2, r0
 8001542:	4ba3      	ldr	r3, [pc, #652]	; (80017d0 <Read_compass+0x2b0>)
 8001544:	601a      	str	r2, [r3, #0]

	roll = atan2(Ay , Az) * 180 / PI;
 8001546:	4ba1      	ldr	r3, [pc, #644]	; (80017cc <Read_compass+0x2ac>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ff6c 	bl	8000428 <__aeabi_f2d>
 8001550:	4604      	mov	r4, r0
 8001552:	460d      	mov	r5, r1
 8001554:	4b9c      	ldr	r3, [pc, #624]	; (80017c8 <Read_compass+0x2a8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe ff65 	bl	8000428 <__aeabi_f2d>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f009 fbe5 	bl	800ad34 <atan2>
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	4b99      	ldr	r3, [pc, #612]	; (80017d4 <Read_compass+0x2b4>)
 8001570:	f7fe ffb2 	bl	80004d8 <__aeabi_dmul>
 8001574:	4603      	mov	r3, r0
 8001576:	460c      	mov	r4, r1
 8001578:	4618      	mov	r0, r3
 800157a:	4621      	mov	r1, r4
 800157c:	a38e      	add	r3, pc, #568	; (adr r3, 80017b8 <Read_compass+0x298>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7ff f8d3 	bl	800072c <__aeabi_ddiv>
 8001586:	4603      	mov	r3, r0
 8001588:	460c      	mov	r4, r1
 800158a:	4618      	mov	r0, r3
 800158c:	4621      	mov	r1, r4
 800158e:	f7ff fa9b 	bl	8000ac8 <__aeabi_d2f>
 8001592:	4602      	mov	r2, r0
 8001594:	4b90      	ldr	r3, [pc, #576]	; (80017d8 <Read_compass+0x2b8>)
 8001596:	601a      	str	r2, [r3, #0]
	pitch = atan2((- Ax) , sqrt(Ay * Ay + Az * Az)) * 180 / PI;
 8001598:	4b8d      	ldr	r3, [pc, #564]	; (80017d0 <Read_compass+0x2b0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ff41 	bl	8000428 <__aeabi_f2d>
 80015a6:	4604      	mov	r4, r0
 80015a8:	460d      	mov	r5, r1
 80015aa:	4b88      	ldr	r3, [pc, #544]	; (80017cc <Read_compass+0x2ac>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4b87      	ldr	r3, [pc, #540]	; (80017cc <Read_compass+0x2ac>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4610      	mov	r0, r2
 80015b6:	f7ff fbe5 	bl	8000d84 <__aeabi_fmul>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461e      	mov	r6, r3
 80015be:	4b82      	ldr	r3, [pc, #520]	; (80017c8 <Read_compass+0x2a8>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <Read_compass+0x2a8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4610      	mov	r0, r2
 80015ca:	f7ff fbdb 	bl	8000d84 <__aeabi_fmul>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4619      	mov	r1, r3
 80015d2:	4630      	mov	r0, r6
 80015d4:	f7ff face 	bl	8000b74 <__addsf3>
 80015d8:	4603      	mov	r3, r0
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ff24 	bl	8000428 <__aeabi_f2d>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f009 fba6 	bl	800ad38 <sqrt>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4620      	mov	r0, r4
 80015f2:	4629      	mov	r1, r5
 80015f4:	f009 fb9e 	bl	800ad34 <atan2>
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	4b75      	ldr	r3, [pc, #468]	; (80017d4 <Read_compass+0x2b4>)
 80015fe:	f7fe ff6b 	bl	80004d8 <__aeabi_dmul>
 8001602:	4603      	mov	r3, r0
 8001604:	460c      	mov	r4, r1
 8001606:	4618      	mov	r0, r3
 8001608:	4621      	mov	r1, r4
 800160a:	a36b      	add	r3, pc, #428	; (adr r3, 80017b8 <Read_compass+0x298>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f7ff f88c 	bl	800072c <__aeabi_ddiv>
 8001614:	4603      	mov	r3, r0
 8001616:	460c      	mov	r4, r1
 8001618:	4618      	mov	r0, r3
 800161a:	4621      	mov	r1, r4
 800161c:	f7ff fa54 	bl	8000ac8 <__aeabi_d2f>
 8001620:	4602      	mov	r2, r0
 8001622:	4b6e      	ldr	r3, [pc, #440]	; (80017dc <Read_compass+0x2bc>)
 8001624:	601a      	str	r2, [r3, #0]

	NXT_SEND_SVAL("n0.val", (int)roll);
 8001626:	4b6c      	ldr	r3, [pc, #432]	; (80017d8 <Read_compass+0x2b8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fd70 	bl	8001110 <__aeabi_f2iz>
 8001630:	4603      	mov	r3, r0
 8001632:	4619      	mov	r1, r3
 8001634:	486a      	ldr	r0, [pc, #424]	; (80017e0 <Read_compass+0x2c0>)
 8001636:	f001 fcdf 	bl	8002ff8 <NXT_SEND_SVAL>
	NXT_SEND_SVAL("n1.val", (int)pitch);
 800163a:	4b68      	ldr	r3, [pc, #416]	; (80017dc <Read_compass+0x2bc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fd66 	bl	8001110 <__aeabi_f2iz>
 8001644:	4603      	mov	r3, r0
 8001646:	4619      	mov	r1, r3
 8001648:	4866      	ldr	r0, [pc, #408]	; (80017e4 <Read_compass+0x2c4>)
 800164a:	f001 fcd5 	bl	8002ff8 <NXT_SEND_SVAL>

//	Xm = (Xm * (1 - pow(Ax , 2))) - (Ym * Ax * Ay) - (Zm * Ax * sqrt(1 - pow(Ax , 2) - pow(Ay , 2)));
//	Ym = (Ym * sqrt(1 - pow(Ax , 2) - pow(Ay , 2))) - Zm * Ay;

	Xm = Xm * Xsf + Xoff;
 800164e:	4b66      	ldr	r3, [pc, #408]	; (80017e8 <Read_compass+0x2c8>)
 8001650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fb41 	bl	8000cdc <__aeabi_i2f>
 800165a:	4602      	mov	r2, r0
 800165c:	4b63      	ldr	r3, [pc, #396]	; (80017ec <Read_compass+0x2cc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	4610      	mov	r0, r2
 8001664:	f7ff fb8e 	bl	8000d84 <__aeabi_fmul>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	4b60      	ldr	r3, [pc, #384]	; (80017f0 <Read_compass+0x2d0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	4610      	mov	r0, r2
 8001674:	f7ff fa7e 	bl	8000b74 <__addsf3>
 8001678:	4603      	mov	r3, r0
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fd48 	bl	8001110 <__aeabi_f2iz>
 8001680:	4603      	mov	r3, r0
 8001682:	b21a      	sxth	r2, r3
 8001684:	4b58      	ldr	r3, [pc, #352]	; (80017e8 <Read_compass+0x2c8>)
 8001686:	801a      	strh	r2, [r3, #0]
	Ym = Ym * Ysf + Yoff;
 8001688:	4b5a      	ldr	r3, [pc, #360]	; (80017f4 <Read_compass+0x2d4>)
 800168a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fb24 	bl	8000cdc <__aeabi_i2f>
 8001694:	4602      	mov	r2, r0
 8001696:	4b58      	ldr	r3, [pc, #352]	; (80017f8 <Read_compass+0x2d8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4619      	mov	r1, r3
 800169c:	4610      	mov	r0, r2
 800169e:	f7ff fb71 	bl	8000d84 <__aeabi_fmul>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b55      	ldr	r3, [pc, #340]	; (80017fc <Read_compass+0x2dc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4619      	mov	r1, r3
 80016ac:	4610      	mov	r0, r2
 80016ae:	f7ff fa61 	bl	8000b74 <__addsf3>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fd2b 	bl	8001110 <__aeabi_f2iz>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b21a      	sxth	r2, r3
 80016be:	4b4d      	ldr	r3, [pc, #308]	; (80017f4 <Read_compass+0x2d4>)
 80016c0:	801a      	strh	r2, [r3, #0]

	if (Xm == 0 && Ym < 0)
 80016c2:	4b49      	ldr	r3, [pc, #292]	; (80017e8 <Read_compass+0x2c8>)
 80016c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d108      	bne.n	80016de <Read_compass+0x1be>
 80016cc:	4b49      	ldr	r3, [pc, #292]	; (80017f4 <Read_compass+0x2d4>)
 80016ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	da03      	bge.n	80016de <Read_compass+0x1be>
		compass_n = 90.0;
 80016d6:	4b4a      	ldr	r3, [pc, #296]	; (8001800 <Read_compass+0x2e0>)
 80016d8:	4a4a      	ldr	r2, [pc, #296]	; (8001804 <Read_compass+0x2e4>)
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e031      	b.n	8001742 <Read_compass+0x222>
	else if (Xm == 0 && Ym > 0)
 80016de:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <Read_compass+0x2c8>)
 80016e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d108      	bne.n	80016fa <Read_compass+0x1da>
 80016e8:	4b42      	ldr	r3, [pc, #264]	; (80017f4 <Read_compass+0x2d4>)
 80016ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	dd03      	ble.n	80016fa <Read_compass+0x1da>
		compass_n = 270.0;
 80016f2:	4b43      	ldr	r3, [pc, #268]	; (8001800 <Read_compass+0x2e0>)
 80016f4:	4a44      	ldr	r2, [pc, #272]	; (8001808 <Read_compass+0x2e8>)
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	e023      	b.n	8001742 <Read_compass+0x222>
	else {
		compass_n = (atan2f(Ym, Xm) * (180.0 / PI));
 80016fa:	4b3e      	ldr	r3, [pc, #248]	; (80017f4 <Read_compass+0x2d4>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff faeb 	bl	8000cdc <__aeabi_i2f>
 8001706:	4604      	mov	r4, r0
 8001708:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <Read_compass+0x2c8>)
 800170a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fae4 	bl	8000cdc <__aeabi_i2f>
 8001714:	4603      	mov	r3, r0
 8001716:	4619      	mov	r1, r3
 8001718:	4620      	mov	r0, r4
 800171a:	f009 fb61 	bl	800ade0 <atan2f>
 800171e:	4603      	mov	r3, r0
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe fe81 	bl	8000428 <__aeabi_f2d>
 8001726:	a326      	add	r3, pc, #152	; (adr r3, 80017c0 <Read_compass+0x2a0>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe fed4 	bl	80004d8 <__aeabi_dmul>
 8001730:	4603      	mov	r3, r0
 8001732:	460c      	mov	r4, r1
 8001734:	4618      	mov	r0, r3
 8001736:	4621      	mov	r1, r4
 8001738:	f7ff f9c6 	bl	8000ac8 <__aeabi_d2f>
 800173c:	4602      	mov	r2, r0
 800173e:	4b30      	ldr	r3, [pc, #192]	; (8001800 <Read_compass+0x2e0>)
 8001740:	601a      	str	r2, [r3, #0]
	}
	compass_n = compass_n + MGN_density + MGN_default_Angle;
 8001742:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <Read_compass+0x2e0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fe6e 	bl	8000428 <__aeabi_f2d>
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	4b2e      	ldr	r3, [pc, #184]	; (800180c <Read_compass+0x2ec>)
 8001752:	f7fe fd0b 	bl	800016c <__adddf3>
 8001756:	4603      	mov	r3, r0
 8001758:	460c      	mov	r4, r1
 800175a:	4618      	mov	r0, r3
 800175c:	4621      	mov	r1, r4
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	f7fe fd01 	bl	800016c <__adddf3>
 800176a:	4603      	mov	r3, r0
 800176c:	460c      	mov	r4, r1
 800176e:	4618      	mov	r0, r3
 8001770:	4621      	mov	r1, r4
 8001772:	f7ff f9a9 	bl	8000ac8 <__aeabi_d2f>
 8001776:	4602      	mov	r2, r0
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <Read_compass+0x2e0>)
 800177a:	601a      	str	r2, [r3, #0]
	if (compass_n < 0)
 800177c:	4b20      	ldr	r3, [pc, #128]	; (8001800 <Read_compass+0x2e0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f04f 0100 	mov.w	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fc9b 	bl	80010c0 <__aeabi_fcmplt>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00a      	beq.n	80017a6 <Read_compass+0x286>
		compass = compass_n + 360;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <Read_compass+0x2e0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	491e      	ldr	r1, [pc, #120]	; (8001810 <Read_compass+0x2f0>)
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f9ec 	bl	8000b74 <__addsf3>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <Read_compass+0x2f4>)
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	e003      	b.n	80017ae <Read_compass+0x28e>
	else
		compass = compass_n;
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <Read_compass+0x2e0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a1a      	ldr	r2, [pc, #104]	; (8001814 <Read_compass+0x2f4>)
 80017ac:	6013      	str	r3, [r2, #0]
	return compass;
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <Read_compass+0x2f4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017b6:	bf00      	nop
 80017b8:	54442d18 	.word	0x54442d18
 80017bc:	400921fb 	.word	0x400921fb
 80017c0:	1a63c1f8 	.word	0x1a63c1f8
 80017c4:	404ca5dc 	.word	0x404ca5dc
 80017c8:	2000043c 	.word	0x2000043c
 80017cc:	20000428 	.word	0x20000428
 80017d0:	20000434 	.word	0x20000434
 80017d4:	40668000 	.word	0x40668000
 80017d8:	20000224 	.word	0x20000224
 80017dc:	20000228 	.word	0x20000228
 80017e0:	0800c6f8 	.word	0x0800c6f8
 80017e4:	0800c700 	.word	0x0800c700
 80017e8:	2000021c 	.word	0x2000021c
 80017ec:	20000418 	.word	0x20000418
 80017f0:	20000424 	.word	0x20000424
 80017f4:	2000021e 	.word	0x2000021e
 80017f8:	2000041c 	.word	0x2000041c
 80017fc:	20000430 	.word	0x20000430
 8001800:	20000440 	.word	0x20000440
 8001804:	42b40000 	.word	0x42b40000
 8001808:	43870000 	.word	0x43870000
 800180c:	40180000 	.word	0x40180000
 8001810:	43b40000 	.word	0x43b40000
 8001814:	2000042c 	.word	0x2000042c

08001818 <MPU6050_Init>:
uint8_t CONFIG_RATE = 0x02;
uint8_t ACCEL_CONFIG_RATE = 0x10;
uint8_t PWR_MGMT_1_RATE = 0x00;

void MPU6050_Init()
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU_6050_WRITE_ADRESS, 1, MPU_6050_TIMEOUT) != HAL_OK)
 800181c:	2364      	movs	r3, #100	; 0x64
 800181e:	2201      	movs	r2, #1
 8001820:	21d0      	movs	r1, #208	; 0xd0
 8001822:	4808      	ldr	r0, [pc, #32]	; (8001844 <MPU6050_Init+0x2c>)
 8001824:	f003 fb92 	bl	8004f4c <HAL_I2C_IsDeviceReady>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d005      	beq.n	800183a <MPU6050_Init+0x22>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);  // ONEMLI
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <MPU6050_Init+0x30>)
 8001836:	f002 fdc5 	bl	80043c4 <HAL_GPIO_WritePin>
	}

	MPU6050_SetCalibration();
 800183a:	f000 f807 	bl	800184c <MPU6050_SetCalibration>
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200004f0 	.word	0x200004f0
 8001848:	40011000 	.word	0x40011000

0800184c <MPU6050_SetCalibration>:

void MPU6050_SetCalibration()
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af04      	add	r7, sp, #16
	// This register allows the user to configure the power mode and clock source.
	HAL_I2C_Mem_Write(&hi2c1, MPU_6050_WRITE_ADRESS, PWR_MGMT_1, 1, &PWR_MGMT_1_RATE, 1, MPU_6050_TIMEOUT);
 8001852:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <MPU6050_SetCalibration+0x84>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b29a      	uxth	r2, r3
 8001858:	2364      	movs	r3, #100	; 0x64
 800185a:	9302      	str	r3, [sp, #8]
 800185c:	2301      	movs	r3, #1
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <MPU6050_SetCalibration+0x88>)
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2301      	movs	r3, #1
 8001866:	21d0      	movs	r1, #208	; 0xd0
 8001868:	481b      	ldr	r0, [pc, #108]	; (80018d8 <MPU6050_SetCalibration+0x8c>)
 800186a:	f003 f813 	bl	8004894 <HAL_I2C_Mem_Write>

	// The Sample Rate is determined by dividing the gyroscope output rate by this value.
	HAL_I2C_Mem_Write(&hi2c1, MPU_6050_WRITE_ADRESS, SMPRT_DIV, 1, &SMPRT_DIV_RATE, 1, MPU_6050_TIMEOUT);
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <MPU6050_SetCalibration+0x90>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b29a      	uxth	r2, r3
 8001874:	2364      	movs	r3, #100	; 0x64
 8001876:	9302      	str	r3, [sp, #8]
 8001878:	2301      	movs	r3, #1
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MPU6050_SetCalibration+0x94>)
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2301      	movs	r3, #1
 8001882:	21d0      	movs	r1, #208	; 0xd0
 8001884:	4814      	ldr	r0, [pc, #80]	; (80018d8 <MPU6050_SetCalibration+0x8c>)
 8001886:	f003 f805 	bl	8004894 <HAL_I2C_Mem_Write>

	// This register is used to trigger gyroscope self-test and configure the gyroscopes’ full scale range.
	HAL_I2C_Mem_Write(&hi2c1, MPU_6050_WRITE_ADRESS, GYRO_CONFIG, 1, &GYRO_CONFIG_RATE, 1, MPU_6050_TIMEOUT);
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <MPU6050_SetCalibration+0x98>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b29a      	uxth	r2, r3
 8001890:	2364      	movs	r3, #100	; 0x64
 8001892:	9302      	str	r3, [sp, #8]
 8001894:	2301      	movs	r3, #1
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <MPU6050_SetCalibration+0x9c>)
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2301      	movs	r3, #1
 800189e:	21d0      	movs	r1, #208	; 0xd0
 80018a0:	480d      	ldr	r0, [pc, #52]	; (80018d8 <MPU6050_SetCalibration+0x8c>)
 80018a2:	f002 fff7 	bl	8004894 <HAL_I2C_Mem_Write>

	// This register is used to trigger accelerometer self test and configure the accelerometer full scale range.
	HAL_I2C_Mem_Write(&hi2c1, MPU_6050_WRITE_ADRESS, ACCEL_CONFIG, 1, &ACCEL_CONFIG_RATE, 1, MPU_6050_TIMEOUT);
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MPU6050_SetCalibration+0xa0>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	2364      	movs	r3, #100	; 0x64
 80018ae:	9302      	str	r3, [sp, #8]
 80018b0:	2301      	movs	r3, #1
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MPU6050_SetCalibration+0xa4>)
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2301      	movs	r3, #1
 80018ba:	21d0      	movs	r1, #208	; 0xd0
 80018bc:	4806      	ldr	r0, [pc, #24]	; (80018d8 <MPU6050_SetCalibration+0x8c>)
 80018be:	f002 ffe9 	bl	8004894 <HAL_I2C_Mem_Write>

	HAL_Delay(50);
 80018c2:	2032      	movs	r0, #50	; 0x32
 80018c4:	f002 fa44 	bl	8003d50 <HAL_Delay>

}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000007 	.word	0x20000007
 80018d4:	2000023f 	.word	0x2000023f
 80018d8:	200004f0 	.word	0x200004f0
 80018dc:	20000004 	.word	0x20000004
 80018e0:	20000009 	.word	0x20000009
 80018e4:	20000005 	.word	0x20000005
 80018e8:	2000000a 	.word	0x2000000a
 80018ec:	20000006 	.word	0x20000006
 80018f0:	2000000b 	.word	0x2000000b

080018f4 <MPU6050_Read_Accelarition>:

void MPU6050_Read_Accelarition()
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, MPU_6050_READ_ADRESS, MPU_6050_ACCELERATION_REG, 1, Acc, MPU_6050_ACCELERATION_LENGTH, MPU_6050_TIMEOUT);
 80018fa:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <MPU6050_Read_Accelarition+0xb8>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	2364      	movs	r3, #100	; 0x64
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	2306      	movs	r3, #6
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <MPU6050_Read_Accelarition+0xbc>)
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	2301      	movs	r3, #1
 800190e:	21d1      	movs	r1, #209	; 0xd1
 8001910:	4828      	ldr	r0, [pc, #160]	; (80019b4 <MPU6050_Read_Accelarition+0xc0>)
 8001912:	f003 f8b9 	bl	8004a88 <HAL_I2C_Mem_Read>
	//HAL_Delay(20);
	//HAL_Delay(12);
	Accx = (int16_t)((Acc[count] << 8) | (Acc[count + 1])); count +=2;
 8001916:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <MPU6050_Read_Accelarition+0xc4>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <MPU6050_Read_Accelarition+0xbc>)
 800191e:	5c9b      	ldrb	r3, [r3, r2]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	b21a      	sxth	r2, r3
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <MPU6050_Read_Accelarition+0xc4>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	3301      	adds	r3, #1
 800192a:	4921      	ldr	r1, [pc, #132]	; (80019b0 <MPU6050_Read_Accelarition+0xbc>)
 800192c:	5ccb      	ldrb	r3, [r1, r3]
 800192e:	b21b      	sxth	r3, r3
 8001930:	4313      	orrs	r3, r2
 8001932:	b21a      	sxth	r2, r3
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <MPU6050_Read_Accelarition+0xc8>)
 8001936:	801a      	strh	r2, [r3, #0]
 8001938:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <MPU6050_Read_Accelarition+0xc4>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	3302      	adds	r3, #2
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <MPU6050_Read_Accelarition+0xc4>)
 8001942:	701a      	strb	r2, [r3, #0]
	Accy = (int16_t)((Acc[count] << 8) | (Acc[count + 1])); count +=2;
 8001944:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <MPU6050_Read_Accelarition+0xc4>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <MPU6050_Read_Accelarition+0xbc>)
 800194c:	5c9b      	ldrb	r3, [r3, r2]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	b21a      	sxth	r2, r3
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <MPU6050_Read_Accelarition+0xc4>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	4915      	ldr	r1, [pc, #84]	; (80019b0 <MPU6050_Read_Accelarition+0xbc>)
 800195a:	5ccb      	ldrb	r3, [r1, r3]
 800195c:	b21b      	sxth	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b21a      	sxth	r2, r3
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MPU6050_Read_Accelarition+0xcc>)
 8001964:	801a      	strh	r2, [r3, #0]
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MPU6050_Read_Accelarition+0xc4>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	3302      	adds	r3, #2
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MPU6050_Read_Accelarition+0xc4>)
 8001970:	701a      	strb	r2, [r3, #0]
	Accz = (int16_t)((Acc[count] << 8) | (Acc[count + 1])); count +=2;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MPU6050_Read_Accelarition+0xc4>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <MPU6050_Read_Accelarition+0xbc>)
 800197a:	5c9b      	ldrb	r3, [r3, r2]
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	b21a      	sxth	r2, r3
 8001980:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <MPU6050_Read_Accelarition+0xc4>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	3301      	adds	r3, #1
 8001986:	490a      	ldr	r1, [pc, #40]	; (80019b0 <MPU6050_Read_Accelarition+0xbc>)
 8001988:	5ccb      	ldrb	r3, [r1, r3]
 800198a:	b21b      	sxth	r3, r3
 800198c:	4313      	orrs	r3, r2
 800198e:	b21a      	sxth	r2, r3
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MPU6050_Read_Accelarition+0xd0>)
 8001992:	801a      	strh	r2, [r3, #0]
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <MPU6050_Read_Accelarition+0xc4>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	3302      	adds	r3, #2
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MPU6050_Read_Accelarition+0xc4>)
 800199e:	701a      	strb	r2, [r3, #0]
	count = 0;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <MPU6050_Read_Accelarition+0xc4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000008 	.word	0x20000008
 80019b0:	20000238 	.word	0x20000238
 80019b4:	200004f0 	.word	0x200004f0
 80019b8:	2000023e 	.word	0x2000023e
 80019bc:	20000448 	.word	0x20000448
 80019c0:	20000446 	.word	0x20000446
 80019c4:	2000044c 	.word	0x2000044c

080019c8 <MPU6050_AccX>:
	Gyroz = (int16_t)((Gyro[count] << 8) | (Gyro[count + 1])); count +=2;
	count = 0;
}

float MPU6050_AccX()
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	MPU6050_Read_Accelarition();
 80019cc:	f7ff ff92 	bl	80018f4 <MPU6050_Read_Accelarition>
	return (float)Accx / 4096.0;
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <MPU6050_AccX+0x28>)
 80019d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff f980 	bl	8000cdc <__aeabi_i2f>
 80019dc:	4603      	mov	r3, r0
 80019de:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fa82 	bl	8000eec <__aeabi_fdiv>
 80019e8:	4603      	mov	r3, r0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000448 	.word	0x20000448

080019f4 <MPU6050_AccY>:
float MPU6050_AccY()
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	MPU6050_Read_Accelarition();
 80019f8:	f7ff ff7c 	bl	80018f4 <MPU6050_Read_Accelarition>
	return (float)Accy / 4096.0;
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <MPU6050_AccY+0x28>)
 80019fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f96a 	bl	8000cdc <__aeabi_i2f>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fa6c 	bl	8000eec <__aeabi_fdiv>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000446 	.word	0x20000446

08001a20 <MPU6050_AccZ>:
float MPU6050_AccZ()
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	MPU6050_Read_Accelarition();
 8001a24:	f7ff ff66 	bl	80018f4 <MPU6050_Read_Accelarition>
	return (float)Accz / 4096.0;
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <MPU6050_AccZ+0x28>)
 8001a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f954 	bl	8000cdc <__aeabi_i2f>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fa56 	bl	8000eec <__aeabi_fdiv>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000044c 	.word	0x2000044c

08001a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a52:	f002 f91b 	bl	8003c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a56:	f000 fa59 	bl	8001f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a5a:	f000 fbcb 	bl	80021f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a5e:	f000 fa9b 	bl	8001f98 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001a62:	f000 fac7 	bl	8001ff4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001a66:	f000 fb47 	bl	80020f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001a6a:	f000 fb6f 	bl	800214c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001a6e:	f000 fb97 	bl	80021a0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001a72:	f000 faf5 	bl	8002060 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //newrecord = 1;
  //NXT_SEND_SVAL("page0.t19.pco", 2016);

  LORA_READ_PARAMETER();
 8001a76:	f000 fc79 	bl	800236c <LORA_READ_PARAMETER>
  LORA_CONFG( ADDH, ADDL, CHN, MODE); // HIGH ADDRESS, LOW ADDRESS, CHANNEL, MODE (0 : TRANSPARENT, 1 : FIXED)
 8001a7a:	4b85      	ldr	r3, [pc, #532]	; (8001c90 <main+0x244>)
 8001a7c:	7818      	ldrb	r0, [r3, #0]
 8001a7e:	4b85      	ldr	r3, [pc, #532]	; (8001c94 <main+0x248>)
 8001a80:	7819      	ldrb	r1, [r3, #0]
 8001a82:	4b85      	ldr	r3, [pc, #532]	; (8001c98 <main+0x24c>)
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	4b85      	ldr	r3, [pc, #532]	; (8001c9c <main+0x250>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	f000 fc13 	bl	80022b4 <LORA_CONFG>
  MPU6050_Init();
 8001a8e:	f7ff fec3 	bl	8001818 <MPU6050_Init>
  for(uint8_t i = 0 ; i < 8 ; i++){
 8001a92:	2300      	movs	r3, #0
 8001a94:	71fb      	strb	r3, [r7, #7]
 8001a96:	e009      	b.n	8001aac <main+0x60>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001a98:	2110      	movs	r1, #16
 8001a9a:	4881      	ldr	r0, [pc, #516]	; (8001ca0 <main+0x254>)
 8001a9c:	f002 fcaa 	bl	80043f4 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8001aa0:	2032      	movs	r0, #50	; 0x32
 8001aa2:	f002 f955 	bl	8003d50 <HAL_Delay>
  for(uint8_t i = 0 ; i < 8 ; i++){
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	71fb      	strb	r3, [r7, #7]
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	2b07      	cmp	r3, #7
 8001ab0:	d9f2      	bls.n	8001a98 <main+0x4c>
  }
  //magneto_Init(cal_num);
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8001ab2:	4b7c      	ldr	r3, [pc, #496]	; (8001ca4 <main+0x258>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	4b7a      	ldr	r3, [pc, #488]	; (8001ca4 <main+0x258>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0220 	orr.w	r2, r2, #32
 8001ac0:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim2);
 8001ac2:	4879      	ldr	r0, [pc, #484]	; (8001ca8 <main+0x25c>)
 8001ac4:	f004 fc3c 	bl	8006340 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8001ac8:	4b78      	ldr	r3, [pc, #480]	; (8001cac <main+0x260>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	4b77      	ldr	r3, [pc, #476]	; (8001cac <main+0x260>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0220 	orr.w	r2, r2, #32
 8001ad6:	60da      	str	r2, [r3, #12]
 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001ad8:	4b75      	ldr	r3, [pc, #468]	; (8001cb0 <main+0x264>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	4b74      	ldr	r3, [pc, #464]	; (8001cb0 <main+0x264>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0220 	orr.w	r2, r2, #32
 8001ae6:	60da      	str	r2, [r3, #12]
 NXT_Disable_Error("bkcmd=2");
 8001ae8:	4872      	ldr	r0, [pc, #456]	; (8001cb4 <main+0x268>)
 8001aea:	f001 fb61 	bl	80031b0 <NXT_Disable_Error>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Systemlock = SystemCoreClock;
 8001aee:	4b72      	ldr	r3, [pc, #456]	; (8001cb8 <main+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a72      	ldr	r2, [pc, #456]	; (8001cbc <main+0x270>)
 8001af4:	6013      	str	r3, [r2, #0]
		if (mgn == 1) {
 8001af6:	4b72      	ldr	r3, [pc, #456]	; (8001cc0 <main+0x274>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d13a      	bne.n	8001b74 <main+0x128>
			compass_val = Read_compass();
 8001afe:	f7ff fd0f 	bl	8001520 <Read_compass>
 8001b02:	4602      	mov	r2, r0
 8001b04:	4b6f      	ldr	r3, [pc, #444]	; (8001cc4 <main+0x278>)
 8001b06:	601a      	str	r2, [r3, #0]
			//NXT_SEND("t0", compass_val);
			NXT_SEND_VAL("page2.z0.val", (uint32_t) compass_val);
 8001b08:	4b6e      	ldr	r3, [pc, #440]	; (8001cc4 <main+0x278>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fb25 	bl	800115c <__aeabi_f2uiz>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4619      	mov	r1, r3
 8001b16:	486c      	ldr	r0, [pc, #432]	; (8001cc8 <main+0x27c>)
 8001b18:	f001 fa42 	bl	8002fa0 <NXT_SEND_VAL>
			compass_val -= 90;
 8001b1c:	4b69      	ldr	r3, [pc, #420]	; (8001cc4 <main+0x278>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	496a      	ldr	r1, [pc, #424]	; (8001ccc <main+0x280>)
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff f824 	bl	8000b70 <__aeabi_fsub>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4b65      	ldr	r3, [pc, #404]	; (8001cc4 <main+0x278>)
 8001b2e:	601a      	str	r2, [r3, #0]
			if (compass_val < 0)
 8001b30:	4b64      	ldr	r3, [pc, #400]	; (8001cc4 <main+0x278>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f04f 0100 	mov.w	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fac1 	bl	80010c0 <__aeabi_fcmplt>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d009      	beq.n	8001b58 <main+0x10c>
				compass_val += 360;
 8001b44:	4b5f      	ldr	r3, [pc, #380]	; (8001cc4 <main+0x278>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4961      	ldr	r1, [pc, #388]	; (8001cd0 <main+0x284>)
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f812 	bl	8000b74 <__addsf3>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b5b      	ldr	r3, [pc, #364]	; (8001cc4 <main+0x278>)
 8001b56:	601a      	str	r2, [r3, #0]
			NXT_SEND_TXT("page2.t7.txt", (uint16_t) compass_val);
 8001b58:	4b5a      	ldr	r3, [pc, #360]	; (8001cc4 <main+0x278>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fafd 	bl	800115c <__aeabi_f2uiz>
 8001b62:	4603      	mov	r3, r0
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4619      	mov	r1, r3
 8001b68:	485a      	ldr	r0, [pc, #360]	; (8001cd4 <main+0x288>)
 8001b6a:	f001 fac9 	bl	8003100 <NXT_SEND_TXT>
			mgn = 0;
 8001b6e:	4b54      	ldr	r3, [pc, #336]	; (8001cc0 <main+0x274>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
		}
		if (recal == 1) {
 8001b74:	4b58      	ldr	r3, [pc, #352]	; (8001cd8 <main+0x28c>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d105      	bne.n	8001b88 <main+0x13c>
			magneto_Init(cal_num);
 8001b7c:	2096      	movs	r0, #150	; 0x96
 8001b7e:	f7ff fb0d 	bl	800119c <magneto_Init>
			recal = 0;
 8001b82:	4b55      	ldr	r3, [pc, #340]	; (8001cd8 <main+0x28c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
		}
		if (RX2 == 1) {
 8001b88:	4b54      	ldr	r3, [pc, #336]	; (8001cdc <main+0x290>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d143      	bne.n	8001c18 <main+0x1cc>

			RX2 = 0;
 8001b90:	4b52      	ldr	r3, [pc, #328]	; (8001cdc <main+0x290>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
			uint8_t m = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	71bb      	strb	r3, [r7, #6]
			uint8_t go = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	717b      	strb	r3, [r7, #5]
			for (uint8_t k = 0; k < sizeof(RX2_BUF); k++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	713b      	strb	r3, [r7, #4]
 8001ba2:	e021      	b.n	8001be8 <main+0x19c>
				if (RX2_BUF[k] == ':' && go == 0) {
 8001ba4:	793b      	ldrb	r3, [r7, #4]
 8001ba6:	4a4e      	ldr	r2, [pc, #312]	; (8001ce0 <main+0x294>)
 8001ba8:	5cd3      	ldrb	r3, [r2, r3]
 8001baa:	2b3a      	cmp	r3, #58	; 0x3a
 8001bac:	d104      	bne.n	8001bb8 <main+0x16c>
 8001bae:	797b      	ldrb	r3, [r7, #5]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <main+0x16c>
					go = 1;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	717b      	strb	r3, [r7, #5]
				}
				if (go == 1) {
 8001bb8:	797b      	ldrb	r3, [r7, #5]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d109      	bne.n	8001bd2 <main+0x186>
					NEXT_BUFF[m] = RX2_BUF[k - 1];
 8001bbe:	793b      	ldrb	r3, [r7, #4]
 8001bc0:	1e5a      	subs	r2, r3, #1
 8001bc2:	79bb      	ldrb	r3, [r7, #6]
 8001bc4:	4946      	ldr	r1, [pc, #280]	; (8001ce0 <main+0x294>)
 8001bc6:	5c89      	ldrb	r1, [r1, r2]
 8001bc8:	4a46      	ldr	r2, [pc, #280]	; (8001ce4 <main+0x298>)
 8001bca:	54d1      	strb	r1, [r2, r3]
					m++;
 8001bcc:	79bb      	ldrb	r3, [r7, #6]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	71bb      	strb	r3, [r7, #6]
				}
				if (go == 1 && RX2_BUF[k] == '\n')
 8001bd2:	797b      	ldrb	r3, [r7, #5]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d104      	bne.n	8001be2 <main+0x196>
 8001bd8:	793b      	ldrb	r3, [r7, #4]
 8001bda:	4a41      	ldr	r2, [pc, #260]	; (8001ce0 <main+0x294>)
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	2b0a      	cmp	r3, #10
 8001be0:	d006      	beq.n	8001bf0 <main+0x1a4>
			for (uint8_t k = 0; k < sizeof(RX2_BUF); k++) {
 8001be2:	793b      	ldrb	r3, [r7, #4]
 8001be4:	3301      	adds	r3, #1
 8001be6:	713b      	strb	r3, [r7, #4]
 8001be8:	793b      	ldrb	r3, [r7, #4]
 8001bea:	2b77      	cmp	r3, #119	; 0x77
 8001bec:	d9da      	bls.n	8001ba4 <main+0x158>
 8001bee:	e000      	b.n	8001bf2 <main+0x1a6>
					break;
 8001bf0:	bf00      	nop
			}
			//if(NEXT_BUFF[0] != '\0' || NEXT_BUFF[1] || '\0' || NEXT_BUFF[2] != '\0')
			NXT_SEND_TXTBX("page1.t12.txt", NEXT_BUFF);
 8001bf2:	493c      	ldr	r1, [pc, #240]	; (8001ce4 <main+0x298>)
 8001bf4:	483c      	ldr	r0, [pc, #240]	; (8001ce8 <main+0x29c>)
 8001bf6:	f001 faaf 	bl	8003158 <NXT_SEND_TXTBX>

			for (uint8_t i = 0; i < sizeof(RX2_BUF); i++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	70fb      	strb	r3, [r7, #3]
 8001bfe:	e006      	b.n	8001c0e <main+0x1c2>
				RX2_BUF[i] = '\0';
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	4a37      	ldr	r2, [pc, #220]	; (8001ce0 <main+0x294>)
 8001c04:	2100      	movs	r1, #0
 8001c06:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < sizeof(RX2_BUF); i++)
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	70fb      	strb	r3, [r7, #3]
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	2b77      	cmp	r3, #119	; 0x77
 8001c12:	d9f5      	bls.n	8001c00 <main+0x1b4>
			Data_Parsing();
 8001c14:	f000 fbea 	bl	80023ec <Data_Parsing>
		}
		if (cal_dis == 1) {
 8001c18:	4b34      	ldr	r3, [pc, #208]	; (8001cec <main+0x2a0>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	f040 812f 	bne.w	8001e80 <main+0x434>
			if (ground_lat == .0 && ground_lng == .0) {
 8001c22:	4b33      	ldr	r3, [pc, #204]	; (8001cf0 <main+0x2a4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f04f 0100 	mov.w	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fa3e 	bl	80010ac <__aeabi_fcmpeq>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d012      	beq.n	8001c5c <main+0x210>
 8001c36:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <main+0x2a8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f04f 0100 	mov.w	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fa34 	bl	80010ac <__aeabi_fcmpeq>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d008      	beq.n	8001c5c <main+0x210>
				NXT_SEND_TXTBX("page2.t4.txt", "veri yok");
 8001c4a:	492b      	ldr	r1, [pc, #172]	; (8001cf8 <main+0x2ac>)
 8001c4c:	482b      	ldr	r0, [pc, #172]	; (8001cfc <main+0x2b0>)
 8001c4e:	f001 fa83 	bl	8003158 <NXT_SEND_TXTBX>
				NXT_SEND_TXTBX("page2.t6.txt", "veri yok");
 8001c52:	4929      	ldr	r1, [pc, #164]	; (8001cf8 <main+0x2ac>)
 8001c54:	482a      	ldr	r0, [pc, #168]	; (8001d00 <main+0x2b4>)
 8001c56:	f001 fa7f 	bl	8003158 <NXT_SEND_TXTBX>
 8001c5a:	e0a4      	b.n	8001da6 <main+0x35a>
			} else if (EPH_lat == .0 && EPH_lng == .0) {
 8001c5c:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <main+0x2b8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f04f 0100 	mov.w	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fa21 	bl	80010ac <__aeabi_fcmpeq>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d04d      	beq.n	8001d0c <main+0x2c0>
 8001c70:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <main+0x2bc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f04f 0100 	mov.w	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fa17 	bl	80010ac <__aeabi_fcmpeq>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d043      	beq.n	8001d0c <main+0x2c0>
				NXT_SEND_TXTBX("page2.t4.txt", "veri yok");
 8001c84:	491c      	ldr	r1, [pc, #112]	; (8001cf8 <main+0x2ac>)
 8001c86:	481d      	ldr	r0, [pc, #116]	; (8001cfc <main+0x2b0>)
 8001c88:	f001 fa66 	bl	8003158 <NXT_SEND_TXTBX>
 8001c8c:	e08b      	b.n	8001da6 <main+0x35a>
 8001c8e:	bf00      	nop
 8001c90:	20000018 	.word	0x20000018
 8001c94:	20000019 	.word	0x20000019
 8001c98:	2000001a 	.word	0x2000001a
 8001c9c:	2000001b 	.word	0x2000001b
 8001ca0:	40010c00 	.word	0x40010c00
 8001ca4:	200004ac 	.word	0x200004ac
 8001ca8:	20000588 	.word	0x20000588
 8001cac:	200005d0 	.word	0x200005d0
 8001cb0:	20000544 	.word	0x20000544
 8001cb4:	0800c708 	.word	0x0800c708
 8001cb8:	20000020 	.word	0x20000020
 8001cbc:	200002c8 	.word	0x200002c8
 8001cc0:	2000027c 	.word	0x2000027c
 8001cc4:	20000240 	.word	0x20000240
 8001cc8:	0800c710 	.word	0x0800c710
 8001ccc:	42b40000 	.word	0x42b40000
 8001cd0:	43b40000 	.word	0x43b40000
 8001cd4:	0800c720 	.word	0x0800c720
 8001cd8:	2000027d 	.word	0x2000027d
 8001cdc:	200003e8 	.word	0x200003e8
 8001ce0:	200002f8 	.word	0x200002f8
 8001ce4:	20000370 	.word	0x20000370
 8001ce8:	0800c730 	.word	0x0800c730
 8001cec:	200002c6 	.word	0x200002c6
 8001cf0:	200003f4 	.word	0x200003f4
 8001cf4:	200003f8 	.word	0x200003f8
 8001cf8:	0800c740 	.word	0x0800c740
 8001cfc:	0800c74c 	.word	0x0800c74c
 8001d00:	0800c75c 	.word	0x0800c75c
 8001d04:	20000244 	.word	0x20000244
 8001d08:	20000248 	.word	0x20000248
			} else {
				EPH_distance = Cal_distGPS(EPH_lat, EPH_lng, ground_lat,
 8001d0c:	4b67      	ldr	r3, [pc, #412]	; (8001eac <main+0x460>)
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	4b67      	ldr	r3, [pc, #412]	; (8001eb0 <main+0x464>)
 8001d12:	6819      	ldr	r1, [r3, #0]
 8001d14:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <main+0x468>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b67      	ldr	r3, [pc, #412]	; (8001eb8 <main+0x46c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f000 ff26 	bl	8002b6c <Cal_distGPS>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b66      	ldr	r3, [pc, #408]	; (8001ebc <main+0x470>)
 8001d24:	601a      	str	r2, [r3, #0]
						ground_lng);
				EPH_Angle = GetAngle(EPH_lat, EPH_lng, ground_lat, ground_lng);
 8001d26:	4b61      	ldr	r3, [pc, #388]	; (8001eac <main+0x460>)
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	4b61      	ldr	r3, [pc, #388]	; (8001eb0 <main+0x464>)
 8001d2c:	6819      	ldr	r1, [r3, #0]
 8001d2e:	4b61      	ldr	r3, [pc, #388]	; (8001eb4 <main+0x468>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b61      	ldr	r3, [pc, #388]	; (8001eb8 <main+0x46c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f001 f82f 	bl	8002d98 <GetAngle>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	4b60      	ldr	r3, [pc, #384]	; (8001ec0 <main+0x474>)
 8001d3e:	601a      	str	r2, [r3, #0]
				NXT_SEND_VALFLOAT("page2.t4.txt", EPH_distance);
 8001d40:	4b5e      	ldr	r3, [pc, #376]	; (8001ebc <main+0x470>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	485f      	ldr	r0, [pc, #380]	; (8001ec4 <main+0x478>)
 8001d48:	f001 f982 	bl	8003050 <NXT_SEND_VALFLOAT>
				NXT_SEND_VALFLOAT("page2.t3.txt", EPH_Angle);
 8001d4c:	4b5c      	ldr	r3, [pc, #368]	; (8001ec0 <main+0x474>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	485d      	ldr	r0, [pc, #372]	; (8001ec8 <main+0x47c>)
 8001d54:	f001 f97c 	bl	8003050 <NXT_SEND_VALFLOAT>
				EPH_Angle += 90.0;
 8001d58:	4b59      	ldr	r3, [pc, #356]	; (8001ec0 <main+0x474>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	495b      	ldr	r1, [pc, #364]	; (8001ecc <main+0x480>)
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe ff08 	bl	8000b74 <__addsf3>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b55      	ldr	r3, [pc, #340]	; (8001ec0 <main+0x474>)
 8001d6a:	601a      	str	r2, [r3, #0]
				if (EPH_Angle > 360) {
 8001d6c:	4b54      	ldr	r3, [pc, #336]	; (8001ec0 <main+0x474>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4957      	ldr	r1, [pc, #348]	; (8001ed0 <main+0x484>)
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff f9c2 	bl	80010fc <__aeabi_fcmpgt>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <main+0x346>
					EPH_Angle -= 360;
 8001d7e:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <main+0x474>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4953      	ldr	r1, [pc, #332]	; (8001ed0 <main+0x484>)
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fef3 	bl	8000b70 <__aeabi_fsub>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b4c      	ldr	r3, [pc, #304]	; (8001ec0 <main+0x474>)
 8001d90:	601a      	str	r2, [r3, #0]
				}
				NXT_SEND_VAL("page2.z1.val", (uint32_t) EPH_Angle);
 8001d92:	4b4b      	ldr	r3, [pc, #300]	; (8001ec0 <main+0x474>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff f9e0 	bl	800115c <__aeabi_f2uiz>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4619      	mov	r1, r3
 8001da0:	484c      	ldr	r0, [pc, #304]	; (8001ed4 <main+0x488>)
 8001da2:	f001 f8fd 	bl	8002fa0 <NXT_SEND_VAL>
			}
			if ((PL_lat == .0 && PL_lng == .0) || GS_LC == 1) {
 8001da6:	4b4c      	ldr	r3, [pc, #304]	; (8001ed8 <main+0x48c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f04f 0100 	mov.w	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff f97c 	bl	80010ac <__aeabi_fcmpeq>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <main+0x382>
 8001dba:	4b48      	ldr	r3, [pc, #288]	; (8001edc <main+0x490>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f04f 0100 	mov.w	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff f972 	bl	80010ac <__aeabi_fcmpeq>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d103      	bne.n	8001dd6 <main+0x38a>
 8001dce:	4b44      	ldr	r3, [pc, #272]	; (8001ee0 <main+0x494>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d104      	bne.n	8001de0 <main+0x394>
				NXT_SEND_TXTBX("page2.t6.txt", "veri yok");
 8001dd6:	4943      	ldr	r1, [pc, #268]	; (8001ee4 <main+0x498>)
 8001dd8:	4843      	ldr	r0, [pc, #268]	; (8001ee8 <main+0x49c>)
 8001dda:	f001 f9bd 	bl	8003158 <NXT_SEND_TXTBX>
 8001dde:	e04c      	b.n	8001e7a <main+0x42e>
			} else {
				PL_distance = Cal_distGPS(PL_lat, PL_lng, ground_lat,
 8001de0:	4b3d      	ldr	r3, [pc, #244]	; (8001ed8 <main+0x48c>)
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	4b3d      	ldr	r3, [pc, #244]	; (8001edc <main+0x490>)
 8001de6:	6819      	ldr	r1, [r3, #0]
 8001de8:	4b32      	ldr	r3, [pc, #200]	; (8001eb4 <main+0x468>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <main+0x46c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f000 febc 	bl	8002b6c <Cal_distGPS>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <main+0x4a0>)
 8001df8:	601a      	str	r2, [r3, #0]
						ground_lng);
				PL_Angle = GetAngle(PL_lat, PL_lng, ground_lat, ground_lng);
 8001dfa:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <main+0x48c>)
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	4b37      	ldr	r3, [pc, #220]	; (8001edc <main+0x490>)
 8001e00:	6819      	ldr	r1, [r3, #0]
 8001e02:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <main+0x468>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <main+0x46c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f000 ffc5 	bl	8002d98 <GetAngle>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <main+0x4a4>)
 8001e12:	601a      	str	r2, [r3, #0]
				NXT_SEND_VALFLOAT("page2.t6.txt", PL_distance);
 8001e14:	4b35      	ldr	r3, [pc, #212]	; (8001eec <main+0x4a0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4833      	ldr	r0, [pc, #204]	; (8001ee8 <main+0x49c>)
 8001e1c:	f001 f918 	bl	8003050 <NXT_SEND_VALFLOAT>
				NXT_SEND_VALFLOAT("page2.t5.txt", PL_Angle);
 8001e20:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <main+0x4a4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	4833      	ldr	r0, [pc, #204]	; (8001ef4 <main+0x4a8>)
 8001e28:	f001 f912 	bl	8003050 <NXT_SEND_VALFLOAT>
				PL_Angle += 90.0;
 8001e2c:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <main+0x4a4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4926      	ldr	r1, [pc, #152]	; (8001ecc <main+0x480>)
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fe9e 	bl	8000b74 <__addsf3>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <main+0x4a4>)
 8001e3e:	601a      	str	r2, [r3, #0]
				if (PL_Angle > 360) {
 8001e40:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <main+0x4a4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4922      	ldr	r1, [pc, #136]	; (8001ed0 <main+0x484>)
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff f958 	bl	80010fc <__aeabi_fcmpgt>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <main+0x41a>
					PL_Angle -= 360;
 8001e52:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <main+0x4a4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	491e      	ldr	r1, [pc, #120]	; (8001ed0 <main+0x484>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fe89 	bl	8000b70 <__aeabi_fsub>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <main+0x4a4>)
 8001e64:	601a      	str	r2, [r3, #0]
				}
				NXT_SEND_VAL("page2.z2.val", (uint32_t) PL_Angle);
 8001e66:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <main+0x4a4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f976 	bl	800115c <__aeabi_f2uiz>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4619      	mov	r1, r3
 8001e74:	4820      	ldr	r0, [pc, #128]	; (8001ef8 <main+0x4ac>)
 8001e76:	f001 f893 	bl	8002fa0 <NXT_SEND_VAL>
			}

			cal_dis = 0;
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <main+0x4b0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
		}
		if (newrecord == 1) {
 8001e80:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <main+0x4b4>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d105      	bne.n	8001e94 <main+0x448>
			newrecord = 0;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <main+0x4b4>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
			pause = 0;
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <main+0x4b8>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]

		}
		if (pause == 0) {
		}
		if (stop == 1) {
 8001e94:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <main+0x4bc>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	f47f ae28 	bne.w	8001aee <main+0xa2>
			stop = 0;
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <main+0x4bc>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
			pause = 1;
 8001ea4:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <main+0x4b8>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	701a      	strb	r2, [r3, #0]
	  Systemlock = SystemCoreClock;
 8001eaa:	e620      	b.n	8001aee <main+0xa2>
 8001eac:	20000244 	.word	0x20000244
 8001eb0:	20000248 	.word	0x20000248
 8001eb4:	200003f4 	.word	0x200003f4
 8001eb8:	200003f8 	.word	0x200003f8
 8001ebc:	2000026c 	.word	0x2000026c
 8001ec0:	20000274 	.word	0x20000274
 8001ec4:	0800c74c 	.word	0x0800c74c
 8001ec8:	0800c76c 	.word	0x0800c76c
 8001ecc:	42b40000 	.word	0x42b40000
 8001ed0:	43b40000 	.word	0x43b40000
 8001ed4:	0800c77c 	.word	0x0800c77c
 8001ed8:	2000024c 	.word	0x2000024c
 8001edc:	20000250 	.word	0x20000250
 8001ee0:	200002c7 	.word	0x200002c7
 8001ee4:	0800c740 	.word	0x0800c740
 8001ee8:	0800c75c 	.word	0x0800c75c
 8001eec:	20000270 	.word	0x20000270
 8001ef0:	20000278 	.word	0x20000278
 8001ef4:	0800c78c 	.word	0x0800c78c
 8001ef8:	0800c79c 	.word	0x0800c79c
 8001efc:	200002c6 	.word	0x200002c6
 8001f00:	2000027f 	.word	0x2000027f
 8001f04:	20000280 	.word	0x20000280
 8001f08:	2000027e 	.word	0x2000027e

08001f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b090      	sub	sp, #64	; 0x40
 8001f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f12:	f107 0318 	add.w	r3, r7, #24
 8001f16:	2228      	movs	r2, #40	; 0x28
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f005 fbca 	bl	80076b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f40:	2302      	movs	r3, #2
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f4a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f50:	f107 0318 	add.w	r3, r7, #24
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 fd03 	bl	8005960 <HAL_RCC_OscConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001f60:	f001 f818 	bl	8002f94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f64:	230f      	movs	r3, #15
 8001f66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 ff6e 	bl	8005e60 <HAL_RCC_ClockConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f8a:	f001 f803 	bl	8002f94 <Error_Handler>
  }
}
 8001f8e:	bf00      	nop
 8001f90:	3740      	adds	r7, #64	; 0x40
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001f9e:	4a13      	ldr	r2, [pc, #76]	; (8001fec <MX_I2C1_Init+0x54>)
 8001fa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001fa4:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <MX_I2C1_Init+0x58>)
 8001fa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001fb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fd4:	4804      	ldr	r0, [pc, #16]	; (8001fe8 <MX_I2C1_Init+0x50>)
 8001fd6:	f002 fa27 	bl	8004428 <HAL_I2C_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fe0:	f000 ffd8 	bl	8002f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	200004f0 	.word	0x200004f0
 8001fec:	40005400 	.word	0x40005400
 8001ff0:	000186a0 	.word	0x000186a0

08001ff4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ff8:	4b17      	ldr	r3, [pc, #92]	; (8002058 <MX_SPI2_Init+0x64>)
 8001ffa:	4a18      	ldr	r2, [pc, #96]	; (800205c <MX_SPI2_Init+0x68>)
 8001ffc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <MX_SPI2_Init+0x64>)
 8002000:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002004:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002006:	4b14      	ldr	r3, [pc, #80]	; (8002058 <MX_SPI2_Init+0x64>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <MX_SPI2_Init+0x64>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <MX_SPI2_Init+0x64>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <MX_SPI2_Init+0x64>)
 800201a:	2200      	movs	r2, #0
 800201c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <MX_SPI2_Init+0x64>)
 8002020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002024:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <MX_SPI2_Init+0x64>)
 8002028:	2210      	movs	r2, #16
 800202a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800202c:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <MX_SPI2_Init+0x64>)
 800202e:	2200      	movs	r2, #0
 8002030:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <MX_SPI2_Init+0x64>)
 8002034:	2200      	movs	r2, #0
 8002036:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <MX_SPI2_Init+0x64>)
 800203a:	2200      	movs	r2, #0
 800203c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <MX_SPI2_Init+0x64>)
 8002040:	220a      	movs	r2, #10
 8002042:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002044:	4804      	ldr	r0, [pc, #16]	; (8002058 <MX_SPI2_Init+0x64>)
 8002046:	f004 f8a7 	bl	8006198 <HAL_SPI_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002050:	f000 ffa0 	bl	8002f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000454 	.word	0x20000454
 800205c:	40003800 	.word	0x40003800

08002060 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002066:	f107 0308 	add.w	r3, r7, #8
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002074:	463b      	mov	r3, r7
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800207c:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <MX_TIM2_Init+0x94>)
 800207e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002082:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <MX_TIM2_Init+0x94>)
 8002086:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800208a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <MX_TIM2_Init+0x94>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 69;
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <MX_TIM2_Init+0x94>)
 8002094:	2245      	movs	r2, #69	; 0x45
 8002096:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <MX_TIM2_Init+0x94>)
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <MX_TIM2_Init+0x94>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020a4:	4813      	ldr	r0, [pc, #76]	; (80020f4 <MX_TIM2_Init+0x94>)
 80020a6:	f004 f8fb 	bl	80062a0 <HAL_TIM_Base_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020b0:	f000 ff70 	bl	8002f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020ba:	f107 0308 	add.w	r3, r7, #8
 80020be:	4619      	mov	r1, r3
 80020c0:	480c      	ldr	r0, [pc, #48]	; (80020f4 <MX_TIM2_Init+0x94>)
 80020c2:	f004 fa97 	bl	80065f4 <HAL_TIM_ConfigClockSource>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80020cc:	f000 ff62 	bl	8002f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d0:	2300      	movs	r3, #0
 80020d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020d8:	463b      	mov	r3, r7
 80020da:	4619      	mov	r1, r3
 80020dc:	4805      	ldr	r0, [pc, #20]	; (80020f4 <MX_TIM2_Init+0x94>)
 80020de:	f004 fc65 	bl	80069ac <HAL_TIMEx_MasterConfigSynchronization>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020e8:	f000 ff54 	bl	8002f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020ec:	bf00      	nop
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000588 	.word	0x20000588

080020f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 80020fe:	4a12      	ldr	r2, [pc, #72]	; (8002148 <MX_USART1_UART_Init+0x50>)
 8002100:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 8002104:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002108:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 800211e:	220c      	movs	r2, #12
 8002120:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800212e:	4805      	ldr	r0, [pc, #20]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 8002130:	f004 fcac 	bl	8006a8c <HAL_UART_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800213a:	f000 ff2b 	bl	8002f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000544 	.word	0x20000544
 8002148:	40013800 	.word	0x40013800

0800214c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <MX_USART2_UART_Init+0x50>)
 8002154:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002158:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800215c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002172:	220c      	movs	r2, #12
 8002174:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002184:	f004 fc82 	bl	8006a8c <HAL_UART_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800218e:	f000 ff01 	bl	8002f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200005d0 	.word	0x200005d0
 800219c:	40004400 	.word	0x40004400

080021a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <MX_USART3_UART_Init+0x4c>)
 80021a6:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <MX_USART3_UART_Init+0x50>)
 80021a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <MX_USART3_UART_Init+0x4c>)
 80021ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <MX_USART3_UART_Init+0x4c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <MX_USART3_UART_Init+0x4c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <MX_USART3_UART_Init+0x4c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_USART3_UART_Init+0x4c>)
 80021c6:	220c      	movs	r2, #12
 80021c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <MX_USART3_UART_Init+0x4c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_USART3_UART_Init+0x4c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_USART3_UART_Init+0x4c>)
 80021d8:	f004 fc58 	bl	8006a8c <HAL_UART_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80021e2:	f000 fed7 	bl	8002f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	200004ac 	.word	0x200004ac
 80021f0:	40004800 	.word	0x40004800

080021f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fa:	f107 0310 	add.w	r3, r7, #16
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <MX_GPIO_Init+0xb4>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a26      	ldr	r2, [pc, #152]	; (80022a8 <MX_GPIO_Init+0xb4>)
 800220e:	f043 0320 	orr.w	r3, r3, #32
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <MX_GPIO_Init+0xb4>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002220:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <MX_GPIO_Init+0xb4>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	4a20      	ldr	r2, [pc, #128]	; (80022a8 <MX_GPIO_Init+0xb4>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	6193      	str	r3, [r2, #24]
 800222c:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <MX_GPIO_Init+0xb4>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002238:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <MX_GPIO_Init+0xb4>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a1a      	ldr	r2, [pc, #104]	; (80022a8 <MX_GPIO_Init+0xb4>)
 800223e:	f043 0308 	orr.w	r3, r3, #8
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <MX_GPIO_Init+0xb4>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M0_Pin|M1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	2183      	movs	r1, #131	; 0x83
 8002254:	4815      	ldr	r0, [pc, #84]	; (80022ac <MX_GPIO_Init+0xb8>)
 8002256:	f002 f8b5 	bl	80043c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SDCARD_CS_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800225a:	2200      	movs	r2, #0
 800225c:	f241 0111 	movw	r1, #4113	; 0x1011
 8002260:	4813      	ldr	r0, [pc, #76]	; (80022b0 <MX_GPIO_Init+0xbc>)
 8002262:	f002 f8af 	bl	80043c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M0_Pin M1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|LED2_Pin;
 8002266:	2383      	movs	r3, #131	; 0x83
 8002268:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226a:	2301      	movs	r3, #1
 800226c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2302      	movs	r3, #2
 8002274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002276:	f107 0310 	add.w	r3, r7, #16
 800227a:	4619      	mov	r1, r3
 800227c:	480b      	ldr	r0, [pc, #44]	; (80022ac <MX_GPIO_Init+0xb8>)
 800227e:	f001 ff47 	bl	8004110 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin SDCARD_CS_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SDCARD_CS_Pin|BUZZER_Pin;
 8002282:	f241 0311 	movw	r3, #4113	; 0x1011
 8002286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002288:	2301      	movs	r3, #1
 800228a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2302      	movs	r3, #2
 8002292:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002294:	f107 0310 	add.w	r3, r7, #16
 8002298:	4619      	mov	r1, r3
 800229a:	4805      	ldr	r0, [pc, #20]	; (80022b0 <MX_GPIO_Init+0xbc>)
 800229c:	f001 ff38 	bl	8004110 <HAL_GPIO_Init>

}
 80022a0:	bf00      	nop
 80022a2:	3720      	adds	r7, #32
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40010800 	.word	0x40010800
 80022b0:	40010c00 	.word	0x40010c00

080022b4 <LORA_CONFG>:

/* USER CODE BEGIN 4 */
void LORA_CONFG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4604      	mov	r4, r0
 80022bc:	4608      	mov	r0, r1
 80022be:	4611      	mov	r1, r2
 80022c0:	461a      	mov	r2, r3
 80022c2:	4623      	mov	r3, r4
 80022c4:	71fb      	strb	r3, [r7, #7]
 80022c6:	4603      	mov	r3, r0
 80022c8:	71bb      	strb	r3, [r7, #6]
 80022ca:	460b      	mov	r3, r1
 80022cc:	717b      	strb	r3, [r7, #5]
 80022ce:	4613      	mov	r3, r2
 80022d0:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 80022d2:	2201      	movs	r2, #1
 80022d4:	2101      	movs	r1, #1
 80022d6:	4823      	ldr	r0, [pc, #140]	; (8002364 <LORA_CONFG+0xb0>)
 80022d8:	f002 f874 	bl	80043c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 80022dc:	2201      	movs	r2, #1
 80022de:	2102      	movs	r1, #2
 80022e0:	4820      	ldr	r0, [pc, #128]	; (8002364 <LORA_CONFG+0xb0>)
 80022e2:	f002 f86f 	bl	80043c4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80022e6:	2032      	movs	r0, #50	; 0x32
 80022e8:	f001 fd32 	bl	8003d50 <HAL_Delay>

	char cfg_buff[6] = {0};
 80022ec:	f107 0308 	add.w	r3, r7, #8
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	809a      	strh	r2, [r3, #4]
	enum lora{Transparent, Fixed} mode;
	mode = MODE;
 80022f6:	793b      	ldrb	r3, [r7, #4]
 80022f8:	73fb      	strb	r3, [r7, #15]

	cfg_buff[0] = 0xC0;  // header for saving paramater when power down C0
 80022fa:	23c0      	movs	r3, #192	; 0xc0
 80022fc:	723b      	strb	r3, [r7, #8]
	cfg_buff[1] = ADDH;  // high address
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	727b      	strb	r3, [r7, #9]
	cfg_buff[2] = ADDL;  // low address
 8002302:	79bb      	ldrb	r3, [r7, #6]
 8002304:	72bb      	strb	r3, [r7, #10]
	cfg_buff[3] = 0x19;  // SPED (parity, baud, data rate)
 8002306:	2319      	movs	r3, #25
 8002308:	72fb      	strb	r3, [r7, #11]
	cfg_buff[4] = CHN;   // channel
 800230a:	797b      	ldrb	r3, [r7, #5]
 800230c:	733b      	strb	r3, [r7, #12]

	switch(mode){
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <LORA_CONFG+0x66>
 8002314:	2b01      	cmp	r3, #1
 8002316:	d003      	beq.n	8002320 <LORA_CONFG+0x6c>
 8002318:	e005      	b.n	8002326 <LORA_CONFG+0x72>
	case Transparent:
		cfg_buff[5] = 0x44;  // option
 800231a:	2344      	movs	r3, #68	; 0x44
 800231c:	737b      	strb	r3, [r7, #13]
		break;
 800231e:	e004      	b.n	800232a <LORA_CONFG+0x76>
	case Fixed:
		cfg_buff[5] = 0xC4;  // option
 8002320:	23c4      	movs	r3, #196	; 0xc4
 8002322:	737b      	strb	r3, [r7, #13]
		break;
 8002324:	e001      	b.n	800232a <LORA_CONFG+0x76>
	default:
		cfg_buff[5] = 0x44;  // option
 8002326:	2344      	movs	r3, #68	; 0x44
 8002328:	737b      	strb	r3, [r7, #13]
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) cfg_buff, 6, 1000);
 800232a:	f107 0108 	add.w	r1, r7, #8
 800232e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002332:	2206      	movs	r2, #6
 8002334:	480c      	ldr	r0, [pc, #48]	; (8002368 <LORA_CONFG+0xb4>)
 8002336:	f004 fbf6 	bl	8006b26 <HAL_UART_Transmit>

	HAL_Delay(25);
 800233a:	2019      	movs	r0, #25
 800233c:	f001 fd08 	bl	8003d50 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 8002340:	2200      	movs	r2, #0
 8002342:	2101      	movs	r1, #1
 8002344:	4807      	ldr	r0, [pc, #28]	; (8002364 <LORA_CONFG+0xb0>)
 8002346:	f002 f83d 	bl	80043c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 800234a:	2200      	movs	r2, #0
 800234c:	2102      	movs	r1, #2
 800234e:	4805      	ldr	r0, [pc, #20]	; (8002364 <LORA_CONFG+0xb0>)
 8002350:	f002 f838 	bl	80043c4 <HAL_GPIO_WritePin>
	HAL_Delay(25);
 8002354:	2019      	movs	r0, #25
 8002356:	f001 fcfb 	bl	8003d50 <HAL_Delay>
}
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	bd90      	pop	{r4, r7, pc}
 8002362:	bf00      	nop
 8002364:	40010800 	.word	0x40010800
 8002368:	200005d0 	.word	0x200005d0

0800236c <LORA_READ_PARAMETER>:

void LORA_READ_PARAMETER()
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 8002372:	2201      	movs	r2, #1
 8002374:	2101      	movs	r1, #1
 8002376:	481b      	ldr	r0, [pc, #108]	; (80023e4 <LORA_READ_PARAMETER+0x78>)
 8002378:	f002 f824 	bl	80043c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 800237c:	2201      	movs	r2, #1
 800237e:	2102      	movs	r1, #2
 8002380:	4818      	ldr	r0, [pc, #96]	; (80023e4 <LORA_READ_PARAMETER+0x78>)
 8002382:	f002 f81f 	bl	80043c4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002386:	2032      	movs	r0, #50	; 0x32
 8002388:	f001 fce2 	bl	8003d50 <HAL_Delay>

	char buff_read[6] = {0};
 800238c:	463b      	mov	r3, r7
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	809a      	strh	r2, [r3, #4]
	buff_read[0] = 0xC1;
 8002394:	23c1      	movs	r3, #193	; 0xc1
 8002396:	703b      	strb	r3, [r7, #0]
	buff_read[1] = 0xC1;
 8002398:	23c1      	movs	r3, #193	; 0xc1
 800239a:	707b      	strb	r3, [r7, #1]
	buff_read[2] = 0xC1;
 800239c:	23c1      	movs	r3, #193	; 0xc1
 800239e:	70bb      	strb	r3, [r7, #2]

	HAL_UART_Transmit(&huart2, (uint8_t*) buff_read, 3, 1000);
 80023a0:	4639      	mov	r1, r7
 80023a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a6:	2203      	movs	r2, #3
 80023a8:	480f      	ldr	r0, [pc, #60]	; (80023e8 <LORA_READ_PARAMETER+0x7c>)
 80023aa:	f004 fbbc 	bl	8006b26 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*) buff_read, 6, 1000);
 80023ae:	4639      	mov	r1, r7
 80023b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b4:	2206      	movs	r2, #6
 80023b6:	480c      	ldr	r0, [pc, #48]	; (80023e8 <LORA_READ_PARAMETER+0x7c>)
 80023b8:	f004 fc47 	bl	8006c4a <HAL_UART_Receive>

	HAL_Delay(25);
 80023bc:	2019      	movs	r0, #25
 80023be:	f001 fcc7 	bl	8003d50 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2101      	movs	r1, #1
 80023c6:	4807      	ldr	r0, [pc, #28]	; (80023e4 <LORA_READ_PARAMETER+0x78>)
 80023c8:	f001 fffc 	bl	80043c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2102      	movs	r1, #2
 80023d0:	4804      	ldr	r0, [pc, #16]	; (80023e4 <LORA_READ_PARAMETER+0x78>)
 80023d2:	f001 fff7 	bl	80043c4 <HAL_GPIO_WritePin>
	HAL_Delay(25);
 80023d6:	2019      	movs	r0, #25
 80023d8:	f001 fcba 	bl	8003d50 <HAL_Delay>
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40010800 	.word	0x40010800
 80023e8:	200005d0 	.word	0x200005d0

080023ec <Data_Parsing>:

void Data_Parsing(void) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
	uint8_t first = 0, second = 0, countstr = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	71fb      	strb	r3, [r7, #7]
 80023f6:	2300      	movs	r3, #0
 80023f8:	71bb      	strb	r3, [r7, #6]
 80023fa:	2300      	movs	r3, #0
 80023fc:	717b      	strb	r3, [r7, #5]
	for (uint8_t i = 0; i < sizeof(NEXT_BUFF); i++) {
 80023fe:	2300      	movs	r3, #0
 8002400:	713b      	strb	r3, [r7, #4]
 8002402:	e083      	b.n	800250c <Data_Parsing+0x120>
		if (NEXT_BUFF[i] == ':') {
 8002404:	793b      	ldrb	r3, [r7, #4]
 8002406:	4a4f      	ldr	r2, [pc, #316]	; (8002544 <Data_Parsing+0x158>)
 8002408:	5cd3      	ldrb	r3, [r2, r3]
 800240a:	2b3a      	cmp	r3, #58	; 0x3a
 800240c:	d17b      	bne.n	8002506 <Data_Parsing+0x11a>
			first = second;
 800240e:	79bb      	ldrb	r3, [r7, #6]
 8002410:	71fb      	strb	r3, [r7, #7]
			second = i;
 8002412:	793b      	ldrb	r3, [r7, #4]
 8002414:	71bb      	strb	r3, [r7, #6]
			countstr++;
 8002416:	797b      	ldrb	r3, [r7, #5]
 8002418:	3301      	adds	r3, #1
 800241a:	717b      	strb	r3, [r7, #5]
			uint8_t countstr1 = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	70fb      	strb	r3, [r7, #3]
			for (first++; first < second; first++) {
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	3301      	adds	r3, #1
 8002424:	71fb      	strb	r3, [r7, #7]
 8002426:	e06a      	b.n	80024fe <Data_Parsing+0x112>
				switch (countstr) {
 8002428:	797b      	ldrb	r3, [r7, #5]
 800242a:	3b02      	subs	r3, #2
 800242c:	2b07      	cmp	r3, #7
 800242e:	d863      	bhi.n	80024f8 <Data_Parsing+0x10c>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <Data_Parsing+0x4c>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002459 	.word	0x08002459
 800243c:	0800246d 	.word	0x0800246d
 8002440:	08002481 	.word	0x08002481
 8002444:	08002495 	.word	0x08002495
 8002448:	080024a9 	.word	0x080024a9
 800244c:	080024bd 	.word	0x080024bd
 8002450:	080024d1 	.word	0x080024d1
 8002454:	080024e5 	.word	0x080024e5
				case 2:
					sn[countstr1] = NEXT_BUFF[first];
 8002458:	79fa      	ldrb	r2, [r7, #7]
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	4939      	ldr	r1, [pc, #228]	; (8002544 <Data_Parsing+0x158>)
 800245e:	5c89      	ldrb	r1, [r1, r2]
 8002460:	4a39      	ldr	r2, [pc, #228]	; (8002548 <Data_Parsing+0x15c>)
 8002462:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	3301      	adds	r3, #1
 8002468:	70fb      	strb	r3, [r7, #3]
					break;
 800246a:	e045      	b.n	80024f8 <Data_Parsing+0x10c>
				case 3:
					lat1[countstr1] = NEXT_BUFF[first];
 800246c:	79fa      	ldrb	r2, [r7, #7]
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	4934      	ldr	r1, [pc, #208]	; (8002544 <Data_Parsing+0x158>)
 8002472:	5c89      	ldrb	r1, [r1, r2]
 8002474:	4a35      	ldr	r2, [pc, #212]	; (800254c <Data_Parsing+0x160>)
 8002476:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	3301      	adds	r3, #1
 800247c:	70fb      	strb	r3, [r7, #3]
					break;
 800247e:	e03b      	b.n	80024f8 <Data_Parsing+0x10c>
				case 4:
					lng1[countstr1] = NEXT_BUFF[first];
 8002480:	79fa      	ldrb	r2, [r7, #7]
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	492f      	ldr	r1, [pc, #188]	; (8002544 <Data_Parsing+0x158>)
 8002486:	5c89      	ldrb	r1, [r1, r2]
 8002488:	4a31      	ldr	r2, [pc, #196]	; (8002550 <Data_Parsing+0x164>)
 800248a:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	3301      	adds	r3, #1
 8002490:	70fb      	strb	r3, [r7, #3]
					break;
 8002492:	e031      	b.n	80024f8 <Data_Parsing+0x10c>
				case 5:
					alt[countstr1] = NEXT_BUFF[first];
 8002494:	79fa      	ldrb	r2, [r7, #7]
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	492a      	ldr	r1, [pc, #168]	; (8002544 <Data_Parsing+0x158>)
 800249a:	5c89      	ldrb	r1, [r1, r2]
 800249c:	4a2d      	ldr	r2, [pc, #180]	; (8002554 <Data_Parsing+0x168>)
 800249e:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	3301      	adds	r3, #1
 80024a4:	70fb      	strb	r3, [r7, #3]
					break;
 80024a6:	e027      	b.n	80024f8 <Data_Parsing+0x10c>
				case 6:
					vlc[countstr1] = NEXT_BUFF[first];
 80024a8:	79fa      	ldrb	r2, [r7, #7]
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	4925      	ldr	r1, [pc, #148]	; (8002544 <Data_Parsing+0x158>)
 80024ae:	5c89      	ldrb	r1, [r1, r2]
 80024b0:	4a29      	ldr	r2, [pc, #164]	; (8002558 <Data_Parsing+0x16c>)
 80024b2:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	3301      	adds	r3, #1
 80024b8:	70fb      	strb	r3, [r7, #3]
					break;
 80024ba:	e01d      	b.n	80024f8 <Data_Parsing+0x10c>
				case 7:
					rollpitch[countstr1] = NEXT_BUFF[first];
 80024bc:	79fa      	ldrb	r2, [r7, #7]
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	4920      	ldr	r1, [pc, #128]	; (8002544 <Data_Parsing+0x158>)
 80024c2:	5c89      	ldrb	r1, [r1, r2]
 80024c4:	4a25      	ldr	r2, [pc, #148]	; (800255c <Data_Parsing+0x170>)
 80024c6:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	3301      	adds	r3, #1
 80024cc:	70fb      	strb	r3, [r7, #3]
					break;
 80024ce:	e013      	b.n	80024f8 <Data_Parsing+0x10c>
				case 8:
					apg[countstr1] = NEXT_BUFF[first];
 80024d0:	79fa      	ldrb	r2, [r7, #7]
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	491b      	ldr	r1, [pc, #108]	; (8002544 <Data_Parsing+0x158>)
 80024d6:	5c89      	ldrb	r1, [r1, r2]
 80024d8:	4a21      	ldr	r2, [pc, #132]	; (8002560 <Data_Parsing+0x174>)
 80024da:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	3301      	adds	r3, #1
 80024e0:	70fb      	strb	r3, [r7, #3]
					break;
 80024e2:	e009      	b.n	80024f8 <Data_Parsing+0x10c>
				case 9:
					mn[countstr1] = NEXT_BUFF[first];
 80024e4:	79fa      	ldrb	r2, [r7, #7]
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	4916      	ldr	r1, [pc, #88]	; (8002544 <Data_Parsing+0x158>)
 80024ea:	5c89      	ldrb	r1, [r1, r2]
 80024ec:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <Data_Parsing+0x178>)
 80024ee:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	3301      	adds	r3, #1
 80024f4:	70fb      	strb	r3, [r7, #3]
					break;
 80024f6:	bf00      	nop
			for (first++; first < second; first++) {
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	3301      	adds	r3, #1
 80024fc:	71fb      	strb	r3, [r7, #7]
 80024fe:	79fa      	ldrb	r2, [r7, #7]
 8002500:	79bb      	ldrb	r3, [r7, #6]
 8002502:	429a      	cmp	r2, r3
 8002504:	d390      	bcc.n	8002428 <Data_Parsing+0x3c>
	for (uint8_t i = 0; i < sizeof(NEXT_BUFF); i++) {
 8002506:	793b      	ldrb	r3, [r7, #4]
 8002508:	3301      	adds	r3, #1
 800250a:	713b      	strb	r3, [r7, #4]
 800250c:	793b      	ldrb	r3, [r7, #4]
 800250e:	2b77      	cmp	r3, #119	; 0x77
 8002510:	f67f af78 	bls.w	8002404 <Data_Parsing+0x18>
				}
			}
		}
	}

	ID = NEXT_BUFF[0];
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <Data_Parsing+0x158>)
 8002516:	781a      	ldrb	r2, [r3, #0]
 8002518:	4b13      	ldr	r3, [pc, #76]	; (8002568 <Data_Parsing+0x17c>)
 800251a:	701a      	strb	r2, [r3, #0]

	Data_Convert();
 800251c:	f000 f828 	bl	8002570 <Data_Convert>
	for (uint8_t i = 0; i < sizeof(NEXT_BUFF); i++)
 8002520:	2300      	movs	r3, #0
 8002522:	70bb      	strb	r3, [r7, #2]
 8002524:	e006      	b.n	8002534 <Data_Parsing+0x148>
		NEXT_BUFF[i] = '\0';
 8002526:	78bb      	ldrb	r3, [r7, #2]
 8002528:	4a06      	ldr	r2, [pc, #24]	; (8002544 <Data_Parsing+0x158>)
 800252a:	2100      	movs	r1, #0
 800252c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < sizeof(NEXT_BUFF); i++)
 800252e:	78bb      	ldrb	r3, [r7, #2]
 8002530:	3301      	adds	r3, #1
 8002532:	70bb      	strb	r3, [r7, #2]
 8002534:	78bb      	ldrb	r3, [r7, #2]
 8002536:	2b77      	cmp	r3, #119	; 0x77
 8002538:	d9f5      	bls.n	8002526 <Data_Parsing+0x13a>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000370 	.word	0x20000370
 8002548:	20000284 	.word	0x20000284
 800254c:	20000288 	.word	0x20000288
 8002550:	20000294 	.word	0x20000294
 8002554:	200002a0 	.word	0x200002a0
 8002558:	200002a8 	.word	0x200002a8
 800255c:	200002b0 	.word	0x200002b0
 8002560:	200002c0 	.word	0x200002c0
 8002564:	200002c4 	.word	0x200002c4
 8002568:	20000281 	.word	0x20000281
 800256c:	00000000 	.word	0x00000000

08002570 <Data_Convert>:

void Data_Convert(void) {
 8002570:	b598      	push	{r3, r4, r7, lr}
 8002572:	af00      	add	r7, sp, #0
	finding_maxmin();
 8002574:	f000 f9ee 	bl	8002954 <finding_maxmin>

	if (ID == '0') {
 8002578:	4b47      	ldr	r3, [pc, #284]	; (8002698 <Data_Convert+0x128>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b30      	cmp	r3, #48	; 0x30
 800257e:	d118      	bne.n	80025b2 <Data_Convert+0x42>
		strcpy(lat1, lat1);
		strcpy(lng1, lng1);
		EPH_lat = atof(lat1);
 8002580:	4846      	ldr	r0, [pc, #280]	; (800269c <Data_Convert+0x12c>)
 8002582:	f005 f869 	bl	8007658 <atof>
 8002586:	4603      	mov	r3, r0
 8002588:	460c      	mov	r4, r1
 800258a:	4618      	mov	r0, r3
 800258c:	4621      	mov	r1, r4
 800258e:	f7fe fa9b 	bl	8000ac8 <__aeabi_d2f>
 8002592:	4602      	mov	r2, r0
 8002594:	4b42      	ldr	r3, [pc, #264]	; (80026a0 <Data_Convert+0x130>)
 8002596:	601a      	str	r2, [r3, #0]
		EPH_lng = atof(lng1);
 8002598:	4842      	ldr	r0, [pc, #264]	; (80026a4 <Data_Convert+0x134>)
 800259a:	f005 f85d 	bl	8007658 <atof>
 800259e:	4603      	mov	r3, r0
 80025a0:	460c      	mov	r4, r1
 80025a2:	4618      	mov	r0, r3
 80025a4:	4621      	mov	r1, r4
 80025a6:	f7fe fa8f 	bl	8000ac8 <__aeabi_d2f>
 80025aa:	4602      	mov	r2, r0
 80025ac:	4b3e      	ldr	r3, [pc, #248]	; (80026a8 <Data_Convert+0x138>)
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	e01b      	b.n	80025ea <Data_Convert+0x7a>
	} else if (ID == '1') {
 80025b2:	4b39      	ldr	r3, [pc, #228]	; (8002698 <Data_Convert+0x128>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b31      	cmp	r3, #49	; 0x31
 80025b8:	d117      	bne.n	80025ea <Data_Convert+0x7a>
		strcpy(lat1, lat1);
		strcpy(lng1, lng1);
		PL_lat = atof(lat1);
 80025ba:	4838      	ldr	r0, [pc, #224]	; (800269c <Data_Convert+0x12c>)
 80025bc:	f005 f84c 	bl	8007658 <atof>
 80025c0:	4603      	mov	r3, r0
 80025c2:	460c      	mov	r4, r1
 80025c4:	4618      	mov	r0, r3
 80025c6:	4621      	mov	r1, r4
 80025c8:	f7fe fa7e 	bl	8000ac8 <__aeabi_d2f>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b37      	ldr	r3, [pc, #220]	; (80026ac <Data_Convert+0x13c>)
 80025d0:	601a      	str	r2, [r3, #0]
		PL_lng = atof(lng1);
 80025d2:	4834      	ldr	r0, [pc, #208]	; (80026a4 <Data_Convert+0x134>)
 80025d4:	f005 f840 	bl	8007658 <atof>
 80025d8:	4603      	mov	r3, r0
 80025da:	460c      	mov	r4, r1
 80025dc:	4618      	mov	r0, r3
 80025de:	4621      	mov	r1, r4
 80025e0:	f7fe fa72 	bl	8000ac8 <__aeabi_d2f>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b32      	ldr	r3, [pc, #200]	; (80026b0 <Data_Convert+0x140>)
 80025e8:	601a      	str	r2, [r3, #0]
	}

	if(vlcf < 0){
 80025ea:	4b32      	ldr	r3, [pc, #200]	; (80026b4 <Data_Convert+0x144>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fd64 	bl	80010c0 <__aeabi_fcmplt>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <Data_Convert+0xa2>
		vlcf *= -1;
 80025fe:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <Data_Convert+0x144>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002606:	4a2b      	ldr	r2, [pc, #172]	; (80026b4 <Data_Convert+0x144>)
 8002608:	6013      	str	r3, [r2, #0]
		fall = 1;
 800260a:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <Data_Convert+0x148>)
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e002      	b.n	8002618 <Data_Convert+0xa8>
	}else fall = 0;
 8002612:	4b29      	ldr	r3, [pc, #164]	; (80026b8 <Data_Convert+0x148>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]

	speedometer = 336 + (int16_t)((vlcf / 300.0) * 225);
 8002618:	4b26      	ldr	r3, [pc, #152]	; (80026b4 <Data_Convert+0x144>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fd ff03 	bl	8000428 <__aeabi_f2d>
 8002622:	a319      	add	r3, pc, #100	; (adr r3, 8002688 <Data_Convert+0x118>)
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	f7fe f880 	bl	800072c <__aeabi_ddiv>
 800262c:	4603      	mov	r3, r0
 800262e:	460c      	mov	r4, r1
 8002630:	4618      	mov	r0, r3
 8002632:	4621      	mov	r1, r4
 8002634:	a316      	add	r3, pc, #88	; (adr r3, 8002690 <Data_Convert+0x120>)
 8002636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263a:	f7fd ff4d 	bl	80004d8 <__aeabi_dmul>
 800263e:	4603      	mov	r3, r0
 8002640:	460c      	mov	r4, r1
 8002642:	4618      	mov	r0, r3
 8002644:	4621      	mov	r1, r4
 8002646:	f7fe f9f7 	bl	8000a38 <__aeabi_d2iz>
 800264a:	4603      	mov	r3, r0
 800264c:	b21b      	sxth	r3, r3
 800264e:	b29b      	uxth	r3, r3
 8002650:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002654:	b29b      	uxth	r3, r3
 8002656:	b21a      	sxth	r2, r3
 8002658:	4b18      	ldr	r3, [pc, #96]	; (80026bc <Data_Convert+0x14c>)
 800265a:	801a      	strh	r2, [r3, #0]
	if(speedometer > 360) speedometer -= 360;
 800265c:	4b17      	ldr	r3, [pc, #92]	; (80026bc <Data_Convert+0x14c>)
 800265e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002662:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002666:	dd09      	ble.n	800267c <Data_Convert+0x10c>
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <Data_Convert+0x14c>)
 800266a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800266e:	b29b      	uxth	r3, r3
 8002670:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002674:	b29b      	uxth	r3, r3
 8002676:	b21a      	sxth	r2, r3
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <Data_Convert+0x14c>)
 800267a:	801a      	strh	r2, [r3, #0]

	Data_ToNextion();
 800267c:	f000 f820 	bl	80026c0 <Data_ToNextion>
}
 8002680:	bf00      	nop
 8002682:	bd98      	pop	{r3, r4, r7, pc}
 8002684:	f3af 8000 	nop.w
 8002688:	00000000 	.word	0x00000000
 800268c:	4072c000 	.word	0x4072c000
 8002690:	00000000 	.word	0x00000000
 8002694:	406c2000 	.word	0x406c2000
 8002698:	20000281 	.word	0x20000281
 800269c:	20000288 	.word	0x20000288
 80026a0:	20000244 	.word	0x20000244
 80026a4:	20000294 	.word	0x20000294
 80026a8:	20000248 	.word	0x20000248
 80026ac:	2000024c 	.word	0x2000024c
 80026b0:	20000250 	.word	0x20000250
 80026b4:	200002cc 	.word	0x200002cc
 80026b8:	200002c5 	.word	0x200002c5
 80026bc:	200002f4 	.word	0x200002f4

080026c0 <Data_ToNextion>:

void Data_ToNextion(void) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0

	if (EPH_lat != .0 && EPH_lng != .0) {	// EPHEMERISH son enlem, boylam verileri
 80026c4:	4b72      	ldr	r3, [pc, #456]	; (8002890 <Data_ToNextion+0x1d0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f04f 0100 	mov.w	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fced 	bl	80010ac <__aeabi_fcmpeq>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d111      	bne.n	80026fc <Data_ToNextion+0x3c>
 80026d8:	4b6e      	ldr	r3, [pc, #440]	; (8002894 <Data_ToNextion+0x1d4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f04f 0100 	mov.w	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fe fce3 	bl	80010ac <__aeabi_fcmpeq>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d107      	bne.n	80026fc <Data_ToNextion+0x3c>
		NXT_SEND_TXTBX("page3.t34.txt", lat1);
 80026ec:	496a      	ldr	r1, [pc, #424]	; (8002898 <Data_ToNextion+0x1d8>)
 80026ee:	486b      	ldr	r0, [pc, #428]	; (800289c <Data_ToNextion+0x1dc>)
 80026f0:	f000 fd32 	bl	8003158 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page3.t35.txt", lng1);
 80026f4:	496a      	ldr	r1, [pc, #424]	; (80028a0 <Data_ToNextion+0x1e0>)
 80026f6:	486b      	ldr	r0, [pc, #428]	; (80028a4 <Data_ToNextion+0x1e4>)
 80026f8:	f000 fd2e 	bl	8003158 <NXT_SEND_TXTBX>
	}
	if (PL_lat != .0 && PL_lng != .0) {		// PAYLOAD son enlem, boylam verileri
 80026fc:	4b6a      	ldr	r3, [pc, #424]	; (80028a8 <Data_ToNextion+0x1e8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f04f 0100 	mov.w	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fcd1 	bl	80010ac <__aeabi_fcmpeq>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d111      	bne.n	8002734 <Data_ToNextion+0x74>
 8002710:	4b66      	ldr	r3, [pc, #408]	; (80028ac <Data_ToNextion+0x1ec>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f04f 0100 	mov.w	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe fcc7 	bl	80010ac <__aeabi_fcmpeq>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d107      	bne.n	8002734 <Data_ToNextion+0x74>
		NXT_SEND_TXTBX("page3.t36.txt", lat1);
 8002724:	495c      	ldr	r1, [pc, #368]	; (8002898 <Data_ToNextion+0x1d8>)
 8002726:	4862      	ldr	r0, [pc, #392]	; (80028b0 <Data_ToNextion+0x1f0>)
 8002728:	f000 fd16 	bl	8003158 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page3.t37.txt", lng1);
 800272c:	495c      	ldr	r1, [pc, #368]	; (80028a0 <Data_ToNextion+0x1e0>)
 800272e:	4861      	ldr	r0, [pc, #388]	; (80028b4 <Data_ToNextion+0x1f4>)
 8002730:	f000 fd12 	bl	8003158 <NXT_SEND_TXTBX>
	}

	if (ID == '1') {
 8002734:	4b60      	ldr	r3, [pc, #384]	; (80028b8 <Data_ToNextion+0x1f8>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b31      	cmp	r3, #49	; 0x31
 800273a:	d147      	bne.n	80027cc <Data_ToNextion+0x10c>
		NXT_SEND_TXTBX("page1.t14.txt", lat1);
 800273c:	4956      	ldr	r1, [pc, #344]	; (8002898 <Data_ToNextion+0x1d8>)
 800273e:	485f      	ldr	r0, [pc, #380]	; (80028bc <Data_ToNextion+0x1fc>)
 8002740:	f000 fd0a 	bl	8003158 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page1.t15.txt", lng1);
 8002744:	4956      	ldr	r1, [pc, #344]	; (80028a0 <Data_ToNextion+0x1e0>)
 8002746:	485e      	ldr	r0, [pc, #376]	; (80028c0 <Data_ToNextion+0x200>)
 8002748:	f000 fd06 	bl	8003158 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page1.t16.txt", alt);
 800274c:	495d      	ldr	r1, [pc, #372]	; (80028c4 <Data_ToNextion+0x204>)
 800274e:	485e      	ldr	r0, [pc, #376]	; (80028c8 <Data_ToNextion+0x208>)
 8002750:	f000 fd02 	bl	8003158 <NXT_SEND_TXTBX>

		NXT_SEND_SVAL("page3.x6.val", PLmax_vlci);
 8002754:	4b5d      	ldr	r3, [pc, #372]	; (80028cc <Data_ToNextion+0x20c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4619      	mov	r1, r3
 800275a:	485d      	ldr	r0, [pc, #372]	; (80028d0 <Data_ToNextion+0x210>)
 800275c:	f000 fc4c 	bl	8002ff8 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x7.val", PLmin_vlci);
 8002760:	4b5c      	ldr	r3, [pc, #368]	; (80028d4 <Data_ToNextion+0x214>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4619      	mov	r1, r3
 8002766:	485c      	ldr	r0, [pc, #368]	; (80028d8 <Data_ToNextion+0x218>)
 8002768:	f000 fc46 	bl	8002ff8 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x5.val", PLmax_alti);
 800276c:	4b5b      	ldr	r3, [pc, #364]	; (80028dc <Data_ToNextion+0x21c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4619      	mov	r1, r3
 8002772:	485b      	ldr	r0, [pc, #364]	; (80028e0 <Data_ToNextion+0x220>)
 8002774:	f000 fc40 	bl	8002ff8 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x9.val", PLmin_alti);
 8002778:	4b5a      	ldr	r3, [pc, #360]	; (80028e4 <Data_ToNextion+0x224>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	485a      	ldr	r0, [pc, #360]	; (80028e8 <Data_ToNextion+0x228>)
 8002780:	f000 fc3a 	bl	8002ff8 <NXT_SEND_SVAL>

		NXT_SEND_SVAL("page1.c1.val", 1);
 8002784:	2101      	movs	r1, #1
 8002786:	4859      	ldr	r0, [pc, #356]	; (80028ec <Data_ToNextion+0x22c>)
 8002788:	f000 fc36 	bl	8002ff8 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page1.c0.val", 0);
 800278c:	2100      	movs	r1, #0
 800278e:	4858      	ldr	r0, [pc, #352]	; (80028f0 <Data_ToNextion+0x230>)
 8002790:	f000 fc32 	bl	8002ff8 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page1.z3.val", speedometer);
 8002794:	4b57      	ldr	r3, [pc, #348]	; (80028f4 <Data_ToNextion+0x234>)
 8002796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800279a:	4619      	mov	r1, r3
 800279c:	4856      	ldr	r0, [pc, #344]	; (80028f8 <Data_ToNextion+0x238>)
 800279e:	f000 fc2b 	bl	8002ff8 <NXT_SEND_SVAL>
		if (fall == 1) {
 80027a2:	4b56      	ldr	r3, [pc, #344]	; (80028fc <Data_ToNextion+0x23c>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d104      	bne.n	80027b4 <Data_ToNextion+0xf4>
			NXT_SEND_SVAL("page1.z3.pco", 31);
 80027aa:	211f      	movs	r1, #31
 80027ac:	4854      	ldr	r0, [pc, #336]	; (8002900 <Data_ToNextion+0x240>)
 80027ae:	f000 fc23 	bl	8002ff8 <NXT_SEND_SVAL>
 80027b2:	e004      	b.n	80027be <Data_ToNextion+0xfe>
		} else {
			NXT_SEND_SVAL("page1.z3.pco", 63488);
 80027b4:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80027b8:	4851      	ldr	r0, [pc, #324]	; (8002900 <Data_ToNextion+0x240>)
 80027ba:	f000 fc1d 	bl	8002ff8 <NXT_SEND_SVAL>
		}

		NXT_SEND_SVAL("page1.x1.val", vlci);
 80027be:	4b51      	ldr	r3, [pc, #324]	; (8002904 <Data_ToNextion+0x244>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4619      	mov	r1, r3
 80027c4:	4850      	ldr	r0, [pc, #320]	; (8002908 <Data_ToNextion+0x248>)
 80027c6:	f000 fc17 	bl	8002ff8 <NXT_SEND_SVAL>
 80027ca:	e05c      	b.n	8002886 <Data_ToNextion+0x1c6>

	} else if (ID == '0') {
 80027cc:	4b3a      	ldr	r3, [pc, #232]	; (80028b8 <Data_ToNextion+0x1f8>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b30      	cmp	r3, #48	; 0x30
 80027d2:	d158      	bne.n	8002886 <Data_ToNextion+0x1c6>
		NXT_SEND_TXTBX("page1.t8.txt", lat1);
 80027d4:	4930      	ldr	r1, [pc, #192]	; (8002898 <Data_ToNextion+0x1d8>)
 80027d6:	484d      	ldr	r0, [pc, #308]	; (800290c <Data_ToNextion+0x24c>)
 80027d8:	f000 fcbe 	bl	8003158 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page1.t9.txt", lng1);
 80027dc:	4930      	ldr	r1, [pc, #192]	; (80028a0 <Data_ToNextion+0x1e0>)
 80027de:	484c      	ldr	r0, [pc, #304]	; (8002910 <Data_ToNextion+0x250>)
 80027e0:	f000 fcba 	bl	8003158 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page1.t13.txt", alt);
 80027e4:	4937      	ldr	r1, [pc, #220]	; (80028c4 <Data_ToNextion+0x204>)
 80027e6:	484b      	ldr	r0, [pc, #300]	; (8002914 <Data_ToNextion+0x254>)
 80027e8:	f000 fcb6 	bl	8003158 <NXT_SEND_TXTBX>

		NXT_SEND_SVAL("page3.x3.val", EPHmax_vlci);
 80027ec:	4b4a      	ldr	r3, [pc, #296]	; (8002918 <Data_ToNextion+0x258>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4619      	mov	r1, r3
 80027f2:	484a      	ldr	r0, [pc, #296]	; (800291c <Data_ToNextion+0x25c>)
 80027f4:	f000 fc00 	bl	8002ff8 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x4.val", EPHmin_vlci);
 80027f8:	4b49      	ldr	r3, [pc, #292]	; (8002920 <Data_ToNextion+0x260>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4619      	mov	r1, r3
 80027fe:	4849      	ldr	r0, [pc, #292]	; (8002924 <Data_ToNextion+0x264>)
 8002800:	f000 fbfa 	bl	8002ff8 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x2.val", EPHmax_alti);
 8002804:	4b48      	ldr	r3, [pc, #288]	; (8002928 <Data_ToNextion+0x268>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4619      	mov	r1, r3
 800280a:	4848      	ldr	r0, [pc, #288]	; (800292c <Data_ToNextion+0x26c>)
 800280c:	f000 fbf4 	bl	8002ff8 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x8.val", EPHmin_alti);  // PLmin_alti  EPHmin_alti
 8002810:	4b47      	ldr	r3, [pc, #284]	; (8002930 <Data_ToNextion+0x270>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4619      	mov	r1, r3
 8002816:	4847      	ldr	r0, [pc, #284]	; (8002934 <Data_ToNextion+0x274>)
 8002818:	f000 fbee 	bl	8002ff8 <NXT_SEND_SVAL>

		NXT_SEND_SVAL("page1.c1.val", 0);
 800281c:	2100      	movs	r1, #0
 800281e:	4833      	ldr	r0, [pc, #204]	; (80028ec <Data_ToNextion+0x22c>)
 8002820:	f000 fbea 	bl	8002ff8 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page1.c0.val", 1);
 8002824:	2101      	movs	r1, #1
 8002826:	4832      	ldr	r0, [pc, #200]	; (80028f0 <Data_ToNextion+0x230>)
 8002828:	f000 fbe6 	bl	8002ff8 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page1.z4.val", speedometer);
 800282c:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <Data_ToNextion+0x234>)
 800282e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002832:	4619      	mov	r1, r3
 8002834:	4840      	ldr	r0, [pc, #256]	; (8002938 <Data_ToNextion+0x278>)
 8002836:	f000 fbdf 	bl	8002ff8 <NXT_SEND_SVAL>
		if (fall == 1) {
 800283a:	4b30      	ldr	r3, [pc, #192]	; (80028fc <Data_ToNextion+0x23c>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d104      	bne.n	800284c <Data_ToNextion+0x18c>
			NXT_SEND_SVAL("page1.z4.pco", 31);
 8002842:	211f      	movs	r1, #31
 8002844:	483d      	ldr	r0, [pc, #244]	; (800293c <Data_ToNextion+0x27c>)
 8002846:	f000 fbd7 	bl	8002ff8 <NXT_SEND_SVAL>
 800284a:	e004      	b.n	8002856 <Data_ToNextion+0x196>
		} else {
			NXT_SEND_SVAL("page1.z4.pco", 63488);
 800284c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002850:	483a      	ldr	r0, [pc, #232]	; (800293c <Data_ToNextion+0x27c>)
 8002852:	f000 fbd1 	bl	8002ff8 <NXT_SEND_SVAL>
		}

		NXT_SEND_SVAL("page1.x0.val", vlci);
 8002856:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <Data_ToNextion+0x244>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4619      	mov	r1, r3
 800285c:	4838      	ldr	r0, [pc, #224]	; (8002940 <Data_ToNextion+0x280>)
 800285e:	f000 fbcb 	bl	8002ff8 <NXT_SEND_SVAL>

		if (*apg == '1') {
 8002862:	4b38      	ldr	r3, [pc, #224]	; (8002944 <Data_ToNextion+0x284>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b31      	cmp	r3, #49	; 0x31
 8002868:	d104      	bne.n	8002874 <Data_ToNextion+0x1b4>
			NXT_SEND_SVAL("page1.t10.bco", 63488);
 800286a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800286e:	4836      	ldr	r0, [pc, #216]	; (8002948 <Data_ToNextion+0x288>)
 8002870:	f000 fbc2 	bl	8002ff8 <NXT_SEND_SVAL>
		}
		if (*mn == '1') {
 8002874:	4b35      	ldr	r3, [pc, #212]	; (800294c <Data_ToNextion+0x28c>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b31      	cmp	r3, #49	; 0x31
 800287a:	d104      	bne.n	8002886 <Data_ToNextion+0x1c6>
			NXT_SEND_SVAL("page1.t11.bco", 63488);
 800287c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002880:	4833      	ldr	r0, [pc, #204]	; (8002950 <Data_ToNextion+0x290>)
 8002882:	f000 fbb9 	bl	8002ff8 <NXT_SEND_SVAL>
		}

	}

	ID = '\0';
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <Data_ToNextion+0x1f8>)
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]

}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000244 	.word	0x20000244
 8002894:	20000248 	.word	0x20000248
 8002898:	20000288 	.word	0x20000288
 800289c:	0800c7ac 	.word	0x0800c7ac
 80028a0:	20000294 	.word	0x20000294
 80028a4:	0800c7bc 	.word	0x0800c7bc
 80028a8:	2000024c 	.word	0x2000024c
 80028ac:	20000250 	.word	0x20000250
 80028b0:	0800c7cc 	.word	0x0800c7cc
 80028b4:	0800c7dc 	.word	0x0800c7dc
 80028b8:	20000281 	.word	0x20000281
 80028bc:	0800c7ec 	.word	0x0800c7ec
 80028c0:	0800c7fc 	.word	0x0800c7fc
 80028c4:	200002a0 	.word	0x200002a0
 80028c8:	0800c80c 	.word	0x0800c80c
 80028cc:	200002ec 	.word	0x200002ec
 80028d0:	0800c81c 	.word	0x0800c81c
 80028d4:	200002f0 	.word	0x200002f0
 80028d8:	0800c82c 	.word	0x0800c82c
 80028dc:	200002e8 	.word	0x200002e8
 80028e0:	0800c83c 	.word	0x0800c83c
 80028e4:	20000010 	.word	0x20000010
 80028e8:	0800c84c 	.word	0x0800c84c
 80028ec:	0800c85c 	.word	0x0800c85c
 80028f0:	0800c86c 	.word	0x0800c86c
 80028f4:	200002f4 	.word	0x200002f4
 80028f8:	0800c87c 	.word	0x0800c87c
 80028fc:	200002c5 	.word	0x200002c5
 8002900:	0800c88c 	.word	0x0800c88c
 8002904:	200002d8 	.word	0x200002d8
 8002908:	0800c89c 	.word	0x0800c89c
 800290c:	0800c8ac 	.word	0x0800c8ac
 8002910:	0800c8bc 	.word	0x0800c8bc
 8002914:	0800c8cc 	.word	0x0800c8cc
 8002918:	200002e0 	.word	0x200002e0
 800291c:	0800c8dc 	.word	0x0800c8dc
 8002920:	200002e4 	.word	0x200002e4
 8002924:	0800c8ec 	.word	0x0800c8ec
 8002928:	200002dc 	.word	0x200002dc
 800292c:	0800c8fc 	.word	0x0800c8fc
 8002930:	20000014 	.word	0x20000014
 8002934:	0800c90c 	.word	0x0800c90c
 8002938:	0800c91c 	.word	0x0800c91c
 800293c:	0800c92c 	.word	0x0800c92c
 8002940:	0800c93c 	.word	0x0800c93c
 8002944:	200002c0 	.word	0x200002c0
 8002948:	0800c94c 	.word	0x0800c94c
 800294c:	200002c4 	.word	0x200002c4
 8002950:	0800c95c 	.word	0x0800c95c

08002954 <finding_maxmin>:

void finding_maxmin(void) {
 8002954:	b598      	push	{r3, r4, r7, lr}
 8002956:	af00      	add	r7, sp, #0
	strcpy(vlc, vlc);
	vlcf = atof(vlc);
 8002958:	484c      	ldr	r0, [pc, #304]	; (8002a8c <finding_maxmin+0x138>)
 800295a:	f004 fe7d 	bl	8007658 <atof>
 800295e:	4603      	mov	r3, r0
 8002960:	460c      	mov	r4, r1
 8002962:	4618      	mov	r0, r3
 8002964:	4621      	mov	r1, r4
 8002966:	f7fe f8af 	bl	8000ac8 <__aeabi_d2f>
 800296a:	4602      	mov	r2, r0
 800296c:	4b48      	ldr	r3, [pc, #288]	; (8002a90 <finding_maxmin+0x13c>)
 800296e:	601a      	str	r2, [r3, #0]
	vlci = (int) (vlcf * 100.0);
 8002970:	4b47      	ldr	r3, [pc, #284]	; (8002a90 <finding_maxmin+0x13c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7fd fd57 	bl	8000428 <__aeabi_f2d>
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	4b45      	ldr	r3, [pc, #276]	; (8002a94 <finding_maxmin+0x140>)
 8002980:	f7fd fdaa 	bl	80004d8 <__aeabi_dmul>
 8002984:	4603      	mov	r3, r0
 8002986:	460c      	mov	r4, r1
 8002988:	4618      	mov	r0, r3
 800298a:	4621      	mov	r1, r4
 800298c:	f7fe f854 	bl	8000a38 <__aeabi_d2iz>
 8002990:	4602      	mov	r2, r0
 8002992:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <finding_maxmin+0x144>)
 8002994:	601a      	str	r2, [r3, #0]
	strcpy(alt, alt);
	altf = atof(alt);
 8002996:	4841      	ldr	r0, [pc, #260]	; (8002a9c <finding_maxmin+0x148>)
 8002998:	f004 fe5e 	bl	8007658 <atof>
 800299c:	4603      	mov	r3, r0
 800299e:	460c      	mov	r4, r1
 80029a0:	4618      	mov	r0, r3
 80029a2:	4621      	mov	r1, r4
 80029a4:	f7fe f890 	bl	8000ac8 <__aeabi_d2f>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <finding_maxmin+0x14c>)
 80029ac:	601a      	str	r2, [r3, #0]
	alti = (int) (altf * 100.0);
 80029ae:	4b3c      	ldr	r3, [pc, #240]	; (8002aa0 <finding_maxmin+0x14c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fd fd38 	bl	8000428 <__aeabi_f2d>
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	4b35      	ldr	r3, [pc, #212]	; (8002a94 <finding_maxmin+0x140>)
 80029be:	f7fd fd8b 	bl	80004d8 <__aeabi_dmul>
 80029c2:	4603      	mov	r3, r0
 80029c4:	460c      	mov	r4, r1
 80029c6:	4618      	mov	r0, r3
 80029c8:	4621      	mov	r1, r4
 80029ca:	f7fe f835 	bl	8000a38 <__aeabi_d2iz>
 80029ce:	4602      	mov	r2, r0
 80029d0:	4b34      	ldr	r3, [pc, #208]	; (8002aa4 <finding_maxmin+0x150>)
 80029d2:	601a      	str	r2, [r3, #0]
	if (ID == '0') {
 80029d4:	4b34      	ldr	r3, [pc, #208]	; (8002aa8 <finding_maxmin+0x154>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b30      	cmp	r3, #48	; 0x30
 80029da:	d128      	bne.n	8002a2e <finding_maxmin+0xda>
		if (vlci > EPHmax_vlci)
 80029dc:	4b2e      	ldr	r3, [pc, #184]	; (8002a98 <finding_maxmin+0x144>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4b32      	ldr	r3, [pc, #200]	; (8002aac <finding_maxmin+0x158>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	dd03      	ble.n	80029f0 <finding_maxmin+0x9c>
			EPHmax_vlci = vlci;
 80029e8:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <finding_maxmin+0x144>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a2f      	ldr	r2, [pc, #188]	; (8002aac <finding_maxmin+0x158>)
 80029ee:	6013      	str	r3, [r2, #0]
		if (vlci < EPHmin_vlci)
 80029f0:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <finding_maxmin+0x144>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <finding_maxmin+0x15c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	da03      	bge.n	8002a04 <finding_maxmin+0xb0>
			EPHmin_vlci = vlci;
 80029fc:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <finding_maxmin+0x144>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a2b      	ldr	r2, [pc, #172]	; (8002ab0 <finding_maxmin+0x15c>)
 8002a02:	6013      	str	r3, [r2, #0]
		if (alti > EPHmax_alti)
 8002a04:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <finding_maxmin+0x150>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b2a      	ldr	r3, [pc, #168]	; (8002ab4 <finding_maxmin+0x160>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	dd03      	ble.n	8002a18 <finding_maxmin+0xc4>
			EPHmax_alti = alti;
 8002a10:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <finding_maxmin+0x150>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a27      	ldr	r2, [pc, #156]	; (8002ab4 <finding_maxmin+0x160>)
 8002a16:	6013      	str	r3, [r2, #0]
		if (alti < EPHmin_alti)
 8002a18:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <finding_maxmin+0x150>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <finding_maxmin+0x164>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	da30      	bge.n	8002a86 <finding_maxmin+0x132>
			EPHmin_alti = alti;
 8002a24:	4b1f      	ldr	r3, [pc, #124]	; (8002aa4 <finding_maxmin+0x150>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a23      	ldr	r2, [pc, #140]	; (8002ab8 <finding_maxmin+0x164>)
 8002a2a:	6013      	str	r3, [r2, #0]
		if (alti > PLmax_alti)
			PLmax_alti = alti;
		if (alti < PLmin_alti)
			PLmin_alti = alti;
	}
}
 8002a2c:	e02b      	b.n	8002a86 <finding_maxmin+0x132>
	else if (ID == '1') {
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <finding_maxmin+0x154>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b31      	cmp	r3, #49	; 0x31
 8002a34:	d127      	bne.n	8002a86 <finding_maxmin+0x132>
		if (vlci > PLmax_vlci)
 8002a36:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <finding_maxmin+0x144>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b20      	ldr	r3, [pc, #128]	; (8002abc <finding_maxmin+0x168>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	dd03      	ble.n	8002a4a <finding_maxmin+0xf6>
			PLmax_vlci = vlci;
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <finding_maxmin+0x144>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <finding_maxmin+0x168>)
 8002a48:	6013      	str	r3, [r2, #0]
		if (vlci < PLmin_vlci)
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <finding_maxmin+0x144>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <finding_maxmin+0x16c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	da03      	bge.n	8002a5e <finding_maxmin+0x10a>
			PLmin_vlci = vlci;
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <finding_maxmin+0x144>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a19      	ldr	r2, [pc, #100]	; (8002ac0 <finding_maxmin+0x16c>)
 8002a5c:	6013      	str	r3, [r2, #0]
		if (alti > PLmax_alti)
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <finding_maxmin+0x150>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <finding_maxmin+0x170>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	dd03      	ble.n	8002a72 <finding_maxmin+0x11e>
			PLmax_alti = alti;
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <finding_maxmin+0x150>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <finding_maxmin+0x170>)
 8002a70:	6013      	str	r3, [r2, #0]
		if (alti < PLmin_alti)
 8002a72:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <finding_maxmin+0x150>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <finding_maxmin+0x174>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	da03      	bge.n	8002a86 <finding_maxmin+0x132>
			PLmin_alti = alti;
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <finding_maxmin+0x150>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <finding_maxmin+0x174>)
 8002a84:	6013      	str	r3, [r2, #0]
}
 8002a86:	bf00      	nop
 8002a88:	bd98      	pop	{r3, r4, r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200002a8 	.word	0x200002a8
 8002a90:	200002cc 	.word	0x200002cc
 8002a94:	40590000 	.word	0x40590000
 8002a98:	200002d8 	.word	0x200002d8
 8002a9c:	200002a0 	.word	0x200002a0
 8002aa0:	200002d0 	.word	0x200002d0
 8002aa4:	200002d4 	.word	0x200002d4
 8002aa8:	20000281 	.word	0x20000281
 8002aac:	200002e0 	.word	0x200002e0
 8002ab0:	200002e4 	.word	0x200002e4
 8002ab4:	200002dc 	.word	0x200002dc
 8002ab8:	20000014 	.word	0x20000014
 8002abc:	200002ec 	.word	0x200002ec
 8002ac0:	200002f0 	.word	0x200002f0
 8002ac4:	200002e8 	.word	0x200002e8
 8002ac8:	20000010 	.word	0x20000010
 8002acc:	00000000 	.word	0x00000000

08002ad0 <deg2rad>:

double deg2rad(float deg) {
 8002ad0:	b5b0      	push	{r4, r5, r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	double pi = 2 * acos(0.0);
 8002ad8:	a40f      	add	r4, pc, #60	; (adr r4, 8002b18 <deg2rad+0x48>)
 8002ada:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002ade:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return deg * (pi / 180);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fd fca0 	bl	8000428 <__aeabi_f2d>
 8002ae8:	4604      	mov	r4, r0
 8002aea:	460d      	mov	r5, r1
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <deg2rad+0x50>)
 8002af2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002af6:	f7fd fe19 	bl	800072c <__aeabi_ddiv>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4620      	mov	r0, r4
 8002b00:	4629      	mov	r1, r5
 8002b02:	f7fd fce9 	bl	80004d8 <__aeabi_dmul>
 8002b06:	4603      	mov	r3, r0
 8002b08:	460c      	mov	r4, r1
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bdb0      	pop	{r4, r5, r7, pc}
 8002b14:	f3af 8000 	nop.w
 8002b18:	54442d18 	.word	0x54442d18
 8002b1c:	400921fb 	.word	0x400921fb
 8002b20:	40668000 	.word	0x40668000
 8002b24:	00000000 	.word	0x00000000

08002b28 <rad2deg>:

double rad2deg(float rad)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
    double pi = 2 * acos(0.0);
 8002b30:	a40b      	add	r4, pc, #44	; (adr r4, 8002b60 <rad2deg+0x38>)
 8002b32:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002b36:	e9c7 3402 	strd	r3, r4, [r7, #8]
    return (rad * 180 / pi);
 8002b3a:	490b      	ldr	r1, [pc, #44]	; (8002b68 <rad2deg+0x40>)
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7fe f921 	bl	8000d84 <__aeabi_fmul>
 8002b42:	4603      	mov	r3, r0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd fc6f 	bl	8000428 <__aeabi_f2d>
 8002b4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b4e:	f7fd fded 	bl	800072c <__aeabi_ddiv>
 8002b52:	4603      	mov	r3, r0
 8002b54:	460c      	mov	r4, r1
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	4621      	mov	r1, r4
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd90      	pop	{r4, r7, pc}
 8002b60:	54442d18 	.word	0x54442d18
 8002b64:	400921fb 	.word	0x400921fb
 8002b68:	43340000 	.word	0x43340000

08002b6c <Cal_distGPS>:

float Cal_distGPS(float lat, float lng, float ground_latt, float ground_lngg) {
 8002b6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	603b      	str	r3, [r7, #0]
	dLat = deg2rad(lat - ground_latt); // deg2rad below
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f7fd fff6 	bl	8000b70 <__aeabi_fsub>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ffa2 	bl	8002ad0 <deg2rad>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	460c      	mov	r4, r1
 8002b90:	4618      	mov	r0, r3
 8002b92:	4621      	mov	r1, r4
 8002b94:	f7fd ff98 	bl	8000ac8 <__aeabi_d2f>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b77      	ldr	r3, [pc, #476]	; (8002d78 <Cal_distGPS+0x20c>)
 8002b9c:	601a      	str	r2, [r3, #0]
	dLon = deg2rad(lng - ground_lngg);
 8002b9e:	6839      	ldr	r1, [r7, #0]
 8002ba0:	68b8      	ldr	r0, [r7, #8]
 8002ba2:	f7fd ffe5 	bl	8000b70 <__aeabi_fsub>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff91 	bl	8002ad0 <deg2rad>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	460c      	mov	r4, r1
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	f7fd ff87 	bl	8000ac8 <__aeabi_d2f>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	4b6f      	ldr	r3, [pc, #444]	; (8002d7c <Cal_distGPS+0x210>)
 8002bbe:	601a      	str	r2, [r3, #0]
	a = sin(dLat / 2) * sin(dLat / 2)
 8002bc0:	4b6d      	ldr	r3, [pc, #436]	; (8002d78 <Cal_distGPS+0x20c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe f98f 	bl	8000eec <__aeabi_fdiv>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fc29 	bl	8000428 <__aeabi_f2d>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	460c      	mov	r4, r1
 8002bda:	4618      	mov	r0, r3
 8002bdc:	4621      	mov	r1, r4
 8002bde:	f008 f86f 	bl	800acc0 <sin>
 8002be2:	4604      	mov	r4, r0
 8002be4:	460d      	mov	r5, r1
 8002be6:	4b64      	ldr	r3, [pc, #400]	; (8002d78 <Cal_distGPS+0x20c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe f97c 	bl	8000eec <__aeabi_fdiv>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fd fc16 	bl	8000428 <__aeabi_f2d>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	f008 f85c 	bl	800acc0 <sin>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	4629      	mov	r1, r5
 8002c10:	f7fd fc62 	bl	80004d8 <__aeabi_dmul>
 8002c14:	4603      	mov	r3, r0
 8002c16:	460c      	mov	r4, r1
 8002c18:	4625      	mov	r5, r4
 8002c1a:	461c      	mov	r4, r3
			+ cos(deg2rad(lat)) * cos(deg2rad(ground_latt)) * sin(dLon / 2)
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f7ff ff57 	bl	8002ad0 <deg2rad>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f008 f813 	bl	800ac54 <cos>
 8002c2e:	4680      	mov	r8, r0
 8002c30:	4689      	mov	r9, r1
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ff4c 	bl	8002ad0 <deg2rad>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f008 f808 	bl	800ac54 <cos>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4640      	mov	r0, r8
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	f7fd fc44 	bl	80004d8 <__aeabi_dmul>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4690      	mov	r8, r2
 8002c56:	4699      	mov	r9, r3
 8002c58:	4b48      	ldr	r3, [pc, #288]	; (8002d7c <Cal_distGPS+0x210>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe f943 	bl	8000eec <__aeabi_fdiv>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fbdd 	bl	8000428 <__aeabi_f2d>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	f008 f823 	bl	800acc0 <sin>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4640      	mov	r0, r8
 8002c80:	4649      	mov	r1, r9
 8002c82:	f7fd fc29 	bl	80004d8 <__aeabi_dmul>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4690      	mov	r8, r2
 8002c8c:	4699      	mov	r9, r3
					* sin(dLon / 2);
 8002c8e:	4b3b      	ldr	r3, [pc, #236]	; (8002d7c <Cal_distGPS+0x210>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe f928 	bl	8000eec <__aeabi_fdiv>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fbc2 	bl	8000428 <__aeabi_f2d>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	f008 f808 	bl	800acc0 <sin>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4640      	mov	r0, r8
 8002cb6:	4649      	mov	r1, r9
 8002cb8:	f7fd fc0e 	bl	80004d8 <__aeabi_dmul>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
			+ cos(deg2rad(lat)) * cos(deg2rad(ground_latt)) * sin(dLon / 2)
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	f7fd fa52 	bl	800016c <__adddf3>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	460c      	mov	r4, r1
 8002ccc:	4618      	mov	r0, r3
 8002cce:	4621      	mov	r1, r4
 8002cd0:	f7fd fefa 	bl	8000ac8 <__aeabi_d2f>
 8002cd4:	4602      	mov	r2, r0
	a = sin(dLat / 2) * sin(dLat / 2)
 8002cd6:	4b2a      	ldr	r3, [pc, #168]	; (8002d80 <Cal_distGPS+0x214>)
 8002cd8:	601a      	str	r2, [r3, #0]
	c = 2 * atan2(sqrt(a), sqrt(1 - a));
 8002cda:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <Cal_distGPS+0x214>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fd fba2 	bl	8000428 <__aeabi_f2d>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	460c      	mov	r4, r1
 8002ce8:	4618      	mov	r0, r3
 8002cea:	4621      	mov	r1, r4
 8002cec:	f008 f824 	bl	800ad38 <sqrt>
 8002cf0:	4604      	mov	r4, r0
 8002cf2:	460d      	mov	r5, r1
 8002cf4:	4b22      	ldr	r3, [pc, #136]	; (8002d80 <Cal_distGPS+0x214>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002cfe:	f7fd ff37 	bl	8000b70 <__aeabi_fsub>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fd fb8f 	bl	8000428 <__aeabi_f2d>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	f008 f811 	bl	800ad38 <sqrt>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	f008 f809 	bl	800ad34 <atan2>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	f7fd fa21 	bl	800016c <__adddf3>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	460c      	mov	r4, r1
 8002d2e:	4618      	mov	r0, r3
 8002d30:	4621      	mov	r1, r4
 8002d32:	f7fd fec9 	bl	8000ac8 <__aeabi_d2f>
 8002d36:	4602      	mov	r2, r0
 8002d38:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <Cal_distGPS+0x218>)
 8002d3a:	601a      	str	r2, [r3, #0]
	d = R * c; // Distance in km
 8002d3c:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <Cal_distGPS+0x21c>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <Cal_distGPS+0x218>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f7fe f81c 	bl	8000d84 <__aeabi_fmul>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <Cal_distGPS+0x220>)
 8002d52:	601a      	str	r2, [r3, #0]
	distance = d * 1000;
 8002d54:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <Cal_distGPS+0x220>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	490d      	ldr	r1, [pc, #52]	; (8002d90 <Cal_distGPS+0x224>)
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe f812 	bl	8000d84 <__aeabi_fmul>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <Cal_distGPS+0x228>)
 8002d66:	601a      	str	r2, [r3, #0]
	return distance;
 8002d68:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <Cal_distGPS+0x228>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d76:	bf00      	nop
 8002d78:	20000254 	.word	0x20000254
 8002d7c:	20000258 	.word	0x20000258
 8002d80:	2000025c 	.word	0x2000025c
 8002d84:	20000260 	.word	0x20000260
 8002d88:	2000000c 	.word	0x2000000c
 8002d8c:	20000264 	.word	0x20000264
 8002d90:	447a0000 	.word	0x447a0000
 8002d94:	20000268 	.word	0x20000268

08002d98 <GetAngle>:

float GetAngle(float lat, float lng, float ground_latt, float ground_lngg) {
 8002d98:	b5b0      	push	{r4, r5, r7, lr}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
	float Org_Enlem = lat;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	623b      	str	r3, [r7, #32]
	float Org_Lng = ground_lngg;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	61fb      	str	r3, [r7, #28]

	float distance1 = Cal_distGPS(Org_Enlem, Org_Lng, lat, lng);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	69f9      	ldr	r1, [r7, #28]
 8002db4:	6a38      	ldr	r0, [r7, #32]
 8002db6:	f7ff fed9 	bl	8002b6c <Cal_distGPS>
 8002dba:	61b8      	str	r0, [r7, #24]
	float distance2 = Cal_distGPS(ground_latt, ground_lngg, Org_Enlem, Org_Lng);
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	6a3a      	ldr	r2, [r7, #32]
 8002dc0:	6839      	ldr	r1, [r7, #0]
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff fed2 	bl	8002b6c <Cal_distGPS>
 8002dc8:	6178      	str	r0, [r7, #20]

	float alfa = rad2deg(atan2(distance1, distance2));
 8002dca:	69b8      	ldr	r0, [r7, #24]
 8002dcc:	f7fd fb2c 	bl	8000428 <__aeabi_f2d>
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	460d      	mov	r5, r1
 8002dd4:	6978      	ldr	r0, [r7, #20]
 8002dd6:	f7fd fb27 	bl	8000428 <__aeabi_f2d>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4620      	mov	r0, r4
 8002de0:	4629      	mov	r1, r5
 8002de2:	f007 ffa7 	bl	800ad34 <atan2>
 8002de6:	4603      	mov	r3, r0
 8002de8:	460c      	mov	r4, r1
 8002dea:	4618      	mov	r0, r3
 8002dec:	4621      	mov	r1, r4
 8002dee:	f7fd fe6b 	bl	8000ac8 <__aeabi_d2f>
 8002df2:	4603      	mov	r3, r0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fe97 	bl	8002b28 <rad2deg>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	460c      	mov	r4, r1
 8002dfe:	4618      	mov	r0, r3
 8002e00:	4621      	mov	r1, r4
 8002e02:	f7fd fe61 	bl	8000ac8 <__aeabi_d2f>
 8002e06:	4603      	mov	r3, r0
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
	if (lat == ground_latt && lng == ground_lngg) {
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7fe f94d 	bl	80010ac <__aeabi_fcmpeq>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <GetAngle+0x96>
 8002e18:	6839      	ldr	r1, [r7, #0]
 8002e1a:	68b8      	ldr	r0, [r7, #8]
 8002e1c:	f7fe f946 	bl	80010ac <__aeabi_fcmpeq>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <GetAngle+0x96>
		alfa = 0;
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2c:	e090      	b.n	8002f50 <GetAngle+0x1b8>
		//cout << "degree: " << alfa << endl;
	} else if (lat == ground_latt && lng > ground_lngg) {
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f7fe f93b 	bl	80010ac <__aeabi_fcmpeq>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <GetAngle+0xba>
 8002e3c:	6839      	ldr	r1, [r7, #0]
 8002e3e:	68b8      	ldr	r0, [r7, #8]
 8002e40:	f7fe f95c 	bl	80010fc <__aeabi_fcmpgt>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <GetAngle+0xba>
		alfa = 0;
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e50:	e07e      	b.n	8002f50 <GetAngle+0x1b8>
		//cout << "degree: " << alfa << endl;
	} else if (lat == ground_latt && lng < ground_lngg) {
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7fe f929 	bl	80010ac <__aeabi_fcmpeq>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d009      	beq.n	8002e74 <GetAngle+0xdc>
 8002e60:	6839      	ldr	r1, [r7, #0]
 8002e62:	68b8      	ldr	r0, [r7, #8]
 8002e64:	f7fe f92c 	bl	80010c0 <__aeabi_fcmplt>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <GetAngle+0xdc>
		alfa = 180;
 8002e6e:	4b45      	ldr	r3, [pc, #276]	; (8002f84 <GetAngle+0x1ec>)
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
 8002e72:	e06d      	b.n	8002f50 <GetAngle+0x1b8>
		//cout << "degree: " << alfa << endl;
	} else if (lat > ground_latt && lng == ground_lngg) {
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7fe f940 	bl	80010fc <__aeabi_fcmpgt>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d009      	beq.n	8002e96 <GetAngle+0xfe>
 8002e82:	6839      	ldr	r1, [r7, #0]
 8002e84:	68b8      	ldr	r0, [r7, #8]
 8002e86:	f7fe f911 	bl	80010ac <__aeabi_fcmpeq>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <GetAngle+0xfe>
		alfa = 90;
 8002e90:	4b3d      	ldr	r3, [pc, #244]	; (8002f88 <GetAngle+0x1f0>)
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
 8002e94:	e05c      	b.n	8002f50 <GetAngle+0x1b8>
		//cout << "degree: " << alfa << endl;
	} else if (lat > ground_latt && lng == ground_lngg) {
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f7fe f92f 	bl	80010fc <__aeabi_fcmpgt>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d009      	beq.n	8002eb8 <GetAngle+0x120>
 8002ea4:	6839      	ldr	r1, [r7, #0]
 8002ea6:	68b8      	ldr	r0, [r7, #8]
 8002ea8:	f7fe f900 	bl	80010ac <__aeabi_fcmpeq>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <GetAngle+0x120>
		alfa = 270;
 8002eb2:	4b36      	ldr	r3, [pc, #216]	; (8002f8c <GetAngle+0x1f4>)
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb6:	e04b      	b.n	8002f50 <GetAngle+0x1b8>
		//cout << "degree: " << alfa << endl;
	} else if (lat > ground_latt && lng > ground_lngg) {
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f7fe f91e 	bl	80010fc <__aeabi_fcmpgt>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d006      	beq.n	8002ed4 <GetAngle+0x13c>
 8002ec6:	6839      	ldr	r1, [r7, #0]
 8002ec8:	68b8      	ldr	r0, [r7, #8]
 8002eca:	f7fe f917 	bl	80010fc <__aeabi_fcmpgt>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d13d      	bne.n	8002f50 <GetAngle+0x1b8>
		//cout << "degree: " << alfa << endl;
	} else if (lat < ground_latt && lng > ground_lngg) {
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f7fe f8f2 	bl	80010c0 <__aeabi_fcmplt>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <GetAngle+0x166>
 8002ee2:	6839      	ldr	r1, [r7, #0]
 8002ee4:	68b8      	ldr	r0, [r7, #8]
 8002ee6:	f7fe f909 	bl	80010fc <__aeabi_fcmpgt>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d006      	beq.n	8002efe <GetAngle+0x166>
		alfa = 180 - alfa;
 8002ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ef2:	4824      	ldr	r0, [pc, #144]	; (8002f84 <GetAngle+0x1ec>)
 8002ef4:	f7fd fe3c 	bl	8000b70 <__aeabi_fsub>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
 8002efc:	e028      	b.n	8002f50 <GetAngle+0x1b8>
		//cout << "degree: " << alfa << endl;
	} else if (lat > ground_latt && lng < ground_lngg) {
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f7fe f8fb 	bl	80010fc <__aeabi_fcmpgt>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00d      	beq.n	8002f28 <GetAngle+0x190>
 8002f0c:	6839      	ldr	r1, [r7, #0]
 8002f0e:	68b8      	ldr	r0, [r7, #8]
 8002f10:	f7fe f8d6 	bl	80010c0 <__aeabi_fcmplt>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d006      	beq.n	8002f28 <GetAngle+0x190>
		alfa = 360 - alfa;
 8002f1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f1c:	481c      	ldr	r0, [pc, #112]	; (8002f90 <GetAngle+0x1f8>)
 8002f1e:	f7fd fe27 	bl	8000b70 <__aeabi_fsub>
 8002f22:	4603      	mov	r3, r0
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
 8002f26:	e013      	b.n	8002f50 <GetAngle+0x1b8>
		//cout << "degree: " << alfa << endl;
	} else if (lat < ground_latt && lng < ground_lngg) {
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f7fe f8c8 	bl	80010c0 <__aeabi_fcmplt>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00c      	beq.n	8002f50 <GetAngle+0x1b8>
 8002f36:	6839      	ldr	r1, [r7, #0]
 8002f38:	68b8      	ldr	r0, [r7, #8]
 8002f3a:	f7fe f8c1 	bl	80010c0 <__aeabi_fcmplt>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <GetAngle+0x1b8>
		alfa = 180 + alfa;
 8002f44:	490f      	ldr	r1, [pc, #60]	; (8002f84 <GetAngle+0x1ec>)
 8002f46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f48:	f7fd fe14 	bl	8000b74 <__addsf3>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
		//cout << "degree: " << alfa << endl;
	}

	alfa -= 90.0;
 8002f50:	490d      	ldr	r1, [pc, #52]	; (8002f88 <GetAngle+0x1f0>)
 8002f52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f54:	f7fd fe0c 	bl	8000b70 <__aeabi_fsub>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24

	if (alfa < 0)
 8002f5c:	f04f 0100 	mov.w	r1, #0
 8002f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f62:	f7fe f8ad 	bl	80010c0 <__aeabi_fcmplt>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <GetAngle+0x1e0>
		alfa += 360;
 8002f6c:	4908      	ldr	r1, [pc, #32]	; (8002f90 <GetAngle+0x1f8>)
 8002f6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f70:	f7fd fe00 	bl	8000b74 <__addsf3>
 8002f74:	4603      	mov	r3, r0
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
	return alfa;
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3728      	adds	r7, #40	; 0x28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bdb0      	pop	{r4, r5, r7, pc}
 8002f82:	bf00      	nop
 8002f84:	43340000 	.word	0x43340000
 8002f88:	42b40000 	.word	0x42b40000
 8002f8c:	43870000 	.word	0x43870000
 8002f90:	43b40000 	.word	0x43b40000

08002f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <NXT_SEND_VAL>:

uint8_t cmd_nxt[3] = {0xFF, 0xFF, 0xFF};
int len = 0;

void NXT_SEND_VAL(char* ID, uint32_t val)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b090      	sub	sp, #64	; 0x40
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
	char buff[50];
	len = sprintf(buff, "%s=%d", ID, val);
 8002faa:	f107 000c 	add.w	r0, r7, #12
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	490d      	ldr	r1, [pc, #52]	; (8002fe8 <NXT_SEND_VAL+0x48>)
 8002fb4:	f004 ffd6 	bl	8007f64 <siprintf>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <NXT_SEND_VAL+0x4c>)
 8002fbc:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)buff, len, 1000);
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <NXT_SEND_VAL+0x4c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	f107 010c 	add.w	r1, r7, #12
 8002fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fcc:	4808      	ldr	r0, [pc, #32]	; (8002ff0 <NXT_SEND_VAL+0x50>)
 8002fce:	f003 fdaa 	bl	8006b26 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 8002fd2:	2364      	movs	r3, #100	; 0x64
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	4907      	ldr	r1, [pc, #28]	; (8002ff4 <NXT_SEND_VAL+0x54>)
 8002fd8:	4805      	ldr	r0, [pc, #20]	; (8002ff0 <NXT_SEND_VAL+0x50>)
 8002fda:	f003 fda4 	bl	8006b26 <HAL_UART_Transmit>
}
 8002fde:	bf00      	nop
 8002fe0:	3740      	adds	r7, #64	; 0x40
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	0800c96c 	.word	0x0800c96c
 8002fec:	200003ec 	.word	0x200003ec
 8002ff0:	200004ac 	.word	0x200004ac
 8002ff4:	2000001c 	.word	0x2000001c

08002ff8 <NXT_SEND_SVAL>:

void NXT_SEND_SVAL(char* ID, int val)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b090      	sub	sp, #64	; 0x40
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
	char buff[50];
	len = sprintf(buff, "%s=%d", ID, val);
 8003002:	f107 000c 	add.w	r0, r7, #12
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	490d      	ldr	r1, [pc, #52]	; (8003040 <NXT_SEND_SVAL+0x48>)
 800300c:	f004 ffaa 	bl	8007f64 <siprintf>
 8003010:	4602      	mov	r2, r0
 8003012:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <NXT_SEND_SVAL+0x4c>)
 8003014:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)buff, len, 1000);
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <NXT_SEND_SVAL+0x4c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	b29a      	uxth	r2, r3
 800301c:	f107 010c 	add.w	r1, r7, #12
 8003020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003024:	4808      	ldr	r0, [pc, #32]	; (8003048 <NXT_SEND_SVAL+0x50>)
 8003026:	f003 fd7e 	bl	8006b26 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 800302a:	2364      	movs	r3, #100	; 0x64
 800302c:	2203      	movs	r2, #3
 800302e:	4907      	ldr	r1, [pc, #28]	; (800304c <NXT_SEND_SVAL+0x54>)
 8003030:	4805      	ldr	r0, [pc, #20]	; (8003048 <NXT_SEND_SVAL+0x50>)
 8003032:	f003 fd78 	bl	8006b26 <HAL_UART_Transmit>
}
 8003036:	bf00      	nop
 8003038:	3740      	adds	r7, #64	; 0x40
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	0800c96c 	.word	0x0800c96c
 8003044:	200003ec 	.word	0x200003ec
 8003048:	200004ac 	.word	0x200004ac
 800304c:	2000001c 	.word	0x2000001c

08003050 <NXT_SEND_VALFLOAT>:

void NXT_SEND_VALFLOAT(char* ID, float val)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b093      	sub	sp, #76	; 0x4c
 8003054:	af02      	add	r7, sp, #8
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
	char buff[50];
	len = sprintf(buff, "%s=\"%.2f\"", ID, val);
 800305a:	6838      	ldr	r0, [r7, #0]
 800305c:	f7fd f9e4 	bl	8000428 <__aeabi_f2d>
 8003060:	4603      	mov	r3, r0
 8003062:	460c      	mov	r4, r1
 8003064:	f107 000c 	add.w	r0, r7, #12
 8003068:	e9cd 3400 	strd	r3, r4, [sp]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	490d      	ldr	r1, [pc, #52]	; (80030a4 <NXT_SEND_VALFLOAT+0x54>)
 8003070:	f004 ff78 	bl	8007f64 <siprintf>
 8003074:	4602      	mov	r2, r0
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <NXT_SEND_VALFLOAT+0x58>)
 8003078:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)buff, len, 1000);
 800307a:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <NXT_SEND_VALFLOAT+0x58>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	b29a      	uxth	r2, r3
 8003080:	f107 010c 	add.w	r1, r7, #12
 8003084:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003088:	4808      	ldr	r0, [pc, #32]	; (80030ac <NXT_SEND_VALFLOAT+0x5c>)
 800308a:	f003 fd4c 	bl	8006b26 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 800308e:	2364      	movs	r3, #100	; 0x64
 8003090:	2203      	movs	r2, #3
 8003092:	4907      	ldr	r1, [pc, #28]	; (80030b0 <NXT_SEND_VALFLOAT+0x60>)
 8003094:	4805      	ldr	r0, [pc, #20]	; (80030ac <NXT_SEND_VALFLOAT+0x5c>)
 8003096:	f003 fd46 	bl	8006b26 <HAL_UART_Transmit>
}
 800309a:	bf00      	nop
 800309c:	3744      	adds	r7, #68	; 0x44
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd90      	pop	{r4, r7, pc}
 80030a2:	bf00      	nop
 80030a4:	0800c974 	.word	0x0800c974
 80030a8:	200003ec 	.word	0x200003ec
 80030ac:	200004ac 	.word	0x200004ac
 80030b0:	2000001c 	.word	0x2000001c

080030b4 <NXT_SEND_STR>:

void NXT_SEND_STR(char* ID)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b090      	sub	sp, #64	; 0x40
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	char buff[50];
	int len = sprintf(buff, "%s", ID);
 80030bc:	f107 0308 	add.w	r3, r7, #8
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	490c      	ldr	r1, [pc, #48]	; (80030f4 <NXT_SEND_STR+0x40>)
 80030c4:	4618      	mov	r0, r3
 80030c6:	f004 ff4d 	bl	8007f64 <siprintf>
 80030ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart3, (uint8_t*) buff, len, 1000);
 80030cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	f107 0108 	add.w	r1, r7, #8
 80030d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030d8:	4807      	ldr	r0, [pc, #28]	; (80030f8 <NXT_SEND_STR+0x44>)
 80030da:	f003 fd24 	bl	8006b26 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 80030de:	2364      	movs	r3, #100	; 0x64
 80030e0:	2203      	movs	r2, #3
 80030e2:	4906      	ldr	r1, [pc, #24]	; (80030fc <NXT_SEND_STR+0x48>)
 80030e4:	4804      	ldr	r0, [pc, #16]	; (80030f8 <NXT_SEND_STR+0x44>)
 80030e6:	f003 fd1e 	bl	8006b26 <HAL_UART_Transmit>
}
 80030ea:	bf00      	nop
 80030ec:	3740      	adds	r7, #64	; 0x40
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	0800c980 	.word	0x0800c980
 80030f8:	200004ac 	.word	0x200004ac
 80030fc:	2000001c 	.word	0x2000001c

08003100 <NXT_SEND_TXT>:
void NXT_SEND_TXT(char* ID, uint16_t val)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b090      	sub	sp, #64	; 0x40
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	807b      	strh	r3, [r7, #2]
	char buff[50];
	len = sprintf(buff, "%s=\"%d\"", ID, val);
 800310c:	887b      	ldrh	r3, [r7, #2]
 800310e:	f107 000c 	add.w	r0, r7, #12
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	490c      	ldr	r1, [pc, #48]	; (8003148 <NXT_SEND_TXT+0x48>)
 8003116:	f004 ff25 	bl	8007f64 <siprintf>
 800311a:	4602      	mov	r2, r0
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <NXT_SEND_TXT+0x4c>)
 800311e:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)buff, len, 1000);
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <NXT_SEND_TXT+0x4c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	b29a      	uxth	r2, r3
 8003126:	f107 010c 	add.w	r1, r7, #12
 800312a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800312e:	4808      	ldr	r0, [pc, #32]	; (8003150 <NXT_SEND_TXT+0x50>)
 8003130:	f003 fcf9 	bl	8006b26 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 8003134:	2364      	movs	r3, #100	; 0x64
 8003136:	2203      	movs	r2, #3
 8003138:	4906      	ldr	r1, [pc, #24]	; (8003154 <NXT_SEND_TXT+0x54>)
 800313a:	4805      	ldr	r0, [pc, #20]	; (8003150 <NXT_SEND_TXT+0x50>)
 800313c:	f003 fcf3 	bl	8006b26 <HAL_UART_Transmit>
}
 8003140:	bf00      	nop
 8003142:	3740      	adds	r7, #64	; 0x40
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	0800c984 	.word	0x0800c984
 800314c:	200003ec 	.word	0x200003ec
 8003150:	200004ac 	.word	0x200004ac
 8003154:	2000001c 	.word	0x2000001c

08003158 <NXT_SEND_TXTBX>:

void NXT_SEND_TXTBX(char* ID, char* txt)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b0aa      	sub	sp, #168	; 0xa8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
	char buff[160];
	len = sprintf(buff, "%s=\"%s\"", ID, txt);
 8003162:	f107 0008 	add.w	r0, r7, #8
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	490d      	ldr	r1, [pc, #52]	; (80031a0 <NXT_SEND_TXTBX+0x48>)
 800316c:	f004 fefa 	bl	8007f64 <siprintf>
 8003170:	4602      	mov	r2, r0
 8003172:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <NXT_SEND_TXTBX+0x4c>)
 8003174:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)buff, len, 1000);
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <NXT_SEND_TXTBX+0x4c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	b29a      	uxth	r2, r3
 800317c:	f107 0108 	add.w	r1, r7, #8
 8003180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003184:	4808      	ldr	r0, [pc, #32]	; (80031a8 <NXT_SEND_TXTBX+0x50>)
 8003186:	f003 fcce 	bl	8006b26 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 800318a:	2364      	movs	r3, #100	; 0x64
 800318c:	2203      	movs	r2, #3
 800318e:	4907      	ldr	r1, [pc, #28]	; (80031ac <NXT_SEND_TXTBX+0x54>)
 8003190:	4805      	ldr	r0, [pc, #20]	; (80031a8 <NXT_SEND_TXTBX+0x50>)
 8003192:	f003 fcc8 	bl	8006b26 <HAL_UART_Transmit>
}
 8003196:	bf00      	nop
 8003198:	37a8      	adds	r7, #168	; 0xa8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	0800c98c 	.word	0x0800c98c
 80031a4:	200003ec 	.word	0x200003ec
 80031a8:	200004ac 	.word	0x200004ac
 80031ac:	2000001c 	.word	0x2000001c

080031b0 <NXT_Disable_Error>:

void NXT_Disable_Error(char* txt)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
	char buff[8];
	len = sprintf(buff, "%s", txt);
 80031b8:	f107 0308 	add.w	r3, r7, #8
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4910      	ldr	r1, [pc, #64]	; (8003200 <NXT_Disable_Error+0x50>)
 80031c0:	4618      	mov	r0, r3
 80031c2:	f004 fecf 	bl	8007f64 <siprintf>
 80031c6:	4602      	mov	r2, r0
 80031c8:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <NXT_Disable_Error+0x54>)
 80031ca:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 80031cc:	2364      	movs	r3, #100	; 0x64
 80031ce:	2203      	movs	r2, #3
 80031d0:	490d      	ldr	r1, [pc, #52]	; (8003208 <NXT_Disable_Error+0x58>)
 80031d2:	480e      	ldr	r0, [pc, #56]	; (800320c <NXT_Disable_Error+0x5c>)
 80031d4:	f003 fca7 	bl	8006b26 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)buff, len, 1000);
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <NXT_Disable_Error+0x54>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	b29a      	uxth	r2, r3
 80031de:	f107 0108 	add.w	r1, r7, #8
 80031e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031e6:	4809      	ldr	r0, [pc, #36]	; (800320c <NXT_Disable_Error+0x5c>)
 80031e8:	f003 fc9d 	bl	8006b26 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 80031ec:	2364      	movs	r3, #100	; 0x64
 80031ee:	2203      	movs	r2, #3
 80031f0:	4905      	ldr	r1, [pc, #20]	; (8003208 <NXT_Disable_Error+0x58>)
 80031f2:	4806      	ldr	r0, [pc, #24]	; (800320c <NXT_Disable_Error+0x5c>)
 80031f4:	f003 fc97 	bl	8006b26 <HAL_UART_Transmit>
}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	0800c980 	.word	0x0800c980
 8003204:	200003ec 	.word	0x200003ec
 8003208:	2000001c 	.word	0x2000001c
 800320c:	200004ac 	.word	0x200004ac

08003210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <HAL_MspInit+0x5c>)
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	4a14      	ldr	r2, [pc, #80]	; (800326c <HAL_MspInit+0x5c>)
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	6193      	str	r3, [r2, #24]
 8003222:	4b12      	ldr	r3, [pc, #72]	; (800326c <HAL_MspInit+0x5c>)
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800322e:	4b0f      	ldr	r3, [pc, #60]	; (800326c <HAL_MspInit+0x5c>)
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	4a0e      	ldr	r2, [pc, #56]	; (800326c <HAL_MspInit+0x5c>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003238:	61d3      	str	r3, [r2, #28]
 800323a:	4b0c      	ldr	r3, [pc, #48]	; (800326c <HAL_MspInit+0x5c>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <HAL_MspInit+0x60>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	4a04      	ldr	r2, [pc, #16]	; (8003270 <HAL_MspInit+0x60>)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	40021000 	.word	0x40021000
 8003270:	40010000 	.word	0x40010000

08003274 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800327c:	f107 0310 	add.w	r3, r7, #16
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a15      	ldr	r2, [pc, #84]	; (80032e4 <HAL_I2C_MspInit+0x70>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d123      	bne.n	80032dc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003294:	4b14      	ldr	r3, [pc, #80]	; (80032e8 <HAL_I2C_MspInit+0x74>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <HAL_I2C_MspInit+0x74>)
 800329a:	f043 0308 	orr.w	r3, r3, #8
 800329e:	6193      	str	r3, [r2, #24]
 80032a0:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <HAL_I2C_MspInit+0x74>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032ac:	23c0      	movs	r3, #192	; 0xc0
 80032ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032b0:	2312      	movs	r3, #18
 80032b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032b4:	2303      	movs	r3, #3
 80032b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b8:	f107 0310 	add.w	r3, r7, #16
 80032bc:	4619      	mov	r1, r3
 80032be:	480b      	ldr	r0, [pc, #44]	; (80032ec <HAL_I2C_MspInit+0x78>)
 80032c0:	f000 ff26 	bl	8004110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032c4:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <HAL_I2C_MspInit+0x74>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	4a07      	ldr	r2, [pc, #28]	; (80032e8 <HAL_I2C_MspInit+0x74>)
 80032ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032ce:	61d3      	str	r3, [r2, #28]
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_I2C_MspInit+0x74>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032dc:	bf00      	nop
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40005400 	.word	0x40005400
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40010c00 	.word	0x40010c00

080032f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	f107 0310 	add.w	r3, r7, #16
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1c      	ldr	r2, [pc, #112]	; (800337c <HAL_SPI_MspInit+0x8c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d131      	bne.n	8003374 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_SPI_MspInit+0x90>)
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	4a1a      	ldr	r2, [pc, #104]	; (8003380 <HAL_SPI_MspInit+0x90>)
 8003316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800331a:	61d3      	str	r3, [r2, #28]
 800331c:	4b18      	ldr	r3, [pc, #96]	; (8003380 <HAL_SPI_MspInit+0x90>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003328:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_SPI_MspInit+0x90>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	4a14      	ldr	r2, [pc, #80]	; (8003380 <HAL_SPI_MspInit+0x90>)
 800332e:	f043 0308 	orr.w	r3, r3, #8
 8003332:	6193      	str	r3, [r2, #24]
 8003334:	4b12      	ldr	r3, [pc, #72]	; (8003380 <HAL_SPI_MspInit+0x90>)
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003340:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003344:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003346:	2302      	movs	r3, #2
 8003348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800334a:	2303      	movs	r3, #3
 800334c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334e:	f107 0310 	add.w	r3, r7, #16
 8003352:	4619      	mov	r1, r3
 8003354:	480b      	ldr	r0, [pc, #44]	; (8003384 <HAL_SPI_MspInit+0x94>)
 8003356:	f000 fedb 	bl	8004110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800335a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800335e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	2300      	movs	r3, #0
 8003366:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003368:	f107 0310 	add.w	r3, r7, #16
 800336c:	4619      	mov	r1, r3
 800336e:	4805      	ldr	r0, [pc, #20]	; (8003384 <HAL_SPI_MspInit+0x94>)
 8003370:	f000 fece 	bl	8004110 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003374:	bf00      	nop
 8003376:	3720      	adds	r7, #32
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40003800 	.word	0x40003800
 8003380:	40021000 	.word	0x40021000
 8003384:	40010c00 	.word	0x40010c00

08003388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003398:	d113      	bne.n	80033c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800339a:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <HAL_TIM_Base_MspInit+0x44>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	4a0b      	ldr	r2, [pc, #44]	; (80033cc <HAL_TIM_Base_MspInit+0x44>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	61d3      	str	r3, [r2, #28]
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <HAL_TIM_Base_MspInit+0x44>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80033b2:	2200      	movs	r2, #0
 80033b4:	2102      	movs	r1, #2
 80033b6:	201c      	movs	r0, #28
 80033b8:	f000 fdc3 	bl	8003f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033bc:	201c      	movs	r0, #28
 80033be:	f000 fddc 	bl	8003f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000

080033d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08c      	sub	sp, #48	; 0x30
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d8:	f107 0320 	add.w	r3, r7, #32
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a5f      	ldr	r2, [pc, #380]	; (8003568 <HAL_UART_MspInit+0x198>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d13a      	bne.n	8003466 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033f0:	4b5e      	ldr	r3, [pc, #376]	; (800356c <HAL_UART_MspInit+0x19c>)
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	4a5d      	ldr	r2, [pc, #372]	; (800356c <HAL_UART_MspInit+0x19c>)
 80033f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033fa:	6193      	str	r3, [r2, #24]
 80033fc:	4b5b      	ldr	r3, [pc, #364]	; (800356c <HAL_UART_MspInit+0x19c>)
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003408:	4b58      	ldr	r3, [pc, #352]	; (800356c <HAL_UART_MspInit+0x19c>)
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	4a57      	ldr	r2, [pc, #348]	; (800356c <HAL_UART_MspInit+0x19c>)
 800340e:	f043 0304 	orr.w	r3, r3, #4
 8003412:	6193      	str	r3, [r2, #24]
 8003414:	4b55      	ldr	r3, [pc, #340]	; (800356c <HAL_UART_MspInit+0x19c>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003426:	2302      	movs	r3, #2
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800342a:	2303      	movs	r3, #3
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342e:	f107 0320 	add.w	r3, r7, #32
 8003432:	4619      	mov	r1, r3
 8003434:	484e      	ldr	r0, [pc, #312]	; (8003570 <HAL_UART_MspInit+0x1a0>)
 8003436:	f000 fe6b 	bl	8004110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800343a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800343e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003440:	2300      	movs	r3, #0
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	2300      	movs	r3, #0
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003448:	f107 0320 	add.w	r3, r7, #32
 800344c:	4619      	mov	r1, r3
 800344e:	4848      	ldr	r0, [pc, #288]	; (8003570 <HAL_UART_MspInit+0x1a0>)
 8003450:	f000 fe5e 	bl	8004110 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003454:	2200      	movs	r2, #0
 8003456:	2100      	movs	r1, #0
 8003458:	2025      	movs	r0, #37	; 0x25
 800345a:	f000 fd72 	bl	8003f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800345e:	2025      	movs	r0, #37	; 0x25
 8003460:	f000 fd8b 	bl	8003f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003464:	e07c      	b.n	8003560 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a42      	ldr	r2, [pc, #264]	; (8003574 <HAL_UART_MspInit+0x1a4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d138      	bne.n	80034e2 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003470:	4b3e      	ldr	r3, [pc, #248]	; (800356c <HAL_UART_MspInit+0x19c>)
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	4a3d      	ldr	r2, [pc, #244]	; (800356c <HAL_UART_MspInit+0x19c>)
 8003476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800347a:	61d3      	str	r3, [r2, #28]
 800347c:	4b3b      	ldr	r3, [pc, #236]	; (800356c <HAL_UART_MspInit+0x19c>)
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003488:	4b38      	ldr	r3, [pc, #224]	; (800356c <HAL_UART_MspInit+0x19c>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	4a37      	ldr	r2, [pc, #220]	; (800356c <HAL_UART_MspInit+0x19c>)
 800348e:	f043 0304 	orr.w	r3, r3, #4
 8003492:	6193      	str	r3, [r2, #24]
 8003494:	4b35      	ldr	r3, [pc, #212]	; (800356c <HAL_UART_MspInit+0x19c>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034a0:	2304      	movs	r3, #4
 80034a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034a8:	2303      	movs	r3, #3
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ac:	f107 0320 	add.w	r3, r7, #32
 80034b0:	4619      	mov	r1, r3
 80034b2:	482f      	ldr	r0, [pc, #188]	; (8003570 <HAL_UART_MspInit+0x1a0>)
 80034b4:	f000 fe2c 	bl	8004110 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034b8:	2308      	movs	r3, #8
 80034ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034bc:	2300      	movs	r3, #0
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c4:	f107 0320 	add.w	r3, r7, #32
 80034c8:	4619      	mov	r1, r3
 80034ca:	4829      	ldr	r0, [pc, #164]	; (8003570 <HAL_UART_MspInit+0x1a0>)
 80034cc:	f000 fe20 	bl	8004110 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80034d0:	2200      	movs	r2, #0
 80034d2:	2101      	movs	r1, #1
 80034d4:	2026      	movs	r0, #38	; 0x26
 80034d6:	f000 fd34 	bl	8003f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034da:	2026      	movs	r0, #38	; 0x26
 80034dc:	f000 fd4d 	bl	8003f7a <HAL_NVIC_EnableIRQ>
}
 80034e0:	e03e      	b.n	8003560 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a24      	ldr	r2, [pc, #144]	; (8003578 <HAL_UART_MspInit+0x1a8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d139      	bne.n	8003560 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 80034ec:	4b1f      	ldr	r3, [pc, #124]	; (800356c <HAL_UART_MspInit+0x19c>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	4a1e      	ldr	r2, [pc, #120]	; (800356c <HAL_UART_MspInit+0x19c>)
 80034f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f6:	61d3      	str	r3, [r2, #28]
 80034f8:	4b1c      	ldr	r3, [pc, #112]	; (800356c <HAL_UART_MspInit+0x19c>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003504:	4b19      	ldr	r3, [pc, #100]	; (800356c <HAL_UART_MspInit+0x19c>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	4a18      	ldr	r2, [pc, #96]	; (800356c <HAL_UART_MspInit+0x19c>)
 800350a:	f043 0308 	orr.w	r3, r3, #8
 800350e:	6193      	str	r3, [r2, #24]
 8003510:	4b16      	ldr	r3, [pc, #88]	; (800356c <HAL_UART_MspInit+0x19c>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800351c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003522:	2302      	movs	r3, #2
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003526:	2303      	movs	r3, #3
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352a:	f107 0320 	add.w	r3, r7, #32
 800352e:	4619      	mov	r1, r3
 8003530:	4812      	ldr	r0, [pc, #72]	; (800357c <HAL_UART_MspInit+0x1ac>)
 8003532:	f000 fded 	bl	8004110 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003536:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800353a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800353c:	2300      	movs	r3, #0
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003540:	2300      	movs	r3, #0
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003544:	f107 0320 	add.w	r3, r7, #32
 8003548:	4619      	mov	r1, r3
 800354a:	480c      	ldr	r0, [pc, #48]	; (800357c <HAL_UART_MspInit+0x1ac>)
 800354c:	f000 fde0 	bl	8004110 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003550:	2200      	movs	r2, #0
 8003552:	2100      	movs	r1, #0
 8003554:	2027      	movs	r0, #39	; 0x27
 8003556:	f000 fcf4 	bl	8003f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800355a:	2027      	movs	r0, #39	; 0x27
 800355c:	f000 fd0d 	bl	8003f7a <HAL_NVIC_EnableIRQ>
}
 8003560:	bf00      	nop
 8003562:	3730      	adds	r7, #48	; 0x30
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40013800 	.word	0x40013800
 800356c:	40021000 	.word	0x40021000
 8003570:	40010800 	.word	0x40010800
 8003574:	40004400 	.word	0x40004400
 8003578:	40004800 	.word	0x40004800
 800357c:	40010c00 	.word	0x40010c00

08003580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003590:	e7fe      	b.n	8003590 <HardFault_Handler+0x4>

08003592 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003592:	b480      	push	{r7}
 8003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003596:	e7fe      	b.n	8003596 <MemManage_Handler+0x4>

08003598 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800359c:	e7fe      	b.n	800359c <BusFault_Handler+0x4>

0800359e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035a2:	e7fe      	b.n	80035a2 <UsageFault_Handler+0x4>

080035a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035b4:	bf00      	nop
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035cc:	f000 fba4 	bl	8003d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035d0:	bf00      	nop
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80035d8:	4805      	ldr	r0, [pc, #20]	; (80035f0 <TIM2_IRQHandler+0x1c>)
 80035da:	f002 ff03 	bl	80063e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  mgn = 1;
 80035de:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <TIM2_IRQHandler+0x20>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80035e4:	2101      	movs	r1, #1
 80035e6:	4804      	ldr	r0, [pc, #16]	; (80035f8 <TIM2_IRQHandler+0x24>)
 80035e8:	f000 ff04 	bl	80043f4 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20000588 	.word	0x20000588
 80035f4:	2000027c 	.word	0x2000027c
 80035f8:	40010c00 	.word	0x40010c00
 80035fc:	00000000 	.word	0x00000000

08003600 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003602:	b089      	sub	sp, #36	; 0x24
 8003604:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003606:	48b2      	ldr	r0, [pc, #712]	; (80038d0 <USART1_IRQHandler+0x2d0>)
 8003608:	f003 fbf2 	bl	8006df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	HAL_UART_Receive_IT(&huart1, (uint8_t*) &buff1, 1);
 800360c:	2201      	movs	r2, #1
 800360e:	49b1      	ldr	r1, [pc, #708]	; (80038d4 <USART1_IRQHandler+0x2d4>)
 8003610:	48af      	ldr	r0, [pc, #700]	; (80038d0 <USART1_IRQHandler+0x2d0>)
 8003612:	f003 fbbc 	bl	8006d8e <HAL_UART_Receive_IT>
	RX1_BUF[c1] = buff1;
 8003616:	4bb0      	ldr	r3, [pc, #704]	; (80038d8 <USART1_IRQHandler+0x2d8>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	4bad      	ldr	r3, [pc, #692]	; (80038d4 <USART1_IRQHandler+0x2d4>)
 800361e:	7819      	ldrb	r1, [r3, #0]
 8003620:	4bae      	ldr	r3, [pc, #696]	; (80038dc <USART1_IRQHandler+0x2dc>)
 8003622:	5499      	strb	r1, [r3, r2]
	if (RX1_BUF[c1] == '\n') {
 8003624:	4bac      	ldr	r3, [pc, #688]	; (80038d8 <USART1_IRQHandler+0x2d8>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	461a      	mov	r2, r3
 800362a:	4bac      	ldr	r3, [pc, #688]	; (80038dc <USART1_IRQHandler+0x2dc>)
 800362c:	5c9b      	ldrb	r3, [r3, r2]
 800362e:	2b0a      	cmp	r3, #10
 8003630:	f040 8181 	bne.w	8003936 <USART1_IRQHandler+0x336>
		for (uint8_t i = 0; i < c1; i++) {
 8003634:	2300      	movs	r3, #0
 8003636:	75fb      	strb	r3, [r7, #23]
 8003638:	e174      	b.n	8003924 <USART1_IRQHandler+0x324>
			if (RX1_BUF[i] == '$' && RX1_BUF[i + 1] == 'G'
 800363a:	7dfb      	ldrb	r3, [r7, #23]
 800363c:	4aa7      	ldr	r2, [pc, #668]	; (80038dc <USART1_IRQHandler+0x2dc>)
 800363e:	5cd3      	ldrb	r3, [r2, r3]
 8003640:	2b24      	cmp	r3, #36	; 0x24
 8003642:	f040 816c 	bne.w	800391e <USART1_IRQHandler+0x31e>
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	3301      	adds	r3, #1
 800364a:	4aa4      	ldr	r2, [pc, #656]	; (80038dc <USART1_IRQHandler+0x2dc>)
 800364c:	5cd3      	ldrb	r3, [r2, r3]
 800364e:	2b47      	cmp	r3, #71	; 0x47
 8003650:	f040 8165 	bne.w	800391e <USART1_IRQHandler+0x31e>
					&& RX1_BUF[i + 2] == 'P' && RX1_BUF[i + 3] == 'G'
 8003654:	7dfb      	ldrb	r3, [r7, #23]
 8003656:	3302      	adds	r3, #2
 8003658:	4aa0      	ldr	r2, [pc, #640]	; (80038dc <USART1_IRQHandler+0x2dc>)
 800365a:	5cd3      	ldrb	r3, [r2, r3]
 800365c:	2b50      	cmp	r3, #80	; 0x50
 800365e:	f040 815e 	bne.w	800391e <USART1_IRQHandler+0x31e>
 8003662:	7dfb      	ldrb	r3, [r7, #23]
 8003664:	3303      	adds	r3, #3
 8003666:	4a9d      	ldr	r2, [pc, #628]	; (80038dc <USART1_IRQHandler+0x2dc>)
 8003668:	5cd3      	ldrb	r3, [r2, r3]
 800366a:	2b47      	cmp	r3, #71	; 0x47
 800366c:	f040 8157 	bne.w	800391e <USART1_IRQHandler+0x31e>
					&& RX1_BUF[i + 4] == 'G' && RX1_BUF[i + 5] == 'A'
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	3304      	adds	r3, #4
 8003674:	4a99      	ldr	r2, [pc, #612]	; (80038dc <USART1_IRQHandler+0x2dc>)
 8003676:	5cd3      	ldrb	r3, [r2, r3]
 8003678:	2b47      	cmp	r3, #71	; 0x47
 800367a:	f040 8150 	bne.w	800391e <USART1_IRQHandler+0x31e>
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	3305      	adds	r3, #5
 8003682:	4a96      	ldr	r2, [pc, #600]	; (80038dc <USART1_IRQHandler+0x2dc>)
 8003684:	5cd3      	ldrb	r3, [r2, r3]
 8003686:	2b41      	cmp	r3, #65	; 0x41
 8003688:	f040 8149 	bne.w	800391e <USART1_IRQHandler+0x31e>
					&& RX1_BUF[i + 6] == ',') {
 800368c:	7dfb      	ldrb	r3, [r7, #23]
 800368e:	3306      	adds	r3, #6
 8003690:	4a92      	ldr	r2, [pc, #584]	; (80038dc <USART1_IRQHandler+0x2dc>)
 8003692:	5cd3      	ldrb	r3, [r2, r3]
 8003694:	2b2c      	cmp	r3, #44	; 0x2c
 8003696:	f040 8142 	bne.w	800391e <USART1_IRQHandler+0x31e>
				uint8_t v = 0, pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0, pos5 = 0,
 800369a:	2300      	movs	r3, #0
 800369c:	75bb      	strb	r3, [r7, #22]
 800369e:	2300      	movs	r3, #0
 80036a0:	757b      	strb	r3, [r7, #21]
 80036a2:	2300      	movs	r3, #0
 80036a4:	753b      	strb	r3, [r7, #20]
 80036a6:	2300      	movs	r3, #0
 80036a8:	727b      	strb	r3, [r7, #9]
 80036aa:	2300      	movs	r3, #0
 80036ac:	74fb      	strb	r3, [r7, #19]
 80036ae:	2300      	movs	r3, #0
 80036b0:	723b      	strb	r3, [r7, #8]
						ok1 = 0, ok2 = 0, ok3 = 0, ok4 = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	74bb      	strb	r3, [r7, #18]
 80036b6:	2300      	movs	r3, #0
 80036b8:	747b      	strb	r3, [r7, #17]
 80036ba:	2300      	movs	r3, #0
 80036bc:	743b      	strb	r3, [r7, #16]
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]
				for (uint8_t n = 0; n < sizeof(RX1_BUF); n++) {
 80036c2:	2300      	movs	r3, #0
 80036c4:	73bb      	strb	r3, [r7, #14]
 80036c6:	e124      	b.n	8003912 <USART1_IRQHandler+0x312>
					if (RX1_BUF[n] == ',' && n > i + 5)
 80036c8:	7bbb      	ldrb	r3, [r7, #14]
 80036ca:	4a84      	ldr	r2, [pc, #528]	; (80038dc <USART1_IRQHandler+0x2dc>)
 80036cc:	5cd3      	ldrb	r3, [r2, r3]
 80036ce:	2b2c      	cmp	r3, #44	; 0x2c
 80036d0:	d107      	bne.n	80036e2 <USART1_IRQHandler+0xe2>
 80036d2:	7bba      	ldrb	r2, [r7, #14]
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	3305      	adds	r3, #5
 80036d8:	429a      	cmp	r2, r3
 80036da:	dd02      	ble.n	80036e2 <USART1_IRQHandler+0xe2>
						v++;
 80036dc:	7dbb      	ldrb	r3, [r7, #22]
 80036de:	3301      	adds	r3, #1
 80036e0:	75bb      	strb	r3, [r7, #22]
					if (v == 1 && ok1 == 0) {
 80036e2:	7dbb      	ldrb	r3, [r7, #22]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d106      	bne.n	80036f6 <USART1_IRQHandler+0xf6>
 80036e8:	7cbb      	ldrb	r3, [r7, #18]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d103      	bne.n	80036f6 <USART1_IRQHandler+0xf6>
						pos1 = n;
 80036ee:	7bbb      	ldrb	r3, [r7, #14]
 80036f0:	757b      	strb	r3, [r7, #21]
						ok1 = 1;
 80036f2:	2301      	movs	r3, #1
 80036f4:	74bb      	strb	r3, [r7, #18]
					}
					if (v == 2 && ok2 == 0) {
 80036f6:	7dbb      	ldrb	r3, [r7, #22]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d11b      	bne.n	8003734 <USART1_IRQHandler+0x134>
 80036fc:	7c7b      	ldrb	r3, [r7, #17]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d118      	bne.n	8003734 <USART1_IRQHandler+0x134>
						pos2 = n;
 8003702:	7bbb      	ldrb	r3, [r7, #14]
 8003704:	753b      	strb	r3, [r7, #20]
						for (uint8_t count = 0; count < pos2 - pos1; count++)
 8003706:	2300      	movs	r3, #0
 8003708:	737b      	strb	r3, [r7, #13]
 800370a:	e00b      	b.n	8003724 <USART1_IRQHandler+0x124>
							TIME[count] = RX1_BUF[pos1 + count + 1];
 800370c:	7d7a      	ldrb	r2, [r7, #21]
 800370e:	7b7b      	ldrb	r3, [r7, #13]
 8003710:	4413      	add	r3, r2
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	7b7b      	ldrb	r3, [r7, #13]
 8003716:	4971      	ldr	r1, [pc, #452]	; (80038dc <USART1_IRQHandler+0x2dc>)
 8003718:	5c89      	ldrb	r1, [r1, r2]
 800371a:	4a71      	ldr	r2, [pc, #452]	; (80038e0 <USART1_IRQHandler+0x2e0>)
 800371c:	54d1      	strb	r1, [r2, r3]
						for (uint8_t count = 0; count < pos2 - pos1; count++)
 800371e:	7b7b      	ldrb	r3, [r7, #13]
 8003720:	3301      	adds	r3, #1
 8003722:	737b      	strb	r3, [r7, #13]
 8003724:	7b7a      	ldrb	r2, [r7, #13]
 8003726:	7d39      	ldrb	r1, [r7, #20]
 8003728:	7d7b      	ldrb	r3, [r7, #21]
 800372a:	1acb      	subs	r3, r1, r3
 800372c:	429a      	cmp	r2, r3
 800372e:	dbed      	blt.n	800370c <USART1_IRQHandler+0x10c>
						ok2 = 1;
 8003730:	2301      	movs	r3, #1
 8003732:	747b      	strb	r3, [r7, #17]
					}
					if (v == 3 && ok3 == 0) {
 8003734:	7dbb      	ldrb	r3, [r7, #22]
 8003736:	2b03      	cmp	r3, #3
 8003738:	d11b      	bne.n	8003772 <USART1_IRQHandler+0x172>
 800373a:	7c3b      	ldrb	r3, [r7, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d118      	bne.n	8003772 <USART1_IRQHandler+0x172>
						pos3 = n;
 8003740:	7bbb      	ldrb	r3, [r7, #14]
 8003742:	727b      	strb	r3, [r7, #9]
						for (uint8_t count = 0; count < pos3 - pos2; count++)
 8003744:	2300      	movs	r3, #0
 8003746:	733b      	strb	r3, [r7, #12]
 8003748:	e00b      	b.n	8003762 <USART1_IRQHandler+0x162>
							LAT[count] = RX1_BUF[pos2 + count + 1];
 800374a:	7d3a      	ldrb	r2, [r7, #20]
 800374c:	7b3b      	ldrb	r3, [r7, #12]
 800374e:	4413      	add	r3, r2
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	7b3b      	ldrb	r3, [r7, #12]
 8003754:	4961      	ldr	r1, [pc, #388]	; (80038dc <USART1_IRQHandler+0x2dc>)
 8003756:	5c89      	ldrb	r1, [r1, r2]
 8003758:	4a62      	ldr	r2, [pc, #392]	; (80038e4 <USART1_IRQHandler+0x2e4>)
 800375a:	54d1      	strb	r1, [r2, r3]
						for (uint8_t count = 0; count < pos3 - pos2; count++)
 800375c:	7b3b      	ldrb	r3, [r7, #12]
 800375e:	3301      	adds	r3, #1
 8003760:	733b      	strb	r3, [r7, #12]
 8003762:	7b3a      	ldrb	r2, [r7, #12]
 8003764:	7a79      	ldrb	r1, [r7, #9]
 8003766:	7d3b      	ldrb	r3, [r7, #20]
 8003768:	1acb      	subs	r3, r1, r3
 800376a:	429a      	cmp	r2, r3
 800376c:	dbed      	blt.n	800374a <USART1_IRQHandler+0x14a>
						ok3 = 1;
 800376e:	2301      	movs	r3, #1
 8003770:	743b      	strb	r3, [r7, #16]
					}
					if (v == 4 && ok4 == 0) {
 8003772:	7dbb      	ldrb	r3, [r7, #22]
 8003774:	2b04      	cmp	r3, #4
 8003776:	d106      	bne.n	8003786 <USART1_IRQHandler+0x186>
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d103      	bne.n	8003786 <USART1_IRQHandler+0x186>
						pos4 = n;
 800377e:	7bbb      	ldrb	r3, [r7, #14]
 8003780:	74fb      	strb	r3, [r7, #19]
						ok4 = 1;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
					}
					if (v == 5) {
 8003786:	7dbb      	ldrb	r3, [r7, #22]
 8003788:	2b05      	cmp	r3, #5
 800378a:	f040 80bf 	bne.w	800390c <USART1_IRQHandler+0x30c>
						pos5 = n;
 800378e:	7bbb      	ldrb	r3, [r7, #14]
 8003790:	723b      	strb	r3, [r7, #8]
						for (uint8_t count2 = 0; count2 < pos5 - pos4; count2++)
 8003792:	2300      	movs	r3, #0
 8003794:	72fb      	strb	r3, [r7, #11]
 8003796:	e00b      	b.n	80037b0 <USART1_IRQHandler+0x1b0>
							LONG[count2] = RX1_BUF[pos4 + count2 + 1];
 8003798:	7cfa      	ldrb	r2, [r7, #19]
 800379a:	7afb      	ldrb	r3, [r7, #11]
 800379c:	4413      	add	r3, r2
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	7afb      	ldrb	r3, [r7, #11]
 80037a2:	494e      	ldr	r1, [pc, #312]	; (80038dc <USART1_IRQHandler+0x2dc>)
 80037a4:	5c89      	ldrb	r1, [r1, r2]
 80037a6:	4a50      	ldr	r2, [pc, #320]	; (80038e8 <USART1_IRQHandler+0x2e8>)
 80037a8:	54d1      	strb	r1, [r2, r3]
						for (uint8_t count2 = 0; count2 < pos5 - pos4; count2++)
 80037aa:	7afb      	ldrb	r3, [r7, #11]
 80037ac:	3301      	adds	r3, #1
 80037ae:	72fb      	strb	r3, [r7, #11]
 80037b0:	7afa      	ldrb	r2, [r7, #11]
 80037b2:	7a39      	ldrb	r1, [r7, #8]
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	1acb      	subs	r3, r1, r3
 80037b8:	429a      	cmp	r2, r3
 80037ba:	dbed      	blt.n	8003798 <USART1_IRQHandler+0x198>

						strcpy(TIME, TIME);
						strcpy(LAT, LAT);
						strcpy(LONG, LONG);
						time = atof(TIME);
 80037bc:	4848      	ldr	r0, [pc, #288]	; (80038e0 <USART1_IRQHandler+0x2e0>)
 80037be:	f003 ff4b 	bl	8007658 <atof>
 80037c2:	4603      	mov	r3, r0
 80037c4:	460c      	mov	r4, r1
 80037c6:	4618      	mov	r0, r3
 80037c8:	4621      	mov	r1, r4
 80037ca:	f7fd f935 	bl	8000a38 <__aeabi_d2iz>
 80037ce:	4602      	mov	r2, r0
 80037d0:	4b46      	ldr	r3, [pc, #280]	; (80038ec <USART1_IRQHandler+0x2ec>)
 80037d2:	601a      	str	r2, [r3, #0]
						ground_lat = calcoor(atof(LAT));
 80037d4:	4843      	ldr	r0, [pc, #268]	; (80038e4 <USART1_IRQHandler+0x2e4>)
 80037d6:	f003 ff3f 	bl	8007658 <atof>
 80037da:	4603      	mov	r3, r0
 80037dc:	460c      	mov	r4, r1
 80037de:	4618      	mov	r0, r3
 80037e0:	4621      	mov	r1, r4
 80037e2:	f7fd f971 	bl	8000ac8 <__aeabi_d2f>
 80037e6:	4603      	mov	r3, r0
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f9a7 	bl	8003b3c <calcoor>
 80037ee:	4602      	mov	r2, r0
 80037f0:	4b3f      	ldr	r3, [pc, #252]	; (80038f0 <USART1_IRQHandler+0x2f0>)
 80037f2:	601a      	str	r2, [r3, #0]
						ground_lng = calcoor(atof(LONG));
 80037f4:	483c      	ldr	r0, [pc, #240]	; (80038e8 <USART1_IRQHandler+0x2e8>)
 80037f6:	f003 ff2f 	bl	8007658 <atof>
 80037fa:	4603      	mov	r3, r0
 80037fc:	460c      	mov	r4, r1
 80037fe:	4618      	mov	r0, r3
 8003800:	4621      	mov	r1, r4
 8003802:	f7fd f961 	bl	8000ac8 <__aeabi_d2f>
 8003806:	4603      	mov	r3, r0
 8003808:	4618      	mov	r0, r3
 800380a:	f000 f997 	bl	8003b3c <calcoor>
 800380e:	4602      	mov	r2, r0
 8003810:	4b38      	ldr	r3, [pc, #224]	; (80038f4 <USART1_IRQHandler+0x2f4>)
 8003812:	601a      	str	r2, [r3, #0]
						sprintf(COOR, ":%2.7f:%2.7f\n", ground_lat, ground_lng);
 8003814:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <USART1_IRQHandler+0x2f0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7fc fe05 	bl	8000428 <__aeabi_f2d>
 800381e:	4605      	mov	r5, r0
 8003820:	460e      	mov	r6, r1
 8003822:	4b34      	ldr	r3, [pc, #208]	; (80038f4 <USART1_IRQHandler+0x2f4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fc fdfe 	bl	8000428 <__aeabi_f2d>
 800382c:	4603      	mov	r3, r0
 800382e:	460c      	mov	r4, r1
 8003830:	e9cd 3400 	strd	r3, r4, [sp]
 8003834:	462a      	mov	r2, r5
 8003836:	4633      	mov	r3, r6
 8003838:	492f      	ldr	r1, [pc, #188]	; (80038f8 <USART1_IRQHandler+0x2f8>)
 800383a:	4830      	ldr	r0, [pc, #192]	; (80038fc <USART1_IRQHandler+0x2fc>)
 800383c:	f004 fb92 	bl	8007f64 <siprintf>
						/*HAL_UART_Transmit(&huart3, (uint8_t*) COOR,
						 sizeof(COOR), 1000);*/
						uint32_t lat0next = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	607b      	str	r3, [r7, #4]
						uint32_t lng0next = 0;
 8003844:	2300      	movs	r3, #0
 8003846:	603b      	str	r3, [r7, #0]
						lat0next = (uint32_t) (ground_lat * 10000000.0);
 8003848:	4b29      	ldr	r3, [pc, #164]	; (80038f0 <USART1_IRQHandler+0x2f0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7fc fdeb 	bl	8000428 <__aeabi_f2d>
 8003852:	a31d      	add	r3, pc, #116	; (adr r3, 80038c8 <USART1_IRQHandler+0x2c8>)
 8003854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003858:	f7fc fe3e 	bl	80004d8 <__aeabi_dmul>
 800385c:	4603      	mov	r3, r0
 800385e:	460c      	mov	r4, r1
 8003860:	4618      	mov	r0, r3
 8003862:	4621      	mov	r1, r4
 8003864:	f7fd f910 	bl	8000a88 <__aeabi_d2uiz>
 8003868:	4603      	mov	r3, r0
 800386a:	607b      	str	r3, [r7, #4]
						lng0next = (uint32_t) (ground_lng * 10000000.0);
 800386c:	4b21      	ldr	r3, [pc, #132]	; (80038f4 <USART1_IRQHandler+0x2f4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7fc fdd9 	bl	8000428 <__aeabi_f2d>
 8003876:	a314      	add	r3, pc, #80	; (adr r3, 80038c8 <USART1_IRQHandler+0x2c8>)
 8003878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387c:	f7fc fe2c 	bl	80004d8 <__aeabi_dmul>
 8003880:	4603      	mov	r3, r0
 8003882:	460c      	mov	r4, r1
 8003884:	4618      	mov	r0, r3
 8003886:	4621      	mov	r1, r4
 8003888:	f7fd f8fe 	bl	8000a88 <__aeabi_d2uiz>
 800388c:	4603      	mov	r3, r0
 800388e:	603b      	str	r3, [r7, #0]
						NXT_SEND_VAL("x8.val", lat0next);
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	481b      	ldr	r0, [pc, #108]	; (8003900 <USART1_IRQHandler+0x300>)
 8003894:	f7ff fb84 	bl	8002fa0 <NXT_SEND_VAL>
						NXT_SEND_VAL("x9.val", lng0next);
 8003898:	6839      	ldr	r1, [r7, #0]
 800389a:	481a      	ldr	r0, [pc, #104]	; (8003904 <USART1_IRQHandler+0x304>)
 800389c:	f7ff fb80 	bl	8002fa0 <NXT_SEND_VAL>
						cal_dis = 1;
 80038a0:	4b19      	ldr	r3, [pc, #100]	; (8003908 <USART1_IRQHandler+0x308>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
						for (uint8_t c = 0; c < sizeof(RX1_BUF); c++)
 80038a6:	2300      	movs	r3, #0
 80038a8:	72bb      	strb	r3, [r7, #10]
 80038aa:	e006      	b.n	80038ba <USART1_IRQHandler+0x2ba>
							RX1_BUF[c] = '\0';
 80038ac:	7abb      	ldrb	r3, [r7, #10]
 80038ae:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <USART1_IRQHandler+0x2dc>)
 80038b0:	2100      	movs	r1, #0
 80038b2:	54d1      	strb	r1, [r2, r3]
						for (uint8_t c = 0; c < sizeof(RX1_BUF); c++)
 80038b4:	7abb      	ldrb	r3, [r7, #10]
 80038b6:	3301      	adds	r3, #1
 80038b8:	72bb      	strb	r3, [r7, #10]
 80038ba:	7abb      	ldrb	r3, [r7, #10]
 80038bc:	2b63      	cmp	r3, #99	; 0x63
 80038be:	d9f5      	bls.n	80038ac <USART1_IRQHandler+0x2ac>
						break;
 80038c0:	e02c      	b.n	800391c <USART1_IRQHandler+0x31c>
 80038c2:	bf00      	nop
 80038c4:	f3af 8000 	nop.w
 80038c8:	00000000 	.word	0x00000000
 80038cc:	416312d0 	.word	0x416312d0
 80038d0:	20000544 	.word	0x20000544
 80038d4:	200003f0 	.word	0x200003f0
 80038d8:	20000400 	.word	0x20000400
 80038dc:	20000648 	.word	0x20000648
 80038e0:	20000614 	.word	0x20000614
 80038e4:	200006ac 	.word	0x200006ac
 80038e8:	20000620 	.word	0x20000620
 80038ec:	200003fc 	.word	0x200003fc
 80038f0:	200003f4 	.word	0x200003f4
 80038f4:	200003f8 	.word	0x200003f8
 80038f8:	0800c994 	.word	0x0800c994
 80038fc:	2000062c 	.word	0x2000062c
 8003900:	0800c9a4 	.word	0x0800c9a4
 8003904:	0800c9ac 	.word	0x0800c9ac
 8003908:	200002c6 	.word	0x200002c6
				for (uint8_t n = 0; n < sizeof(RX1_BUF); n++) {
 800390c:	7bbb      	ldrb	r3, [r7, #14]
 800390e:	3301      	adds	r3, #1
 8003910:	73bb      	strb	r3, [r7, #14]
 8003912:	7bbb      	ldrb	r3, [r7, #14]
 8003914:	2b63      	cmp	r3, #99	; 0x63
 8003916:	f67f aed7 	bls.w	80036c8 <USART1_IRQHandler+0xc8>
					}
				}
				break;
 800391a:	e009      	b.n	8003930 <USART1_IRQHandler+0x330>
 800391c:	e008      	b.n	8003930 <USART1_IRQHandler+0x330>
		for (uint8_t i = 0; i < c1; i++) {
 800391e:	7dfb      	ldrb	r3, [r7, #23]
 8003920:	3301      	adds	r3, #1
 8003922:	75fb      	strb	r3, [r7, #23]
 8003924:	4b09      	ldr	r3, [pc, #36]	; (800394c <USART1_IRQHandler+0x34c>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	7dfa      	ldrb	r2, [r7, #23]
 800392a:	429a      	cmp	r2, r3
 800392c:	f4ff ae85 	bcc.w	800363a <USART1_IRQHandler+0x3a>
			}
		}
		c1 = 0;
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <USART1_IRQHandler+0x34c>)
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
	}
	c1++;
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <USART1_IRQHandler+0x34c>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4b03      	ldr	r3, [pc, #12]	; (800394c <USART1_IRQHandler+0x34c>)
 8003940:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 1 */
}
 8003942:	bf00      	nop
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800394a:	bf00      	nop
 800394c:	20000400 	.word	0x20000400

08003950 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003956:	482a      	ldr	r0, [pc, #168]	; (8003a00 <USART2_IRQHandler+0xb0>)
 8003958:	f003 fa4a 	bl	8006df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &buff2, 1);
 800395c:	2201      	movs	r2, #1
 800395e:	4929      	ldr	r1, [pc, #164]	; (8003a04 <USART2_IRQHandler+0xb4>)
 8003960:	4827      	ldr	r0, [pc, #156]	; (8003a00 <USART2_IRQHandler+0xb0>)
 8003962:	f003 fa14 	bl	8006d8e <HAL_UART_Receive_IT>
	if (buff2 != '\n' && buff2 != '\0' ) {
 8003966:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <USART2_IRQHandler+0xb4>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b0a      	cmp	r3, #10
 800396c:	d016      	beq.n	800399c <USART2_IRQHandler+0x4c>
 800396e:	4b25      	ldr	r3, [pc, #148]	; (8003a04 <USART2_IRQHandler+0xb4>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d012      	beq.n	800399c <USART2_IRQHandler+0x4c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8003976:	2201      	movs	r2, #1
 8003978:	2180      	movs	r1, #128	; 0x80
 800397a:	4823      	ldr	r0, [pc, #140]	; (8003a08 <USART2_IRQHandler+0xb8>)
 800397c:	f000 fd22 	bl	80043c4 <HAL_GPIO_WritePin>
		RX2_BUF[n] = buff2;
 8003980:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <USART2_IRQHandler+0xbc>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	4b1f      	ldr	r3, [pc, #124]	; (8003a04 <USART2_IRQHandler+0xb4>)
 8003988:	7819      	ldrb	r1, [r3, #0]
 800398a:	4b21      	ldr	r3, [pc, #132]	; (8003a10 <USART2_IRQHandler+0xc0>)
 800398c:	5499      	strb	r1, [r3, r2]
		n++;
 800398e:	4b1f      	ldr	r3, [pc, #124]	; (8003a0c <USART2_IRQHandler+0xbc>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	3301      	adds	r3, #1
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <USART2_IRQHandler+0xbc>)
 8003998:	701a      	strb	r2, [r3, #0]
		n = 0;
		//HAL_UART_Transmit(&huart3, (uint8_t*) RX2_BUF, sizeof(RX2_BUF), 1000);  // For hard fault interrupt, you have to assign priority UART ports
		RX2 = 1;
  	}
  /* USER CODE END USART2_IRQn 1 */
}
 800399a:	e02d      	b.n	80039f8 <USART2_IRQHandler+0xa8>
	} else if(buff2 == '\n') {
 800399c:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <USART2_IRQHandler+0xb4>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b0a      	cmp	r3, #10
 80039a2:	d129      	bne.n	80039f8 <USART2_IRQHandler+0xa8>
		uint8_t A = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80039a8:	2200      	movs	r2, #0
 80039aa:	2180      	movs	r1, #128	; 0x80
 80039ac:	4816      	ldr	r0, [pc, #88]	; (8003a08 <USART2_IRQHandler+0xb8>)
 80039ae:	f000 fd09 	bl	80043c4 <HAL_GPIO_WritePin>
		for (n; n < sizeof(RX2_BUF); n++) {
 80039b2:	e015      	b.n	80039e0 <USART2_IRQHandler+0x90>
			RX2_BUF[n] = COOR[A];
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	4a15      	ldr	r2, [pc, #84]	; (8003a0c <USART2_IRQHandler+0xbc>)
 80039b8:	7812      	ldrb	r2, [r2, #0]
 80039ba:	4611      	mov	r1, r2
 80039bc:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <USART2_IRQHandler+0xc4>)
 80039be:	5cd2      	ldrb	r2, [r2, r3]
 80039c0:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <USART2_IRQHandler+0xc0>)
 80039c2:	545a      	strb	r2, [r3, r1]
			if (COOR[A] == '\0') {
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	4a13      	ldr	r2, [pc, #76]	; (8003a14 <USART2_IRQHandler+0xc4>)
 80039c8:	5cd3      	ldrb	r3, [r2, r3]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00d      	beq.n	80039ea <USART2_IRQHandler+0x9a>
			A++;
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	3301      	adds	r3, #1
 80039d2:	71fb      	strb	r3, [r7, #7]
		for (n; n < sizeof(RX2_BUF); n++) {
 80039d4:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <USART2_IRQHandler+0xbc>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <USART2_IRQHandler+0xbc>)
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <USART2_IRQHandler+0xbc>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b77      	cmp	r3, #119	; 0x77
 80039e6:	d9e5      	bls.n	80039b4 <USART2_IRQHandler+0x64>
 80039e8:	e000      	b.n	80039ec <USART2_IRQHandler+0x9c>
				break;
 80039ea:	bf00      	nop
		n = 0;
 80039ec:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <USART2_IRQHandler+0xbc>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	701a      	strb	r2, [r3, #0]
		RX2 = 1;
 80039f2:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <USART2_IRQHandler+0xc8>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	200005d0 	.word	0x200005d0
 8003a04:	200003f1 	.word	0x200003f1
 8003a08:	40010800 	.word	0x40010800
 8003a0c:	20000401 	.word	0x20000401
 8003a10:	200002f8 	.word	0x200002f8
 8003a14:	2000062c 	.word	0x2000062c
 8003a18:	200003e8 	.word	0x200003e8

08003a1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003a22:	483d      	ldr	r0, [pc, #244]	; (8003b18 <USART3_IRQHandler+0xfc>)
 8003a24:	f003 f9e4 	bl	8006df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*) &buff, 1);
 8003a28:	2201      	movs	r2, #1
 8003a2a:	493c      	ldr	r1, [pc, #240]	; (8003b1c <USART3_IRQHandler+0x100>)
 8003a2c:	483a      	ldr	r0, [pc, #232]	; (8003b18 <USART3_IRQHandler+0xfc>)
 8003a2e:	f003 f9ae 	bl	8006d8e <HAL_UART_Receive_IT>

  	if (buff == '$')
 8003a32:	4b3a      	ldr	r3, [pc, #232]	; (8003b1c <USART3_IRQHandler+0x100>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b24      	cmp	r3, #36	; 0x24
 8003a38:	d103      	bne.n	8003a42 <USART3_IRQHandler+0x26>
  		run = 1;
 8003a3a:	4b39      	ldr	r3, [pc, #228]	; (8003b20 <USART3_IRQHandler+0x104>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]
 8003a40:	e002      	b.n	8003a48 <USART3_IRQHandler+0x2c>
  	else if(buff == 0x00){
 8003a42:	4b36      	ldr	r3, [pc, #216]	; (8003b1c <USART3_IRQHandler+0x100>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
  		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
  	}
  	else if(buff == 0x1A){
  	  		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  	}
  	if (run == 1) {
 8003a48:	4b35      	ldr	r3, [pc, #212]	; (8003b20 <USART3_IRQHandler+0x104>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d15e      	bne.n	8003b0e <USART3_IRQHandler+0xf2>
  		RX3_buff[count1] = buff;
 8003a50:	4b34      	ldr	r3, [pc, #208]	; (8003b24 <USART3_IRQHandler+0x108>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	4b31      	ldr	r3, [pc, #196]	; (8003b1c <USART3_IRQHandler+0x100>)
 8003a58:	7819      	ldrb	r1, [r3, #0]
 8003a5a:	4b33      	ldr	r3, [pc, #204]	; (8003b28 <USART3_IRQHandler+0x10c>)
 8003a5c:	5499      	strb	r1, [r3, r2]
  		count1++;
 8003a5e:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <USART3_IRQHandler+0x108>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	3301      	adds	r3, #1
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	4b2f      	ldr	r3, [pc, #188]	; (8003b24 <USART3_IRQHandler+0x108>)
 8003a68:	701a      	strb	r2, [r3, #0]
  		if (buff == '&') {
 8003a6a:	4b2c      	ldr	r3, [pc, #176]	; (8003b1c <USART3_IRQHandler+0x100>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b26      	cmp	r3, #38	; 0x26
 8003a70:	d146      	bne.n	8003b00 <USART3_IRQHandler+0xe4>
  			count1 = 0;
 8003a72:	4b2c      	ldr	r3, [pc, #176]	; (8003b24 <USART3_IRQHandler+0x108>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
  			if (RX3_buff[1] == '0' && RX3_buff[2] == 0x02)
 8003a78:	4b2b      	ldr	r3, [pc, #172]	; (8003b28 <USART3_IRQHandler+0x10c>)
 8003a7a:	785b      	ldrb	r3, [r3, #1]
 8003a7c:	2b30      	cmp	r3, #48	; 0x30
 8003a7e:	d107      	bne.n	8003a90 <USART3_IRQHandler+0x74>
 8003a80:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <USART3_IRQHandler+0x10c>)
 8003a82:	789b      	ldrb	r3, [r3, #2]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d103      	bne.n	8003a90 <USART3_IRQHandler+0x74>
  				recal = 1;
 8003a88:	4b28      	ldr	r3, [pc, #160]	; (8003b2c <USART3_IRQHandler+0x110>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	e02a      	b.n	8003ae6 <USART3_IRQHandler+0xca>
  			else if (RX3_buff[1] == '0' && RX3_buff[2] == 0x05)
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <USART3_IRQHandler+0x10c>)
 8003a92:	785b      	ldrb	r3, [r3, #1]
 8003a94:	2b30      	cmp	r3, #48	; 0x30
 8003a96:	d107      	bne.n	8003aa8 <USART3_IRQHandler+0x8c>
 8003a98:	4b23      	ldr	r3, [pc, #140]	; (8003b28 <USART3_IRQHandler+0x10c>)
 8003a9a:	789b      	ldrb	r3, [r3, #2]
 8003a9c:	2b05      	cmp	r3, #5
 8003a9e:	d103      	bne.n	8003aa8 <USART3_IRQHandler+0x8c>
  				newrecord = 1;
 8003aa0:	4b23      	ldr	r3, [pc, #140]	; (8003b30 <USART3_IRQHandler+0x114>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	e01e      	b.n	8003ae6 <USART3_IRQHandler+0xca>
  			else if (RX3_buff[1] == '0' && RX3_buff[2] == 0x03){
 8003aa8:	4b1f      	ldr	r3, [pc, #124]	; (8003b28 <USART3_IRQHandler+0x10c>)
 8003aaa:	785b      	ldrb	r3, [r3, #1]
 8003aac:	2b30      	cmp	r3, #48	; 0x30
 8003aae:	d10f      	bne.n	8003ad0 <USART3_IRQHandler+0xb4>
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <USART3_IRQHandler+0x10c>)
 8003ab2:	789b      	ldrb	r3, [r3, #2]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d10b      	bne.n	8003ad0 <USART3_IRQHandler+0xb4>
  				if(pause == 0)
 8003ab8:	4b1e      	ldr	r3, [pc, #120]	; (8003b34 <USART3_IRQHandler+0x118>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d103      	bne.n	8003ac8 <USART3_IRQHandler+0xac>
  					pause = 1;
 8003ac0:	4b1c      	ldr	r3, [pc, #112]	; (8003b34 <USART3_IRQHandler+0x118>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
  				if(pause == 0)
 8003ac6:	e00e      	b.n	8003ae6 <USART3_IRQHandler+0xca>
  				else
  					pause = 0;
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <USART3_IRQHandler+0x118>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]
  				if(pause == 0)
 8003ace:	e00a      	b.n	8003ae6 <USART3_IRQHandler+0xca>
  			}
  			else if (RX3_buff[1] == '0' && RX3_buff[2] == 0x04)
 8003ad0:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <USART3_IRQHandler+0x10c>)
 8003ad2:	785b      	ldrb	r3, [r3, #1]
 8003ad4:	2b30      	cmp	r3, #48	; 0x30
 8003ad6:	d106      	bne.n	8003ae6 <USART3_IRQHandler+0xca>
 8003ad8:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <USART3_IRQHandler+0x10c>)
 8003ada:	789b      	ldrb	r3, [r3, #2]
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d102      	bne.n	8003ae6 <USART3_IRQHandler+0xca>
  				stop = 1;
 8003ae0:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <USART3_IRQHandler+0x11c>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
  			for (uint8_t i = 0; i < sizeof(RX3_buff); i++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	71fb      	strb	r3, [r7, #7]
 8003aea:	e006      	b.n	8003afa <USART3_IRQHandler+0xde>
  				RX3_buff[i] = '\0';
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	4a0e      	ldr	r2, [pc, #56]	; (8003b28 <USART3_IRQHandler+0x10c>)
 8003af0:	2100      	movs	r1, #0
 8003af2:	54d1      	strb	r1, [r2, r3]
  			for (uint8_t i = 0; i < sizeof(RX3_buff); i++)
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	3301      	adds	r3, #1
 8003af8:	71fb      	strb	r3, [r7, #7]
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d9f5      	bls.n	8003aec <USART3_IRQHandler+0xd0>
  		}
  		if (buff == '&')
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <USART3_IRQHandler+0x100>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b26      	cmp	r3, #38	; 0x26
 8003b06:	d102      	bne.n	8003b0e <USART3_IRQHandler+0xf2>
  			run = 0;
 8003b08:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <USART3_IRQHandler+0x104>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
  	}
  /* USER CODE END USART3_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	200004ac 	.word	0x200004ac
 8003b1c:	20000408 	.word	0x20000408
 8003b20:	2000040a 	.word	0x2000040a
 8003b24:	20000409 	.word	0x20000409
 8003b28:	20000404 	.word	0x20000404
 8003b2c:	2000027d 	.word	0x2000027d
 8003b30:	2000027f 	.word	0x2000027f
 8003b34:	20000280 	.word	0x20000280
 8003b38:	2000027e 	.word	0x2000027e

08003b3c <calcoor>:

/* USER CODE BEGIN 1 */
float calcoor(float x)
{
 8003b3c:	b5b0      	push	{r4, r5, r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	float a = (int)x / 100;
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7fd fae3 	bl	8001110 <__aeabi_f2iz>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4a1b      	ldr	r2, [pc, #108]	; (8003bbc <calcoor+0x80>)
 8003b4e:	fb82 1203 	smull	r1, r2, r2, r3
 8003b52:	1152      	asrs	r2, r2, #5
 8003b54:	17db      	asrs	r3, r3, #31
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fd f8bf 	bl	8000cdc <__aeabi_i2f>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	60fb      	str	r3, [r7, #12]
	float b = (x - (a * 100.0)) / 60.0;
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fc fc60 	bl	8000428 <__aeabi_f2d>
 8003b68:	4604      	mov	r4, r0
 8003b6a:	460d      	mov	r5, r1
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f7fc fc5b 	bl	8000428 <__aeabi_f2d>
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <calcoor+0x84>)
 8003b78:	f7fc fcae 	bl	80004d8 <__aeabi_dmul>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4620      	mov	r0, r4
 8003b82:	4629      	mov	r1, r5
 8003b84:	f7fc faf0 	bl	8000168 <__aeabi_dsub>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	4621      	mov	r1, r4
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <calcoor+0x88>)
 8003b96:	f7fc fdc9 	bl	800072c <__aeabi_ddiv>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	f7fc ff91 	bl	8000ac8 <__aeabi_d2f>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	60bb      	str	r3, [r7, #8]
	return a+b;
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f7fc ffe1 	bl	8000b74 <__addsf3>
 8003bb2:	4603      	mov	r3, r0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bdb0      	pop	{r4, r5, r7, pc}
 8003bbc:	51eb851f 	.word	0x51eb851f
 8003bc0:	40590000 	.word	0x40590000
 8003bc4:	404e0000 	.word	0x404e0000

08003bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bd0:	4a14      	ldr	r2, [pc, #80]	; (8003c24 <_sbrk+0x5c>)
 8003bd2:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <_sbrk+0x60>)
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bdc:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <_sbrk+0x64>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <_sbrk+0x64>)
 8003be6:	4a12      	ldr	r2, [pc, #72]	; (8003c30 <_sbrk+0x68>)
 8003be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bea:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <_sbrk+0x64>)
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d207      	bcs.n	8003c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bf8:	f003 fd32 	bl	8007660 <__errno>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	230c      	movs	r3, #12
 8003c00:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003c02:	f04f 33ff 	mov.w	r3, #4294967295
 8003c06:	e009      	b.n	8003c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c08:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <_sbrk+0x64>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c0e:	4b07      	ldr	r3, [pc, #28]	; (8003c2c <_sbrk+0x64>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	4a05      	ldr	r2, [pc, #20]	; (8003c2c <_sbrk+0x64>)
 8003c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20005000 	.word	0x20005000
 8003c28:	00000400 	.word	0x00000400
 8003c2c:	2000040c 	.word	0x2000040c
 8003c30:	200006c0 	.word	0x200006c0

08003c34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr

08003c40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c40:	480c      	ldr	r0, [pc, #48]	; (8003c74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c42:	490d      	ldr	r1, [pc, #52]	; (8003c78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c44:	4a0d      	ldr	r2, [pc, #52]	; (8003c7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c48:	e002      	b.n	8003c50 <LoopCopyDataInit>

08003c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c4e:	3304      	adds	r3, #4

08003c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c54:	d3f9      	bcc.n	8003c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c56:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c58:	4c0a      	ldr	r4, [pc, #40]	; (8003c84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c5c:	e001      	b.n	8003c62 <LoopFillZerobss>

08003c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c60:	3204      	adds	r2, #4

08003c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c64:	d3fb      	bcc.n	8003c5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c66:	f7ff ffe5 	bl	8003c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c6a:	f003 fcff 	bl	800766c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c6e:	f7fd feed 	bl	8001a4c <main>
  bx lr
 8003c72:	4770      	bx	lr
  ldr r0, =_sdata
 8003c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c78:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003c7c:	0800ced8 	.word	0x0800ced8
  ldr r2, =_sbss
 8003c80:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003c84:	200006c0 	.word	0x200006c0

08003c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c88:	e7fe      	b.n	8003c88 <ADC1_2_IRQHandler>
	...

08003c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c90:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <HAL_Init+0x28>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a07      	ldr	r2, [pc, #28]	; (8003cb4 <HAL_Init+0x28>)
 8003c96:	f043 0310 	orr.w	r3, r3, #16
 8003c9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c9c:	2003      	movs	r0, #3
 8003c9e:	f000 f945 	bl	8003f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	f000 f808 	bl	8003cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ca8:	f7ff fab2 	bl	8003210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40022000 	.word	0x40022000

08003cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cc0:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <HAL_InitTick+0x54>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <HAL_InitTick+0x58>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f95d 	bl	8003f96 <HAL_SYSTICK_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00e      	b.n	8003d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b0f      	cmp	r3, #15
 8003cea:	d80a      	bhi.n	8003d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cec:	2200      	movs	r2, #0
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	f000 f925 	bl	8003f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cf8:	4a06      	ldr	r2, [pc, #24]	; (8003d14 <HAL_InitTick+0x5c>)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e000      	b.n	8003d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000020 	.word	0x20000020
 8003d10:	20000028 	.word	0x20000028
 8003d14:	20000024 	.word	0x20000024

08003d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_IncTick+0x1c>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_IncTick+0x20>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4413      	add	r3, r2
 8003d28:	4a03      	ldr	r2, [pc, #12]	; (8003d38 <HAL_IncTick+0x20>)
 8003d2a:	6013      	str	r3, [r2, #0]
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	20000028 	.word	0x20000028
 8003d38:	200006b8 	.word	0x200006b8

08003d3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d40:	4b02      	ldr	r3, [pc, #8]	; (8003d4c <HAL_GetTick+0x10>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	200006b8 	.word	0x200006b8

08003d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d58:	f7ff fff0 	bl	8003d3c <HAL_GetTick>
 8003d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d68:	d005      	beq.n	8003d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <HAL_Delay+0x40>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d76:	bf00      	nop
 8003d78:	f7ff ffe0 	bl	8003d3c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d8f7      	bhi.n	8003d78 <HAL_Delay+0x28>
  {
  }
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000028 	.word	0x20000028

08003d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003db0:	4013      	ands	r3, r2
 8003db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dc6:	4a04      	ldr	r2, [pc, #16]	; (8003dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	60d3      	str	r3, [r2, #12]
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003de0:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <__NVIC_GetPriorityGrouping+0x18>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	0a1b      	lsrs	r3, r3, #8
 8003de6:	f003 0307 	and.w	r3, r3, #7
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	e000ed00 	.word	0xe000ed00

08003df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	db0b      	blt.n	8003e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	f003 021f 	and.w	r2, r3, #31
 8003e10:	4906      	ldr	r1, [pc, #24]	; (8003e2c <__NVIC_EnableIRQ+0x34>)
 8003e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	2001      	movs	r0, #1
 8003e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr
 8003e2c:	e000e100 	.word	0xe000e100

08003e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	6039      	str	r1, [r7, #0]
 8003e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	db0a      	blt.n	8003e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	490c      	ldr	r1, [pc, #48]	; (8003e7c <__NVIC_SetPriority+0x4c>)
 8003e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4e:	0112      	lsls	r2, r2, #4
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	440b      	add	r3, r1
 8003e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e58:	e00a      	b.n	8003e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	4908      	ldr	r1, [pc, #32]	; (8003e80 <__NVIC_SetPriority+0x50>)
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	3b04      	subs	r3, #4
 8003e68:	0112      	lsls	r2, r2, #4
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	761a      	strb	r2, [r3, #24]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	e000e100 	.word	0xe000e100
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b089      	sub	sp, #36	; 0x24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f1c3 0307 	rsb	r3, r3, #7
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	bf28      	it	cs
 8003ea2:	2304      	movcs	r3, #4
 8003ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	2b06      	cmp	r3, #6
 8003eac:	d902      	bls.n	8003eb4 <NVIC_EncodePriority+0x30>
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3b03      	subs	r3, #3
 8003eb2:	e000      	b.n	8003eb6 <NVIC_EncodePriority+0x32>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43da      	mvns	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed6:	43d9      	mvns	r1, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003edc:	4313      	orrs	r3, r2
         );
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3724      	adds	r7, #36	; 0x24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ef8:	d301      	bcc.n	8003efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003efa:	2301      	movs	r3, #1
 8003efc:	e00f      	b.n	8003f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003efe:	4a0a      	ldr	r2, [pc, #40]	; (8003f28 <SysTick_Config+0x40>)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f06:	210f      	movs	r1, #15
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0c:	f7ff ff90 	bl	8003e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <SysTick_Config+0x40>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f16:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <SysTick_Config+0x40>)
 8003f18:	2207      	movs	r2, #7
 8003f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	e000e010 	.word	0xe000e010

08003f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff ff2d 	bl	8003d94 <__NVIC_SetPriorityGrouping>
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b086      	sub	sp, #24
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	4603      	mov	r3, r0
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
 8003f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f54:	f7ff ff42 	bl	8003ddc <__NVIC_GetPriorityGrouping>
 8003f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68b9      	ldr	r1, [r7, #8]
 8003f5e:	6978      	ldr	r0, [r7, #20]
 8003f60:	f7ff ff90 	bl	8003e84 <NVIC_EncodePriority>
 8003f64:	4602      	mov	r2, r0
 8003f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff ff5f 	bl	8003e30 <__NVIC_SetPriority>
}
 8003f72:	bf00      	nop
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	4603      	mov	r3, r0
 8003f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff ff35 	bl	8003df8 <__NVIC_EnableIRQ>
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff ffa2 	bl	8003ee8 <SysTick_Config>
 8003fa4:	4603      	mov	r3, r0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b085      	sub	sp, #20
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d008      	beq.n	8003fd6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e020      	b.n	8004018 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 020e 	bic.w	r2, r2, #14
 8003fe4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffe:	2101      	movs	r1, #1
 8004000:	fa01 f202 	lsl.w	r2, r1, r2
 8004004:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004016:	7bfb      	ldrb	r3, [r7, #15]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr
	...

08004024 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004036:	2b02      	cmp	r3, #2
 8004038:	d005      	beq.n	8004046 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2204      	movs	r2, #4
 800403e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
 8004044:	e051      	b.n	80040ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 020e 	bic.w	r2, r2, #14
 8004054:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0201 	bic.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a22      	ldr	r2, [pc, #136]	; (80040f4 <HAL_DMA_Abort_IT+0xd0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d029      	beq.n	80040c4 <HAL_DMA_Abort_IT+0xa0>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a20      	ldr	r2, [pc, #128]	; (80040f8 <HAL_DMA_Abort_IT+0xd4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d022      	beq.n	80040c0 <HAL_DMA_Abort_IT+0x9c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a1f      	ldr	r2, [pc, #124]	; (80040fc <HAL_DMA_Abort_IT+0xd8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d01a      	beq.n	80040ba <HAL_DMA_Abort_IT+0x96>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <HAL_DMA_Abort_IT+0xdc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d012      	beq.n	80040b4 <HAL_DMA_Abort_IT+0x90>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a1c      	ldr	r2, [pc, #112]	; (8004104 <HAL_DMA_Abort_IT+0xe0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00a      	beq.n	80040ae <HAL_DMA_Abort_IT+0x8a>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1a      	ldr	r2, [pc, #104]	; (8004108 <HAL_DMA_Abort_IT+0xe4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d102      	bne.n	80040a8 <HAL_DMA_Abort_IT+0x84>
 80040a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80040a6:	e00e      	b.n	80040c6 <HAL_DMA_Abort_IT+0xa2>
 80040a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040ac:	e00b      	b.n	80040c6 <HAL_DMA_Abort_IT+0xa2>
 80040ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040b2:	e008      	b.n	80040c6 <HAL_DMA_Abort_IT+0xa2>
 80040b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040b8:	e005      	b.n	80040c6 <HAL_DMA_Abort_IT+0xa2>
 80040ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040be:	e002      	b.n	80040c6 <HAL_DMA_Abort_IT+0xa2>
 80040c0:	2310      	movs	r3, #16
 80040c2:	e000      	b.n	80040c6 <HAL_DMA_Abort_IT+0xa2>
 80040c4:	2301      	movs	r3, #1
 80040c6:	4a11      	ldr	r2, [pc, #68]	; (800410c <HAL_DMA_Abort_IT+0xe8>)
 80040c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	4798      	blx	r3
    } 
  }
  return status;
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40020008 	.word	0x40020008
 80040f8:	4002001c 	.word	0x4002001c
 80040fc:	40020030 	.word	0x40020030
 8004100:	40020044 	.word	0x40020044
 8004104:	40020058 	.word	0x40020058
 8004108:	4002006c 	.word	0x4002006c
 800410c:	40020000 	.word	0x40020000

08004110 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004110:	b480      	push	{r7}
 8004112:	b08b      	sub	sp, #44	; 0x2c
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800411a:	2300      	movs	r3, #0
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800411e:	2300      	movs	r3, #0
 8004120:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004122:	e127      	b.n	8004374 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004124:	2201      	movs	r2, #1
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	4013      	ands	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	429a      	cmp	r2, r3
 800413e:	f040 8116 	bne.w	800436e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b12      	cmp	r3, #18
 8004148:	d034      	beq.n	80041b4 <HAL_GPIO_Init+0xa4>
 800414a:	2b12      	cmp	r3, #18
 800414c:	d80d      	bhi.n	800416a <HAL_GPIO_Init+0x5a>
 800414e:	2b02      	cmp	r3, #2
 8004150:	d02b      	beq.n	80041aa <HAL_GPIO_Init+0x9a>
 8004152:	2b02      	cmp	r3, #2
 8004154:	d804      	bhi.n	8004160 <HAL_GPIO_Init+0x50>
 8004156:	2b00      	cmp	r3, #0
 8004158:	d031      	beq.n	80041be <HAL_GPIO_Init+0xae>
 800415a:	2b01      	cmp	r3, #1
 800415c:	d01c      	beq.n	8004198 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800415e:	e048      	b.n	80041f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004160:	2b03      	cmp	r3, #3
 8004162:	d043      	beq.n	80041ec <HAL_GPIO_Init+0xdc>
 8004164:	2b11      	cmp	r3, #17
 8004166:	d01b      	beq.n	80041a0 <HAL_GPIO_Init+0x90>
          break;
 8004168:	e043      	b.n	80041f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800416a:	4a89      	ldr	r2, [pc, #548]	; (8004390 <HAL_GPIO_Init+0x280>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d026      	beq.n	80041be <HAL_GPIO_Init+0xae>
 8004170:	4a87      	ldr	r2, [pc, #540]	; (8004390 <HAL_GPIO_Init+0x280>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d806      	bhi.n	8004184 <HAL_GPIO_Init+0x74>
 8004176:	4a87      	ldr	r2, [pc, #540]	; (8004394 <HAL_GPIO_Init+0x284>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d020      	beq.n	80041be <HAL_GPIO_Init+0xae>
 800417c:	4a86      	ldr	r2, [pc, #536]	; (8004398 <HAL_GPIO_Init+0x288>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01d      	beq.n	80041be <HAL_GPIO_Init+0xae>
          break;
 8004182:	e036      	b.n	80041f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004184:	4a85      	ldr	r2, [pc, #532]	; (800439c <HAL_GPIO_Init+0x28c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d019      	beq.n	80041be <HAL_GPIO_Init+0xae>
 800418a:	4a85      	ldr	r2, [pc, #532]	; (80043a0 <HAL_GPIO_Init+0x290>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d016      	beq.n	80041be <HAL_GPIO_Init+0xae>
 8004190:	4a84      	ldr	r2, [pc, #528]	; (80043a4 <HAL_GPIO_Init+0x294>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <HAL_GPIO_Init+0xae>
          break;
 8004196:	e02c      	b.n	80041f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	623b      	str	r3, [r7, #32]
          break;
 800419e:	e028      	b.n	80041f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	3304      	adds	r3, #4
 80041a6:	623b      	str	r3, [r7, #32]
          break;
 80041a8:	e023      	b.n	80041f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	3308      	adds	r3, #8
 80041b0:	623b      	str	r3, [r7, #32]
          break;
 80041b2:	e01e      	b.n	80041f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	330c      	adds	r3, #12
 80041ba:	623b      	str	r3, [r7, #32]
          break;
 80041bc:	e019      	b.n	80041f2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d102      	bne.n	80041cc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80041c6:	2304      	movs	r3, #4
 80041c8:	623b      	str	r3, [r7, #32]
          break;
 80041ca:	e012      	b.n	80041f2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d105      	bne.n	80041e0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041d4:	2308      	movs	r3, #8
 80041d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	611a      	str	r2, [r3, #16]
          break;
 80041de:	e008      	b.n	80041f2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041e0:	2308      	movs	r3, #8
 80041e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	615a      	str	r2, [r3, #20]
          break;
 80041ea:	e002      	b.n	80041f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80041ec:	2300      	movs	r3, #0
 80041ee:	623b      	str	r3, [r7, #32]
          break;
 80041f0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2bff      	cmp	r3, #255	; 0xff
 80041f6:	d801      	bhi.n	80041fc <HAL_GPIO_Init+0xec>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	e001      	b.n	8004200 <HAL_GPIO_Init+0xf0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3304      	adds	r3, #4
 8004200:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2bff      	cmp	r3, #255	; 0xff
 8004206:	d802      	bhi.n	800420e <HAL_GPIO_Init+0xfe>
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	e002      	b.n	8004214 <HAL_GPIO_Init+0x104>
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	3b08      	subs	r3, #8
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	210f      	movs	r1, #15
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	fa01 f303 	lsl.w	r3, r1, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	401a      	ands	r2, r3
 8004226:	6a39      	ldr	r1, [r7, #32]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	fa01 f303 	lsl.w	r3, r1, r3
 800422e:	431a      	orrs	r2, r3
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8096 	beq.w	800436e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004242:	4b59      	ldr	r3, [pc, #356]	; (80043a8 <HAL_GPIO_Init+0x298>)
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	4a58      	ldr	r2, [pc, #352]	; (80043a8 <HAL_GPIO_Init+0x298>)
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	6193      	str	r3, [r2, #24]
 800424e:	4b56      	ldr	r3, [pc, #344]	; (80043a8 <HAL_GPIO_Init+0x298>)
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	60bb      	str	r3, [r7, #8]
 8004258:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800425a:	4a54      	ldr	r2, [pc, #336]	; (80043ac <HAL_GPIO_Init+0x29c>)
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	3302      	adds	r3, #2
 8004262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004266:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	220f      	movs	r2, #15
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4013      	ands	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a4b      	ldr	r2, [pc, #300]	; (80043b0 <HAL_GPIO_Init+0x2a0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <HAL_GPIO_Init+0x19e>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a4a      	ldr	r2, [pc, #296]	; (80043b4 <HAL_GPIO_Init+0x2a4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00d      	beq.n	80042aa <HAL_GPIO_Init+0x19a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a49      	ldr	r2, [pc, #292]	; (80043b8 <HAL_GPIO_Init+0x2a8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d007      	beq.n	80042a6 <HAL_GPIO_Init+0x196>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a48      	ldr	r2, [pc, #288]	; (80043bc <HAL_GPIO_Init+0x2ac>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d101      	bne.n	80042a2 <HAL_GPIO_Init+0x192>
 800429e:	2303      	movs	r3, #3
 80042a0:	e006      	b.n	80042b0 <HAL_GPIO_Init+0x1a0>
 80042a2:	2304      	movs	r3, #4
 80042a4:	e004      	b.n	80042b0 <HAL_GPIO_Init+0x1a0>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e002      	b.n	80042b0 <HAL_GPIO_Init+0x1a0>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <HAL_GPIO_Init+0x1a0>
 80042ae:	2300      	movs	r3, #0
 80042b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b2:	f002 0203 	and.w	r2, r2, #3
 80042b6:	0092      	lsls	r2, r2, #2
 80042b8:	4093      	lsls	r3, r2
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80042c0:	493a      	ldr	r1, [pc, #232]	; (80043ac <HAL_GPIO_Init+0x29c>)
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	089b      	lsrs	r3, r3, #2
 80042c6:	3302      	adds	r3, #2
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d006      	beq.n	80042e8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80042da:	4b39      	ldr	r3, [pc, #228]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4938      	ldr	r1, [pc, #224]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	600b      	str	r3, [r1, #0]
 80042e6:	e006      	b.n	80042f6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80042e8:	4b35      	ldr	r3, [pc, #212]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	43db      	mvns	r3, r3
 80042f0:	4933      	ldr	r1, [pc, #204]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d006      	beq.n	8004310 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004302:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	492e      	ldr	r1, [pc, #184]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	4313      	orrs	r3, r2
 800430c:	604b      	str	r3, [r1, #4]
 800430e:	e006      	b.n	800431e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004310:	4b2b      	ldr	r3, [pc, #172]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	43db      	mvns	r3, r3
 8004318:	4929      	ldr	r1, [pc, #164]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 800431a:	4013      	ands	r3, r2
 800431c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d006      	beq.n	8004338 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800432a:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	4924      	ldr	r1, [pc, #144]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	4313      	orrs	r3, r2
 8004334:	608b      	str	r3, [r1, #8]
 8004336:	e006      	b.n	8004346 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004338:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	43db      	mvns	r3, r3
 8004340:	491f      	ldr	r1, [pc, #124]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 8004342:	4013      	ands	r3, r2
 8004344:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d006      	beq.n	8004360 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004352:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	491a      	ldr	r1, [pc, #104]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	4313      	orrs	r3, r2
 800435c:	60cb      	str	r3, [r1, #12]
 800435e:	e006      	b.n	800436e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004360:	4b17      	ldr	r3, [pc, #92]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	43db      	mvns	r3, r3
 8004368:	4915      	ldr	r1, [pc, #84]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 800436a:	4013      	ands	r3, r2
 800436c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	3301      	adds	r3, #1
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	fa22 f303 	lsr.w	r3, r2, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	f47f aed0 	bne.w	8004124 <HAL_GPIO_Init+0x14>
  }
}
 8004384:	bf00      	nop
 8004386:	372c      	adds	r7, #44	; 0x2c
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	10210000 	.word	0x10210000
 8004394:	10110000 	.word	0x10110000
 8004398:	10120000 	.word	0x10120000
 800439c:	10310000 	.word	0x10310000
 80043a0:	10320000 	.word	0x10320000
 80043a4:	10220000 	.word	0x10220000
 80043a8:	40021000 	.word	0x40021000
 80043ac:	40010000 	.word	0x40010000
 80043b0:	40010800 	.word	0x40010800
 80043b4:	40010c00 	.word	0x40010c00
 80043b8:	40011000 	.word	0x40011000
 80043bc:	40011400 	.word	0x40011400
 80043c0:	40010400 	.word	0x40010400

080043c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	807b      	strh	r3, [r7, #2]
 80043d0:	4613      	mov	r3, r2
 80043d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043d4:	787b      	ldrb	r3, [r7, #1]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043da:	887a      	ldrh	r2, [r7, #2]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80043e0:	e003      	b.n	80043ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043e2:	887b      	ldrh	r3, [r7, #2]
 80043e4:	041a      	lsls	r2, r3, #16
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	611a      	str	r2, [r3, #16]
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr

080043f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	460b      	mov	r3, r1
 80043fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004406:	887a      	ldrh	r2, [r7, #2]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4013      	ands	r3, r2
 800440c:	041a      	lsls	r2, r3, #16
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	43d9      	mvns	r1, r3
 8004412:	887b      	ldrh	r3, [r7, #2]
 8004414:	400b      	ands	r3, r1
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	611a      	str	r2, [r3, #16]
}
 800441c:	bf00      	nop
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr
	...

08004428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e11f      	b.n	800467a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fe ff10 	bl	8003274 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2224      	movs	r2, #36	; 0x24
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0201 	bic.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800447a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800448a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800448c:	f001 fe3e 	bl	800610c <HAL_RCC_GetPCLK1Freq>
 8004490:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	4a7b      	ldr	r2, [pc, #492]	; (8004684 <HAL_I2C_Init+0x25c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d807      	bhi.n	80044ac <HAL_I2C_Init+0x84>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4a7a      	ldr	r2, [pc, #488]	; (8004688 <HAL_I2C_Init+0x260>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	bf94      	ite	ls
 80044a4:	2301      	movls	r3, #1
 80044a6:	2300      	movhi	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	e006      	b.n	80044ba <HAL_I2C_Init+0x92>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4a77      	ldr	r2, [pc, #476]	; (800468c <HAL_I2C_Init+0x264>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	bf94      	ite	ls
 80044b4:	2301      	movls	r3, #1
 80044b6:	2300      	movhi	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e0db      	b.n	800467a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4a72      	ldr	r2, [pc, #456]	; (8004690 <HAL_I2C_Init+0x268>)
 80044c6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ca:	0c9b      	lsrs	r3, r3, #18
 80044cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	4a64      	ldr	r2, [pc, #400]	; (8004684 <HAL_I2C_Init+0x25c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d802      	bhi.n	80044fc <HAL_I2C_Init+0xd4>
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	3301      	adds	r3, #1
 80044fa:	e009      	b.n	8004510 <HAL_I2C_Init+0xe8>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	4a63      	ldr	r2, [pc, #396]	; (8004694 <HAL_I2C_Init+0x26c>)
 8004508:	fba2 2303 	umull	r2, r3, r2, r3
 800450c:	099b      	lsrs	r3, r3, #6
 800450e:	3301      	adds	r3, #1
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	430b      	orrs	r3, r1
 8004516:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004522:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	4956      	ldr	r1, [pc, #344]	; (8004684 <HAL_I2C_Init+0x25c>)
 800452c:	428b      	cmp	r3, r1
 800452e:	d80d      	bhi.n	800454c <HAL_I2C_Init+0x124>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1e59      	subs	r1, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	fbb1 f3f3 	udiv	r3, r1, r3
 800453e:	3301      	adds	r3, #1
 8004540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004544:	2b04      	cmp	r3, #4
 8004546:	bf38      	it	cc
 8004548:	2304      	movcc	r3, #4
 800454a:	e04f      	b.n	80045ec <HAL_I2C_Init+0x1c4>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d111      	bne.n	8004578 <HAL_I2C_Init+0x150>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1e58      	subs	r0, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6859      	ldr	r1, [r3, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	440b      	add	r3, r1
 8004562:	fbb0 f3f3 	udiv	r3, r0, r3
 8004566:	3301      	adds	r3, #1
 8004568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800456c:	2b00      	cmp	r3, #0
 800456e:	bf0c      	ite	eq
 8004570:	2301      	moveq	r3, #1
 8004572:	2300      	movne	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	e012      	b.n	800459e <HAL_I2C_Init+0x176>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	1e58      	subs	r0, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6859      	ldr	r1, [r3, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	0099      	lsls	r1, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	fbb0 f3f3 	udiv	r3, r0, r3
 800458e:	3301      	adds	r3, #1
 8004590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf0c      	ite	eq
 8004598:	2301      	moveq	r3, #1
 800459a:	2300      	movne	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_I2C_Init+0x17e>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e022      	b.n	80045ec <HAL_I2C_Init+0x1c4>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10e      	bne.n	80045cc <HAL_I2C_Init+0x1a4>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1e58      	subs	r0, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6859      	ldr	r1, [r3, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	440b      	add	r3, r1
 80045bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80045c0:	3301      	adds	r3, #1
 80045c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ca:	e00f      	b.n	80045ec <HAL_I2C_Init+0x1c4>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	1e58      	subs	r0, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6859      	ldr	r1, [r3, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	0099      	lsls	r1, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	fbb0 f3f3 	udiv	r3, r0, r3
 80045e2:	3301      	adds	r3, #1
 80045e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	6809      	ldr	r1, [r1, #0]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69da      	ldr	r2, [r3, #28]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800461a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6911      	ldr	r1, [r2, #16]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68d2      	ldr	r2, [r2, #12]
 8004626:	4311      	orrs	r1, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	430b      	orrs	r3, r1
 800462e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	000186a0 	.word	0x000186a0
 8004688:	001e847f 	.word	0x001e847f
 800468c:	003d08ff 	.word	0x003d08ff
 8004690:	431bde83 	.word	0x431bde83
 8004694:	10624dd3 	.word	0x10624dd3

08004698 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af02      	add	r7, sp, #8
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	607a      	str	r2, [r7, #4]
 80046a2:	461a      	mov	r2, r3
 80046a4:	460b      	mov	r3, r1
 80046a6:	817b      	strh	r3, [r7, #10]
 80046a8:	4613      	mov	r3, r2
 80046aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046ac:	f7ff fb46 	bl	8003d3c <HAL_GetTick>
 80046b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b20      	cmp	r3, #32
 80046bc:	f040 80e0 	bne.w	8004880 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	2319      	movs	r3, #25
 80046c6:	2201      	movs	r2, #1
 80046c8:	4970      	ldr	r1, [pc, #448]	; (800488c <HAL_I2C_Master_Transmit+0x1f4>)
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 ff6c 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
 80046d8:	e0d3      	b.n	8004882 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_I2C_Master_Transmit+0x50>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e0cc      	b.n	8004882 <HAL_I2C_Master_Transmit+0x1ea>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d007      	beq.n	800470e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0201 	orr.w	r2, r2, #1
 800470c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800471c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2221      	movs	r2, #33	; 0x21
 8004722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2210      	movs	r2, #16
 800472a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	893a      	ldrh	r2, [r7, #8]
 800473e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4a50      	ldr	r2, [pc, #320]	; (8004890 <HAL_I2C_Master_Transmit+0x1f8>)
 800474e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004750:	8979      	ldrh	r1, [r7, #10]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	6a3a      	ldr	r2, [r7, #32]
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 fd26 	bl	80051a8 <I2C_MasterRequestWrite>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e08d      	b.n	8004882 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004766:	2300      	movs	r3, #0
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800477c:	e066      	b.n	800484c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	6a39      	ldr	r1, [r7, #32]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 ffe6 	bl	8005754 <I2C_WaitOnTXEFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00d      	beq.n	80047aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	2b04      	cmp	r3, #4
 8004794:	d107      	bne.n	80047a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e06b      	b.n	8004882 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	781a      	ldrb	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d11b      	bne.n	8004820 <HAL_I2C_Master_Transmit+0x188>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d017      	beq.n	8004820 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	781a      	ldrb	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	6a39      	ldr	r1, [r7, #32]
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 ffd6 	bl	80057d6 <I2C_WaitOnBTFFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00d      	beq.n	800484c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	2b04      	cmp	r3, #4
 8004836:	d107      	bne.n	8004848 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004846:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e01a      	b.n	8004882 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	d194      	bne.n	800477e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	e000      	b.n	8004882 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004880:	2302      	movs	r3, #2
  }
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	00100002 	.word	0x00100002
 8004890:	ffff0000 	.word	0xffff0000

08004894 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	4608      	mov	r0, r1
 800489e:	4611      	mov	r1, r2
 80048a0:	461a      	mov	r2, r3
 80048a2:	4603      	mov	r3, r0
 80048a4:	817b      	strh	r3, [r7, #10]
 80048a6:	460b      	mov	r3, r1
 80048a8:	813b      	strh	r3, [r7, #8]
 80048aa:	4613      	mov	r3, r2
 80048ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048ae:	f7ff fa45 	bl	8003d3c <HAL_GetTick>
 80048b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b20      	cmp	r3, #32
 80048be:	f040 80d9 	bne.w	8004a74 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	2319      	movs	r3, #25
 80048c8:	2201      	movs	r2, #1
 80048ca:	496d      	ldr	r1, [pc, #436]	; (8004a80 <HAL_I2C_Mem_Write+0x1ec>)
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 fe6b 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80048d8:	2302      	movs	r3, #2
 80048da:	e0cc      	b.n	8004a76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_I2C_Mem_Write+0x56>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e0c5      	b.n	8004a76 <HAL_I2C_Mem_Write+0x1e2>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d007      	beq.n	8004910 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800491e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2221      	movs	r2, #33	; 0x21
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2240      	movs	r2, #64	; 0x40
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a3a      	ldr	r2, [r7, #32]
 800493a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004940:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4a4d      	ldr	r2, [pc, #308]	; (8004a84 <HAL_I2C_Mem_Write+0x1f0>)
 8004950:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004952:	88f8      	ldrh	r0, [r7, #6]
 8004954:	893a      	ldrh	r2, [r7, #8]
 8004956:	8979      	ldrh	r1, [r7, #10]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	4603      	mov	r3, r0
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fca2 	bl	80052ac <I2C_RequestMemoryWrite>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d052      	beq.n	8004a14 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e081      	b.n	8004a76 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 feec 	bl	8005754 <I2C_WaitOnTXEFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00d      	beq.n	800499e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	2b04      	cmp	r3, #4
 8004988:	d107      	bne.n	800499a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004998:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e06b      	b.n	8004a76 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	781a      	ldrb	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d11b      	bne.n	8004a14 <HAL_I2C_Mem_Write+0x180>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d017      	beq.n	8004a14 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	781a      	ldrb	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1aa      	bne.n	8004972 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 fed8 	bl	80057d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00d      	beq.n	8004a48 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d107      	bne.n	8004a44 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e016      	b.n	8004a76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	e000      	b.n	8004a76 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a74:	2302      	movs	r3, #2
  }
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	00100002 	.word	0x00100002
 8004a84:	ffff0000 	.word	0xffff0000

08004a88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08c      	sub	sp, #48	; 0x30
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	4608      	mov	r0, r1
 8004a92:	4611      	mov	r1, r2
 8004a94:	461a      	mov	r2, r3
 8004a96:	4603      	mov	r3, r0
 8004a98:	817b      	strh	r3, [r7, #10]
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	813b      	strh	r3, [r7, #8]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004aa6:	f7ff f949 	bl	8003d3c <HAL_GetTick>
 8004aaa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	f040 823d 	bne.w	8004f34 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	2319      	movs	r3, #25
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	4981      	ldr	r1, [pc, #516]	; (8004cc8 <HAL_I2C_Mem_Read+0x240>)
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 fd6f 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e230      	b.n	8004f36 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_I2C_Mem_Read+0x5a>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e229      	b.n	8004f36 <HAL_I2C_Mem_Read+0x4ae>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d007      	beq.n	8004b08 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2222      	movs	r2, #34	; 0x22
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2240      	movs	r2, #64	; 0x40
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4a61      	ldr	r2, [pc, #388]	; (8004ccc <HAL_I2C_Mem_Read+0x244>)
 8004b48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b4a:	88f8      	ldrh	r0, [r7, #6]
 8004b4c:	893a      	ldrh	r2, [r7, #8]
 8004b4e:	8979      	ldrh	r1, [r7, #10]
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	4603      	mov	r3, r0
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 fc3c 	bl	80053d8 <I2C_RequestMemoryRead>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e1e5      	b.n	8004f36 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d113      	bne.n	8004b9a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b72:	2300      	movs	r3, #0
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	61fb      	str	r3, [r7, #28]
 8004b86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e1b9      	b.n	8004f0e <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d11d      	bne.n	8004bde <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bb2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	61bb      	str	r3, [r7, #24]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	61bb      	str	r3, [r7, #24]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004bda:	b662      	cpsie	i
 8004bdc:	e197      	b.n	8004f0e <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d11d      	bne.n	8004c22 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004bf6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c1e:	b662      	cpsie	i
 8004c20:	e175      	b.n	8004f0e <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c30:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c32:	2300      	movs	r3, #0
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004c48:	e161      	b.n	8004f0e <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	f200 811a 	bhi.w	8004e88 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d123      	bne.n	8004ca4 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 fdf9 	bl	8005858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e162      	b.n	8004f36 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ca2:	e134      	b.n	8004f0e <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d150      	bne.n	8004d4e <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	4906      	ldr	r1, [pc, #24]	; (8004cd0 <HAL_I2C_Mem_Read+0x248>)
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 fc76 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d008      	beq.n	8004cd4 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e137      	b.n	8004f36 <HAL_I2C_Mem_Read+0x4ae>
 8004cc6:	bf00      	nop
 8004cc8:	00100002 	.word	0x00100002
 8004ccc:	ffff0000 	.word	0xffff0000
 8004cd0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004cd4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d18:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d4c:	e0df      	b.n	8004f0e <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	2200      	movs	r2, #0
 8004d56:	497a      	ldr	r1, [pc, #488]	; (8004f40 <HAL_I2C_Mem_Read+0x4b8>)
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fc25 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0e6      	b.n	8004f36 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d78:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004dac:	4b65      	ldr	r3, [pc, #404]	; (8004f44 <HAL_I2C_Mem_Read+0x4bc>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	08db      	lsrs	r3, r3, #3
 8004db2:	4a65      	ldr	r2, [pc, #404]	; (8004f48 <HAL_I2C_Mem_Read+0x4c0>)
 8004db4:	fba2 2303 	umull	r2, r3, r2, r3
 8004db8:	0a1a      	lsrs	r2, r3, #8
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	00da      	lsls	r2, r3, #3
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d117      	bne.n	8004e02 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	f043 0220 	orr.w	r2, r3, #32
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004df4:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e099      	b.n	8004f36 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d1da      	bne.n	8004dc6 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e52:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e86:	e042      	b.n	8004f0e <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fce3 	bl	8005858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e04c      	b.n	8004f36 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691a      	ldr	r2, [r3, #16]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d118      	bne.n	8004f0e <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691a      	ldr	r2, [r3, #16]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f47f ae99 	bne.w	8004c4a <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	e000      	b.n	8004f36 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
  }
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3728      	adds	r7, #40	; 0x28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	00010004 	.word	0x00010004
 8004f44:	20000020 	.word	0x20000020
 8004f48:	14f8b589 	.word	0x14f8b589

08004f4c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08a      	sub	sp, #40	; 0x28
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	607a      	str	r2, [r7, #4]
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004f5c:	f7fe feee 	bl	8003d3c <HAL_GetTick>
 8004f60:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004f62:	2301      	movs	r3, #1
 8004f64:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	f040 8111 	bne.w	8005196 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	2319      	movs	r3, #25
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	4988      	ldr	r1, [pc, #544]	; (80051a0 <HAL_I2C_IsDeviceReady+0x254>)
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 fb12 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e104      	b.n	8005198 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_I2C_IsDeviceReady+0x50>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e0fd      	b.n	8005198 <HAL_I2C_IsDeviceReady+0x24c>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d007      	beq.n	8004fc2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0201 	orr.w	r2, r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2224      	movs	r2, #36	; 0x24
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4a70      	ldr	r2, [pc, #448]	; (80051a4 <HAL_I2C_IsDeviceReady+0x258>)
 8004fe4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ff4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 fad0 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00d      	beq.n	800502a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501c:	d103      	bne.n	8005026 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005024:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e0b6      	b.n	8005198 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800502a:	897b      	ldrh	r3, [r7, #10]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	461a      	mov	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005038:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800503a:	f7fe fe7f 	bl	8003d3c <HAL_GetTick>
 800503e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b02      	cmp	r3, #2
 800504c:	bf0c      	ite	eq
 800504e:	2301      	moveq	r3, #1
 8005050:	2300      	movne	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005064:	bf0c      	ite	eq
 8005066:	2301      	moveq	r3, #1
 8005068:	2300      	movne	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800506e:	e025      	b.n	80050bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005070:	f7fe fe64 	bl	8003d3c <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d302      	bcc.n	8005086 <HAL_I2C_IsDeviceReady+0x13a>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d103      	bne.n	800508e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	22a0      	movs	r2, #160	; 0xa0
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b02      	cmp	r3, #2
 800509a:	bf0c      	ite	eq
 800509c:	2301      	moveq	r3, #1
 800509e:	2300      	movne	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2ba0      	cmp	r3, #160	; 0xa0
 80050c6:	d005      	beq.n	80050d4 <HAL_I2C_IsDeviceReady+0x188>
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d102      	bne.n	80050d4 <HAL_I2C_IsDeviceReady+0x188>
 80050ce:	7dbb      	ldrb	r3, [r7, #22]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0cd      	beq.n	8005070 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d129      	bne.n	800513e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	2319      	movs	r3, #25
 8005116:	2201      	movs	r2, #1
 8005118:	4921      	ldr	r1, [pc, #132]	; (80051a0 <HAL_I2C_IsDeviceReady+0x254>)
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 fa44 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e036      	b.n	8005198 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2220      	movs	r2, #32
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	e02c      	b.n	8005198 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005156:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	2319      	movs	r3, #25
 800515e:	2201      	movs	r2, #1
 8005160:	490f      	ldr	r1, [pc, #60]	; (80051a0 <HAL_I2C_IsDeviceReady+0x254>)
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 fa20 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e012      	b.n	8005198 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	3301      	adds	r3, #1
 8005176:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	f4ff af32 	bcc.w	8004fe6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2220      	movs	r2, #32
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e000      	b.n	8005198 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005196:	2302      	movs	r3, #2
  }
}
 8005198:	4618      	mov	r0, r3
 800519a:	3720      	adds	r7, #32
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	00100002 	.word	0x00100002
 80051a4:	ffff0000 	.word	0xffff0000

080051a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	607a      	str	r2, [r7, #4]
 80051b2:	603b      	str	r3, [r7, #0]
 80051b4:	460b      	mov	r3, r1
 80051b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d006      	beq.n	80051d2 <I2C_MasterRequestWrite+0x2a>
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d003      	beq.n	80051d2 <I2C_MasterRequestWrite+0x2a>
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051d0:	d108      	bne.n	80051e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	e00b      	b.n	80051fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	2b12      	cmp	r3, #18
 80051ea:	d107      	bne.n	80051fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f9cd 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00d      	beq.n	8005230 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005222:	d103      	bne.n	800522c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800522a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e035      	b.n	800529c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005238:	d108      	bne.n	800524c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800523a:	897b      	ldrh	r3, [r7, #10]
 800523c:	b2db      	uxtb	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005248:	611a      	str	r2, [r3, #16]
 800524a:	e01b      	b.n	8005284 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800524c:	897b      	ldrh	r3, [r7, #10]
 800524e:	11db      	asrs	r3, r3, #7
 8005250:	b2db      	uxtb	r3, r3
 8005252:	f003 0306 	and.w	r3, r3, #6
 8005256:	b2db      	uxtb	r3, r3
 8005258:	f063 030f 	orn	r3, r3, #15
 800525c:	b2da      	uxtb	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	490e      	ldr	r1, [pc, #56]	; (80052a4 <I2C_MasterRequestWrite+0xfc>)
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 f9f3 	bl	8005656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e010      	b.n	800529c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800527a:	897b      	ldrh	r3, [r7, #10]
 800527c:	b2da      	uxtb	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	4907      	ldr	r1, [pc, #28]	; (80052a8 <I2C_MasterRequestWrite+0x100>)
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f9e3 	bl	8005656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	00010008 	.word	0x00010008
 80052a8:	00010002 	.word	0x00010002

080052ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	4608      	mov	r0, r1
 80052b6:	4611      	mov	r1, r2
 80052b8:	461a      	mov	r2, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	817b      	strh	r3, [r7, #10]
 80052be:	460b      	mov	r3, r1
 80052c0:	813b      	strh	r3, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	2200      	movs	r2, #0
 80052de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 f960 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00d      	beq.n	800530a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fc:	d103      	bne.n	8005306 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e05f      	b.n	80053ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800530a:	897b      	ldrh	r3, [r7, #10]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005318:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	6a3a      	ldr	r2, [r7, #32]
 800531e:	492d      	ldr	r1, [pc, #180]	; (80053d4 <I2C_RequestMemoryWrite+0x128>)
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f998 	bl	8005656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e04c      	b.n	80053ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005348:	6a39      	ldr	r1, [r7, #32]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 fa02 	bl	8005754 <I2C_WaitOnTXEFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00d      	beq.n	8005372 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	2b04      	cmp	r3, #4
 800535c:	d107      	bne.n	800536e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e02b      	b.n	80053ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d105      	bne.n	8005384 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005378:	893b      	ldrh	r3, [r7, #8]
 800537a:	b2da      	uxtb	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	611a      	str	r2, [r3, #16]
 8005382:	e021      	b.n	80053c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005384:	893b      	ldrh	r3, [r7, #8]
 8005386:	0a1b      	lsrs	r3, r3, #8
 8005388:	b29b      	uxth	r3, r3
 800538a:	b2da      	uxtb	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005394:	6a39      	ldr	r1, [r7, #32]
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 f9dc 	bl	8005754 <I2C_WaitOnTXEFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00d      	beq.n	80053be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d107      	bne.n	80053ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e005      	b.n	80053ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053be:	893b      	ldrh	r3, [r7, #8]
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	00010002 	.word	0x00010002

080053d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af02      	add	r7, sp, #8
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	4608      	mov	r0, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	461a      	mov	r2, r3
 80053e6:	4603      	mov	r3, r0
 80053e8:	817b      	strh	r3, [r7, #10]
 80053ea:	460b      	mov	r3, r1
 80053ec:	813b      	strh	r3, [r7, #8]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005400:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005410:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	2200      	movs	r2, #0
 800541a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 f8c2 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00d      	beq.n	8005446 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005438:	d103      	bne.n	8005442 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005440:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e0aa      	b.n	800559c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005446:	897b      	ldrh	r3, [r7, #10]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005454:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	6a3a      	ldr	r2, [r7, #32]
 800545a:	4952      	ldr	r1, [pc, #328]	; (80055a4 <I2C_RequestMemoryRead+0x1cc>)
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 f8fa 	bl	8005656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e097      	b.n	800559c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005484:	6a39      	ldr	r1, [r7, #32]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f964 	bl	8005754 <I2C_WaitOnTXEFlagUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00d      	beq.n	80054ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	2b04      	cmp	r3, #4
 8005498:	d107      	bne.n	80054aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e076      	b.n	800559c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d105      	bne.n	80054c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054b4:	893b      	ldrh	r3, [r7, #8]
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	611a      	str	r2, [r3, #16]
 80054be:	e021      	b.n	8005504 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054c0:	893b      	ldrh	r3, [r7, #8]
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d0:	6a39      	ldr	r1, [r7, #32]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f93e 	bl	8005754 <I2C_WaitOnTXEFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00d      	beq.n	80054fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d107      	bne.n	80054f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e050      	b.n	800559c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054fa:	893b      	ldrh	r3, [r7, #8]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005506:	6a39      	ldr	r1, [r7, #32]
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 f923 	bl	8005754 <I2C_WaitOnTXEFlagUntilTimeout>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00d      	beq.n	8005530 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	2b04      	cmp	r3, #4
 800551a:	d107      	bne.n	800552c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800552a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e035      	b.n	800559c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800553e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	2200      	movs	r2, #0
 8005548:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 f82b 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00d      	beq.n	8005574 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005566:	d103      	bne.n	8005570 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800556e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e013      	b.n	800559c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005574:	897b      	ldrh	r3, [r7, #10]
 8005576:	b2db      	uxtb	r3, r3
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	b2da      	uxtb	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	6a3a      	ldr	r2, [r7, #32]
 8005588:	4906      	ldr	r1, [pc, #24]	; (80055a4 <I2C_RequestMemoryRead+0x1cc>)
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f863 	bl	8005656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	00010002 	.word	0x00010002

080055a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055b8:	e025      	b.n	8005606 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c0:	d021      	beq.n	8005606 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c2:	f7fe fbbb 	bl	8003d3c <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d302      	bcc.n	80055d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d116      	bne.n	8005606 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f043 0220 	orr.w	r2, r3, #32
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e023      	b.n	800564e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	0c1b      	lsrs	r3, r3, #16
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b01      	cmp	r3, #1
 800560e:	d10d      	bne.n	800562c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	43da      	mvns	r2, r3
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4013      	ands	r3, r2
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	bf0c      	ite	eq
 8005622:	2301      	moveq	r3, #1
 8005624:	2300      	movne	r3, #0
 8005626:	b2db      	uxtb	r3, r3
 8005628:	461a      	mov	r2, r3
 800562a:	e00c      	b.n	8005646 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	43da      	mvns	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4013      	ands	r3, r2
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	bf0c      	ite	eq
 800563e:	2301      	moveq	r3, #1
 8005640:	2300      	movne	r3, #0
 8005642:	b2db      	uxtb	r3, r3
 8005644:	461a      	mov	r2, r3
 8005646:	79fb      	ldrb	r3, [r7, #7]
 8005648:	429a      	cmp	r2, r3
 800564a:	d0b6      	beq.n	80055ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
 8005662:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005664:	e051      	b.n	800570a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005674:	d123      	bne.n	80056be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005684:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800568e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2220      	movs	r2, #32
 800569a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f043 0204 	orr.w	r2, r3, #4
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e046      	b.n	800574c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d021      	beq.n	800570a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c6:	f7fe fb39 	bl	8003d3c <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d302      	bcc.n	80056dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d116      	bne.n	800570a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f043 0220 	orr.w	r2, r3, #32
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e020      	b.n	800574c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	0c1b      	lsrs	r3, r3, #16
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	d10c      	bne.n	800572e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	43da      	mvns	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4013      	ands	r3, r2
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	bf14      	ite	ne
 8005726:	2301      	movne	r3, #1
 8005728:	2300      	moveq	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	e00b      	b.n	8005746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	43da      	mvns	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4013      	ands	r3, r2
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	bf14      	ite	ne
 8005740:	2301      	movne	r3, #1
 8005742:	2300      	moveq	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d18d      	bne.n	8005666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005760:	e02d      	b.n	80057be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 f8ce 	bl	8005904 <I2C_IsAcknowledgeFailed>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e02d      	b.n	80057ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005778:	d021      	beq.n	80057be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577a:	f7fe fadf 	bl	8003d3c <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	429a      	cmp	r2, r3
 8005788:	d302      	bcc.n	8005790 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d116      	bne.n	80057be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	f043 0220 	orr.w	r2, r3, #32
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e007      	b.n	80057ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c8:	2b80      	cmp	r3, #128	; 0x80
 80057ca:	d1ca      	bne.n	8005762 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057e2:	e02d      	b.n	8005840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f88d 	bl	8005904 <I2C_IsAcknowledgeFailed>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e02d      	b.n	8005850 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d021      	beq.n	8005840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fc:	f7fe fa9e 	bl	8003d3c <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	429a      	cmp	r2, r3
 800580a:	d302      	bcc.n	8005812 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d116      	bne.n	8005840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	f043 0220 	orr.w	r2, r3, #32
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e007      	b.n	8005850 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b04      	cmp	r3, #4
 800584c:	d1ca      	bne.n	80057e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005864:	e042      	b.n	80058ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b10      	cmp	r3, #16
 8005872:	d119      	bne.n	80058a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0210 	mvn.w	r2, #16
 800587c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e029      	b.n	80058fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a8:	f7fe fa48 	bl	8003d3c <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d302      	bcc.n	80058be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d116      	bne.n	80058ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	f043 0220 	orr.w	r2, r3, #32
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e007      	b.n	80058fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f6:	2b40      	cmp	r3, #64	; 0x40
 80058f8:	d1b5      	bne.n	8005866 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800591a:	d11b      	bne.n	8005954 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005924:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	f043 0204 	orr.w	r2, r3, #4
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr

08005960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e26c      	b.n	8005e4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 8087 	beq.w	8005a8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005980:	4b92      	ldr	r3, [pc, #584]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f003 030c 	and.w	r3, r3, #12
 8005988:	2b04      	cmp	r3, #4
 800598a:	d00c      	beq.n	80059a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800598c:	4b8f      	ldr	r3, [pc, #572]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f003 030c 	and.w	r3, r3, #12
 8005994:	2b08      	cmp	r3, #8
 8005996:	d112      	bne.n	80059be <HAL_RCC_OscConfig+0x5e>
 8005998:	4b8c      	ldr	r3, [pc, #560]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a4:	d10b      	bne.n	80059be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a6:	4b89      	ldr	r3, [pc, #548]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d06c      	beq.n	8005a8c <HAL_RCC_OscConfig+0x12c>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d168      	bne.n	8005a8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e246      	b.n	8005e4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c6:	d106      	bne.n	80059d6 <HAL_RCC_OscConfig+0x76>
 80059c8:	4b80      	ldr	r3, [pc, #512]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a7f      	ldr	r2, [pc, #508]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 80059ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	e02e      	b.n	8005a34 <HAL_RCC_OscConfig+0xd4>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10c      	bne.n	80059f8 <HAL_RCC_OscConfig+0x98>
 80059de:	4b7b      	ldr	r3, [pc, #492]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a7a      	ldr	r2, [pc, #488]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 80059e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	4b78      	ldr	r3, [pc, #480]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a77      	ldr	r2, [pc, #476]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 80059f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	e01d      	b.n	8005a34 <HAL_RCC_OscConfig+0xd4>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a00:	d10c      	bne.n	8005a1c <HAL_RCC_OscConfig+0xbc>
 8005a02:	4b72      	ldr	r3, [pc, #456]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a71      	ldr	r2, [pc, #452]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	4b6f      	ldr	r3, [pc, #444]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a6e      	ldr	r2, [pc, #440]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	e00b      	b.n	8005a34 <HAL_RCC_OscConfig+0xd4>
 8005a1c:	4b6b      	ldr	r3, [pc, #428]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a6a      	ldr	r2, [pc, #424]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	4b68      	ldr	r3, [pc, #416]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a67      	ldr	r2, [pc, #412]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d013      	beq.n	8005a64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3c:	f7fe f97e 	bl	8003d3c <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a44:	f7fe f97a 	bl	8003d3c <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b64      	cmp	r3, #100	; 0x64
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e1fa      	b.n	8005e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a56:	4b5d      	ldr	r3, [pc, #372]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0f0      	beq.n	8005a44 <HAL_RCC_OscConfig+0xe4>
 8005a62:	e014      	b.n	8005a8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a64:	f7fe f96a 	bl	8003d3c <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a6c:	f7fe f966 	bl	8003d3c <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b64      	cmp	r3, #100	; 0x64
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e1e6      	b.n	8005e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a7e:	4b53      	ldr	r3, [pc, #332]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f0      	bne.n	8005a6c <HAL_RCC_OscConfig+0x10c>
 8005a8a:	e000      	b.n	8005a8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d063      	beq.n	8005b62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a9a:	4b4c      	ldr	r3, [pc, #304]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00b      	beq.n	8005abe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005aa6:	4b49      	ldr	r3, [pc, #292]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f003 030c 	and.w	r3, r3, #12
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d11c      	bne.n	8005aec <HAL_RCC_OscConfig+0x18c>
 8005ab2:	4b46      	ldr	r3, [pc, #280]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d116      	bne.n	8005aec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005abe:	4b43      	ldr	r3, [pc, #268]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x176>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d001      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e1ba      	b.n	8005e4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad6:	4b3d      	ldr	r3, [pc, #244]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	4939      	ldr	r1, [pc, #228]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aea:	e03a      	b.n	8005b62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d020      	beq.n	8005b36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005af4:	4b36      	ldr	r3, [pc, #216]	; (8005bd0 <HAL_RCC_OscConfig+0x270>)
 8005af6:	2201      	movs	r2, #1
 8005af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afa:	f7fe f91f 	bl	8003d3c <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b00:	e008      	b.n	8005b14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b02:	f7fe f91b 	bl	8003d3c <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e19b      	b.n	8005e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b14:	4b2d      	ldr	r3, [pc, #180]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0f0      	beq.n	8005b02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b20:	4b2a      	ldr	r3, [pc, #168]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	4927      	ldr	r1, [pc, #156]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	600b      	str	r3, [r1, #0]
 8005b34:	e015      	b.n	8005b62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b36:	4b26      	ldr	r3, [pc, #152]	; (8005bd0 <HAL_RCC_OscConfig+0x270>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b3c:	f7fe f8fe 	bl	8003d3c <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b44:	f7fe f8fa 	bl	8003d3c <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e17a      	b.n	8005e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b56:	4b1d      	ldr	r3, [pc, #116]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1f0      	bne.n	8005b44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d03a      	beq.n	8005be4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d019      	beq.n	8005baa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b76:	4b17      	ldr	r3, [pc, #92]	; (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005b78:	2201      	movs	r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b7c:	f7fe f8de 	bl	8003d3c <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b84:	f7fe f8da 	bl	8003d3c <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e15a      	b.n	8005e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b96:	4b0d      	ldr	r3, [pc, #52]	; (8005bcc <HAL_RCC_OscConfig+0x26c>)
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0f0      	beq.n	8005b84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005ba2:	2001      	movs	r0, #1
 8005ba4:	f000 fada 	bl	800615c <RCC_Delay>
 8005ba8:	e01c      	b.n	8005be4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005baa:	4b0a      	ldr	r3, [pc, #40]	; (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bb0:	f7fe f8c4 	bl	8003d3c <HAL_GetTick>
 8005bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bb6:	e00f      	b.n	8005bd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bb8:	f7fe f8c0 	bl	8003d3c <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d908      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e140      	b.n	8005e4c <HAL_RCC_OscConfig+0x4ec>
 8005bca:	bf00      	nop
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	42420000 	.word	0x42420000
 8005bd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bd8:	4b9e      	ldr	r3, [pc, #632]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e9      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 80a6 	beq.w	8005d3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bf6:	4b97      	ldr	r3, [pc, #604]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10d      	bne.n	8005c1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c02:	4b94      	ldr	r3, [pc, #592]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	4a93      	ldr	r2, [pc, #588]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0c:	61d3      	str	r3, [r2, #28]
 8005c0e:	4b91      	ldr	r3, [pc, #580]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c16:	60bb      	str	r3, [r7, #8]
 8005c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c1e:	4b8e      	ldr	r3, [pc, #568]	; (8005e58 <HAL_RCC_OscConfig+0x4f8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d118      	bne.n	8005c5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c2a:	4b8b      	ldr	r3, [pc, #556]	; (8005e58 <HAL_RCC_OscConfig+0x4f8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a8a      	ldr	r2, [pc, #552]	; (8005e58 <HAL_RCC_OscConfig+0x4f8>)
 8005c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c36:	f7fe f881 	bl	8003d3c <HAL_GetTick>
 8005c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3c:	e008      	b.n	8005c50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c3e:	f7fe f87d 	bl	8003d3c <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b64      	cmp	r3, #100	; 0x64
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e0fd      	b.n	8005e4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c50:	4b81      	ldr	r3, [pc, #516]	; (8005e58 <HAL_RCC_OscConfig+0x4f8>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0f0      	beq.n	8005c3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d106      	bne.n	8005c72 <HAL_RCC_OscConfig+0x312>
 8005c64:	4b7b      	ldr	r3, [pc, #492]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	4a7a      	ldr	r2, [pc, #488]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005c6a:	f043 0301 	orr.w	r3, r3, #1
 8005c6e:	6213      	str	r3, [r2, #32]
 8005c70:	e02d      	b.n	8005cce <HAL_RCC_OscConfig+0x36e>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10c      	bne.n	8005c94 <HAL_RCC_OscConfig+0x334>
 8005c7a:	4b76      	ldr	r3, [pc, #472]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	4a75      	ldr	r2, [pc, #468]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005c80:	f023 0301 	bic.w	r3, r3, #1
 8005c84:	6213      	str	r3, [r2, #32]
 8005c86:	4b73      	ldr	r3, [pc, #460]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	4a72      	ldr	r2, [pc, #456]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005c8c:	f023 0304 	bic.w	r3, r3, #4
 8005c90:	6213      	str	r3, [r2, #32]
 8005c92:	e01c      	b.n	8005cce <HAL_RCC_OscConfig+0x36e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	2b05      	cmp	r3, #5
 8005c9a:	d10c      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x356>
 8005c9c:	4b6d      	ldr	r3, [pc, #436]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	4a6c      	ldr	r2, [pc, #432]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005ca2:	f043 0304 	orr.w	r3, r3, #4
 8005ca6:	6213      	str	r3, [r2, #32]
 8005ca8:	4b6a      	ldr	r3, [pc, #424]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	4a69      	ldr	r2, [pc, #420]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005cae:	f043 0301 	orr.w	r3, r3, #1
 8005cb2:	6213      	str	r3, [r2, #32]
 8005cb4:	e00b      	b.n	8005cce <HAL_RCC_OscConfig+0x36e>
 8005cb6:	4b67      	ldr	r3, [pc, #412]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	4a66      	ldr	r2, [pc, #408]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005cbc:	f023 0301 	bic.w	r3, r3, #1
 8005cc0:	6213      	str	r3, [r2, #32]
 8005cc2:	4b64      	ldr	r3, [pc, #400]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	4a63      	ldr	r2, [pc, #396]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005cc8:	f023 0304 	bic.w	r3, r3, #4
 8005ccc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d015      	beq.n	8005d02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cd6:	f7fe f831 	bl	8003d3c <HAL_GetTick>
 8005cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cdc:	e00a      	b.n	8005cf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cde:	f7fe f82d 	bl	8003d3c <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e0ab      	b.n	8005e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cf4:	4b57      	ldr	r3, [pc, #348]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0ee      	beq.n	8005cde <HAL_RCC_OscConfig+0x37e>
 8005d00:	e014      	b.n	8005d2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d02:	f7fe f81b 	bl	8003d3c <HAL_GetTick>
 8005d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d08:	e00a      	b.n	8005d20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d0a:	f7fe f817 	bl	8003d3c <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e095      	b.n	8005e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d20:	4b4c      	ldr	r3, [pc, #304]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1ee      	bne.n	8005d0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d105      	bne.n	8005d3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d32:	4b48      	ldr	r3, [pc, #288]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	4a47      	ldr	r2, [pc, #284]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 8081 	beq.w	8005e4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d48:	4b42      	ldr	r3, [pc, #264]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f003 030c 	and.w	r3, r3, #12
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d061      	beq.n	8005e18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d146      	bne.n	8005dea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d5c:	4b3f      	ldr	r3, [pc, #252]	; (8005e5c <HAL_RCC_OscConfig+0x4fc>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d62:	f7fd ffeb 	bl	8003d3c <HAL_GetTick>
 8005d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d68:	e008      	b.n	8005d7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d6a:	f7fd ffe7 	bl	8003d3c <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e067      	b.n	8005e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d7c:	4b35      	ldr	r3, [pc, #212]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1f0      	bne.n	8005d6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d90:	d108      	bne.n	8005da4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005d92:	4b30      	ldr	r3, [pc, #192]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	492d      	ldr	r1, [pc, #180]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005da4:	4b2b      	ldr	r3, [pc, #172]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a19      	ldr	r1, [r3, #32]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	430b      	orrs	r3, r1
 8005db6:	4927      	ldr	r1, [pc, #156]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dbc:	4b27      	ldr	r3, [pc, #156]	; (8005e5c <HAL_RCC_OscConfig+0x4fc>)
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc2:	f7fd ffbb 	bl	8003d3c <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005dc8:	e008      	b.n	8005ddc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dca:	f7fd ffb7 	bl	8003d3c <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e037      	b.n	8005e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ddc:	4b1d      	ldr	r3, [pc, #116]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0f0      	beq.n	8005dca <HAL_RCC_OscConfig+0x46a>
 8005de8:	e02f      	b.n	8005e4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dea:	4b1c      	ldr	r3, [pc, #112]	; (8005e5c <HAL_RCC_OscConfig+0x4fc>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df0:	f7fd ffa4 	bl	8003d3c <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df8:	f7fd ffa0 	bl	8003d3c <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e020      	b.n	8005e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e0a:	4b12      	ldr	r3, [pc, #72]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f0      	bne.n	8005df8 <HAL_RCC_OscConfig+0x498>
 8005e16:	e018      	b.n	8005e4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e013      	b.n	8005e4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005e24:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <HAL_RCC_OscConfig+0x4f4>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d106      	bne.n	8005e46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d001      	beq.n	8005e4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	40021000 	.word	0x40021000
 8005e58:	40007000 	.word	0x40007000
 8005e5c:	42420060 	.word	0x42420060

08005e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e0d0      	b.n	8006016 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e74:	4b6a      	ldr	r3, [pc, #424]	; (8006020 <HAL_RCC_ClockConfig+0x1c0>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d910      	bls.n	8005ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e82:	4b67      	ldr	r3, [pc, #412]	; (8006020 <HAL_RCC_ClockConfig+0x1c0>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f023 0207 	bic.w	r2, r3, #7
 8005e8a:	4965      	ldr	r1, [pc, #404]	; (8006020 <HAL_RCC_ClockConfig+0x1c0>)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e92:	4b63      	ldr	r3, [pc, #396]	; (8006020 <HAL_RCC_ClockConfig+0x1c0>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d001      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0b8      	b.n	8006016 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d020      	beq.n	8005ef2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ebc:	4b59      	ldr	r3, [pc, #356]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	4a58      	ldr	r2, [pc, #352]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8005ec2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ec6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d005      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ed4:	4b53      	ldr	r3, [pc, #332]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4a52      	ldr	r2, [pc, #328]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8005eda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005ede:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ee0:	4b50      	ldr	r3, [pc, #320]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	494d      	ldr	r1, [pc, #308]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d040      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d107      	bne.n	8005f16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f06:	4b47      	ldr	r3, [pc, #284]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d115      	bne.n	8005f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e07f      	b.n	8006016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d107      	bne.n	8005f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f1e:	4b41      	ldr	r3, [pc, #260]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d109      	bne.n	8005f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e073      	b.n	8006016 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f2e:	4b3d      	ldr	r3, [pc, #244]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e06b      	b.n	8006016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f3e:	4b39      	ldr	r3, [pc, #228]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f023 0203 	bic.w	r2, r3, #3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	4936      	ldr	r1, [pc, #216]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f50:	f7fd fef4 	bl	8003d3c <HAL_GetTick>
 8005f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f56:	e00a      	b.n	8005f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f58:	f7fd fef0 	bl	8003d3c <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e053      	b.n	8006016 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f6e:	4b2d      	ldr	r3, [pc, #180]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f003 020c 	and.w	r2, r3, #12
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d1eb      	bne.n	8005f58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f80:	4b27      	ldr	r3, [pc, #156]	; (8006020 <HAL_RCC_ClockConfig+0x1c0>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d210      	bcs.n	8005fb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8e:	4b24      	ldr	r3, [pc, #144]	; (8006020 <HAL_RCC_ClockConfig+0x1c0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f023 0207 	bic.w	r2, r3, #7
 8005f96:	4922      	ldr	r1, [pc, #136]	; (8006020 <HAL_RCC_ClockConfig+0x1c0>)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9e:	4b20      	ldr	r3, [pc, #128]	; (8006020 <HAL_RCC_ClockConfig+0x1c0>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d001      	beq.n	8005fb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e032      	b.n	8006016 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d008      	beq.n	8005fce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fbc:	4b19      	ldr	r3, [pc, #100]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	4916      	ldr	r1, [pc, #88]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d009      	beq.n	8005fee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005fda:	4b12      	ldr	r3, [pc, #72]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	490e      	ldr	r1, [pc, #56]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005fee:	f000 f821 	bl	8006034 <HAL_RCC_GetSysClockFreq>
 8005ff2:	4601      	mov	r1, r0
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	091b      	lsrs	r3, r3, #4
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	4a0a      	ldr	r2, [pc, #40]	; (8006028 <HAL_RCC_ClockConfig+0x1c8>)
 8006000:	5cd3      	ldrb	r3, [r2, r3]
 8006002:	fa21 f303 	lsr.w	r3, r1, r3
 8006006:	4a09      	ldr	r2, [pc, #36]	; (800602c <HAL_RCC_ClockConfig+0x1cc>)
 8006008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800600a:	4b09      	ldr	r3, [pc, #36]	; (8006030 <HAL_RCC_ClockConfig+0x1d0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f7fd fe52 	bl	8003cb8 <HAL_InitTick>

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	40022000 	.word	0x40022000
 8006024:	40021000 	.word	0x40021000
 8006028:	0800c9c8 	.word	0x0800c9c8
 800602c:	20000020 	.word	0x20000020
 8006030:	20000024 	.word	0x20000024

08006034 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006034:	b490      	push	{r4, r7}
 8006036:	b08a      	sub	sp, #40	; 0x28
 8006038:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800603a:	4b2a      	ldr	r3, [pc, #168]	; (80060e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800603c:	1d3c      	adds	r4, r7, #4
 800603e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006044:	4b28      	ldr	r3, [pc, #160]	; (80060e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	61fb      	str	r3, [r7, #28]
 800604e:	2300      	movs	r3, #0
 8006050:	61bb      	str	r3, [r7, #24]
 8006052:	2300      	movs	r3, #0
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800605e:	4b23      	ldr	r3, [pc, #140]	; (80060ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	f003 030c 	and.w	r3, r3, #12
 800606a:	2b04      	cmp	r3, #4
 800606c:	d002      	beq.n	8006074 <HAL_RCC_GetSysClockFreq+0x40>
 800606e:	2b08      	cmp	r3, #8
 8006070:	d003      	beq.n	800607a <HAL_RCC_GetSysClockFreq+0x46>
 8006072:	e02d      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006074:	4b1e      	ldr	r3, [pc, #120]	; (80060f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006076:	623b      	str	r3, [r7, #32]
      break;
 8006078:	e02d      	b.n	80060d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	0c9b      	lsrs	r3, r3, #18
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006086:	4413      	add	r3, r2
 8006088:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800608c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d013      	beq.n	80060c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006098:	4b14      	ldr	r3, [pc, #80]	; (80060ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	0c5b      	lsrs	r3, r3, #17
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80060a6:	4413      	add	r3, r2
 80060a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80060ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	4a0f      	ldr	r2, [pc, #60]	; (80060f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80060b2:	fb02 f203 	mul.w	r2, r2, r3
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060bc:	627b      	str	r3, [r7, #36]	; 0x24
 80060be:	e004      	b.n	80060ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	4a0c      	ldr	r2, [pc, #48]	; (80060f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060c4:	fb02 f303 	mul.w	r3, r2, r3
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	623b      	str	r3, [r7, #32]
      break;
 80060ce:	e002      	b.n	80060d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80060d0:	4b07      	ldr	r3, [pc, #28]	; (80060f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80060d2:	623b      	str	r3, [r7, #32]
      break;
 80060d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060d6:	6a3b      	ldr	r3, [r7, #32]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3728      	adds	r7, #40	; 0x28
 80060dc:	46bd      	mov	sp, r7
 80060de:	bc90      	pop	{r4, r7}
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	0800c9b4 	.word	0x0800c9b4
 80060e8:	0800c9c4 	.word	0x0800c9c4
 80060ec:	40021000 	.word	0x40021000
 80060f0:	007a1200 	.word	0x007a1200
 80060f4:	003d0900 	.word	0x003d0900

080060f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060fc:	4b02      	ldr	r3, [pc, #8]	; (8006108 <HAL_RCC_GetHCLKFreq+0x10>)
 80060fe:	681b      	ldr	r3, [r3, #0]
}
 8006100:	4618      	mov	r0, r3
 8006102:	46bd      	mov	sp, r7
 8006104:	bc80      	pop	{r7}
 8006106:	4770      	bx	lr
 8006108:	20000020 	.word	0x20000020

0800610c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006110:	f7ff fff2 	bl	80060f8 <HAL_RCC_GetHCLKFreq>
 8006114:	4601      	mov	r1, r0
 8006116:	4b05      	ldr	r3, [pc, #20]	; (800612c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	0a1b      	lsrs	r3, r3, #8
 800611c:	f003 0307 	and.w	r3, r3, #7
 8006120:	4a03      	ldr	r2, [pc, #12]	; (8006130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006122:	5cd3      	ldrb	r3, [r2, r3]
 8006124:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006128:	4618      	mov	r0, r3
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40021000 	.word	0x40021000
 8006130:	0800c9d8 	.word	0x0800c9d8

08006134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006138:	f7ff ffde 	bl	80060f8 <HAL_RCC_GetHCLKFreq>
 800613c:	4601      	mov	r1, r0
 800613e:	4b05      	ldr	r3, [pc, #20]	; (8006154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	0adb      	lsrs	r3, r3, #11
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	4a03      	ldr	r2, [pc, #12]	; (8006158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800614a:	5cd3      	ldrb	r3, [r2, r3]
 800614c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006150:	4618      	mov	r0, r3
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40021000 	.word	0x40021000
 8006158:	0800c9d8 	.word	0x0800c9d8

0800615c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006164:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <RCC_Delay+0x34>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a0a      	ldr	r2, [pc, #40]	; (8006194 <RCC_Delay+0x38>)
 800616a:	fba2 2303 	umull	r2, r3, r2, r3
 800616e:	0a5b      	lsrs	r3, r3, #9
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	fb02 f303 	mul.w	r3, r2, r3
 8006176:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006178:	bf00      	nop
  }
  while (Delay --);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	1e5a      	subs	r2, r3, #1
 800617e:	60fa      	str	r2, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1f9      	bne.n	8006178 <RCC_Delay+0x1c>
}
 8006184:	bf00      	nop
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20000020 	.word	0x20000020
 8006194:	10624dd3 	.word	0x10624dd3

08006198 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e076      	b.n	8006298 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d108      	bne.n	80061c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061ba:	d009      	beq.n	80061d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	61da      	str	r2, [r3, #28]
 80061c2:	e005      	b.n	80061d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fd f880 	bl	80032f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006206:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006218:	431a      	orrs	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	f003 0302 	and.w	r3, r3, #2
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	431a      	orrs	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006240:	431a      	orrs	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006254:	ea42 0103 	orr.w	r1, r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	0c1a      	lsrs	r2, r3, #16
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f002 0204 	and.w	r2, r2, #4
 8006276:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	69da      	ldr	r2, [r3, #28]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006286:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e041      	b.n	8006336 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d106      	bne.n	80062cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fd f85e 	bl	8003388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3304      	adds	r3, #4
 80062dc:	4619      	mov	r1, r3
 80062de:	4610      	mov	r0, r2
 80062e0:	f000 fa6c 	bl	80067bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b01      	cmp	r3, #1
 8006352:	d001      	beq.n	8006358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e03a      	b.n	80063ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0201 	orr.w	r2, r2, #1
 800636e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a18      	ldr	r2, [pc, #96]	; (80063d8 <HAL_TIM_Base_Start_IT+0x98>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00e      	beq.n	8006398 <HAL_TIM_Base_Start_IT+0x58>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006382:	d009      	beq.n	8006398 <HAL_TIM_Base_Start_IT+0x58>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a14      	ldr	r2, [pc, #80]	; (80063dc <HAL_TIM_Base_Start_IT+0x9c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d004      	beq.n	8006398 <HAL_TIM_Base_Start_IT+0x58>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a13      	ldr	r2, [pc, #76]	; (80063e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d111      	bne.n	80063bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 0307 	and.w	r3, r3, #7
 80063a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b06      	cmp	r3, #6
 80063a8:	d010      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f042 0201 	orr.w	r2, r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ba:	e007      	b.n	80063cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0201 	orr.w	r2, r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bc80      	pop	{r7}
 80063d6:	4770      	bx	lr
 80063d8:	40012c00 	.word	0x40012c00
 80063dc:	40000400 	.word	0x40000400
 80063e0:	40000800 	.word	0x40000800

080063e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d122      	bne.n	8006440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b02      	cmp	r3, #2
 8006406:	d11b      	bne.n	8006440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0202 	mvn.w	r2, #2
 8006410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f9ad 	bl	8006786 <HAL_TIM_IC_CaptureCallback>
 800642c:	e005      	b.n	800643a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f9a0 	bl	8006774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f9af 	bl	8006798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b04      	cmp	r3, #4
 800644c:	d122      	bne.n	8006494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b04      	cmp	r3, #4
 800645a:	d11b      	bne.n	8006494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f06f 0204 	mvn.w	r2, #4
 8006464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2202      	movs	r2, #2
 800646a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f983 	bl	8006786 <HAL_TIM_IC_CaptureCallback>
 8006480:	e005      	b.n	800648e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f976 	bl	8006774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f985 	bl	8006798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d122      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	d11b      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f06f 0208 	mvn.w	r2, #8
 80064b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2204      	movs	r2, #4
 80064be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f959 	bl	8006786 <HAL_TIM_IC_CaptureCallback>
 80064d4:	e005      	b.n	80064e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f94c 	bl	8006774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f95b 	bl	8006798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0310 	and.w	r3, r3, #16
 80064f2:	2b10      	cmp	r3, #16
 80064f4:	d122      	bne.n	800653c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0310 	and.w	r3, r3, #16
 8006500:	2b10      	cmp	r3, #16
 8006502:	d11b      	bne.n	800653c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0210 	mvn.w	r2, #16
 800650c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2208      	movs	r2, #8
 8006512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f92f 	bl	8006786 <HAL_TIM_IC_CaptureCallback>
 8006528:	e005      	b.n	8006536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f922 	bl	8006774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f931 	bl	8006798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b01      	cmp	r3, #1
 8006548:	d10e      	bne.n	8006568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b01      	cmp	r3, #1
 8006556:	d107      	bne.n	8006568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f06f 0201 	mvn.w	r2, #1
 8006560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f8fd 	bl	8006762 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006572:	2b80      	cmp	r3, #128	; 0x80
 8006574:	d10e      	bne.n	8006594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006580:	2b80      	cmp	r3, #128	; 0x80
 8006582:	d107      	bne.n	8006594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800658c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fa73 	bl	8006a7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b40      	cmp	r3, #64	; 0x40
 80065a0:	d10e      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ac:	2b40      	cmp	r3, #64	; 0x40
 80065ae:	d107      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f8f5 	bl	80067aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d10e      	bne.n	80065ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d107      	bne.n	80065ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0220 	mvn.w	r2, #32
 80065e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fa3e 	bl	8006a68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065ec:	bf00      	nop
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006604:	2b01      	cmp	r3, #1
 8006606:	d101      	bne.n	800660c <HAL_TIM_ConfigClockSource+0x18>
 8006608:	2302      	movs	r3, #2
 800660a:	e0a6      	b.n	800675a <HAL_TIM_ConfigClockSource+0x166>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2202      	movs	r2, #2
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800662a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006632:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b40      	cmp	r3, #64	; 0x40
 8006642:	d067      	beq.n	8006714 <HAL_TIM_ConfigClockSource+0x120>
 8006644:	2b40      	cmp	r3, #64	; 0x40
 8006646:	d80b      	bhi.n	8006660 <HAL_TIM_ConfigClockSource+0x6c>
 8006648:	2b10      	cmp	r3, #16
 800664a:	d073      	beq.n	8006734 <HAL_TIM_ConfigClockSource+0x140>
 800664c:	2b10      	cmp	r3, #16
 800664e:	d802      	bhi.n	8006656 <HAL_TIM_ConfigClockSource+0x62>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d06f      	beq.n	8006734 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006654:	e078      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006656:	2b20      	cmp	r3, #32
 8006658:	d06c      	beq.n	8006734 <HAL_TIM_ConfigClockSource+0x140>
 800665a:	2b30      	cmp	r3, #48	; 0x30
 800665c:	d06a      	beq.n	8006734 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800665e:	e073      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006660:	2b70      	cmp	r3, #112	; 0x70
 8006662:	d00d      	beq.n	8006680 <HAL_TIM_ConfigClockSource+0x8c>
 8006664:	2b70      	cmp	r3, #112	; 0x70
 8006666:	d804      	bhi.n	8006672 <HAL_TIM_ConfigClockSource+0x7e>
 8006668:	2b50      	cmp	r3, #80	; 0x50
 800666a:	d033      	beq.n	80066d4 <HAL_TIM_ConfigClockSource+0xe0>
 800666c:	2b60      	cmp	r3, #96	; 0x60
 800666e:	d041      	beq.n	80066f4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006670:	e06a      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006676:	d066      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x152>
 8006678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800667c:	d017      	beq.n	80066ae <HAL_TIM_ConfigClockSource+0xba>
      break;
 800667e:	e063      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	6899      	ldr	r1, [r3, #8]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f000 f96d 	bl	800696e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	609a      	str	r2, [r3, #8]
      break;
 80066ac:	e04c      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6899      	ldr	r1, [r3, #8]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f000 f956 	bl	800696e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066d0:	609a      	str	r2, [r3, #8]
      break;
 80066d2:	e039      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6818      	ldr	r0, [r3, #0]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	6859      	ldr	r1, [r3, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	461a      	mov	r2, r3
 80066e2:	f000 f8cd 	bl	8006880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2150      	movs	r1, #80	; 0x50
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 f924 	bl	800693a <TIM_ITRx_SetConfig>
      break;
 80066f2:	e029      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	6859      	ldr	r1, [r3, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	461a      	mov	r2, r3
 8006702:	f000 f8eb 	bl	80068dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2160      	movs	r1, #96	; 0x60
 800670c:	4618      	mov	r0, r3
 800670e:	f000 f914 	bl	800693a <TIM_ITRx_SetConfig>
      break;
 8006712:	e019      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	6859      	ldr	r1, [r3, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	461a      	mov	r2, r3
 8006722:	f000 f8ad 	bl	8006880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2140      	movs	r1, #64	; 0x40
 800672c:	4618      	mov	r0, r3
 800672e:	f000 f904 	bl	800693a <TIM_ITRx_SetConfig>
      break;
 8006732:	e009      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4619      	mov	r1, r3
 800673e:	4610      	mov	r0, r2
 8006740:	f000 f8fb 	bl	800693a <TIM_ITRx_SetConfig>
        break;
 8006744:	e000      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006746:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	bc80      	pop	{r7}
 8006772:	4770      	bx	lr

08006774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	bc80      	pop	{r7}
 8006784:	4770      	bx	lr

08006786 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr

08006798 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr

080067aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr

080067bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a29      	ldr	r2, [pc, #164]	; (8006874 <TIM_Base_SetConfig+0xb8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00b      	beq.n	80067ec <TIM_Base_SetConfig+0x30>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067da:	d007      	beq.n	80067ec <TIM_Base_SetConfig+0x30>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a26      	ldr	r2, [pc, #152]	; (8006878 <TIM_Base_SetConfig+0xbc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_Base_SetConfig+0x30>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a25      	ldr	r2, [pc, #148]	; (800687c <TIM_Base_SetConfig+0xc0>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d108      	bne.n	80067fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a1c      	ldr	r2, [pc, #112]	; (8006874 <TIM_Base_SetConfig+0xb8>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00b      	beq.n	800681e <TIM_Base_SetConfig+0x62>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800680c:	d007      	beq.n	800681e <TIM_Base_SetConfig+0x62>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a19      	ldr	r2, [pc, #100]	; (8006878 <TIM_Base_SetConfig+0xbc>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d003      	beq.n	800681e <TIM_Base_SetConfig+0x62>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a18      	ldr	r2, [pc, #96]	; (800687c <TIM_Base_SetConfig+0xc0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d108      	bne.n	8006830 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	4313      	orrs	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	689a      	ldr	r2, [r3, #8]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a07      	ldr	r2, [pc, #28]	; (8006874 <TIM_Base_SetConfig+0xb8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d103      	bne.n	8006864 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	691a      	ldr	r2, [r3, #16]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	615a      	str	r2, [r3, #20]
}
 800686a:	bf00      	nop
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr
 8006874:	40012c00 	.word	0x40012c00
 8006878:	40000400 	.word	0x40000400
 800687c:	40000800 	.word	0x40000800

08006880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	f023 0201 	bic.w	r2, r3, #1
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f023 030a 	bic.w	r3, r3, #10
 80068bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr

080068dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	f023 0210 	bic.w	r2, r3, #16
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006906:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	031b      	lsls	r3, r3, #12
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	4313      	orrs	r3, r2
 8006910:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006918:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	011b      	lsls	r3, r3, #4
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4313      	orrs	r3, r2
 8006922:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	621a      	str	r2, [r3, #32]
}
 8006930:	bf00      	nop
 8006932:	371c      	adds	r7, #28
 8006934:	46bd      	mov	sp, r7
 8006936:	bc80      	pop	{r7}
 8006938:	4770      	bx	lr

0800693a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800693a:	b480      	push	{r7}
 800693c:	b085      	sub	sp, #20
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006950:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4313      	orrs	r3, r2
 8006958:	f043 0307 	orr.w	r3, r3, #7
 800695c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	609a      	str	r2, [r3, #8]
}
 8006964:	bf00      	nop
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	bc80      	pop	{r7}
 800696c:	4770      	bx	lr

0800696e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800696e:	b480      	push	{r7}
 8006970:	b087      	sub	sp, #28
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
 800697a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006988:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	021a      	lsls	r2, r3, #8
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	431a      	orrs	r2, r3
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	4313      	orrs	r3, r2
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	609a      	str	r2, [r3, #8]
}
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bc80      	pop	{r7}
 80069aa:	4770      	bx	lr

080069ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d101      	bne.n	80069c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e046      	b.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a16      	ldr	r2, [pc, #88]	; (8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d00e      	beq.n	8006a26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a10:	d009      	beq.n	8006a26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a12      	ldr	r2, [pc, #72]	; (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d004      	beq.n	8006a26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a10      	ldr	r2, [pc, #64]	; (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d10c      	bne.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bc80      	pop	{r7}
 8006a5a:	4770      	bx	lr
 8006a5c:	40012c00 	.word	0x40012c00
 8006a60:	40000400 	.word	0x40000400
 8006a64:	40000800 	.word	0x40000800

08006a68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc80      	pop	{r7}
 8006a78:	4770      	bx	lr

08006a7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e03f      	b.n	8006b1e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fc fc8c 	bl	80033d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2224      	movs	r2, #36	; 0x24
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fd33 	bl	800753c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	691a      	ldr	r2, [r3, #16]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	695a      	ldr	r2, [r3, #20]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b08a      	sub	sp, #40	; 0x28
 8006b2a:	af02      	add	r7, sp, #8
 8006b2c:	60f8      	str	r0, [r7, #12]
 8006b2e:	60b9      	str	r1, [r7, #8]
 8006b30:	603b      	str	r3, [r7, #0]
 8006b32:	4613      	mov	r3, r2
 8006b34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d17c      	bne.n	8006c40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <HAL_UART_Transmit+0x2c>
 8006b4c:	88fb      	ldrh	r3, [r7, #6]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e075      	b.n	8006c42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_UART_Transmit+0x3e>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e06e      	b.n	8006c42 <HAL_UART_Transmit+0x11c>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2221      	movs	r2, #33	; 0x21
 8006b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b7a:	f7fd f8df 	bl	8003d3c <HAL_GetTick>
 8006b7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	88fa      	ldrh	r2, [r7, #6]
 8006b84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	88fa      	ldrh	r2, [r7, #6]
 8006b8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b94:	d108      	bne.n	8006ba8 <HAL_UART_Transmit+0x82>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d104      	bne.n	8006ba8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	e003      	b.n	8006bb0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bac:	2300      	movs	r3, #0
 8006bae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006bb8:	e02a      	b.n	8006c10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2180      	movs	r1, #128	; 0x80
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 fae5 	bl	8007194 <UART_WaitOnFlagUntilTimeout>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e036      	b.n	8006c42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10b      	bne.n	8006bf2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006be8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	3302      	adds	r3, #2
 8006bee:	61bb      	str	r3, [r7, #24]
 8006bf0:	e007      	b.n	8006c02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	781a      	ldrb	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1cf      	bne.n	8006bba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2200      	movs	r2, #0
 8006c22:	2140      	movs	r1, #64	; 0x40
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 fab5 	bl	8007194 <UART_WaitOnFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e006      	b.n	8006c42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	e000      	b.n	8006c42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006c40:	2302      	movs	r3, #2
  }
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3720      	adds	r7, #32
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b08a      	sub	sp, #40	; 0x28
 8006c4e:	af02      	add	r7, sp, #8
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	603b      	str	r3, [r7, #0]
 8006c56:	4613      	mov	r3, r2
 8006c58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	f040 808c 	bne.w	8006d84 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <HAL_UART_Receive+0x2e>
 8006c72:	88fb      	ldrh	r3, [r7, #6]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e084      	b.n	8006d86 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d101      	bne.n	8006c8a <HAL_UART_Receive+0x40>
 8006c86:	2302      	movs	r3, #2
 8006c88:	e07d      	b.n	8006d86 <HAL_UART_Receive+0x13c>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2222      	movs	r2, #34	; 0x22
 8006c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ca6:	f7fd f849 	bl	8003d3c <HAL_GetTick>
 8006caa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	88fa      	ldrh	r2, [r7, #6]
 8006cb0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	88fa      	ldrh	r2, [r7, #6]
 8006cb6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc0:	d108      	bne.n	8006cd4 <HAL_UART_Receive+0x8a>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d104      	bne.n	8006cd4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	e003      	b.n	8006cdc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006ce4:	e043      	b.n	8006d6e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2200      	movs	r2, #0
 8006cee:	2120      	movs	r1, #32
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 fa4f 	bl	8007194 <UART_WaitOnFlagUntilTimeout>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e042      	b.n	8006d86 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10c      	bne.n	8006d20 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	3302      	adds	r3, #2
 8006d1c:	61bb      	str	r3, [r7, #24]
 8006d1e:	e01f      	b.n	8006d60 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d28:	d007      	beq.n	8006d3a <HAL_UART_Receive+0xf0>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10a      	bne.n	8006d48 <HAL_UART_Receive+0xfe>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d106      	bne.n	8006d48 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	e008      	b.n	8006d5a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1b6      	bne.n	8006ce6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	e000      	b.n	8006d86 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006d84:	2302      	movs	r3, #2
  }
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3720      	adds	r7, #32
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d11d      	bne.n	8006de4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <HAL_UART_Receive_IT+0x26>
 8006dae:	88fb      	ldrh	r3, [r7, #6]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e016      	b.n	8006de6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d101      	bne.n	8006dc6 <HAL_UART_Receive_IT+0x38>
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	e00f      	b.n	8006de6 <HAL_UART_Receive_IT+0x58>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006dd4:	88fb      	ldrh	r3, [r7, #6]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	68b9      	ldr	r1, [r7, #8]
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f000 fa24 	bl	8007228 <UART_Start_Receive_IT>
 8006de0:	4603      	mov	r3, r0
 8006de2:	e000      	b.n	8006de6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006de4:	2302      	movs	r3, #2
  }
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
	...

08006df0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b08a      	sub	sp, #40	; 0x28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10d      	bne.n	8006e42 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d008      	beq.n	8006e42 <HAL_UART_IRQHandler+0x52>
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	f003 0320 	and.w	r3, r3, #32
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fad4 	bl	80073e8 <UART_Receive_IT>
      return;
 8006e40:	e17c      	b.n	800713c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 80b1 	beq.w	8006fac <HAL_UART_IRQHandler+0x1bc>
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d105      	bne.n	8006e60 <HAL_UART_IRQHandler+0x70>
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80a6 	beq.w	8006fac <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <HAL_UART_IRQHandler+0x90>
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d005      	beq.n	8006e80 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	f043 0201 	orr.w	r2, r3, #1
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	f003 0304 	and.w	r3, r3, #4
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <HAL_UART_IRQHandler+0xb0>
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e98:	f043 0202 	orr.w	r2, r3, #2
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <HAL_UART_IRQHandler+0xd0>
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	f043 0204 	orr.w	r2, r3, #4
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00f      	beq.n	8006eea <HAL_UART_IRQHandler+0xfa>
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	f003 0320 	and.w	r3, r3, #32
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d104      	bne.n	8006ede <HAL_UART_IRQHandler+0xee>
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d005      	beq.n	8006eea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	f043 0208 	orr.w	r2, r3, #8
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 811f 	beq.w	8007132 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d007      	beq.n	8006f0e <HAL_UART_IRQHandler+0x11e>
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	f003 0320 	and.w	r3, r3, #32
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fa6d 	bl	80073e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	bf14      	ite	ne
 8006f1c:	2301      	movne	r3, #1
 8006f1e:	2300      	moveq	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f28:	f003 0308 	and.w	r3, r3, #8
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d102      	bne.n	8006f36 <HAL_UART_IRQHandler+0x146>
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d031      	beq.n	8006f9a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f9af 	bl	800729a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d023      	beq.n	8006f92 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	695a      	ldr	r2, [r3, #20]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f58:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d013      	beq.n	8006f8a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f66:	4a77      	ldr	r2, [pc, #476]	; (8007144 <HAL_UART_IRQHandler+0x354>)
 8006f68:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fd f858 	bl	8004024 <HAL_DMA_Abort_IT>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d016      	beq.n	8006fa8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f84:	4610      	mov	r0, r2
 8006f86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f88:	e00e      	b.n	8006fa8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f8ee 	bl	800716c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f90:	e00a      	b.n	8006fa8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f8ea 	bl	800716c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f98:	e006      	b.n	8006fa8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f8e6 	bl	800716c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006fa6:	e0c4      	b.n	8007132 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa8:	bf00      	nop
    return;
 8006faa:	e0c2      	b.n	8007132 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	f040 80a1 	bne.w	80070f8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	f003 0310 	and.w	r3, r3, #16
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 809b 	beq.w	80070f8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	f003 0310 	and.w	r3, r3, #16
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 8095 	beq.w	80070f8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	60fb      	str	r3, [r7, #12]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d04e      	beq.n	8007090 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006ffc:	8a3b      	ldrh	r3, [r7, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 8099 	beq.w	8007136 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007008:	8a3a      	ldrh	r2, [r7, #16]
 800700a:	429a      	cmp	r2, r3
 800700c:	f080 8093 	bcs.w	8007136 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	8a3a      	ldrh	r2, [r7, #16]
 8007014:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	2b20      	cmp	r3, #32
 800701e:	d02b      	beq.n	8007078 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800702e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695a      	ldr	r2, [r3, #20]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f022 0201 	bic.w	r2, r2, #1
 800703e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	695a      	ldr	r2, [r3, #20]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800704e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0210 	bic.w	r2, r2, #16
 800706c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007072:	4618      	mov	r0, r3
 8007074:	f7fc ff9b 	bl	8003fae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007080:	b29b      	uxth	r3, r3
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	b29b      	uxth	r3, r3
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f878 	bl	800717e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800708e:	e052      	b.n	8007136 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007098:	b29b      	uxth	r3, r3
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d048      	beq.n	800713a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80070a8:	8a7b      	ldrh	r3, [r7, #18]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d045      	beq.n	800713a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070bc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	695a      	ldr	r2, [r3, #20]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f022 0201 	bic.w	r2, r2, #1
 80070cc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0210 	bic.w	r2, r2, #16
 80070ea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070ec:	8a7b      	ldrh	r3, [r7, #18]
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f844 	bl	800717e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80070f6:	e020      	b.n	800713a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d008      	beq.n	8007114 <HAL_UART_IRQHandler+0x324>
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007108:	2b00      	cmp	r3, #0
 800710a:	d003      	beq.n	8007114 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f904 	bl	800731a <UART_Transmit_IT>
    return;
 8007112:	e013      	b.n	800713c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00e      	beq.n	800713c <HAL_UART_IRQHandler+0x34c>
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007124:	2b00      	cmp	r3, #0
 8007126:	d009      	beq.n	800713c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f945 	bl	80073b8 <UART_EndTransmit_IT>
    return;
 800712e:	bf00      	nop
 8007130:	e004      	b.n	800713c <HAL_UART_IRQHandler+0x34c>
    return;
 8007132:	bf00      	nop
 8007134:	e002      	b.n	800713c <HAL_UART_IRQHandler+0x34c>
      return;
 8007136:	bf00      	nop
 8007138:	e000      	b.n	800713c <HAL_UART_IRQHandler+0x34c>
      return;
 800713a:	bf00      	nop
  }
}
 800713c:	3728      	adds	r7, #40	; 0x28
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	080072f3 	.word	0x080072f3

08007148 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	bc80      	pop	{r7}
 8007158:	4770      	bx	lr

0800715a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr

0800716c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	bc80      	pop	{r7}
 800717c:	4770      	bx	lr

0800717e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	460b      	mov	r3, r1
 8007188:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr

08007194 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	603b      	str	r3, [r7, #0]
 80071a0:	4613      	mov	r3, r2
 80071a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071a4:	e02c      	b.n	8007200 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ac:	d028      	beq.n	8007200 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d007      	beq.n	80071c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80071b4:	f7fc fdc2 	bl	8003d3c <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d21d      	bcs.n	8007200 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	695a      	ldr	r2, [r3, #20]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0201 	bic.w	r2, r2, #1
 80071e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e00f      	b.n	8007220 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	4013      	ands	r3, r2
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	429a      	cmp	r2, r3
 800720e:	bf0c      	ite	eq
 8007210:	2301      	moveq	r3, #1
 8007212:	2300      	movne	r3, #0
 8007214:	b2db      	uxtb	r3, r3
 8007216:	461a      	mov	r2, r3
 8007218:	79fb      	ldrb	r3, [r7, #7]
 800721a:	429a      	cmp	r2, r3
 800721c:	d0c3      	beq.n	80071a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	4613      	mov	r3, r2
 8007234:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	88fa      	ldrh	r2, [r7, #6]
 8007240:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	88fa      	ldrh	r2, [r7, #6]
 8007246:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2222      	movs	r2, #34	; 0x22
 8007252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800726c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	695a      	ldr	r2, [r3, #20]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0201 	orr.w	r2, r2, #1
 800727c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68da      	ldr	r2, [r3, #12]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 0220 	orr.w	r2, r2, #32
 800728c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	bc80      	pop	{r7}
 8007298:	4770      	bx	lr

0800729a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80072b0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	695a      	ldr	r2, [r3, #20]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0201 	bic.w	r2, r2, #1
 80072c0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d107      	bne.n	80072da <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68da      	ldr	r2, [r3, #12]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 0210 	bic.w	r2, r2, #16
 80072d8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2220      	movs	r2, #32
 80072de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bc80      	pop	{r7}
 80072f0:	4770      	bx	lr

080072f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f7ff ff2d 	bl	800716c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007312:	bf00      	nop
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800731a:	b480      	push	{r7}
 800731c:	b085      	sub	sp, #20
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b21      	cmp	r3, #33	; 0x21
 800732c:	d13e      	bne.n	80073ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007336:	d114      	bne.n	8007362 <UART_Transmit_IT+0x48>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d110      	bne.n	8007362 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007354:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	1c9a      	adds	r2, r3, #2
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	621a      	str	r2, [r3, #32]
 8007360:	e008      	b.n	8007374 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	1c59      	adds	r1, r3, #1
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	6211      	str	r1, [r2, #32]
 800736c:	781a      	ldrb	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007378:	b29b      	uxth	r3, r3
 800737a:	3b01      	subs	r3, #1
 800737c:	b29b      	uxth	r3, r3
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	4619      	mov	r1, r3
 8007382:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10f      	bne.n	80073a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007396:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68da      	ldr	r2, [r3, #12]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	e000      	b.n	80073ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80073ac:	2302      	movs	r3, #2
  }
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bc80      	pop	{r7}
 80073b6:	4770      	bx	lr

080073b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2220      	movs	r2, #32
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7ff feb5 	bl	8007148 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b22      	cmp	r3, #34	; 0x22
 80073fa:	f040 8099 	bne.w	8007530 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007406:	d117      	bne.n	8007438 <UART_Receive_IT+0x50>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d113      	bne.n	8007438 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007410:	2300      	movs	r3, #0
 8007412:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007418:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	b29b      	uxth	r3, r3
 8007422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007426:	b29a      	uxth	r2, r3
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007430:	1c9a      	adds	r2, r3, #2
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	629a      	str	r2, [r3, #40]	; 0x28
 8007436:	e026      	b.n	8007486 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800743e:	2300      	movs	r3, #0
 8007440:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800744a:	d007      	beq.n	800745c <UART_Receive_IT+0x74>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10a      	bne.n	800746a <UART_Receive_IT+0x82>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d106      	bne.n	800746a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	b2da      	uxtb	r2, r3
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	e008      	b.n	800747c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	b2db      	uxtb	r3, r3
 8007472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007476:	b2da      	uxtb	r2, r3
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007480:	1c5a      	adds	r2, r3, #1
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800748a:	b29b      	uxth	r3, r3
 800748c:	3b01      	subs	r3, #1
 800748e:	b29b      	uxth	r3, r3
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	4619      	mov	r1, r3
 8007494:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007496:	2b00      	cmp	r3, #0
 8007498:	d148      	bne.n	800752c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0220 	bic.w	r2, r2, #32
 80074a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68da      	ldr	r2, [r3, #12]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	695a      	ldr	r2, [r3, #20]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 0201 	bic.w	r2, r2, #1
 80074c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2220      	movs	r2, #32
 80074ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d123      	bne.n	8007522 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0210 	bic.w	r2, r2, #16
 80074ee:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0310 	and.w	r3, r3, #16
 80074fa:	2b10      	cmp	r3, #16
 80074fc:	d10a      	bne.n	8007514 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074fe:	2300      	movs	r3, #0
 8007500:	60fb      	str	r3, [r7, #12]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	60fb      	str	r3, [r7, #12]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	60fb      	str	r3, [r7, #12]
 8007512:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7ff fe2f 	bl	800717e <HAL_UARTEx_RxEventCallback>
 8007520:	e002      	b.n	8007528 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7ff fe19 	bl	800715a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	e002      	b.n	8007532 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	e000      	b.n	8007532 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007530:	2302      	movs	r3, #2
  }
}
 8007532:	4618      	mov	r0, r3
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689a      	ldr	r2, [r3, #8]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	431a      	orrs	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	4313      	orrs	r3, r2
 800756a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007576:	f023 030c 	bic.w	r3, r3, #12
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	6812      	ldr	r2, [r2, #0]
 800757e:	68b9      	ldr	r1, [r7, #8]
 8007580:	430b      	orrs	r3, r1
 8007582:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	699a      	ldr	r2, [r3, #24]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a2c      	ldr	r2, [pc, #176]	; (8007650 <UART_SetConfig+0x114>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d103      	bne.n	80075ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80075a4:	f7fe fdc6 	bl	8006134 <HAL_RCC_GetPCLK2Freq>
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	e002      	b.n	80075b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80075ac:	f7fe fdae 	bl	800610c <HAL_RCC_GetPCLK1Freq>
 80075b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	4613      	mov	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	009a      	lsls	r2, r3, #2
 80075bc:	441a      	add	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c8:	4a22      	ldr	r2, [pc, #136]	; (8007654 <UART_SetConfig+0x118>)
 80075ca:	fba2 2303 	umull	r2, r3, r2, r3
 80075ce:	095b      	lsrs	r3, r3, #5
 80075d0:	0119      	lsls	r1, r3, #4
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4613      	mov	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	009a      	lsls	r2, r3, #2
 80075dc:	441a      	add	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80075e8:	4b1a      	ldr	r3, [pc, #104]	; (8007654 <UART_SetConfig+0x118>)
 80075ea:	fba3 0302 	umull	r0, r3, r3, r2
 80075ee:	095b      	lsrs	r3, r3, #5
 80075f0:	2064      	movs	r0, #100	; 0x64
 80075f2:	fb00 f303 	mul.w	r3, r0, r3
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	3332      	adds	r3, #50	; 0x32
 80075fc:	4a15      	ldr	r2, [pc, #84]	; (8007654 <UART_SetConfig+0x118>)
 80075fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007602:	095b      	lsrs	r3, r3, #5
 8007604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007608:	4419      	add	r1, r3
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	009a      	lsls	r2, r3, #2
 8007614:	441a      	add	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007620:	4b0c      	ldr	r3, [pc, #48]	; (8007654 <UART_SetConfig+0x118>)
 8007622:	fba3 0302 	umull	r0, r3, r3, r2
 8007626:	095b      	lsrs	r3, r3, #5
 8007628:	2064      	movs	r0, #100	; 0x64
 800762a:	fb00 f303 	mul.w	r3, r0, r3
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	011b      	lsls	r3, r3, #4
 8007632:	3332      	adds	r3, #50	; 0x32
 8007634:	4a07      	ldr	r2, [pc, #28]	; (8007654 <UART_SetConfig+0x118>)
 8007636:	fba2 2303 	umull	r2, r3, r2, r3
 800763a:	095b      	lsrs	r3, r3, #5
 800763c:	f003 020f 	and.w	r2, r3, #15
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	440a      	add	r2, r1
 8007646:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007648:	bf00      	nop
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	40013800 	.word	0x40013800
 8007654:	51eb851f 	.word	0x51eb851f

08007658 <atof>:
 8007658:	2100      	movs	r1, #0
 800765a:	f001 bac5 	b.w	8008be8 <strtod>
	...

08007660 <__errno>:
 8007660:	4b01      	ldr	r3, [pc, #4]	; (8007668 <__errno+0x8>)
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	2000002c 	.word	0x2000002c

0800766c <__libc_init_array>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	2500      	movs	r5, #0
 8007670:	4e0c      	ldr	r6, [pc, #48]	; (80076a4 <__libc_init_array+0x38>)
 8007672:	4c0d      	ldr	r4, [pc, #52]	; (80076a8 <__libc_init_array+0x3c>)
 8007674:	1ba4      	subs	r4, r4, r6
 8007676:	10a4      	asrs	r4, r4, #2
 8007678:	42a5      	cmp	r5, r4
 800767a:	d109      	bne.n	8007690 <__libc_init_array+0x24>
 800767c:	f005 f81e 	bl	800c6bc <_init>
 8007680:	2500      	movs	r5, #0
 8007682:	4e0a      	ldr	r6, [pc, #40]	; (80076ac <__libc_init_array+0x40>)
 8007684:	4c0a      	ldr	r4, [pc, #40]	; (80076b0 <__libc_init_array+0x44>)
 8007686:	1ba4      	subs	r4, r4, r6
 8007688:	10a4      	asrs	r4, r4, #2
 800768a:	42a5      	cmp	r5, r4
 800768c:	d105      	bne.n	800769a <__libc_init_array+0x2e>
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007694:	4798      	blx	r3
 8007696:	3501      	adds	r5, #1
 8007698:	e7ee      	b.n	8007678 <__libc_init_array+0xc>
 800769a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800769e:	4798      	blx	r3
 80076a0:	3501      	adds	r5, #1
 80076a2:	e7f2      	b.n	800768a <__libc_init_array+0x1e>
 80076a4:	0800ced0 	.word	0x0800ced0
 80076a8:	0800ced0 	.word	0x0800ced0
 80076ac:	0800ced0 	.word	0x0800ced0
 80076b0:	0800ced4 	.word	0x0800ced4

080076b4 <memset>:
 80076b4:	4603      	mov	r3, r0
 80076b6:	4402      	add	r2, r0
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d100      	bne.n	80076be <memset+0xa>
 80076bc:	4770      	bx	lr
 80076be:	f803 1b01 	strb.w	r1, [r3], #1
 80076c2:	e7f9      	b.n	80076b8 <memset+0x4>

080076c4 <__cvt>:
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ca:	461e      	mov	r6, r3
 80076cc:	bfbb      	ittet	lt
 80076ce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80076d2:	461e      	movlt	r6, r3
 80076d4:	2300      	movge	r3, #0
 80076d6:	232d      	movlt	r3, #45	; 0x2d
 80076d8:	b088      	sub	sp, #32
 80076da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80076dc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80076e0:	f027 0720 	bic.w	r7, r7, #32
 80076e4:	2f46      	cmp	r7, #70	; 0x46
 80076e6:	4614      	mov	r4, r2
 80076e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80076ea:	700b      	strb	r3, [r1, #0]
 80076ec:	d004      	beq.n	80076f8 <__cvt+0x34>
 80076ee:	2f45      	cmp	r7, #69	; 0x45
 80076f0:	d100      	bne.n	80076f4 <__cvt+0x30>
 80076f2:	3501      	adds	r5, #1
 80076f4:	2302      	movs	r3, #2
 80076f6:	e000      	b.n	80076fa <__cvt+0x36>
 80076f8:	2303      	movs	r3, #3
 80076fa:	aa07      	add	r2, sp, #28
 80076fc:	9204      	str	r2, [sp, #16]
 80076fe:	aa06      	add	r2, sp, #24
 8007700:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007704:	e9cd 3500 	strd	r3, r5, [sp]
 8007708:	4622      	mov	r2, r4
 800770a:	4633      	mov	r3, r6
 800770c:	f001 fb0c 	bl	8008d28 <_dtoa_r>
 8007710:	2f47      	cmp	r7, #71	; 0x47
 8007712:	4680      	mov	r8, r0
 8007714:	d102      	bne.n	800771c <__cvt+0x58>
 8007716:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007718:	07db      	lsls	r3, r3, #31
 800771a:	d526      	bpl.n	800776a <__cvt+0xa6>
 800771c:	2f46      	cmp	r7, #70	; 0x46
 800771e:	eb08 0905 	add.w	r9, r8, r5
 8007722:	d111      	bne.n	8007748 <__cvt+0x84>
 8007724:	f898 3000 	ldrb.w	r3, [r8]
 8007728:	2b30      	cmp	r3, #48	; 0x30
 800772a:	d10a      	bne.n	8007742 <__cvt+0x7e>
 800772c:	2200      	movs	r2, #0
 800772e:	2300      	movs	r3, #0
 8007730:	4620      	mov	r0, r4
 8007732:	4631      	mov	r1, r6
 8007734:	f7f9 f938 	bl	80009a8 <__aeabi_dcmpeq>
 8007738:	b918      	cbnz	r0, 8007742 <__cvt+0x7e>
 800773a:	f1c5 0501 	rsb	r5, r5, #1
 800773e:	f8ca 5000 	str.w	r5, [sl]
 8007742:	f8da 3000 	ldr.w	r3, [sl]
 8007746:	4499      	add	r9, r3
 8007748:	2200      	movs	r2, #0
 800774a:	2300      	movs	r3, #0
 800774c:	4620      	mov	r0, r4
 800774e:	4631      	mov	r1, r6
 8007750:	f7f9 f92a 	bl	80009a8 <__aeabi_dcmpeq>
 8007754:	b938      	cbnz	r0, 8007766 <__cvt+0xa2>
 8007756:	2230      	movs	r2, #48	; 0x30
 8007758:	9b07      	ldr	r3, [sp, #28]
 800775a:	454b      	cmp	r3, r9
 800775c:	d205      	bcs.n	800776a <__cvt+0xa6>
 800775e:	1c59      	adds	r1, r3, #1
 8007760:	9107      	str	r1, [sp, #28]
 8007762:	701a      	strb	r2, [r3, #0]
 8007764:	e7f8      	b.n	8007758 <__cvt+0x94>
 8007766:	f8cd 901c 	str.w	r9, [sp, #28]
 800776a:	4640      	mov	r0, r8
 800776c:	9b07      	ldr	r3, [sp, #28]
 800776e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007770:	eba3 0308 	sub.w	r3, r3, r8
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	b008      	add	sp, #32
 8007778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800777c <__exponent>:
 800777c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800777e:	2900      	cmp	r1, #0
 8007780:	bfb4      	ite	lt
 8007782:	232d      	movlt	r3, #45	; 0x2d
 8007784:	232b      	movge	r3, #43	; 0x2b
 8007786:	4604      	mov	r4, r0
 8007788:	bfb8      	it	lt
 800778a:	4249      	neglt	r1, r1
 800778c:	2909      	cmp	r1, #9
 800778e:	f804 2b02 	strb.w	r2, [r4], #2
 8007792:	7043      	strb	r3, [r0, #1]
 8007794:	dd21      	ble.n	80077da <__exponent+0x5e>
 8007796:	f10d 0307 	add.w	r3, sp, #7
 800779a:	461f      	mov	r7, r3
 800779c:	260a      	movs	r6, #10
 800779e:	fb91 f5f6 	sdiv	r5, r1, r6
 80077a2:	fb06 1115 	mls	r1, r6, r5, r1
 80077a6:	2d09      	cmp	r5, #9
 80077a8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80077ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077b0:	f103 32ff 	add.w	r2, r3, #4294967295
 80077b4:	4629      	mov	r1, r5
 80077b6:	dc09      	bgt.n	80077cc <__exponent+0x50>
 80077b8:	3130      	adds	r1, #48	; 0x30
 80077ba:	3b02      	subs	r3, #2
 80077bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80077c0:	42bb      	cmp	r3, r7
 80077c2:	4622      	mov	r2, r4
 80077c4:	d304      	bcc.n	80077d0 <__exponent+0x54>
 80077c6:	1a10      	subs	r0, r2, r0
 80077c8:	b003      	add	sp, #12
 80077ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077cc:	4613      	mov	r3, r2
 80077ce:	e7e6      	b.n	800779e <__exponent+0x22>
 80077d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077d4:	f804 2b01 	strb.w	r2, [r4], #1
 80077d8:	e7f2      	b.n	80077c0 <__exponent+0x44>
 80077da:	2330      	movs	r3, #48	; 0x30
 80077dc:	4419      	add	r1, r3
 80077de:	7083      	strb	r3, [r0, #2]
 80077e0:	1d02      	adds	r2, r0, #4
 80077e2:	70c1      	strb	r1, [r0, #3]
 80077e4:	e7ef      	b.n	80077c6 <__exponent+0x4a>
	...

080077e8 <_printf_float>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	b091      	sub	sp, #68	; 0x44
 80077ee:	460c      	mov	r4, r1
 80077f0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80077f2:	4693      	mov	fp, r2
 80077f4:	461e      	mov	r6, r3
 80077f6:	4605      	mov	r5, r0
 80077f8:	f002 fb74 	bl	8009ee4 <_localeconv_r>
 80077fc:	6803      	ldr	r3, [r0, #0]
 80077fe:	4618      	mov	r0, r3
 8007800:	9309      	str	r3, [sp, #36]	; 0x24
 8007802:	f7f8 fca5 	bl	8000150 <strlen>
 8007806:	2300      	movs	r3, #0
 8007808:	930e      	str	r3, [sp, #56]	; 0x38
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	900a      	str	r0, [sp, #40]	; 0x28
 800780e:	3307      	adds	r3, #7
 8007810:	f023 0307 	bic.w	r3, r3, #7
 8007814:	f103 0208 	add.w	r2, r3, #8
 8007818:	f894 8018 	ldrb.w	r8, [r4, #24]
 800781c:	f8d4 a000 	ldr.w	sl, [r4]
 8007820:	603a      	str	r2, [r7, #0]
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800782a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800782e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007832:	930b      	str	r3, [sp, #44]	; 0x2c
 8007834:	f04f 32ff 	mov.w	r2, #4294967295
 8007838:	4ba6      	ldr	r3, [pc, #664]	; (8007ad4 <_printf_float+0x2ec>)
 800783a:	4638      	mov	r0, r7
 800783c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800783e:	f7f9 f8e5 	bl	8000a0c <__aeabi_dcmpun>
 8007842:	bb68      	cbnz	r0, 80078a0 <_printf_float+0xb8>
 8007844:	f04f 32ff 	mov.w	r2, #4294967295
 8007848:	4ba2      	ldr	r3, [pc, #648]	; (8007ad4 <_printf_float+0x2ec>)
 800784a:	4638      	mov	r0, r7
 800784c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800784e:	f7f9 f8bf 	bl	80009d0 <__aeabi_dcmple>
 8007852:	bb28      	cbnz	r0, 80078a0 <_printf_float+0xb8>
 8007854:	2200      	movs	r2, #0
 8007856:	2300      	movs	r3, #0
 8007858:	4638      	mov	r0, r7
 800785a:	4649      	mov	r1, r9
 800785c:	f7f9 f8ae 	bl	80009bc <__aeabi_dcmplt>
 8007860:	b110      	cbz	r0, 8007868 <_printf_float+0x80>
 8007862:	232d      	movs	r3, #45	; 0x2d
 8007864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007868:	4f9b      	ldr	r7, [pc, #620]	; (8007ad8 <_printf_float+0x2f0>)
 800786a:	4b9c      	ldr	r3, [pc, #624]	; (8007adc <_printf_float+0x2f4>)
 800786c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007870:	bf98      	it	ls
 8007872:	461f      	movls	r7, r3
 8007874:	2303      	movs	r3, #3
 8007876:	f04f 0900 	mov.w	r9, #0
 800787a:	6123      	str	r3, [r4, #16]
 800787c:	f02a 0304 	bic.w	r3, sl, #4
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	9600      	str	r6, [sp, #0]
 8007884:	465b      	mov	r3, fp
 8007886:	aa0f      	add	r2, sp, #60	; 0x3c
 8007888:	4621      	mov	r1, r4
 800788a:	4628      	mov	r0, r5
 800788c:	f000 f9e2 	bl	8007c54 <_printf_common>
 8007890:	3001      	adds	r0, #1
 8007892:	f040 8090 	bne.w	80079b6 <_printf_float+0x1ce>
 8007896:	f04f 30ff 	mov.w	r0, #4294967295
 800789a:	b011      	add	sp, #68	; 0x44
 800789c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a0:	463a      	mov	r2, r7
 80078a2:	464b      	mov	r3, r9
 80078a4:	4638      	mov	r0, r7
 80078a6:	4649      	mov	r1, r9
 80078a8:	f7f9 f8b0 	bl	8000a0c <__aeabi_dcmpun>
 80078ac:	b110      	cbz	r0, 80078b4 <_printf_float+0xcc>
 80078ae:	4f8c      	ldr	r7, [pc, #560]	; (8007ae0 <_printf_float+0x2f8>)
 80078b0:	4b8c      	ldr	r3, [pc, #560]	; (8007ae4 <_printf_float+0x2fc>)
 80078b2:	e7db      	b.n	800786c <_printf_float+0x84>
 80078b4:	6863      	ldr	r3, [r4, #4]
 80078b6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80078ba:	1c59      	adds	r1, r3, #1
 80078bc:	a80d      	add	r0, sp, #52	; 0x34
 80078be:	a90e      	add	r1, sp, #56	; 0x38
 80078c0:	d140      	bne.n	8007944 <_printf_float+0x15c>
 80078c2:	2306      	movs	r3, #6
 80078c4:	6063      	str	r3, [r4, #4]
 80078c6:	f04f 0c00 	mov.w	ip, #0
 80078ca:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80078ce:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80078d2:	6863      	ldr	r3, [r4, #4]
 80078d4:	6022      	str	r2, [r4, #0]
 80078d6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	463a      	mov	r2, r7
 80078de:	464b      	mov	r3, r9
 80078e0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80078e4:	4628      	mov	r0, r5
 80078e6:	f7ff feed 	bl	80076c4 <__cvt>
 80078ea:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80078ee:	2b47      	cmp	r3, #71	; 0x47
 80078f0:	4607      	mov	r7, r0
 80078f2:	d109      	bne.n	8007908 <_printf_float+0x120>
 80078f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078f6:	1cd8      	adds	r0, r3, #3
 80078f8:	db02      	blt.n	8007900 <_printf_float+0x118>
 80078fa:	6862      	ldr	r2, [r4, #4]
 80078fc:	4293      	cmp	r3, r2
 80078fe:	dd47      	ble.n	8007990 <_printf_float+0x1a8>
 8007900:	f1a8 0802 	sub.w	r8, r8, #2
 8007904:	fa5f f888 	uxtb.w	r8, r8
 8007908:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800790c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800790e:	d824      	bhi.n	800795a <_printf_float+0x172>
 8007910:	3901      	subs	r1, #1
 8007912:	4642      	mov	r2, r8
 8007914:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007918:	910d      	str	r1, [sp, #52]	; 0x34
 800791a:	f7ff ff2f 	bl	800777c <__exponent>
 800791e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007920:	4681      	mov	r9, r0
 8007922:	1813      	adds	r3, r2, r0
 8007924:	2a01      	cmp	r2, #1
 8007926:	6123      	str	r3, [r4, #16]
 8007928:	dc02      	bgt.n	8007930 <_printf_float+0x148>
 800792a:	6822      	ldr	r2, [r4, #0]
 800792c:	07d1      	lsls	r1, r2, #31
 800792e:	d501      	bpl.n	8007934 <_printf_float+0x14c>
 8007930:	3301      	adds	r3, #1
 8007932:	6123      	str	r3, [r4, #16]
 8007934:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007938:	2b00      	cmp	r3, #0
 800793a:	d0a2      	beq.n	8007882 <_printf_float+0x9a>
 800793c:	232d      	movs	r3, #45	; 0x2d
 800793e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007942:	e79e      	b.n	8007882 <_printf_float+0x9a>
 8007944:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8007948:	f000 816e 	beq.w	8007c28 <_printf_float+0x440>
 800794c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007950:	d1b9      	bne.n	80078c6 <_printf_float+0xde>
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1b7      	bne.n	80078c6 <_printf_float+0xde>
 8007956:	2301      	movs	r3, #1
 8007958:	e7b4      	b.n	80078c4 <_printf_float+0xdc>
 800795a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800795e:	d119      	bne.n	8007994 <_printf_float+0x1ac>
 8007960:	2900      	cmp	r1, #0
 8007962:	6863      	ldr	r3, [r4, #4]
 8007964:	dd0c      	ble.n	8007980 <_printf_float+0x198>
 8007966:	6121      	str	r1, [r4, #16]
 8007968:	b913      	cbnz	r3, 8007970 <_printf_float+0x188>
 800796a:	6822      	ldr	r2, [r4, #0]
 800796c:	07d2      	lsls	r2, r2, #31
 800796e:	d502      	bpl.n	8007976 <_printf_float+0x18e>
 8007970:	3301      	adds	r3, #1
 8007972:	440b      	add	r3, r1
 8007974:	6123      	str	r3, [r4, #16]
 8007976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007978:	f04f 0900 	mov.w	r9, #0
 800797c:	65a3      	str	r3, [r4, #88]	; 0x58
 800797e:	e7d9      	b.n	8007934 <_printf_float+0x14c>
 8007980:	b913      	cbnz	r3, 8007988 <_printf_float+0x1a0>
 8007982:	6822      	ldr	r2, [r4, #0]
 8007984:	07d0      	lsls	r0, r2, #31
 8007986:	d501      	bpl.n	800798c <_printf_float+0x1a4>
 8007988:	3302      	adds	r3, #2
 800798a:	e7f3      	b.n	8007974 <_printf_float+0x18c>
 800798c:	2301      	movs	r3, #1
 800798e:	e7f1      	b.n	8007974 <_printf_float+0x18c>
 8007990:	f04f 0867 	mov.w	r8, #103	; 0x67
 8007994:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007998:	4293      	cmp	r3, r2
 800799a:	db05      	blt.n	80079a8 <_printf_float+0x1c0>
 800799c:	6822      	ldr	r2, [r4, #0]
 800799e:	6123      	str	r3, [r4, #16]
 80079a0:	07d1      	lsls	r1, r2, #31
 80079a2:	d5e8      	bpl.n	8007976 <_printf_float+0x18e>
 80079a4:	3301      	adds	r3, #1
 80079a6:	e7e5      	b.n	8007974 <_printf_float+0x18c>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	bfcc      	ite	gt
 80079ac:	2301      	movgt	r3, #1
 80079ae:	f1c3 0302 	rsble	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	e7de      	b.n	8007974 <_printf_float+0x18c>
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	055a      	lsls	r2, r3, #21
 80079ba:	d407      	bmi.n	80079cc <_printf_float+0x1e4>
 80079bc:	6923      	ldr	r3, [r4, #16]
 80079be:	463a      	mov	r2, r7
 80079c0:	4659      	mov	r1, fp
 80079c2:	4628      	mov	r0, r5
 80079c4:	47b0      	blx	r6
 80079c6:	3001      	adds	r0, #1
 80079c8:	d129      	bne.n	8007a1e <_printf_float+0x236>
 80079ca:	e764      	b.n	8007896 <_printf_float+0xae>
 80079cc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80079d0:	f240 80d7 	bls.w	8007b82 <_printf_float+0x39a>
 80079d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079d8:	2200      	movs	r2, #0
 80079da:	2300      	movs	r3, #0
 80079dc:	f7f8 ffe4 	bl	80009a8 <__aeabi_dcmpeq>
 80079e0:	b388      	cbz	r0, 8007a46 <_printf_float+0x25e>
 80079e2:	2301      	movs	r3, #1
 80079e4:	4a40      	ldr	r2, [pc, #256]	; (8007ae8 <_printf_float+0x300>)
 80079e6:	4659      	mov	r1, fp
 80079e8:	4628      	mov	r0, r5
 80079ea:	47b0      	blx	r6
 80079ec:	3001      	adds	r0, #1
 80079ee:	f43f af52 	beq.w	8007896 <_printf_float+0xae>
 80079f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80079f6:	429a      	cmp	r2, r3
 80079f8:	db02      	blt.n	8007a00 <_printf_float+0x218>
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	07d8      	lsls	r0, r3, #31
 80079fe:	d50e      	bpl.n	8007a1e <_printf_float+0x236>
 8007a00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a04:	4659      	mov	r1, fp
 8007a06:	4628      	mov	r0, r5
 8007a08:	47b0      	blx	r6
 8007a0a:	3001      	adds	r0, #1
 8007a0c:	f43f af43 	beq.w	8007896 <_printf_float+0xae>
 8007a10:	2700      	movs	r7, #0
 8007a12:	f104 081a 	add.w	r8, r4, #26
 8007a16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	42bb      	cmp	r3, r7
 8007a1c:	dc09      	bgt.n	8007a32 <_printf_float+0x24a>
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	079f      	lsls	r7, r3, #30
 8007a22:	f100 80fd 	bmi.w	8007c20 <_printf_float+0x438>
 8007a26:	68e0      	ldr	r0, [r4, #12]
 8007a28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a2a:	4298      	cmp	r0, r3
 8007a2c:	bfb8      	it	lt
 8007a2e:	4618      	movlt	r0, r3
 8007a30:	e733      	b.n	800789a <_printf_float+0xb2>
 8007a32:	2301      	movs	r3, #1
 8007a34:	4642      	mov	r2, r8
 8007a36:	4659      	mov	r1, fp
 8007a38:	4628      	mov	r0, r5
 8007a3a:	47b0      	blx	r6
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	f43f af2a 	beq.w	8007896 <_printf_float+0xae>
 8007a42:	3701      	adds	r7, #1
 8007a44:	e7e7      	b.n	8007a16 <_printf_float+0x22e>
 8007a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	dc2b      	bgt.n	8007aa4 <_printf_float+0x2bc>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	4a26      	ldr	r2, [pc, #152]	; (8007ae8 <_printf_float+0x300>)
 8007a50:	4659      	mov	r1, fp
 8007a52:	4628      	mov	r0, r5
 8007a54:	47b0      	blx	r6
 8007a56:	3001      	adds	r0, #1
 8007a58:	f43f af1d 	beq.w	8007896 <_printf_float+0xae>
 8007a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a5e:	b923      	cbnz	r3, 8007a6a <_printf_float+0x282>
 8007a60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a62:	b913      	cbnz	r3, 8007a6a <_printf_float+0x282>
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	07d9      	lsls	r1, r3, #31
 8007a68:	d5d9      	bpl.n	8007a1e <_printf_float+0x236>
 8007a6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a6e:	4659      	mov	r1, fp
 8007a70:	4628      	mov	r0, r5
 8007a72:	47b0      	blx	r6
 8007a74:	3001      	adds	r0, #1
 8007a76:	f43f af0e 	beq.w	8007896 <_printf_float+0xae>
 8007a7a:	f04f 0800 	mov.w	r8, #0
 8007a7e:	f104 091a 	add.w	r9, r4, #26
 8007a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a84:	425b      	negs	r3, r3
 8007a86:	4543      	cmp	r3, r8
 8007a88:	dc01      	bgt.n	8007a8e <_printf_float+0x2a6>
 8007a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a8c:	e797      	b.n	80079be <_printf_float+0x1d6>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	464a      	mov	r2, r9
 8007a92:	4659      	mov	r1, fp
 8007a94:	4628      	mov	r0, r5
 8007a96:	47b0      	blx	r6
 8007a98:	3001      	adds	r0, #1
 8007a9a:	f43f aefc 	beq.w	8007896 <_printf_float+0xae>
 8007a9e:	f108 0801 	add.w	r8, r8, #1
 8007aa2:	e7ee      	b.n	8007a82 <_printf_float+0x29a>
 8007aa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007aa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	bfa8      	it	ge
 8007aac:	461a      	movge	r2, r3
 8007aae:	2a00      	cmp	r2, #0
 8007ab0:	4690      	mov	r8, r2
 8007ab2:	dd07      	ble.n	8007ac4 <_printf_float+0x2dc>
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	4659      	mov	r1, fp
 8007ab8:	463a      	mov	r2, r7
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b0      	blx	r6
 8007abe:	3001      	adds	r0, #1
 8007ac0:	f43f aee9 	beq.w	8007896 <_printf_float+0xae>
 8007ac4:	f104 031a 	add.w	r3, r4, #26
 8007ac8:	f04f 0a00 	mov.w	sl, #0
 8007acc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007ad0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ad2:	e015      	b.n	8007b00 <_printf_float+0x318>
 8007ad4:	7fefffff 	.word	0x7fefffff
 8007ad8:	0800c9e4 	.word	0x0800c9e4
 8007adc:	0800c9e0 	.word	0x0800c9e0
 8007ae0:	0800c9ec 	.word	0x0800c9ec
 8007ae4:	0800c9e8 	.word	0x0800c9e8
 8007ae8:	0800c9f0 	.word	0x0800c9f0
 8007aec:	2301      	movs	r3, #1
 8007aee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007af0:	4659      	mov	r1, fp
 8007af2:	4628      	mov	r0, r5
 8007af4:	47b0      	blx	r6
 8007af6:	3001      	adds	r0, #1
 8007af8:	f43f aecd 	beq.w	8007896 <_printf_float+0xae>
 8007afc:	f10a 0a01 	add.w	sl, sl, #1
 8007b00:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8007b04:	eba9 0308 	sub.w	r3, r9, r8
 8007b08:	4553      	cmp	r3, sl
 8007b0a:	dcef      	bgt.n	8007aec <_printf_float+0x304>
 8007b0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007b10:	429a      	cmp	r2, r3
 8007b12:	444f      	add	r7, r9
 8007b14:	db14      	blt.n	8007b40 <_printf_float+0x358>
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	07da      	lsls	r2, r3, #31
 8007b1a:	d411      	bmi.n	8007b40 <_printf_float+0x358>
 8007b1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b1e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007b20:	eba3 0209 	sub.w	r2, r3, r9
 8007b24:	eba3 0901 	sub.w	r9, r3, r1
 8007b28:	4591      	cmp	r9, r2
 8007b2a:	bfa8      	it	ge
 8007b2c:	4691      	movge	r9, r2
 8007b2e:	f1b9 0f00 	cmp.w	r9, #0
 8007b32:	dc0d      	bgt.n	8007b50 <_printf_float+0x368>
 8007b34:	2700      	movs	r7, #0
 8007b36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b3a:	f104 081a 	add.w	r8, r4, #26
 8007b3e:	e018      	b.n	8007b72 <_printf_float+0x38a>
 8007b40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b44:	4659      	mov	r1, fp
 8007b46:	4628      	mov	r0, r5
 8007b48:	47b0      	blx	r6
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	d1e6      	bne.n	8007b1c <_printf_float+0x334>
 8007b4e:	e6a2      	b.n	8007896 <_printf_float+0xae>
 8007b50:	464b      	mov	r3, r9
 8007b52:	463a      	mov	r2, r7
 8007b54:	4659      	mov	r1, fp
 8007b56:	4628      	mov	r0, r5
 8007b58:	47b0      	blx	r6
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	d1ea      	bne.n	8007b34 <_printf_float+0x34c>
 8007b5e:	e69a      	b.n	8007896 <_printf_float+0xae>
 8007b60:	2301      	movs	r3, #1
 8007b62:	4642      	mov	r2, r8
 8007b64:	4659      	mov	r1, fp
 8007b66:	4628      	mov	r0, r5
 8007b68:	47b0      	blx	r6
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	f43f ae93 	beq.w	8007896 <_printf_float+0xae>
 8007b70:	3701      	adds	r7, #1
 8007b72:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007b76:	1a9b      	subs	r3, r3, r2
 8007b78:	eba3 0309 	sub.w	r3, r3, r9
 8007b7c:	42bb      	cmp	r3, r7
 8007b7e:	dcef      	bgt.n	8007b60 <_printf_float+0x378>
 8007b80:	e74d      	b.n	8007a1e <_printf_float+0x236>
 8007b82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b84:	2a01      	cmp	r2, #1
 8007b86:	dc01      	bgt.n	8007b8c <_printf_float+0x3a4>
 8007b88:	07db      	lsls	r3, r3, #31
 8007b8a:	d538      	bpl.n	8007bfe <_printf_float+0x416>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	463a      	mov	r2, r7
 8007b90:	4659      	mov	r1, fp
 8007b92:	4628      	mov	r0, r5
 8007b94:	47b0      	blx	r6
 8007b96:	3001      	adds	r0, #1
 8007b98:	f43f ae7d 	beq.w	8007896 <_printf_float+0xae>
 8007b9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ba0:	4659      	mov	r1, fp
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	47b0      	blx	r6
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	f107 0701 	add.w	r7, r7, #1
 8007bac:	f43f ae73 	beq.w	8007896 <_printf_float+0xae>
 8007bb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f103 38ff 	add.w	r8, r3, #4294967295
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f7f8 fef3 	bl	80009a8 <__aeabi_dcmpeq>
 8007bc2:	b9c0      	cbnz	r0, 8007bf6 <_printf_float+0x40e>
 8007bc4:	4643      	mov	r3, r8
 8007bc6:	463a      	mov	r2, r7
 8007bc8:	4659      	mov	r1, fp
 8007bca:	4628      	mov	r0, r5
 8007bcc:	47b0      	blx	r6
 8007bce:	3001      	adds	r0, #1
 8007bd0:	d10d      	bne.n	8007bee <_printf_float+0x406>
 8007bd2:	e660      	b.n	8007896 <_printf_float+0xae>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	4642      	mov	r2, r8
 8007bd8:	4659      	mov	r1, fp
 8007bda:	4628      	mov	r0, r5
 8007bdc:	47b0      	blx	r6
 8007bde:	3001      	adds	r0, #1
 8007be0:	f43f ae59 	beq.w	8007896 <_printf_float+0xae>
 8007be4:	3701      	adds	r7, #1
 8007be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007be8:	3b01      	subs	r3, #1
 8007bea:	42bb      	cmp	r3, r7
 8007bec:	dcf2      	bgt.n	8007bd4 <_printf_float+0x3ec>
 8007bee:	464b      	mov	r3, r9
 8007bf0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007bf4:	e6e4      	b.n	80079c0 <_printf_float+0x1d8>
 8007bf6:	2700      	movs	r7, #0
 8007bf8:	f104 081a 	add.w	r8, r4, #26
 8007bfc:	e7f3      	b.n	8007be6 <_printf_float+0x3fe>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e7e1      	b.n	8007bc6 <_printf_float+0x3de>
 8007c02:	2301      	movs	r3, #1
 8007c04:	4642      	mov	r2, r8
 8007c06:	4659      	mov	r1, fp
 8007c08:	4628      	mov	r0, r5
 8007c0a:	47b0      	blx	r6
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	f43f ae42 	beq.w	8007896 <_printf_float+0xae>
 8007c12:	3701      	adds	r7, #1
 8007c14:	68e3      	ldr	r3, [r4, #12]
 8007c16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c18:	1a9b      	subs	r3, r3, r2
 8007c1a:	42bb      	cmp	r3, r7
 8007c1c:	dcf1      	bgt.n	8007c02 <_printf_float+0x41a>
 8007c1e:	e702      	b.n	8007a26 <_printf_float+0x23e>
 8007c20:	2700      	movs	r7, #0
 8007c22:	f104 0819 	add.w	r8, r4, #25
 8007c26:	e7f5      	b.n	8007c14 <_printf_float+0x42c>
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f43f ae94 	beq.w	8007956 <_printf_float+0x16e>
 8007c2e:	f04f 0c00 	mov.w	ip, #0
 8007c32:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007c36:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8007c3a:	6022      	str	r2, [r4, #0]
 8007c3c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007c40:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	463a      	mov	r2, r7
 8007c48:	464b      	mov	r3, r9
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f7ff fd3a 	bl	80076c4 <__cvt>
 8007c50:	4607      	mov	r7, r0
 8007c52:	e64f      	b.n	80078f4 <_printf_float+0x10c>

08007c54 <_printf_common>:
 8007c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c58:	4691      	mov	r9, r2
 8007c5a:	461f      	mov	r7, r3
 8007c5c:	688a      	ldr	r2, [r1, #8]
 8007c5e:	690b      	ldr	r3, [r1, #16]
 8007c60:	4606      	mov	r6, r0
 8007c62:	4293      	cmp	r3, r2
 8007c64:	bfb8      	it	lt
 8007c66:	4613      	movlt	r3, r2
 8007c68:	f8c9 3000 	str.w	r3, [r9]
 8007c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c70:	460c      	mov	r4, r1
 8007c72:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c76:	b112      	cbz	r2, 8007c7e <_printf_common+0x2a>
 8007c78:	3301      	adds	r3, #1
 8007c7a:	f8c9 3000 	str.w	r3, [r9]
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	0699      	lsls	r1, r3, #26
 8007c82:	bf42      	ittt	mi
 8007c84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007c88:	3302      	addmi	r3, #2
 8007c8a:	f8c9 3000 	strmi.w	r3, [r9]
 8007c8e:	6825      	ldr	r5, [r4, #0]
 8007c90:	f015 0506 	ands.w	r5, r5, #6
 8007c94:	d107      	bne.n	8007ca6 <_printf_common+0x52>
 8007c96:	f104 0a19 	add.w	sl, r4, #25
 8007c9a:	68e3      	ldr	r3, [r4, #12]
 8007c9c:	f8d9 2000 	ldr.w	r2, [r9]
 8007ca0:	1a9b      	subs	r3, r3, r2
 8007ca2:	42ab      	cmp	r3, r5
 8007ca4:	dc29      	bgt.n	8007cfa <_printf_common+0xa6>
 8007ca6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007caa:	6822      	ldr	r2, [r4, #0]
 8007cac:	3300      	adds	r3, #0
 8007cae:	bf18      	it	ne
 8007cb0:	2301      	movne	r3, #1
 8007cb2:	0692      	lsls	r2, r2, #26
 8007cb4:	d42e      	bmi.n	8007d14 <_printf_common+0xc0>
 8007cb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cba:	4639      	mov	r1, r7
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	47c0      	blx	r8
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d021      	beq.n	8007d08 <_printf_common+0xb4>
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	68e5      	ldr	r5, [r4, #12]
 8007cc8:	f003 0306 	and.w	r3, r3, #6
 8007ccc:	2b04      	cmp	r3, #4
 8007cce:	bf18      	it	ne
 8007cd0:	2500      	movne	r5, #0
 8007cd2:	f8d9 2000 	ldr.w	r2, [r9]
 8007cd6:	f04f 0900 	mov.w	r9, #0
 8007cda:	bf08      	it	eq
 8007cdc:	1aad      	subeq	r5, r5, r2
 8007cde:	68a3      	ldr	r3, [r4, #8]
 8007ce0:	6922      	ldr	r2, [r4, #16]
 8007ce2:	bf08      	it	eq
 8007ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	bfc4      	itt	gt
 8007cec:	1a9b      	subgt	r3, r3, r2
 8007cee:	18ed      	addgt	r5, r5, r3
 8007cf0:	341a      	adds	r4, #26
 8007cf2:	454d      	cmp	r5, r9
 8007cf4:	d11a      	bne.n	8007d2c <_printf_common+0xd8>
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	e008      	b.n	8007d0c <_printf_common+0xb8>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	4652      	mov	r2, sl
 8007cfe:	4639      	mov	r1, r7
 8007d00:	4630      	mov	r0, r6
 8007d02:	47c0      	blx	r8
 8007d04:	3001      	adds	r0, #1
 8007d06:	d103      	bne.n	8007d10 <_printf_common+0xbc>
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d10:	3501      	adds	r5, #1
 8007d12:	e7c2      	b.n	8007c9a <_printf_common+0x46>
 8007d14:	2030      	movs	r0, #48	; 0x30
 8007d16:	18e1      	adds	r1, r4, r3
 8007d18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d22:	4422      	add	r2, r4
 8007d24:	3302      	adds	r3, #2
 8007d26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d2a:	e7c4      	b.n	8007cb6 <_printf_common+0x62>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	4622      	mov	r2, r4
 8007d30:	4639      	mov	r1, r7
 8007d32:	4630      	mov	r0, r6
 8007d34:	47c0      	blx	r8
 8007d36:	3001      	adds	r0, #1
 8007d38:	d0e6      	beq.n	8007d08 <_printf_common+0xb4>
 8007d3a:	f109 0901 	add.w	r9, r9, #1
 8007d3e:	e7d8      	b.n	8007cf2 <_printf_common+0x9e>

08007d40 <_printf_i>:
 8007d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007d48:	460c      	mov	r4, r1
 8007d4a:	7e09      	ldrb	r1, [r1, #24]
 8007d4c:	b085      	sub	sp, #20
 8007d4e:	296e      	cmp	r1, #110	; 0x6e
 8007d50:	4617      	mov	r7, r2
 8007d52:	4606      	mov	r6, r0
 8007d54:	4698      	mov	r8, r3
 8007d56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d58:	f000 80b3 	beq.w	8007ec2 <_printf_i+0x182>
 8007d5c:	d822      	bhi.n	8007da4 <_printf_i+0x64>
 8007d5e:	2963      	cmp	r1, #99	; 0x63
 8007d60:	d036      	beq.n	8007dd0 <_printf_i+0x90>
 8007d62:	d80a      	bhi.n	8007d7a <_printf_i+0x3a>
 8007d64:	2900      	cmp	r1, #0
 8007d66:	f000 80b9 	beq.w	8007edc <_printf_i+0x19c>
 8007d6a:	2958      	cmp	r1, #88	; 0x58
 8007d6c:	f000 8083 	beq.w	8007e76 <_printf_i+0x136>
 8007d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007d78:	e032      	b.n	8007de0 <_printf_i+0xa0>
 8007d7a:	2964      	cmp	r1, #100	; 0x64
 8007d7c:	d001      	beq.n	8007d82 <_printf_i+0x42>
 8007d7e:	2969      	cmp	r1, #105	; 0x69
 8007d80:	d1f6      	bne.n	8007d70 <_printf_i+0x30>
 8007d82:	6820      	ldr	r0, [r4, #0]
 8007d84:	6813      	ldr	r3, [r2, #0]
 8007d86:	0605      	lsls	r5, r0, #24
 8007d88:	f103 0104 	add.w	r1, r3, #4
 8007d8c:	d52a      	bpl.n	8007de4 <_printf_i+0xa4>
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6011      	str	r1, [r2, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	da03      	bge.n	8007d9e <_printf_i+0x5e>
 8007d96:	222d      	movs	r2, #45	; 0x2d
 8007d98:	425b      	negs	r3, r3
 8007d9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007d9e:	486f      	ldr	r0, [pc, #444]	; (8007f5c <_printf_i+0x21c>)
 8007da0:	220a      	movs	r2, #10
 8007da2:	e039      	b.n	8007e18 <_printf_i+0xd8>
 8007da4:	2973      	cmp	r1, #115	; 0x73
 8007da6:	f000 809d 	beq.w	8007ee4 <_printf_i+0x1a4>
 8007daa:	d808      	bhi.n	8007dbe <_printf_i+0x7e>
 8007dac:	296f      	cmp	r1, #111	; 0x6f
 8007dae:	d020      	beq.n	8007df2 <_printf_i+0xb2>
 8007db0:	2970      	cmp	r1, #112	; 0x70
 8007db2:	d1dd      	bne.n	8007d70 <_printf_i+0x30>
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	f043 0320 	orr.w	r3, r3, #32
 8007dba:	6023      	str	r3, [r4, #0]
 8007dbc:	e003      	b.n	8007dc6 <_printf_i+0x86>
 8007dbe:	2975      	cmp	r1, #117	; 0x75
 8007dc0:	d017      	beq.n	8007df2 <_printf_i+0xb2>
 8007dc2:	2978      	cmp	r1, #120	; 0x78
 8007dc4:	d1d4      	bne.n	8007d70 <_printf_i+0x30>
 8007dc6:	2378      	movs	r3, #120	; 0x78
 8007dc8:	4865      	ldr	r0, [pc, #404]	; (8007f60 <_printf_i+0x220>)
 8007dca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dce:	e055      	b.n	8007e7c <_printf_i+0x13c>
 8007dd0:	6813      	ldr	r3, [r2, #0]
 8007dd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dd6:	1d19      	adds	r1, r3, #4
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6011      	str	r1, [r2, #0]
 8007ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007de0:	2301      	movs	r3, #1
 8007de2:	e08c      	b.n	8007efe <_printf_i+0x1be>
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dea:	6011      	str	r1, [r2, #0]
 8007dec:	bf18      	it	ne
 8007dee:	b21b      	sxthne	r3, r3
 8007df0:	e7cf      	b.n	8007d92 <_printf_i+0x52>
 8007df2:	6813      	ldr	r3, [r2, #0]
 8007df4:	6825      	ldr	r5, [r4, #0]
 8007df6:	1d18      	adds	r0, r3, #4
 8007df8:	6010      	str	r0, [r2, #0]
 8007dfa:	0628      	lsls	r0, r5, #24
 8007dfc:	d501      	bpl.n	8007e02 <_printf_i+0xc2>
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	e002      	b.n	8007e08 <_printf_i+0xc8>
 8007e02:	0668      	lsls	r0, r5, #25
 8007e04:	d5fb      	bpl.n	8007dfe <_printf_i+0xbe>
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	296f      	cmp	r1, #111	; 0x6f
 8007e0a:	bf14      	ite	ne
 8007e0c:	220a      	movne	r2, #10
 8007e0e:	2208      	moveq	r2, #8
 8007e10:	4852      	ldr	r0, [pc, #328]	; (8007f5c <_printf_i+0x21c>)
 8007e12:	2100      	movs	r1, #0
 8007e14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e18:	6865      	ldr	r5, [r4, #4]
 8007e1a:	2d00      	cmp	r5, #0
 8007e1c:	60a5      	str	r5, [r4, #8]
 8007e1e:	f2c0 8095 	blt.w	8007f4c <_printf_i+0x20c>
 8007e22:	6821      	ldr	r1, [r4, #0]
 8007e24:	f021 0104 	bic.w	r1, r1, #4
 8007e28:	6021      	str	r1, [r4, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d13d      	bne.n	8007eaa <_printf_i+0x16a>
 8007e2e:	2d00      	cmp	r5, #0
 8007e30:	f040 808e 	bne.w	8007f50 <_printf_i+0x210>
 8007e34:	4665      	mov	r5, ip
 8007e36:	2a08      	cmp	r2, #8
 8007e38:	d10b      	bne.n	8007e52 <_printf_i+0x112>
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	07db      	lsls	r3, r3, #31
 8007e3e:	d508      	bpl.n	8007e52 <_printf_i+0x112>
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	6862      	ldr	r2, [r4, #4]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	bfde      	ittt	le
 8007e48:	2330      	movle	r3, #48	; 0x30
 8007e4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e52:	ebac 0305 	sub.w	r3, ip, r5
 8007e56:	6123      	str	r3, [r4, #16]
 8007e58:	f8cd 8000 	str.w	r8, [sp]
 8007e5c:	463b      	mov	r3, r7
 8007e5e:	aa03      	add	r2, sp, #12
 8007e60:	4621      	mov	r1, r4
 8007e62:	4630      	mov	r0, r6
 8007e64:	f7ff fef6 	bl	8007c54 <_printf_common>
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d14d      	bne.n	8007f08 <_printf_i+0x1c8>
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	b005      	add	sp, #20
 8007e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e76:	4839      	ldr	r0, [pc, #228]	; (8007f5c <_printf_i+0x21c>)
 8007e78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007e7c:	6813      	ldr	r3, [r2, #0]
 8007e7e:	6821      	ldr	r1, [r4, #0]
 8007e80:	1d1d      	adds	r5, r3, #4
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6015      	str	r5, [r2, #0]
 8007e86:	060a      	lsls	r2, r1, #24
 8007e88:	d50b      	bpl.n	8007ea2 <_printf_i+0x162>
 8007e8a:	07ca      	lsls	r2, r1, #31
 8007e8c:	bf44      	itt	mi
 8007e8e:	f041 0120 	orrmi.w	r1, r1, #32
 8007e92:	6021      	strmi	r1, [r4, #0]
 8007e94:	b91b      	cbnz	r3, 8007e9e <_printf_i+0x15e>
 8007e96:	6822      	ldr	r2, [r4, #0]
 8007e98:	f022 0220 	bic.w	r2, r2, #32
 8007e9c:	6022      	str	r2, [r4, #0]
 8007e9e:	2210      	movs	r2, #16
 8007ea0:	e7b7      	b.n	8007e12 <_printf_i+0xd2>
 8007ea2:	064d      	lsls	r5, r1, #25
 8007ea4:	bf48      	it	mi
 8007ea6:	b29b      	uxthmi	r3, r3
 8007ea8:	e7ef      	b.n	8007e8a <_printf_i+0x14a>
 8007eaa:	4665      	mov	r5, ip
 8007eac:	fbb3 f1f2 	udiv	r1, r3, r2
 8007eb0:	fb02 3311 	mls	r3, r2, r1, r3
 8007eb4:	5cc3      	ldrb	r3, [r0, r3]
 8007eb6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007eba:	460b      	mov	r3, r1
 8007ebc:	2900      	cmp	r1, #0
 8007ebe:	d1f5      	bne.n	8007eac <_printf_i+0x16c>
 8007ec0:	e7b9      	b.n	8007e36 <_printf_i+0xf6>
 8007ec2:	6813      	ldr	r3, [r2, #0]
 8007ec4:	6825      	ldr	r5, [r4, #0]
 8007ec6:	1d18      	adds	r0, r3, #4
 8007ec8:	6961      	ldr	r1, [r4, #20]
 8007eca:	6010      	str	r0, [r2, #0]
 8007ecc:	0628      	lsls	r0, r5, #24
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	d501      	bpl.n	8007ed6 <_printf_i+0x196>
 8007ed2:	6019      	str	r1, [r3, #0]
 8007ed4:	e002      	b.n	8007edc <_printf_i+0x19c>
 8007ed6:	066a      	lsls	r2, r5, #25
 8007ed8:	d5fb      	bpl.n	8007ed2 <_printf_i+0x192>
 8007eda:	8019      	strh	r1, [r3, #0]
 8007edc:	2300      	movs	r3, #0
 8007ede:	4665      	mov	r5, ip
 8007ee0:	6123      	str	r3, [r4, #16]
 8007ee2:	e7b9      	b.n	8007e58 <_printf_i+0x118>
 8007ee4:	6813      	ldr	r3, [r2, #0]
 8007ee6:	1d19      	adds	r1, r3, #4
 8007ee8:	6011      	str	r1, [r2, #0]
 8007eea:	681d      	ldr	r5, [r3, #0]
 8007eec:	6862      	ldr	r2, [r4, #4]
 8007eee:	2100      	movs	r1, #0
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	f002 f81f 	bl	8009f34 <memchr>
 8007ef6:	b108      	cbz	r0, 8007efc <_printf_i+0x1bc>
 8007ef8:	1b40      	subs	r0, r0, r5
 8007efa:	6060      	str	r0, [r4, #4]
 8007efc:	6863      	ldr	r3, [r4, #4]
 8007efe:	6123      	str	r3, [r4, #16]
 8007f00:	2300      	movs	r3, #0
 8007f02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f06:	e7a7      	b.n	8007e58 <_printf_i+0x118>
 8007f08:	6923      	ldr	r3, [r4, #16]
 8007f0a:	462a      	mov	r2, r5
 8007f0c:	4639      	mov	r1, r7
 8007f0e:	4630      	mov	r0, r6
 8007f10:	47c0      	blx	r8
 8007f12:	3001      	adds	r0, #1
 8007f14:	d0aa      	beq.n	8007e6c <_printf_i+0x12c>
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	079b      	lsls	r3, r3, #30
 8007f1a:	d413      	bmi.n	8007f44 <_printf_i+0x204>
 8007f1c:	68e0      	ldr	r0, [r4, #12]
 8007f1e:	9b03      	ldr	r3, [sp, #12]
 8007f20:	4298      	cmp	r0, r3
 8007f22:	bfb8      	it	lt
 8007f24:	4618      	movlt	r0, r3
 8007f26:	e7a3      	b.n	8007e70 <_printf_i+0x130>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	464a      	mov	r2, r9
 8007f2c:	4639      	mov	r1, r7
 8007f2e:	4630      	mov	r0, r6
 8007f30:	47c0      	blx	r8
 8007f32:	3001      	adds	r0, #1
 8007f34:	d09a      	beq.n	8007e6c <_printf_i+0x12c>
 8007f36:	3501      	adds	r5, #1
 8007f38:	68e3      	ldr	r3, [r4, #12]
 8007f3a:	9a03      	ldr	r2, [sp, #12]
 8007f3c:	1a9b      	subs	r3, r3, r2
 8007f3e:	42ab      	cmp	r3, r5
 8007f40:	dcf2      	bgt.n	8007f28 <_printf_i+0x1e8>
 8007f42:	e7eb      	b.n	8007f1c <_printf_i+0x1dc>
 8007f44:	2500      	movs	r5, #0
 8007f46:	f104 0919 	add.w	r9, r4, #25
 8007f4a:	e7f5      	b.n	8007f38 <_printf_i+0x1f8>
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1ac      	bne.n	8007eaa <_printf_i+0x16a>
 8007f50:	7803      	ldrb	r3, [r0, #0]
 8007f52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f5a:	e76c      	b.n	8007e36 <_printf_i+0xf6>
 8007f5c:	0800c9f2 	.word	0x0800c9f2
 8007f60:	0800ca03 	.word	0x0800ca03

08007f64 <siprintf>:
 8007f64:	b40e      	push	{r1, r2, r3}
 8007f66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f6a:	b500      	push	{lr}
 8007f6c:	b09c      	sub	sp, #112	; 0x70
 8007f6e:	ab1d      	add	r3, sp, #116	; 0x74
 8007f70:	9002      	str	r0, [sp, #8]
 8007f72:	9006      	str	r0, [sp, #24]
 8007f74:	9107      	str	r1, [sp, #28]
 8007f76:	9104      	str	r1, [sp, #16]
 8007f78:	4808      	ldr	r0, [pc, #32]	; (8007f9c <siprintf+0x38>)
 8007f7a:	4909      	ldr	r1, [pc, #36]	; (8007fa0 <siprintf+0x3c>)
 8007f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f80:	9105      	str	r1, [sp, #20]
 8007f82:	6800      	ldr	r0, [r0, #0]
 8007f84:	a902      	add	r1, sp, #8
 8007f86:	9301      	str	r3, [sp, #4]
 8007f88:	f002 fcf4 	bl	800a974 <_svfiprintf_r>
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	9b02      	ldr	r3, [sp, #8]
 8007f90:	701a      	strb	r2, [r3, #0]
 8007f92:	b01c      	add	sp, #112	; 0x70
 8007f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f98:	b003      	add	sp, #12
 8007f9a:	4770      	bx	lr
 8007f9c:	2000002c 	.word	0x2000002c
 8007fa0:	ffff0208 	.word	0xffff0208

08007fa4 <sulp>:
 8007fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa8:	460f      	mov	r7, r1
 8007faa:	4690      	mov	r8, r2
 8007fac:	f002 faa6 	bl	800a4fc <__ulp>
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	460d      	mov	r5, r1
 8007fb4:	f1b8 0f00 	cmp.w	r8, #0
 8007fb8:	d011      	beq.n	8007fde <sulp+0x3a>
 8007fba:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007fbe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	dd0b      	ble.n	8007fde <sulp+0x3a>
 8007fc6:	2400      	movs	r4, #0
 8007fc8:	051b      	lsls	r3, r3, #20
 8007fca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007fce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007fd2:	4622      	mov	r2, r4
 8007fd4:	462b      	mov	r3, r5
 8007fd6:	f7f8 fa7f 	bl	80004d8 <__aeabi_dmul>
 8007fda:	4604      	mov	r4, r0
 8007fdc:	460d      	mov	r5, r1
 8007fde:	4620      	mov	r0, r4
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007fe8 <_strtod_l>:
 8007fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	461f      	mov	r7, r3
 8007fee:	2300      	movs	r3, #0
 8007ff0:	b0a1      	sub	sp, #132	; 0x84
 8007ff2:	4683      	mov	fp, r0
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	460e      	mov	r6, r1
 8007ff8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ffa:	931c      	str	r3, [sp, #112]	; 0x70
 8007ffc:	f001 ff70 	bl	8009ee0 <__localeconv_l>
 8008000:	4680      	mov	r8, r0
 8008002:	6800      	ldr	r0, [r0, #0]
 8008004:	f7f8 f8a4 	bl	8000150 <strlen>
 8008008:	f04f 0900 	mov.w	r9, #0
 800800c:	4604      	mov	r4, r0
 800800e:	f04f 0a00 	mov.w	sl, #0
 8008012:	961b      	str	r6, [sp, #108]	; 0x6c
 8008014:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008016:	781a      	ldrb	r2, [r3, #0]
 8008018:	2a0d      	cmp	r2, #13
 800801a:	d832      	bhi.n	8008082 <_strtod_l+0x9a>
 800801c:	2a09      	cmp	r2, #9
 800801e:	d236      	bcs.n	800808e <_strtod_l+0xa6>
 8008020:	2a00      	cmp	r2, #0
 8008022:	d03e      	beq.n	80080a2 <_strtod_l+0xba>
 8008024:	2300      	movs	r3, #0
 8008026:	930d      	str	r3, [sp, #52]	; 0x34
 8008028:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800802a:	782b      	ldrb	r3, [r5, #0]
 800802c:	2b30      	cmp	r3, #48	; 0x30
 800802e:	f040 80ac 	bne.w	800818a <_strtod_l+0x1a2>
 8008032:	786b      	ldrb	r3, [r5, #1]
 8008034:	2b58      	cmp	r3, #88	; 0x58
 8008036:	d001      	beq.n	800803c <_strtod_l+0x54>
 8008038:	2b78      	cmp	r3, #120	; 0x78
 800803a:	d167      	bne.n	800810c <_strtod_l+0x124>
 800803c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800803e:	9702      	str	r7, [sp, #8]
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	ab1c      	add	r3, sp, #112	; 0x70
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	4a89      	ldr	r2, [pc, #548]	; (800826c <_strtod_l+0x284>)
 8008048:	ab1d      	add	r3, sp, #116	; 0x74
 800804a:	a91b      	add	r1, sp, #108	; 0x6c
 800804c:	4658      	mov	r0, fp
 800804e:	f001 fc6f 	bl	8009930 <__gethex>
 8008052:	f010 0407 	ands.w	r4, r0, #7
 8008056:	4606      	mov	r6, r0
 8008058:	d005      	beq.n	8008066 <_strtod_l+0x7e>
 800805a:	2c06      	cmp	r4, #6
 800805c:	d12b      	bne.n	80080b6 <_strtod_l+0xce>
 800805e:	2300      	movs	r3, #0
 8008060:	3501      	adds	r5, #1
 8008062:	951b      	str	r5, [sp, #108]	; 0x6c
 8008064:	930d      	str	r3, [sp, #52]	; 0x34
 8008066:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008068:	2b00      	cmp	r3, #0
 800806a:	f040 85a6 	bne.w	8008bba <_strtod_l+0xbd2>
 800806e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008070:	b1e3      	cbz	r3, 80080ac <_strtod_l+0xc4>
 8008072:	464a      	mov	r2, r9
 8008074:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8008078:	4610      	mov	r0, r2
 800807a:	4619      	mov	r1, r3
 800807c:	b021      	add	sp, #132	; 0x84
 800807e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008082:	2a2b      	cmp	r2, #43	; 0x2b
 8008084:	d015      	beq.n	80080b2 <_strtod_l+0xca>
 8008086:	2a2d      	cmp	r2, #45	; 0x2d
 8008088:	d004      	beq.n	8008094 <_strtod_l+0xac>
 800808a:	2a20      	cmp	r2, #32
 800808c:	d1ca      	bne.n	8008024 <_strtod_l+0x3c>
 800808e:	3301      	adds	r3, #1
 8008090:	931b      	str	r3, [sp, #108]	; 0x6c
 8008092:	e7bf      	b.n	8008014 <_strtod_l+0x2c>
 8008094:	2201      	movs	r2, #1
 8008096:	920d      	str	r2, [sp, #52]	; 0x34
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	921b      	str	r2, [sp, #108]	; 0x6c
 800809c:	785b      	ldrb	r3, [r3, #1]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1c2      	bne.n	8008028 <_strtod_l+0x40>
 80080a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080a4:	961b      	str	r6, [sp, #108]	; 0x6c
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f040 8585 	bne.w	8008bb6 <_strtod_l+0xbce>
 80080ac:	464a      	mov	r2, r9
 80080ae:	4653      	mov	r3, sl
 80080b0:	e7e2      	b.n	8008078 <_strtod_l+0x90>
 80080b2:	2200      	movs	r2, #0
 80080b4:	e7ef      	b.n	8008096 <_strtod_l+0xae>
 80080b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80080b8:	b13a      	cbz	r2, 80080ca <_strtod_l+0xe2>
 80080ba:	2135      	movs	r1, #53	; 0x35
 80080bc:	a81e      	add	r0, sp, #120	; 0x78
 80080be:	f002 fb10 	bl	800a6e2 <__copybits>
 80080c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80080c4:	4658      	mov	r0, fp
 80080c6:	f001 ff82 	bl	8009fce <_Bfree>
 80080ca:	3c01      	subs	r4, #1
 80080cc:	2c04      	cmp	r4, #4
 80080ce:	d806      	bhi.n	80080de <_strtod_l+0xf6>
 80080d0:	e8df f004 	tbb	[pc, r4]
 80080d4:	1714030a 	.word	0x1714030a
 80080d8:	0a          	.byte	0x0a
 80080d9:	00          	.byte	0x00
 80080da:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80080de:	0731      	lsls	r1, r6, #28
 80080e0:	d5c1      	bpl.n	8008066 <_strtod_l+0x7e>
 80080e2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80080e6:	e7be      	b.n	8008066 <_strtod_l+0x7e>
 80080e8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80080ea:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80080ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80080f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80080f6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80080fa:	e7f0      	b.n	80080de <_strtod_l+0xf6>
 80080fc:	f8df a170 	ldr.w	sl, [pc, #368]	; 8008270 <_strtod_l+0x288>
 8008100:	e7ed      	b.n	80080de <_strtod_l+0xf6>
 8008102:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8008106:	f04f 39ff 	mov.w	r9, #4294967295
 800810a:	e7e8      	b.n	80080de <_strtod_l+0xf6>
 800810c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	921b      	str	r2, [sp, #108]	; 0x6c
 8008112:	785b      	ldrb	r3, [r3, #1]
 8008114:	2b30      	cmp	r3, #48	; 0x30
 8008116:	d0f9      	beq.n	800810c <_strtod_l+0x124>
 8008118:	2b00      	cmp	r3, #0
 800811a:	d0a4      	beq.n	8008066 <_strtod_l+0x7e>
 800811c:	2301      	movs	r3, #1
 800811e:	2500      	movs	r5, #0
 8008120:	220a      	movs	r2, #10
 8008122:	9307      	str	r3, [sp, #28]
 8008124:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008126:	9506      	str	r5, [sp, #24]
 8008128:	9308      	str	r3, [sp, #32]
 800812a:	9504      	str	r5, [sp, #16]
 800812c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800812e:	7807      	ldrb	r7, [r0, #0]
 8008130:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008134:	b2d9      	uxtb	r1, r3
 8008136:	2909      	cmp	r1, #9
 8008138:	d929      	bls.n	800818e <_strtod_l+0x1a6>
 800813a:	4622      	mov	r2, r4
 800813c:	f8d8 1000 	ldr.w	r1, [r8]
 8008140:	f002 fd20 	bl	800ab84 <strncmp>
 8008144:	2800      	cmp	r0, #0
 8008146:	d031      	beq.n	80081ac <_strtod_l+0x1c4>
 8008148:	2000      	movs	r0, #0
 800814a:	463b      	mov	r3, r7
 800814c:	4602      	mov	r2, r0
 800814e:	9c04      	ldr	r4, [sp, #16]
 8008150:	9005      	str	r0, [sp, #20]
 8008152:	2b65      	cmp	r3, #101	; 0x65
 8008154:	d001      	beq.n	800815a <_strtod_l+0x172>
 8008156:	2b45      	cmp	r3, #69	; 0x45
 8008158:	d114      	bne.n	8008184 <_strtod_l+0x19c>
 800815a:	b924      	cbnz	r4, 8008166 <_strtod_l+0x17e>
 800815c:	b910      	cbnz	r0, 8008164 <_strtod_l+0x17c>
 800815e:	9b07      	ldr	r3, [sp, #28]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d09e      	beq.n	80080a2 <_strtod_l+0xba>
 8008164:	2400      	movs	r4, #0
 8008166:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008168:	1c73      	adds	r3, r6, #1
 800816a:	931b      	str	r3, [sp, #108]	; 0x6c
 800816c:	7873      	ldrb	r3, [r6, #1]
 800816e:	2b2b      	cmp	r3, #43	; 0x2b
 8008170:	d078      	beq.n	8008264 <_strtod_l+0x27c>
 8008172:	2b2d      	cmp	r3, #45	; 0x2d
 8008174:	d070      	beq.n	8008258 <_strtod_l+0x270>
 8008176:	f04f 0c00 	mov.w	ip, #0
 800817a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800817e:	2f09      	cmp	r7, #9
 8008180:	d97c      	bls.n	800827c <_strtod_l+0x294>
 8008182:	961b      	str	r6, [sp, #108]	; 0x6c
 8008184:	f04f 0e00 	mov.w	lr, #0
 8008188:	e09a      	b.n	80082c0 <_strtod_l+0x2d8>
 800818a:	2300      	movs	r3, #0
 800818c:	e7c7      	b.n	800811e <_strtod_l+0x136>
 800818e:	9904      	ldr	r1, [sp, #16]
 8008190:	3001      	adds	r0, #1
 8008192:	2908      	cmp	r1, #8
 8008194:	bfd7      	itett	le
 8008196:	9906      	ldrle	r1, [sp, #24]
 8008198:	fb02 3505 	mlagt	r5, r2, r5, r3
 800819c:	fb02 3301 	mlale	r3, r2, r1, r3
 80081a0:	9306      	strle	r3, [sp, #24]
 80081a2:	9b04      	ldr	r3, [sp, #16]
 80081a4:	901b      	str	r0, [sp, #108]	; 0x6c
 80081a6:	3301      	adds	r3, #1
 80081a8:	9304      	str	r3, [sp, #16]
 80081aa:	e7bf      	b.n	800812c <_strtod_l+0x144>
 80081ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081ae:	191a      	adds	r2, r3, r4
 80081b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80081b2:	9a04      	ldr	r2, [sp, #16]
 80081b4:	5d1b      	ldrb	r3, [r3, r4]
 80081b6:	2a00      	cmp	r2, #0
 80081b8:	d037      	beq.n	800822a <_strtod_l+0x242>
 80081ba:	4602      	mov	r2, r0
 80081bc:	9c04      	ldr	r4, [sp, #16]
 80081be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80081c2:	2909      	cmp	r1, #9
 80081c4:	d913      	bls.n	80081ee <_strtod_l+0x206>
 80081c6:	2101      	movs	r1, #1
 80081c8:	9105      	str	r1, [sp, #20]
 80081ca:	e7c2      	b.n	8008152 <_strtod_l+0x16a>
 80081cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081ce:	3001      	adds	r0, #1
 80081d0:	1c5a      	adds	r2, r3, #1
 80081d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80081d4:	785b      	ldrb	r3, [r3, #1]
 80081d6:	2b30      	cmp	r3, #48	; 0x30
 80081d8:	d0f8      	beq.n	80081cc <_strtod_l+0x1e4>
 80081da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80081de:	2a08      	cmp	r2, #8
 80081e0:	f200 84f0 	bhi.w	8008bc4 <_strtod_l+0xbdc>
 80081e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80081e6:	9208      	str	r2, [sp, #32]
 80081e8:	4602      	mov	r2, r0
 80081ea:	2000      	movs	r0, #0
 80081ec:	4604      	mov	r4, r0
 80081ee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80081f2:	f100 0101 	add.w	r1, r0, #1
 80081f6:	d012      	beq.n	800821e <_strtod_l+0x236>
 80081f8:	440a      	add	r2, r1
 80081fa:	270a      	movs	r7, #10
 80081fc:	4621      	mov	r1, r4
 80081fe:	eb00 0c04 	add.w	ip, r0, r4
 8008202:	458c      	cmp	ip, r1
 8008204:	d113      	bne.n	800822e <_strtod_l+0x246>
 8008206:	1821      	adds	r1, r4, r0
 8008208:	2908      	cmp	r1, #8
 800820a:	f104 0401 	add.w	r4, r4, #1
 800820e:	4404      	add	r4, r0
 8008210:	dc19      	bgt.n	8008246 <_strtod_l+0x25e>
 8008212:	210a      	movs	r1, #10
 8008214:	9b06      	ldr	r3, [sp, #24]
 8008216:	fb01 e303 	mla	r3, r1, r3, lr
 800821a:	9306      	str	r3, [sp, #24]
 800821c:	2100      	movs	r1, #0
 800821e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008220:	1c58      	adds	r0, r3, #1
 8008222:	901b      	str	r0, [sp, #108]	; 0x6c
 8008224:	785b      	ldrb	r3, [r3, #1]
 8008226:	4608      	mov	r0, r1
 8008228:	e7c9      	b.n	80081be <_strtod_l+0x1d6>
 800822a:	9804      	ldr	r0, [sp, #16]
 800822c:	e7d3      	b.n	80081d6 <_strtod_l+0x1ee>
 800822e:	2908      	cmp	r1, #8
 8008230:	f101 0101 	add.w	r1, r1, #1
 8008234:	dc03      	bgt.n	800823e <_strtod_l+0x256>
 8008236:	9b06      	ldr	r3, [sp, #24]
 8008238:	437b      	muls	r3, r7
 800823a:	9306      	str	r3, [sp, #24]
 800823c:	e7e1      	b.n	8008202 <_strtod_l+0x21a>
 800823e:	2910      	cmp	r1, #16
 8008240:	bfd8      	it	le
 8008242:	437d      	mulle	r5, r7
 8008244:	e7dd      	b.n	8008202 <_strtod_l+0x21a>
 8008246:	2c10      	cmp	r4, #16
 8008248:	bfdc      	itt	le
 800824a:	210a      	movle	r1, #10
 800824c:	fb01 e505 	mlale	r5, r1, r5, lr
 8008250:	e7e4      	b.n	800821c <_strtod_l+0x234>
 8008252:	2301      	movs	r3, #1
 8008254:	9305      	str	r3, [sp, #20]
 8008256:	e781      	b.n	800815c <_strtod_l+0x174>
 8008258:	f04f 0c01 	mov.w	ip, #1
 800825c:	1cb3      	adds	r3, r6, #2
 800825e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008260:	78b3      	ldrb	r3, [r6, #2]
 8008262:	e78a      	b.n	800817a <_strtod_l+0x192>
 8008264:	f04f 0c00 	mov.w	ip, #0
 8008268:	e7f8      	b.n	800825c <_strtod_l+0x274>
 800826a:	bf00      	nop
 800826c:	0800ca14 	.word	0x0800ca14
 8008270:	7ff00000 	.word	0x7ff00000
 8008274:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008276:	1c5f      	adds	r7, r3, #1
 8008278:	971b      	str	r7, [sp, #108]	; 0x6c
 800827a:	785b      	ldrb	r3, [r3, #1]
 800827c:	2b30      	cmp	r3, #48	; 0x30
 800827e:	d0f9      	beq.n	8008274 <_strtod_l+0x28c>
 8008280:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008284:	2f08      	cmp	r7, #8
 8008286:	f63f af7d 	bhi.w	8008184 <_strtod_l+0x19c>
 800828a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800828e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008290:	9309      	str	r3, [sp, #36]	; 0x24
 8008292:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008294:	1c5f      	adds	r7, r3, #1
 8008296:	971b      	str	r7, [sp, #108]	; 0x6c
 8008298:	785b      	ldrb	r3, [r3, #1]
 800829a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800829e:	f1b8 0f09 	cmp.w	r8, #9
 80082a2:	d937      	bls.n	8008314 <_strtod_l+0x32c>
 80082a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082a6:	1a7f      	subs	r7, r7, r1
 80082a8:	2f08      	cmp	r7, #8
 80082aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80082ae:	dc37      	bgt.n	8008320 <_strtod_l+0x338>
 80082b0:	45be      	cmp	lr, r7
 80082b2:	bfa8      	it	ge
 80082b4:	46be      	movge	lr, r7
 80082b6:	f1bc 0f00 	cmp.w	ip, #0
 80082ba:	d001      	beq.n	80082c0 <_strtod_l+0x2d8>
 80082bc:	f1ce 0e00 	rsb	lr, lr, #0
 80082c0:	2c00      	cmp	r4, #0
 80082c2:	d151      	bne.n	8008368 <_strtod_l+0x380>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	f47f aece 	bne.w	8008066 <_strtod_l+0x7e>
 80082ca:	9a07      	ldr	r2, [sp, #28]
 80082cc:	2a00      	cmp	r2, #0
 80082ce:	f47f aeca 	bne.w	8008066 <_strtod_l+0x7e>
 80082d2:	9a05      	ldr	r2, [sp, #20]
 80082d4:	2a00      	cmp	r2, #0
 80082d6:	f47f aee4 	bne.w	80080a2 <_strtod_l+0xba>
 80082da:	2b4e      	cmp	r3, #78	; 0x4e
 80082dc:	d027      	beq.n	800832e <_strtod_l+0x346>
 80082de:	dc21      	bgt.n	8008324 <_strtod_l+0x33c>
 80082e0:	2b49      	cmp	r3, #73	; 0x49
 80082e2:	f47f aede 	bne.w	80080a2 <_strtod_l+0xba>
 80082e6:	49a4      	ldr	r1, [pc, #656]	; (8008578 <_strtod_l+0x590>)
 80082e8:	a81b      	add	r0, sp, #108	; 0x6c
 80082ea:	f001 fd55 	bl	8009d98 <__match>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	f43f aed7 	beq.w	80080a2 <_strtod_l+0xba>
 80082f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082f6:	49a1      	ldr	r1, [pc, #644]	; (800857c <_strtod_l+0x594>)
 80082f8:	3b01      	subs	r3, #1
 80082fa:	a81b      	add	r0, sp, #108	; 0x6c
 80082fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80082fe:	f001 fd4b 	bl	8009d98 <__match>
 8008302:	b910      	cbnz	r0, 800830a <_strtod_l+0x322>
 8008304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008306:	3301      	adds	r3, #1
 8008308:	931b      	str	r3, [sp, #108]	; 0x6c
 800830a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8008590 <_strtod_l+0x5a8>
 800830e:	f04f 0900 	mov.w	r9, #0
 8008312:	e6a8      	b.n	8008066 <_strtod_l+0x7e>
 8008314:	210a      	movs	r1, #10
 8008316:	fb01 3e0e 	mla	lr, r1, lr, r3
 800831a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800831e:	e7b8      	b.n	8008292 <_strtod_l+0x2aa>
 8008320:	46be      	mov	lr, r7
 8008322:	e7c8      	b.n	80082b6 <_strtod_l+0x2ce>
 8008324:	2b69      	cmp	r3, #105	; 0x69
 8008326:	d0de      	beq.n	80082e6 <_strtod_l+0x2fe>
 8008328:	2b6e      	cmp	r3, #110	; 0x6e
 800832a:	f47f aeba 	bne.w	80080a2 <_strtod_l+0xba>
 800832e:	4994      	ldr	r1, [pc, #592]	; (8008580 <_strtod_l+0x598>)
 8008330:	a81b      	add	r0, sp, #108	; 0x6c
 8008332:	f001 fd31 	bl	8009d98 <__match>
 8008336:	2800      	cmp	r0, #0
 8008338:	f43f aeb3 	beq.w	80080a2 <_strtod_l+0xba>
 800833c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	2b28      	cmp	r3, #40	; 0x28
 8008342:	d10e      	bne.n	8008362 <_strtod_l+0x37a>
 8008344:	aa1e      	add	r2, sp, #120	; 0x78
 8008346:	498f      	ldr	r1, [pc, #572]	; (8008584 <_strtod_l+0x59c>)
 8008348:	a81b      	add	r0, sp, #108	; 0x6c
 800834a:	f001 fd39 	bl	8009dc0 <__hexnan>
 800834e:	2805      	cmp	r0, #5
 8008350:	d107      	bne.n	8008362 <_strtod_l+0x37a>
 8008352:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008354:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8008358:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800835c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8008360:	e681      	b.n	8008066 <_strtod_l+0x7e>
 8008362:	f8df a234 	ldr.w	sl, [pc, #564]	; 8008598 <_strtod_l+0x5b0>
 8008366:	e7d2      	b.n	800830e <_strtod_l+0x326>
 8008368:	ebae 0302 	sub.w	r3, lr, r2
 800836c:	9307      	str	r3, [sp, #28]
 800836e:	9b04      	ldr	r3, [sp, #16]
 8008370:	9806      	ldr	r0, [sp, #24]
 8008372:	2b00      	cmp	r3, #0
 8008374:	bf08      	it	eq
 8008376:	4623      	moveq	r3, r4
 8008378:	2c10      	cmp	r4, #16
 800837a:	9304      	str	r3, [sp, #16]
 800837c:	46a0      	mov	r8, r4
 800837e:	bfa8      	it	ge
 8008380:	f04f 0810 	movge.w	r8, #16
 8008384:	f7f8 f82e 	bl	80003e4 <__aeabi_ui2d>
 8008388:	2c09      	cmp	r4, #9
 800838a:	4681      	mov	r9, r0
 800838c:	468a      	mov	sl, r1
 800838e:	dc13      	bgt.n	80083b8 <_strtod_l+0x3d0>
 8008390:	9b07      	ldr	r3, [sp, #28]
 8008392:	2b00      	cmp	r3, #0
 8008394:	f43f ae67 	beq.w	8008066 <_strtod_l+0x7e>
 8008398:	9b07      	ldr	r3, [sp, #28]
 800839a:	dd7e      	ble.n	800849a <_strtod_l+0x4b2>
 800839c:	2b16      	cmp	r3, #22
 800839e:	dc65      	bgt.n	800846c <_strtod_l+0x484>
 80083a0:	4a79      	ldr	r2, [pc, #484]	; (8008588 <_strtod_l+0x5a0>)
 80083a2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80083a6:	464a      	mov	r2, r9
 80083a8:	e9de 0100 	ldrd	r0, r1, [lr]
 80083ac:	4653      	mov	r3, sl
 80083ae:	f7f8 f893 	bl	80004d8 <__aeabi_dmul>
 80083b2:	4681      	mov	r9, r0
 80083b4:	468a      	mov	sl, r1
 80083b6:	e656      	b.n	8008066 <_strtod_l+0x7e>
 80083b8:	4b73      	ldr	r3, [pc, #460]	; (8008588 <_strtod_l+0x5a0>)
 80083ba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80083be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80083c2:	f7f8 f889 	bl	80004d8 <__aeabi_dmul>
 80083c6:	4606      	mov	r6, r0
 80083c8:	4628      	mov	r0, r5
 80083ca:	460f      	mov	r7, r1
 80083cc:	f7f8 f80a 	bl	80003e4 <__aeabi_ui2d>
 80083d0:	4602      	mov	r2, r0
 80083d2:	460b      	mov	r3, r1
 80083d4:	4630      	mov	r0, r6
 80083d6:	4639      	mov	r1, r7
 80083d8:	f7f7 fec8 	bl	800016c <__adddf3>
 80083dc:	2c0f      	cmp	r4, #15
 80083de:	4681      	mov	r9, r0
 80083e0:	468a      	mov	sl, r1
 80083e2:	ddd5      	ble.n	8008390 <_strtod_l+0x3a8>
 80083e4:	9b07      	ldr	r3, [sp, #28]
 80083e6:	eba4 0808 	sub.w	r8, r4, r8
 80083ea:	4498      	add	r8, r3
 80083ec:	f1b8 0f00 	cmp.w	r8, #0
 80083f0:	f340 809a 	ble.w	8008528 <_strtod_l+0x540>
 80083f4:	f018 030f 	ands.w	r3, r8, #15
 80083f8:	d00a      	beq.n	8008410 <_strtod_l+0x428>
 80083fa:	4963      	ldr	r1, [pc, #396]	; (8008588 <_strtod_l+0x5a0>)
 80083fc:	464a      	mov	r2, r9
 80083fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008402:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008406:	4653      	mov	r3, sl
 8008408:	f7f8 f866 	bl	80004d8 <__aeabi_dmul>
 800840c:	4681      	mov	r9, r0
 800840e:	468a      	mov	sl, r1
 8008410:	f038 080f 	bics.w	r8, r8, #15
 8008414:	d077      	beq.n	8008506 <_strtod_l+0x51e>
 8008416:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800841a:	dd4b      	ble.n	80084b4 <_strtod_l+0x4cc>
 800841c:	f04f 0800 	mov.w	r8, #0
 8008420:	f8cd 8010 	str.w	r8, [sp, #16]
 8008424:	f8cd 8020 	str.w	r8, [sp, #32]
 8008428:	f8cd 8018 	str.w	r8, [sp, #24]
 800842c:	2322      	movs	r3, #34	; 0x22
 800842e:	f04f 0900 	mov.w	r9, #0
 8008432:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8008590 <_strtod_l+0x5a8>
 8008436:	f8cb 3000 	str.w	r3, [fp]
 800843a:	9b08      	ldr	r3, [sp, #32]
 800843c:	2b00      	cmp	r3, #0
 800843e:	f43f ae12 	beq.w	8008066 <_strtod_l+0x7e>
 8008442:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008444:	4658      	mov	r0, fp
 8008446:	f001 fdc2 	bl	8009fce <_Bfree>
 800844a:	9906      	ldr	r1, [sp, #24]
 800844c:	4658      	mov	r0, fp
 800844e:	f001 fdbe 	bl	8009fce <_Bfree>
 8008452:	9904      	ldr	r1, [sp, #16]
 8008454:	4658      	mov	r0, fp
 8008456:	f001 fdba 	bl	8009fce <_Bfree>
 800845a:	9908      	ldr	r1, [sp, #32]
 800845c:	4658      	mov	r0, fp
 800845e:	f001 fdb6 	bl	8009fce <_Bfree>
 8008462:	4641      	mov	r1, r8
 8008464:	4658      	mov	r0, fp
 8008466:	f001 fdb2 	bl	8009fce <_Bfree>
 800846a:	e5fc      	b.n	8008066 <_strtod_l+0x7e>
 800846c:	9a07      	ldr	r2, [sp, #28]
 800846e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008472:	4293      	cmp	r3, r2
 8008474:	dbb6      	blt.n	80083e4 <_strtod_l+0x3fc>
 8008476:	4d44      	ldr	r5, [pc, #272]	; (8008588 <_strtod_l+0x5a0>)
 8008478:	f1c4 040f 	rsb	r4, r4, #15
 800847c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008480:	464a      	mov	r2, r9
 8008482:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008486:	4653      	mov	r3, sl
 8008488:	f7f8 f826 	bl	80004d8 <__aeabi_dmul>
 800848c:	9b07      	ldr	r3, [sp, #28]
 800848e:	1b1c      	subs	r4, r3, r4
 8008490:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008494:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008498:	e789      	b.n	80083ae <_strtod_l+0x3c6>
 800849a:	f113 0f16 	cmn.w	r3, #22
 800849e:	dba1      	blt.n	80083e4 <_strtod_l+0x3fc>
 80084a0:	4a39      	ldr	r2, [pc, #228]	; (8008588 <_strtod_l+0x5a0>)
 80084a2:	4648      	mov	r0, r9
 80084a4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80084a8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80084ac:	4651      	mov	r1, sl
 80084ae:	f7f8 f93d 	bl	800072c <__aeabi_ddiv>
 80084b2:	e77e      	b.n	80083b2 <_strtod_l+0x3ca>
 80084b4:	2300      	movs	r3, #0
 80084b6:	4648      	mov	r0, r9
 80084b8:	4651      	mov	r1, sl
 80084ba:	461d      	mov	r5, r3
 80084bc:	4e33      	ldr	r6, [pc, #204]	; (800858c <_strtod_l+0x5a4>)
 80084be:	ea4f 1828 	mov.w	r8, r8, asr #4
 80084c2:	f1b8 0f01 	cmp.w	r8, #1
 80084c6:	dc21      	bgt.n	800850c <_strtod_l+0x524>
 80084c8:	b10b      	cbz	r3, 80084ce <_strtod_l+0x4e6>
 80084ca:	4681      	mov	r9, r0
 80084cc:	468a      	mov	sl, r1
 80084ce:	4b2f      	ldr	r3, [pc, #188]	; (800858c <_strtod_l+0x5a4>)
 80084d0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80084d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80084d8:	464a      	mov	r2, r9
 80084da:	e9d5 0100 	ldrd	r0, r1, [r5]
 80084de:	4653      	mov	r3, sl
 80084e0:	f7f7 fffa 	bl	80004d8 <__aeabi_dmul>
 80084e4:	4b2a      	ldr	r3, [pc, #168]	; (8008590 <_strtod_l+0x5a8>)
 80084e6:	460a      	mov	r2, r1
 80084e8:	400b      	ands	r3, r1
 80084ea:	492a      	ldr	r1, [pc, #168]	; (8008594 <_strtod_l+0x5ac>)
 80084ec:	4681      	mov	r9, r0
 80084ee:	428b      	cmp	r3, r1
 80084f0:	d894      	bhi.n	800841c <_strtod_l+0x434>
 80084f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80084f6:	428b      	cmp	r3, r1
 80084f8:	bf86      	itte	hi
 80084fa:	f04f 39ff 	movhi.w	r9, #4294967295
 80084fe:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800859c <_strtod_l+0x5b4>
 8008502:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8008506:	2300      	movs	r3, #0
 8008508:	9305      	str	r3, [sp, #20]
 800850a:	e07b      	b.n	8008604 <_strtod_l+0x61c>
 800850c:	f018 0f01 	tst.w	r8, #1
 8008510:	d006      	beq.n	8008520 <_strtod_l+0x538>
 8008512:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851a:	f7f7 ffdd 	bl	80004d8 <__aeabi_dmul>
 800851e:	2301      	movs	r3, #1
 8008520:	3501      	adds	r5, #1
 8008522:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008526:	e7cc      	b.n	80084c2 <_strtod_l+0x4da>
 8008528:	d0ed      	beq.n	8008506 <_strtod_l+0x51e>
 800852a:	f1c8 0800 	rsb	r8, r8, #0
 800852e:	f018 020f 	ands.w	r2, r8, #15
 8008532:	d00a      	beq.n	800854a <_strtod_l+0x562>
 8008534:	4b14      	ldr	r3, [pc, #80]	; (8008588 <_strtod_l+0x5a0>)
 8008536:	4648      	mov	r0, r9
 8008538:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800853c:	4651      	mov	r1, sl
 800853e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008542:	f7f8 f8f3 	bl	800072c <__aeabi_ddiv>
 8008546:	4681      	mov	r9, r0
 8008548:	468a      	mov	sl, r1
 800854a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800854e:	d0da      	beq.n	8008506 <_strtod_l+0x51e>
 8008550:	f1b8 0f1f 	cmp.w	r8, #31
 8008554:	dd24      	ble.n	80085a0 <_strtod_l+0x5b8>
 8008556:	f04f 0800 	mov.w	r8, #0
 800855a:	f8cd 8010 	str.w	r8, [sp, #16]
 800855e:	f8cd 8020 	str.w	r8, [sp, #32]
 8008562:	f8cd 8018 	str.w	r8, [sp, #24]
 8008566:	2322      	movs	r3, #34	; 0x22
 8008568:	f04f 0900 	mov.w	r9, #0
 800856c:	f04f 0a00 	mov.w	sl, #0
 8008570:	f8cb 3000 	str.w	r3, [fp]
 8008574:	e761      	b.n	800843a <_strtod_l+0x452>
 8008576:	bf00      	nop
 8008578:	0800c9e5 	.word	0x0800c9e5
 800857c:	0800ca6b 	.word	0x0800ca6b
 8008580:	0800c9ed 	.word	0x0800c9ed
 8008584:	0800ca28 	.word	0x0800ca28
 8008588:	0800caa8 	.word	0x0800caa8
 800858c:	0800ca80 	.word	0x0800ca80
 8008590:	7ff00000 	.word	0x7ff00000
 8008594:	7ca00000 	.word	0x7ca00000
 8008598:	fff80000 	.word	0xfff80000
 800859c:	7fefffff 	.word	0x7fefffff
 80085a0:	f018 0310 	ands.w	r3, r8, #16
 80085a4:	bf18      	it	ne
 80085a6:	236a      	movne	r3, #106	; 0x6a
 80085a8:	4648      	mov	r0, r9
 80085aa:	9305      	str	r3, [sp, #20]
 80085ac:	4651      	mov	r1, sl
 80085ae:	2300      	movs	r3, #0
 80085b0:	4da1      	ldr	r5, [pc, #644]	; (8008838 <_strtod_l+0x850>)
 80085b2:	f1b8 0f00 	cmp.w	r8, #0
 80085b6:	f300 8113 	bgt.w	80087e0 <_strtod_l+0x7f8>
 80085ba:	b10b      	cbz	r3, 80085c0 <_strtod_l+0x5d8>
 80085bc:	4681      	mov	r9, r0
 80085be:	468a      	mov	sl, r1
 80085c0:	9b05      	ldr	r3, [sp, #20]
 80085c2:	b1bb      	cbz	r3, 80085f4 <_strtod_l+0x60c>
 80085c4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80085c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	4651      	mov	r1, sl
 80085d0:	dd10      	ble.n	80085f4 <_strtod_l+0x60c>
 80085d2:	2b1f      	cmp	r3, #31
 80085d4:	f340 8110 	ble.w	80087f8 <_strtod_l+0x810>
 80085d8:	2b34      	cmp	r3, #52	; 0x34
 80085da:	bfd8      	it	le
 80085dc:	f04f 32ff 	movle.w	r2, #4294967295
 80085e0:	f04f 0900 	mov.w	r9, #0
 80085e4:	bfcf      	iteee	gt
 80085e6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 80085ea:	3b20      	suble	r3, #32
 80085ec:	fa02 f303 	lslle.w	r3, r2, r3
 80085f0:	ea03 0a01 	andle.w	sl, r3, r1
 80085f4:	2200      	movs	r2, #0
 80085f6:	2300      	movs	r3, #0
 80085f8:	4648      	mov	r0, r9
 80085fa:	4651      	mov	r1, sl
 80085fc:	f7f8 f9d4 	bl	80009a8 <__aeabi_dcmpeq>
 8008600:	2800      	cmp	r0, #0
 8008602:	d1a8      	bne.n	8008556 <_strtod_l+0x56e>
 8008604:	9b06      	ldr	r3, [sp, #24]
 8008606:	9a04      	ldr	r2, [sp, #16]
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	9908      	ldr	r1, [sp, #32]
 800860c:	4623      	mov	r3, r4
 800860e:	4658      	mov	r0, fp
 8008610:	f001 fd2f 	bl	800a072 <__s2b>
 8008614:	9008      	str	r0, [sp, #32]
 8008616:	2800      	cmp	r0, #0
 8008618:	f43f af00 	beq.w	800841c <_strtod_l+0x434>
 800861c:	9a07      	ldr	r2, [sp, #28]
 800861e:	9b07      	ldr	r3, [sp, #28]
 8008620:	2a00      	cmp	r2, #0
 8008622:	f1c3 0300 	rsb	r3, r3, #0
 8008626:	bfa8      	it	ge
 8008628:	2300      	movge	r3, #0
 800862a:	f04f 0800 	mov.w	r8, #0
 800862e:	930e      	str	r3, [sp, #56]	; 0x38
 8008630:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008634:	9316      	str	r3, [sp, #88]	; 0x58
 8008636:	f8cd 8010 	str.w	r8, [sp, #16]
 800863a:	9b08      	ldr	r3, [sp, #32]
 800863c:	4658      	mov	r0, fp
 800863e:	6859      	ldr	r1, [r3, #4]
 8008640:	f001 fc91 	bl	8009f66 <_Balloc>
 8008644:	9006      	str	r0, [sp, #24]
 8008646:	2800      	cmp	r0, #0
 8008648:	f43f aef0 	beq.w	800842c <_strtod_l+0x444>
 800864c:	9b08      	ldr	r3, [sp, #32]
 800864e:	300c      	adds	r0, #12
 8008650:	691a      	ldr	r2, [r3, #16]
 8008652:	f103 010c 	add.w	r1, r3, #12
 8008656:	3202      	adds	r2, #2
 8008658:	0092      	lsls	r2, r2, #2
 800865a:	f001 fc79 	bl	8009f50 <memcpy>
 800865e:	ab1e      	add	r3, sp, #120	; 0x78
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	ab1d      	add	r3, sp, #116	; 0x74
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	464a      	mov	r2, r9
 8008668:	4653      	mov	r3, sl
 800866a:	4658      	mov	r0, fp
 800866c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8008670:	f001 ffba 	bl	800a5e8 <__d2b>
 8008674:	901c      	str	r0, [sp, #112]	; 0x70
 8008676:	2800      	cmp	r0, #0
 8008678:	f43f aed8 	beq.w	800842c <_strtod_l+0x444>
 800867c:	2101      	movs	r1, #1
 800867e:	4658      	mov	r0, fp
 8008680:	f001 fd83 	bl	800a18a <__i2b>
 8008684:	9004      	str	r0, [sp, #16]
 8008686:	4603      	mov	r3, r0
 8008688:	2800      	cmp	r0, #0
 800868a:	f43f aecf 	beq.w	800842c <_strtod_l+0x444>
 800868e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008690:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008692:	2d00      	cmp	r5, #0
 8008694:	bfab      	itete	ge
 8008696:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008698:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800869a:	18ee      	addge	r6, r5, r3
 800869c:	1b5c      	sublt	r4, r3, r5
 800869e:	9b05      	ldr	r3, [sp, #20]
 80086a0:	bfa8      	it	ge
 80086a2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80086a4:	eba5 0503 	sub.w	r5, r5, r3
 80086a8:	4415      	add	r5, r2
 80086aa:	4b64      	ldr	r3, [pc, #400]	; (800883c <_strtod_l+0x854>)
 80086ac:	f105 35ff 	add.w	r5, r5, #4294967295
 80086b0:	bfb8      	it	lt
 80086b2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80086b4:	429d      	cmp	r5, r3
 80086b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80086ba:	f280 80af 	bge.w	800881c <_strtod_l+0x834>
 80086be:	1b5b      	subs	r3, r3, r5
 80086c0:	2b1f      	cmp	r3, #31
 80086c2:	eba2 0203 	sub.w	r2, r2, r3
 80086c6:	f04f 0701 	mov.w	r7, #1
 80086ca:	f300 809c 	bgt.w	8008806 <_strtod_l+0x81e>
 80086ce:	2500      	movs	r5, #0
 80086d0:	fa07 f303 	lsl.w	r3, r7, r3
 80086d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80086d6:	18b7      	adds	r7, r6, r2
 80086d8:	9b05      	ldr	r3, [sp, #20]
 80086da:	42be      	cmp	r6, r7
 80086dc:	4414      	add	r4, r2
 80086de:	441c      	add	r4, r3
 80086e0:	4633      	mov	r3, r6
 80086e2:	bfa8      	it	ge
 80086e4:	463b      	movge	r3, r7
 80086e6:	42a3      	cmp	r3, r4
 80086e8:	bfa8      	it	ge
 80086ea:	4623      	movge	r3, r4
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	bfc2      	ittt	gt
 80086f0:	1aff      	subgt	r7, r7, r3
 80086f2:	1ae4      	subgt	r4, r4, r3
 80086f4:	1af6      	subgt	r6, r6, r3
 80086f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086f8:	b1bb      	cbz	r3, 800872a <_strtod_l+0x742>
 80086fa:	461a      	mov	r2, r3
 80086fc:	9904      	ldr	r1, [sp, #16]
 80086fe:	4658      	mov	r0, fp
 8008700:	f001 fde2 	bl	800a2c8 <__pow5mult>
 8008704:	9004      	str	r0, [sp, #16]
 8008706:	2800      	cmp	r0, #0
 8008708:	f43f ae90 	beq.w	800842c <_strtod_l+0x444>
 800870c:	4601      	mov	r1, r0
 800870e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008710:	4658      	mov	r0, fp
 8008712:	f001 fd43 	bl	800a19c <__multiply>
 8008716:	9009      	str	r0, [sp, #36]	; 0x24
 8008718:	2800      	cmp	r0, #0
 800871a:	f43f ae87 	beq.w	800842c <_strtod_l+0x444>
 800871e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008720:	4658      	mov	r0, fp
 8008722:	f001 fc54 	bl	8009fce <_Bfree>
 8008726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008728:	931c      	str	r3, [sp, #112]	; 0x70
 800872a:	2f00      	cmp	r7, #0
 800872c:	dc7a      	bgt.n	8008824 <_strtod_l+0x83c>
 800872e:	9b07      	ldr	r3, [sp, #28]
 8008730:	2b00      	cmp	r3, #0
 8008732:	dd08      	ble.n	8008746 <_strtod_l+0x75e>
 8008734:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008736:	9906      	ldr	r1, [sp, #24]
 8008738:	4658      	mov	r0, fp
 800873a:	f001 fdc5 	bl	800a2c8 <__pow5mult>
 800873e:	9006      	str	r0, [sp, #24]
 8008740:	2800      	cmp	r0, #0
 8008742:	f43f ae73 	beq.w	800842c <_strtod_l+0x444>
 8008746:	2c00      	cmp	r4, #0
 8008748:	dd08      	ble.n	800875c <_strtod_l+0x774>
 800874a:	4622      	mov	r2, r4
 800874c:	9906      	ldr	r1, [sp, #24]
 800874e:	4658      	mov	r0, fp
 8008750:	f001 fe08 	bl	800a364 <__lshift>
 8008754:	9006      	str	r0, [sp, #24]
 8008756:	2800      	cmp	r0, #0
 8008758:	f43f ae68 	beq.w	800842c <_strtod_l+0x444>
 800875c:	2e00      	cmp	r6, #0
 800875e:	dd08      	ble.n	8008772 <_strtod_l+0x78a>
 8008760:	4632      	mov	r2, r6
 8008762:	9904      	ldr	r1, [sp, #16]
 8008764:	4658      	mov	r0, fp
 8008766:	f001 fdfd 	bl	800a364 <__lshift>
 800876a:	9004      	str	r0, [sp, #16]
 800876c:	2800      	cmp	r0, #0
 800876e:	f43f ae5d 	beq.w	800842c <_strtod_l+0x444>
 8008772:	9a06      	ldr	r2, [sp, #24]
 8008774:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008776:	4658      	mov	r0, fp
 8008778:	f001 fe62 	bl	800a440 <__mdiff>
 800877c:	4680      	mov	r8, r0
 800877e:	2800      	cmp	r0, #0
 8008780:	f43f ae54 	beq.w	800842c <_strtod_l+0x444>
 8008784:	2400      	movs	r4, #0
 8008786:	68c3      	ldr	r3, [r0, #12]
 8008788:	9904      	ldr	r1, [sp, #16]
 800878a:	60c4      	str	r4, [r0, #12]
 800878c:	930c      	str	r3, [sp, #48]	; 0x30
 800878e:	f001 fe3d 	bl	800a40c <__mcmp>
 8008792:	42a0      	cmp	r0, r4
 8008794:	da54      	bge.n	8008840 <_strtod_l+0x858>
 8008796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008798:	b9f3      	cbnz	r3, 80087d8 <_strtod_l+0x7f0>
 800879a:	f1b9 0f00 	cmp.w	r9, #0
 800879e:	d11b      	bne.n	80087d8 <_strtod_l+0x7f0>
 80087a0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80087a4:	b9c3      	cbnz	r3, 80087d8 <_strtod_l+0x7f0>
 80087a6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80087aa:	0d1b      	lsrs	r3, r3, #20
 80087ac:	051b      	lsls	r3, r3, #20
 80087ae:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80087b2:	d911      	bls.n	80087d8 <_strtod_l+0x7f0>
 80087b4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80087b8:	b91b      	cbnz	r3, 80087c2 <_strtod_l+0x7da>
 80087ba:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	dd0a      	ble.n	80087d8 <_strtod_l+0x7f0>
 80087c2:	4641      	mov	r1, r8
 80087c4:	2201      	movs	r2, #1
 80087c6:	4658      	mov	r0, fp
 80087c8:	f001 fdcc 	bl	800a364 <__lshift>
 80087cc:	9904      	ldr	r1, [sp, #16]
 80087ce:	4680      	mov	r8, r0
 80087d0:	f001 fe1c 	bl	800a40c <__mcmp>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	dc68      	bgt.n	80088aa <_strtod_l+0x8c2>
 80087d8:	9b05      	ldr	r3, [sp, #20]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d172      	bne.n	80088c4 <_strtod_l+0x8dc>
 80087de:	e630      	b.n	8008442 <_strtod_l+0x45a>
 80087e0:	f018 0f01 	tst.w	r8, #1
 80087e4:	d004      	beq.n	80087f0 <_strtod_l+0x808>
 80087e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80087ea:	f7f7 fe75 	bl	80004d8 <__aeabi_dmul>
 80087ee:	2301      	movs	r3, #1
 80087f0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80087f4:	3508      	adds	r5, #8
 80087f6:	e6dc      	b.n	80085b2 <_strtod_l+0x5ca>
 80087f8:	f04f 32ff 	mov.w	r2, #4294967295
 80087fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008800:	ea03 0909 	and.w	r9, r3, r9
 8008804:	e6f6      	b.n	80085f4 <_strtod_l+0x60c>
 8008806:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800880a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800880e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008812:	35e2      	adds	r5, #226	; 0xe2
 8008814:	fa07 f505 	lsl.w	r5, r7, r5
 8008818:	970f      	str	r7, [sp, #60]	; 0x3c
 800881a:	e75c      	b.n	80086d6 <_strtod_l+0x6ee>
 800881c:	2301      	movs	r3, #1
 800881e:	2500      	movs	r5, #0
 8008820:	930f      	str	r3, [sp, #60]	; 0x3c
 8008822:	e758      	b.n	80086d6 <_strtod_l+0x6ee>
 8008824:	463a      	mov	r2, r7
 8008826:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008828:	4658      	mov	r0, fp
 800882a:	f001 fd9b 	bl	800a364 <__lshift>
 800882e:	901c      	str	r0, [sp, #112]	; 0x70
 8008830:	2800      	cmp	r0, #0
 8008832:	f47f af7c 	bne.w	800872e <_strtod_l+0x746>
 8008836:	e5f9      	b.n	800842c <_strtod_l+0x444>
 8008838:	0800ca40 	.word	0x0800ca40
 800883c:	fffffc02 	.word	0xfffffc02
 8008840:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008844:	f040 8089 	bne.w	800895a <_strtod_l+0x972>
 8008848:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800884a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800884e:	b342      	cbz	r2, 80088a2 <_strtod_l+0x8ba>
 8008850:	4aaf      	ldr	r2, [pc, #700]	; (8008b10 <_strtod_l+0xb28>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d156      	bne.n	8008904 <_strtod_l+0x91c>
 8008856:	9b05      	ldr	r3, [sp, #20]
 8008858:	4648      	mov	r0, r9
 800885a:	b1eb      	cbz	r3, 8008898 <_strtod_l+0x8b0>
 800885c:	4653      	mov	r3, sl
 800885e:	4aad      	ldr	r2, [pc, #692]	; (8008b14 <_strtod_l+0xb2c>)
 8008860:	f04f 31ff 	mov.w	r1, #4294967295
 8008864:	401a      	ands	r2, r3
 8008866:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800886a:	d818      	bhi.n	800889e <_strtod_l+0x8b6>
 800886c:	0d12      	lsrs	r2, r2, #20
 800886e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008872:	fa01 f303 	lsl.w	r3, r1, r3
 8008876:	4298      	cmp	r0, r3
 8008878:	d144      	bne.n	8008904 <_strtod_l+0x91c>
 800887a:	4ba7      	ldr	r3, [pc, #668]	; (8008b18 <_strtod_l+0xb30>)
 800887c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800887e:	429a      	cmp	r2, r3
 8008880:	d102      	bne.n	8008888 <_strtod_l+0x8a0>
 8008882:	3001      	adds	r0, #1
 8008884:	f43f add2 	beq.w	800842c <_strtod_l+0x444>
 8008888:	4ba2      	ldr	r3, [pc, #648]	; (8008b14 <_strtod_l+0xb2c>)
 800888a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800888c:	f04f 0900 	mov.w	r9, #0
 8008890:	401a      	ands	r2, r3
 8008892:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8008896:	e79f      	b.n	80087d8 <_strtod_l+0x7f0>
 8008898:	f04f 33ff 	mov.w	r3, #4294967295
 800889c:	e7eb      	b.n	8008876 <_strtod_l+0x88e>
 800889e:	460b      	mov	r3, r1
 80088a0:	e7e9      	b.n	8008876 <_strtod_l+0x88e>
 80088a2:	bb7b      	cbnz	r3, 8008904 <_strtod_l+0x91c>
 80088a4:	f1b9 0f00 	cmp.w	r9, #0
 80088a8:	d12c      	bne.n	8008904 <_strtod_l+0x91c>
 80088aa:	9905      	ldr	r1, [sp, #20]
 80088ac:	4653      	mov	r3, sl
 80088ae:	4a99      	ldr	r2, [pc, #612]	; (8008b14 <_strtod_l+0xb2c>)
 80088b0:	b1f1      	cbz	r1, 80088f0 <_strtod_l+0x908>
 80088b2:	ea02 010a 	and.w	r1, r2, sl
 80088b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80088ba:	dc19      	bgt.n	80088f0 <_strtod_l+0x908>
 80088bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80088c0:	f77f ae51 	ble.w	8008566 <_strtod_l+0x57e>
 80088c4:	2300      	movs	r3, #0
 80088c6:	4a95      	ldr	r2, [pc, #596]	; (8008b1c <_strtod_l+0xb34>)
 80088c8:	4648      	mov	r0, r9
 80088ca:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80088ce:	4651      	mov	r1, sl
 80088d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80088d4:	f7f7 fe00 	bl	80004d8 <__aeabi_dmul>
 80088d8:	4681      	mov	r9, r0
 80088da:	468a      	mov	sl, r1
 80088dc:	2900      	cmp	r1, #0
 80088de:	f47f adb0 	bne.w	8008442 <_strtod_l+0x45a>
 80088e2:	2800      	cmp	r0, #0
 80088e4:	f47f adad 	bne.w	8008442 <_strtod_l+0x45a>
 80088e8:	2322      	movs	r3, #34	; 0x22
 80088ea:	f8cb 3000 	str.w	r3, [fp]
 80088ee:	e5a8      	b.n	8008442 <_strtod_l+0x45a>
 80088f0:	4013      	ands	r3, r2
 80088f2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80088f6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80088fa:	f04f 39ff 	mov.w	r9, #4294967295
 80088fe:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8008902:	e769      	b.n	80087d8 <_strtod_l+0x7f0>
 8008904:	b19d      	cbz	r5, 800892e <_strtod_l+0x946>
 8008906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008908:	421d      	tst	r5, r3
 800890a:	f43f af65 	beq.w	80087d8 <_strtod_l+0x7f0>
 800890e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008910:	9a05      	ldr	r2, [sp, #20]
 8008912:	4648      	mov	r0, r9
 8008914:	4651      	mov	r1, sl
 8008916:	b173      	cbz	r3, 8008936 <_strtod_l+0x94e>
 8008918:	f7ff fb44 	bl	8007fa4 <sulp>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008924:	f7f7 fc22 	bl	800016c <__adddf3>
 8008928:	4681      	mov	r9, r0
 800892a:	468a      	mov	sl, r1
 800892c:	e754      	b.n	80087d8 <_strtod_l+0x7f0>
 800892e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008930:	ea13 0f09 	tst.w	r3, r9
 8008934:	e7e9      	b.n	800890a <_strtod_l+0x922>
 8008936:	f7ff fb35 	bl	8007fa4 <sulp>
 800893a:	4602      	mov	r2, r0
 800893c:	460b      	mov	r3, r1
 800893e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008942:	f7f7 fc11 	bl	8000168 <__aeabi_dsub>
 8008946:	2200      	movs	r2, #0
 8008948:	2300      	movs	r3, #0
 800894a:	4681      	mov	r9, r0
 800894c:	468a      	mov	sl, r1
 800894e:	f7f8 f82b 	bl	80009a8 <__aeabi_dcmpeq>
 8008952:	2800      	cmp	r0, #0
 8008954:	f47f ae07 	bne.w	8008566 <_strtod_l+0x57e>
 8008958:	e73e      	b.n	80087d8 <_strtod_l+0x7f0>
 800895a:	9904      	ldr	r1, [sp, #16]
 800895c:	4640      	mov	r0, r8
 800895e:	f001 fe92 	bl	800a686 <__ratio>
 8008962:	2200      	movs	r2, #0
 8008964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008968:	4606      	mov	r6, r0
 800896a:	460f      	mov	r7, r1
 800896c:	f7f8 f830 	bl	80009d0 <__aeabi_dcmple>
 8008970:	2800      	cmp	r0, #0
 8008972:	d075      	beq.n	8008a60 <_strtod_l+0xa78>
 8008974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008976:	2b00      	cmp	r3, #0
 8008978:	d047      	beq.n	8008a0a <_strtod_l+0xa22>
 800897a:	2600      	movs	r6, #0
 800897c:	4f68      	ldr	r7, [pc, #416]	; (8008b20 <_strtod_l+0xb38>)
 800897e:	4d68      	ldr	r5, [pc, #416]	; (8008b20 <_strtod_l+0xb38>)
 8008980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008982:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008986:	0d1b      	lsrs	r3, r3, #20
 8008988:	051b      	lsls	r3, r3, #20
 800898a:	930f      	str	r3, [sp, #60]	; 0x3c
 800898c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800898e:	4b65      	ldr	r3, [pc, #404]	; (8008b24 <_strtod_l+0xb3c>)
 8008990:	429a      	cmp	r2, r3
 8008992:	f040 80cf 	bne.w	8008b34 <_strtod_l+0xb4c>
 8008996:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800899a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800899e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a0:	4648      	mov	r0, r9
 80089a2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80089a6:	4651      	mov	r1, sl
 80089a8:	f001 fda8 	bl	800a4fc <__ulp>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	4630      	mov	r0, r6
 80089b2:	4639      	mov	r1, r7
 80089b4:	f7f7 fd90 	bl	80004d8 <__aeabi_dmul>
 80089b8:	464a      	mov	r2, r9
 80089ba:	4653      	mov	r3, sl
 80089bc:	f7f7 fbd6 	bl	800016c <__adddf3>
 80089c0:	460b      	mov	r3, r1
 80089c2:	4954      	ldr	r1, [pc, #336]	; (8008b14 <_strtod_l+0xb2c>)
 80089c4:	4a58      	ldr	r2, [pc, #352]	; (8008b28 <_strtod_l+0xb40>)
 80089c6:	4019      	ands	r1, r3
 80089c8:	4291      	cmp	r1, r2
 80089ca:	4681      	mov	r9, r0
 80089cc:	d95e      	bls.n	8008a8c <_strtod_l+0xaa4>
 80089ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d103      	bne.n	80089e0 <_strtod_l+0x9f8>
 80089d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089da:	3301      	adds	r3, #1
 80089dc:	f43f ad26 	beq.w	800842c <_strtod_l+0x444>
 80089e0:	f04f 39ff 	mov.w	r9, #4294967295
 80089e4:	f8df a130 	ldr.w	sl, [pc, #304]	; 8008b18 <_strtod_l+0xb30>
 80089e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80089ea:	4658      	mov	r0, fp
 80089ec:	f001 faef 	bl	8009fce <_Bfree>
 80089f0:	9906      	ldr	r1, [sp, #24]
 80089f2:	4658      	mov	r0, fp
 80089f4:	f001 faeb 	bl	8009fce <_Bfree>
 80089f8:	9904      	ldr	r1, [sp, #16]
 80089fa:	4658      	mov	r0, fp
 80089fc:	f001 fae7 	bl	8009fce <_Bfree>
 8008a00:	4641      	mov	r1, r8
 8008a02:	4658      	mov	r0, fp
 8008a04:	f001 fae3 	bl	8009fce <_Bfree>
 8008a08:	e617      	b.n	800863a <_strtod_l+0x652>
 8008a0a:	f1b9 0f00 	cmp.w	r9, #0
 8008a0e:	d119      	bne.n	8008a44 <_strtod_l+0xa5c>
 8008a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a16:	b9e3      	cbnz	r3, 8008a52 <_strtod_l+0xa6a>
 8008a18:	2200      	movs	r2, #0
 8008a1a:	4b41      	ldr	r3, [pc, #260]	; (8008b20 <_strtod_l+0xb38>)
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	4639      	mov	r1, r7
 8008a20:	f7f7 ffcc 	bl	80009bc <__aeabi_dcmplt>
 8008a24:	b9c8      	cbnz	r0, 8008a5a <_strtod_l+0xa72>
 8008a26:	2200      	movs	r2, #0
 8008a28:	4b40      	ldr	r3, [pc, #256]	; (8008b2c <_strtod_l+0xb44>)
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	4639      	mov	r1, r7
 8008a2e:	f7f7 fd53 	bl	80004d8 <__aeabi_dmul>
 8008a32:	4604      	mov	r4, r0
 8008a34:	460d      	mov	r5, r1
 8008a36:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008a3a:	9418      	str	r4, [sp, #96]	; 0x60
 8008a3c:	9319      	str	r3, [sp, #100]	; 0x64
 8008a3e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8008a42:	e79d      	b.n	8008980 <_strtod_l+0x998>
 8008a44:	f1b9 0f01 	cmp.w	r9, #1
 8008a48:	d103      	bne.n	8008a52 <_strtod_l+0xa6a>
 8008a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f43f ad8a 	beq.w	8008566 <_strtod_l+0x57e>
 8008a52:	2600      	movs	r6, #0
 8008a54:	4f36      	ldr	r7, [pc, #216]	; (8008b30 <_strtod_l+0xb48>)
 8008a56:	2400      	movs	r4, #0
 8008a58:	e791      	b.n	800897e <_strtod_l+0x996>
 8008a5a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008a5c:	4d33      	ldr	r5, [pc, #204]	; (8008b2c <_strtod_l+0xb44>)
 8008a5e:	e7ea      	b.n	8008a36 <_strtod_l+0xa4e>
 8008a60:	4b32      	ldr	r3, [pc, #200]	; (8008b2c <_strtod_l+0xb44>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	4630      	mov	r0, r6
 8008a66:	4639      	mov	r1, r7
 8008a68:	f7f7 fd36 	bl	80004d8 <__aeabi_dmul>
 8008a6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a6e:	4604      	mov	r4, r0
 8008a70:	460d      	mov	r5, r1
 8008a72:	b933      	cbnz	r3, 8008a82 <_strtod_l+0xa9a>
 8008a74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a78:	9010      	str	r0, [sp, #64]	; 0x40
 8008a7a:	9311      	str	r3, [sp, #68]	; 0x44
 8008a7c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008a80:	e77e      	b.n	8008980 <_strtod_l+0x998>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008a8a:	e7f7      	b.n	8008a7c <_strtod_l+0xa94>
 8008a8c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8008a90:	9b05      	ldr	r3, [sp, #20]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1a8      	bne.n	80089e8 <_strtod_l+0xa00>
 8008a96:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008a9a:	0d1b      	lsrs	r3, r3, #20
 8008a9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a9e:	051b      	lsls	r3, r3, #20
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	4656      	mov	r6, sl
 8008aa4:	d1a0      	bne.n	80089e8 <_strtod_l+0xa00>
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f7f7 ffc5 	bl	8000a38 <__aeabi_d2iz>
 8008aae:	f7f7 fca9 	bl	8000404 <__aeabi_i2d>
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f7f7 fb55 	bl	8000168 <__aeabi_dsub>
 8008abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	460d      	mov	r5, r1
 8008ac4:	b933      	cbnz	r3, 8008ad4 <_strtod_l+0xaec>
 8008ac6:	f1b9 0f00 	cmp.w	r9, #0
 8008aca:	d103      	bne.n	8008ad4 <_strtod_l+0xaec>
 8008acc:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8008ad0:	2e00      	cmp	r6, #0
 8008ad2:	d06a      	beq.n	8008baa <_strtod_l+0xbc2>
 8008ad4:	a30a      	add	r3, pc, #40	; (adr r3, 8008b00 <_strtod_l+0xb18>)
 8008ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ada:	4620      	mov	r0, r4
 8008adc:	4629      	mov	r1, r5
 8008ade:	f7f7 ff6d 	bl	80009bc <__aeabi_dcmplt>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	f47f acad 	bne.w	8008442 <_strtod_l+0x45a>
 8008ae8:	a307      	add	r3, pc, #28	; (adr r3, 8008b08 <_strtod_l+0xb20>)
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	4620      	mov	r0, r4
 8008af0:	4629      	mov	r1, r5
 8008af2:	f7f7 ff81 	bl	80009f8 <__aeabi_dcmpgt>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	f43f af76 	beq.w	80089e8 <_strtod_l+0xa00>
 8008afc:	e4a1      	b.n	8008442 <_strtod_l+0x45a>
 8008afe:	bf00      	nop
 8008b00:	94a03595 	.word	0x94a03595
 8008b04:	3fdfffff 	.word	0x3fdfffff
 8008b08:	35afe535 	.word	0x35afe535
 8008b0c:	3fe00000 	.word	0x3fe00000
 8008b10:	000fffff 	.word	0x000fffff
 8008b14:	7ff00000 	.word	0x7ff00000
 8008b18:	7fefffff 	.word	0x7fefffff
 8008b1c:	39500000 	.word	0x39500000
 8008b20:	3ff00000 	.word	0x3ff00000
 8008b24:	7fe00000 	.word	0x7fe00000
 8008b28:	7c9fffff 	.word	0x7c9fffff
 8008b2c:	3fe00000 	.word	0x3fe00000
 8008b30:	bff00000 	.word	0xbff00000
 8008b34:	9b05      	ldr	r3, [sp, #20]
 8008b36:	b313      	cbz	r3, 8008b7e <_strtod_l+0xb96>
 8008b38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b3a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008b3e:	d81e      	bhi.n	8008b7e <_strtod_l+0xb96>
 8008b40:	a325      	add	r3, pc, #148	; (adr r3, 8008bd8 <_strtod_l+0xbf0>)
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	4620      	mov	r0, r4
 8008b48:	4629      	mov	r1, r5
 8008b4a:	f7f7 ff41 	bl	80009d0 <__aeabi_dcmple>
 8008b4e:	b190      	cbz	r0, 8008b76 <_strtod_l+0xb8e>
 8008b50:	4629      	mov	r1, r5
 8008b52:	4620      	mov	r0, r4
 8008b54:	f7f7 ff98 	bl	8000a88 <__aeabi_d2uiz>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	bf08      	it	eq
 8008b5c:	2001      	moveq	r0, #1
 8008b5e:	f7f7 fc41 	bl	80003e4 <__aeabi_ui2d>
 8008b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b64:	4604      	mov	r4, r0
 8008b66:	460d      	mov	r5, r1
 8008b68:	b9d3      	cbnz	r3, 8008ba0 <_strtod_l+0xbb8>
 8008b6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b6e:	9012      	str	r0, [sp, #72]	; 0x48
 8008b70:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b72:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008b76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b78:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008b7c:	1a9f      	subs	r7, r3, r2
 8008b7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b82:	f001 fcbb 	bl	800a4fc <__ulp>
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	4639      	mov	r1, r7
 8008b8e:	f7f7 fca3 	bl	80004d8 <__aeabi_dmul>
 8008b92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008b96:	f7f7 fae9 	bl	800016c <__adddf3>
 8008b9a:	4681      	mov	r9, r0
 8008b9c:	468a      	mov	sl, r1
 8008b9e:	e777      	b.n	8008a90 <_strtod_l+0xaa8>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008ba8:	e7e3      	b.n	8008b72 <_strtod_l+0xb8a>
 8008baa:	a30d      	add	r3, pc, #52	; (adr r3, 8008be0 <_strtod_l+0xbf8>)
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	f7f7 ff04 	bl	80009bc <__aeabi_dcmplt>
 8008bb4:	e79f      	b.n	8008af6 <_strtod_l+0xb0e>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	930d      	str	r3, [sp, #52]	; 0x34
 8008bba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	f7ff ba55 	b.w	800806e <_strtod_l+0x86>
 8008bc4:	2b65      	cmp	r3, #101	; 0x65
 8008bc6:	f04f 0200 	mov.w	r2, #0
 8008bca:	f43f ab42 	beq.w	8008252 <_strtod_l+0x26a>
 8008bce:	2101      	movs	r1, #1
 8008bd0:	4614      	mov	r4, r2
 8008bd2:	9105      	str	r1, [sp, #20]
 8008bd4:	f7ff babf 	b.w	8008156 <_strtod_l+0x16e>
 8008bd8:	ffc00000 	.word	0xffc00000
 8008bdc:	41dfffff 	.word	0x41dfffff
 8008be0:	94a03595 	.word	0x94a03595
 8008be4:	3fcfffff 	.word	0x3fcfffff

08008be8 <strtod>:
 8008be8:	4b06      	ldr	r3, [pc, #24]	; (8008c04 <strtod+0x1c>)
 8008bea:	b410      	push	{r4}
 8008bec:	681c      	ldr	r4, [r3, #0]
 8008bee:	4a06      	ldr	r2, [pc, #24]	; (8008c08 <strtod+0x20>)
 8008bf0:	6a23      	ldr	r3, [r4, #32]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	bf08      	it	eq
 8008bf6:	4613      	moveq	r3, r2
 8008bf8:	460a      	mov	r2, r1
 8008bfa:	4601      	mov	r1, r0
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	bc10      	pop	{r4}
 8008c00:	f7ff b9f2 	b.w	8007fe8 <_strtod_l>
 8008c04:	2000002c 	.word	0x2000002c
 8008c08:	20000090 	.word	0x20000090

08008c0c <quorem>:
 8008c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c10:	6903      	ldr	r3, [r0, #16]
 8008c12:	690c      	ldr	r4, [r1, #16]
 8008c14:	4680      	mov	r8, r0
 8008c16:	42a3      	cmp	r3, r4
 8008c18:	f2c0 8084 	blt.w	8008d24 <quorem+0x118>
 8008c1c:	3c01      	subs	r4, #1
 8008c1e:	f101 0714 	add.w	r7, r1, #20
 8008c22:	f100 0614 	add.w	r6, r0, #20
 8008c26:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008c2a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008c2e:	3501      	adds	r5, #1
 8008c30:	fbb0 f5f5 	udiv	r5, r0, r5
 8008c34:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008c38:	eb06 030c 	add.w	r3, r6, ip
 8008c3c:	eb07 090c 	add.w	r9, r7, ip
 8008c40:	9301      	str	r3, [sp, #4]
 8008c42:	b39d      	cbz	r5, 8008cac <quorem+0xa0>
 8008c44:	f04f 0a00 	mov.w	sl, #0
 8008c48:	4638      	mov	r0, r7
 8008c4a:	46b6      	mov	lr, r6
 8008c4c:	46d3      	mov	fp, sl
 8008c4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c52:	b293      	uxth	r3, r2
 8008c54:	fb05 a303 	mla	r3, r5, r3, sl
 8008c58:	0c12      	lsrs	r2, r2, #16
 8008c5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c5e:	fb05 a202 	mla	r2, r5, r2, sl
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	ebab 0303 	sub.w	r3, fp, r3
 8008c68:	f8de b000 	ldr.w	fp, [lr]
 8008c6c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008c70:	fa1f fb8b 	uxth.w	fp, fp
 8008c74:	445b      	add	r3, fp
 8008c76:	fa1f fb82 	uxth.w	fp, r2
 8008c7a:	f8de 2000 	ldr.w	r2, [lr]
 8008c7e:	4581      	cmp	r9, r0
 8008c80:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008c84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c8e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008c92:	f84e 3b04 	str.w	r3, [lr], #4
 8008c96:	d2da      	bcs.n	8008c4e <quorem+0x42>
 8008c98:	f856 300c 	ldr.w	r3, [r6, ip]
 8008c9c:	b933      	cbnz	r3, 8008cac <quorem+0xa0>
 8008c9e:	9b01      	ldr	r3, [sp, #4]
 8008ca0:	3b04      	subs	r3, #4
 8008ca2:	429e      	cmp	r6, r3
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	d331      	bcc.n	8008d0c <quorem+0x100>
 8008ca8:	f8c8 4010 	str.w	r4, [r8, #16]
 8008cac:	4640      	mov	r0, r8
 8008cae:	f001 fbad 	bl	800a40c <__mcmp>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	db26      	blt.n	8008d04 <quorem+0xf8>
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	f04f 0c00 	mov.w	ip, #0
 8008cbc:	3501      	adds	r5, #1
 8008cbe:	f857 1b04 	ldr.w	r1, [r7], #4
 8008cc2:	f8d0 e000 	ldr.w	lr, [r0]
 8008cc6:	b28b      	uxth	r3, r1
 8008cc8:	ebac 0303 	sub.w	r3, ip, r3
 8008ccc:	fa1f f28e 	uxth.w	r2, lr
 8008cd0:	4413      	add	r3, r2
 8008cd2:	0c0a      	lsrs	r2, r1, #16
 8008cd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008cd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ce2:	45b9      	cmp	r9, r7
 8008ce4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ce8:	f840 3b04 	str.w	r3, [r0], #4
 8008cec:	d2e7      	bcs.n	8008cbe <quorem+0xb2>
 8008cee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008cf2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008cf6:	b92a      	cbnz	r2, 8008d04 <quorem+0xf8>
 8008cf8:	3b04      	subs	r3, #4
 8008cfa:	429e      	cmp	r6, r3
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	d30b      	bcc.n	8008d18 <quorem+0x10c>
 8008d00:	f8c8 4010 	str.w	r4, [r8, #16]
 8008d04:	4628      	mov	r0, r5
 8008d06:	b003      	add	sp, #12
 8008d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0c:	6812      	ldr	r2, [r2, #0]
 8008d0e:	3b04      	subs	r3, #4
 8008d10:	2a00      	cmp	r2, #0
 8008d12:	d1c9      	bne.n	8008ca8 <quorem+0x9c>
 8008d14:	3c01      	subs	r4, #1
 8008d16:	e7c4      	b.n	8008ca2 <quorem+0x96>
 8008d18:	6812      	ldr	r2, [r2, #0]
 8008d1a:	3b04      	subs	r3, #4
 8008d1c:	2a00      	cmp	r2, #0
 8008d1e:	d1ef      	bne.n	8008d00 <quorem+0xf4>
 8008d20:	3c01      	subs	r4, #1
 8008d22:	e7ea      	b.n	8008cfa <quorem+0xee>
 8008d24:	2000      	movs	r0, #0
 8008d26:	e7ee      	b.n	8008d06 <quorem+0xfa>

08008d28 <_dtoa_r>:
 8008d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	4616      	mov	r6, r2
 8008d2e:	461f      	mov	r7, r3
 8008d30:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d32:	b095      	sub	sp, #84	; 0x54
 8008d34:	4604      	mov	r4, r0
 8008d36:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8008d3a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008d3e:	b93d      	cbnz	r5, 8008d50 <_dtoa_r+0x28>
 8008d40:	2010      	movs	r0, #16
 8008d42:	f001 f8dd 	bl	8009f00 <malloc>
 8008d46:	6260      	str	r0, [r4, #36]	; 0x24
 8008d48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d4c:	6005      	str	r5, [r0, #0]
 8008d4e:	60c5      	str	r5, [r0, #12]
 8008d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d52:	6819      	ldr	r1, [r3, #0]
 8008d54:	b151      	cbz	r1, 8008d6c <_dtoa_r+0x44>
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	2301      	movs	r3, #1
 8008d5a:	4093      	lsls	r3, r2
 8008d5c:	604a      	str	r2, [r1, #4]
 8008d5e:	608b      	str	r3, [r1, #8]
 8008d60:	4620      	mov	r0, r4
 8008d62:	f001 f934 	bl	8009fce <_Bfree>
 8008d66:	2200      	movs	r2, #0
 8008d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d6a:	601a      	str	r2, [r3, #0]
 8008d6c:	1e3b      	subs	r3, r7, #0
 8008d6e:	bfaf      	iteee	ge
 8008d70:	2300      	movge	r3, #0
 8008d72:	2201      	movlt	r2, #1
 8008d74:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d78:	9303      	strlt	r3, [sp, #12]
 8008d7a:	bfac      	ite	ge
 8008d7c:	f8c8 3000 	strge.w	r3, [r8]
 8008d80:	f8c8 2000 	strlt.w	r2, [r8]
 8008d84:	4bae      	ldr	r3, [pc, #696]	; (8009040 <_dtoa_r+0x318>)
 8008d86:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008d8a:	ea33 0308 	bics.w	r3, r3, r8
 8008d8e:	d11b      	bne.n	8008dc8 <_dtoa_r+0xa0>
 8008d90:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	9b02      	ldr	r3, [sp, #8]
 8008d9a:	b923      	cbnz	r3, 8008da6 <_dtoa_r+0x7e>
 8008d9c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008da0:	2800      	cmp	r0, #0
 8008da2:	f000 8545 	beq.w	8009830 <_dtoa_r+0xb08>
 8008da6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008da8:	b953      	cbnz	r3, 8008dc0 <_dtoa_r+0x98>
 8008daa:	4ba6      	ldr	r3, [pc, #664]	; (8009044 <_dtoa_r+0x31c>)
 8008dac:	e021      	b.n	8008df2 <_dtoa_r+0xca>
 8008dae:	4ba6      	ldr	r3, [pc, #664]	; (8009048 <_dtoa_r+0x320>)
 8008db0:	9306      	str	r3, [sp, #24]
 8008db2:	3308      	adds	r3, #8
 8008db4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	9806      	ldr	r0, [sp, #24]
 8008dba:	b015      	add	sp, #84	; 0x54
 8008dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc0:	4ba0      	ldr	r3, [pc, #640]	; (8009044 <_dtoa_r+0x31c>)
 8008dc2:	9306      	str	r3, [sp, #24]
 8008dc4:	3303      	adds	r3, #3
 8008dc6:	e7f5      	b.n	8008db4 <_dtoa_r+0x8c>
 8008dc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	2300      	movs	r3, #0
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	4639      	mov	r1, r7
 8008dd4:	f7f7 fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8008dd8:	4682      	mov	sl, r0
 8008dda:	b160      	cbz	r0, 8008df6 <_dtoa_r+0xce>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008de0:	6013      	str	r3, [r2, #0]
 8008de2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 8520 	beq.w	800982a <_dtoa_r+0xb02>
 8008dea:	4b98      	ldr	r3, [pc, #608]	; (800904c <_dtoa_r+0x324>)
 8008dec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	9306      	str	r3, [sp, #24]
 8008df4:	e7e0      	b.n	8008db8 <_dtoa_r+0x90>
 8008df6:	ab12      	add	r3, sp, #72	; 0x48
 8008df8:	9301      	str	r3, [sp, #4]
 8008dfa:	ab13      	add	r3, sp, #76	; 0x4c
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	4632      	mov	r2, r6
 8008e00:	463b      	mov	r3, r7
 8008e02:	4620      	mov	r0, r4
 8008e04:	f001 fbf0 	bl	800a5e8 <__d2b>
 8008e08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008e0c:	4683      	mov	fp, r0
 8008e0e:	2d00      	cmp	r5, #0
 8008e10:	d07d      	beq.n	8008f0e <_dtoa_r+0x1e6>
 8008e12:	46b0      	mov	r8, r6
 8008e14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e18:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8008e1c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008e20:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e24:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008e28:	2200      	movs	r2, #0
 8008e2a:	4b89      	ldr	r3, [pc, #548]	; (8009050 <_dtoa_r+0x328>)
 8008e2c:	4640      	mov	r0, r8
 8008e2e:	4649      	mov	r1, r9
 8008e30:	f7f7 f99a 	bl	8000168 <__aeabi_dsub>
 8008e34:	a37c      	add	r3, pc, #496	; (adr r3, 8009028 <_dtoa_r+0x300>)
 8008e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3a:	f7f7 fb4d 	bl	80004d8 <__aeabi_dmul>
 8008e3e:	a37c      	add	r3, pc, #496	; (adr r3, 8009030 <_dtoa_r+0x308>)
 8008e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e44:	f7f7 f992 	bl	800016c <__adddf3>
 8008e48:	4606      	mov	r6, r0
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	460f      	mov	r7, r1
 8008e4e:	f7f7 fad9 	bl	8000404 <__aeabi_i2d>
 8008e52:	a379      	add	r3, pc, #484	; (adr r3, 8009038 <_dtoa_r+0x310>)
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	f7f7 fb3e 	bl	80004d8 <__aeabi_dmul>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4630      	mov	r0, r6
 8008e62:	4639      	mov	r1, r7
 8008e64:	f7f7 f982 	bl	800016c <__adddf3>
 8008e68:	4606      	mov	r6, r0
 8008e6a:	460f      	mov	r7, r1
 8008e6c:	f7f7 fde4 	bl	8000a38 <__aeabi_d2iz>
 8008e70:	2200      	movs	r2, #0
 8008e72:	4682      	mov	sl, r0
 8008e74:	2300      	movs	r3, #0
 8008e76:	4630      	mov	r0, r6
 8008e78:	4639      	mov	r1, r7
 8008e7a:	f7f7 fd9f 	bl	80009bc <__aeabi_dcmplt>
 8008e7e:	b148      	cbz	r0, 8008e94 <_dtoa_r+0x16c>
 8008e80:	4650      	mov	r0, sl
 8008e82:	f7f7 fabf 	bl	8000404 <__aeabi_i2d>
 8008e86:	4632      	mov	r2, r6
 8008e88:	463b      	mov	r3, r7
 8008e8a:	f7f7 fd8d 	bl	80009a8 <__aeabi_dcmpeq>
 8008e8e:	b908      	cbnz	r0, 8008e94 <_dtoa_r+0x16c>
 8008e90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e94:	f1ba 0f16 	cmp.w	sl, #22
 8008e98:	d85a      	bhi.n	8008f50 <_dtoa_r+0x228>
 8008e9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e9e:	496d      	ldr	r1, [pc, #436]	; (8009054 <_dtoa_r+0x32c>)
 8008ea0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ea8:	f7f7 fda6 	bl	80009f8 <__aeabi_dcmpgt>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d051      	beq.n	8008f54 <_dtoa_r+0x22c>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008eb6:	930d      	str	r3, [sp, #52]	; 0x34
 8008eb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008eba:	1b5d      	subs	r5, r3, r5
 8008ebc:	1e6b      	subs	r3, r5, #1
 8008ebe:	9307      	str	r3, [sp, #28]
 8008ec0:	bf43      	ittte	mi
 8008ec2:	2300      	movmi	r3, #0
 8008ec4:	f1c5 0901 	rsbmi	r9, r5, #1
 8008ec8:	9307      	strmi	r3, [sp, #28]
 8008eca:	f04f 0900 	movpl.w	r9, #0
 8008ece:	f1ba 0f00 	cmp.w	sl, #0
 8008ed2:	db41      	blt.n	8008f58 <_dtoa_r+0x230>
 8008ed4:	9b07      	ldr	r3, [sp, #28]
 8008ed6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008eda:	4453      	add	r3, sl
 8008edc:	9307      	str	r3, [sp, #28]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	9308      	str	r3, [sp, #32]
 8008ee2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008ee4:	2b09      	cmp	r3, #9
 8008ee6:	f200 808f 	bhi.w	8009008 <_dtoa_r+0x2e0>
 8008eea:	2b05      	cmp	r3, #5
 8008eec:	bfc4      	itt	gt
 8008eee:	3b04      	subgt	r3, #4
 8008ef0:	931e      	strgt	r3, [sp, #120]	; 0x78
 8008ef2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008ef4:	bfc8      	it	gt
 8008ef6:	2500      	movgt	r5, #0
 8008ef8:	f1a3 0302 	sub.w	r3, r3, #2
 8008efc:	bfd8      	it	le
 8008efe:	2501      	movle	r5, #1
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	f200 808d 	bhi.w	8009020 <_dtoa_r+0x2f8>
 8008f06:	e8df f003 	tbb	[pc, r3]
 8008f0a:	7d7b      	.short	0x7d7b
 8008f0c:	6f2f      	.short	0x6f2f
 8008f0e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008f12:	441d      	add	r5, r3
 8008f14:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008f18:	2820      	cmp	r0, #32
 8008f1a:	dd13      	ble.n	8008f44 <_dtoa_r+0x21c>
 8008f1c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008f20:	9b02      	ldr	r3, [sp, #8]
 8008f22:	fa08 f800 	lsl.w	r8, r8, r0
 8008f26:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008f2a:	fa23 f000 	lsr.w	r0, r3, r0
 8008f2e:	ea48 0000 	orr.w	r0, r8, r0
 8008f32:	f7f7 fa57 	bl	80003e4 <__aeabi_ui2d>
 8008f36:	2301      	movs	r3, #1
 8008f38:	4680      	mov	r8, r0
 8008f3a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8008f3e:	3d01      	subs	r5, #1
 8008f40:	9310      	str	r3, [sp, #64]	; 0x40
 8008f42:	e771      	b.n	8008e28 <_dtoa_r+0x100>
 8008f44:	9b02      	ldr	r3, [sp, #8]
 8008f46:	f1c0 0020 	rsb	r0, r0, #32
 8008f4a:	fa03 f000 	lsl.w	r0, r3, r0
 8008f4e:	e7f0      	b.n	8008f32 <_dtoa_r+0x20a>
 8008f50:	2301      	movs	r3, #1
 8008f52:	e7b0      	b.n	8008eb6 <_dtoa_r+0x18e>
 8008f54:	900d      	str	r0, [sp, #52]	; 0x34
 8008f56:	e7af      	b.n	8008eb8 <_dtoa_r+0x190>
 8008f58:	f1ca 0300 	rsb	r3, sl, #0
 8008f5c:	9308      	str	r3, [sp, #32]
 8008f5e:	2300      	movs	r3, #0
 8008f60:	eba9 090a 	sub.w	r9, r9, sl
 8008f64:	930c      	str	r3, [sp, #48]	; 0x30
 8008f66:	e7bc      	b.n	8008ee2 <_dtoa_r+0x1ba>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	dd74      	ble.n	800905c <_dtoa_r+0x334>
 8008f72:	4698      	mov	r8, r3
 8008f74:	9304      	str	r3, [sp, #16]
 8008f76:	2200      	movs	r2, #0
 8008f78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f7a:	6072      	str	r2, [r6, #4]
 8008f7c:	2204      	movs	r2, #4
 8008f7e:	f102 0014 	add.w	r0, r2, #20
 8008f82:	4298      	cmp	r0, r3
 8008f84:	6871      	ldr	r1, [r6, #4]
 8008f86:	d96e      	bls.n	8009066 <_dtoa_r+0x33e>
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f000 ffec 	bl	8009f66 <_Balloc>
 8008f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f90:	6030      	str	r0, [r6, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f1b8 0f0e 	cmp.w	r8, #14
 8008f98:	9306      	str	r3, [sp, #24]
 8008f9a:	f200 80ed 	bhi.w	8009178 <_dtoa_r+0x450>
 8008f9e:	2d00      	cmp	r5, #0
 8008fa0:	f000 80ea 	beq.w	8009178 <_dtoa_r+0x450>
 8008fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fa8:	f1ba 0f00 	cmp.w	sl, #0
 8008fac:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008fb0:	dd77      	ble.n	80090a2 <_dtoa_r+0x37a>
 8008fb2:	4a28      	ldr	r2, [pc, #160]	; (8009054 <_dtoa_r+0x32c>)
 8008fb4:	f00a 030f 	and.w	r3, sl, #15
 8008fb8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008fbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008fc0:	06f0      	lsls	r0, r6, #27
 8008fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008fca:	d568      	bpl.n	800909e <_dtoa_r+0x376>
 8008fcc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008fd0:	4b21      	ldr	r3, [pc, #132]	; (8009058 <_dtoa_r+0x330>)
 8008fd2:	2503      	movs	r5, #3
 8008fd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fd8:	f7f7 fba8 	bl	800072c <__aeabi_ddiv>
 8008fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fe0:	f006 060f 	and.w	r6, r6, #15
 8008fe4:	4f1c      	ldr	r7, [pc, #112]	; (8009058 <_dtoa_r+0x330>)
 8008fe6:	e04f      	b.n	8009088 <_dtoa_r+0x360>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	9309      	str	r3, [sp, #36]	; 0x24
 8008fec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008fee:	4453      	add	r3, sl
 8008ff0:	f103 0801 	add.w	r8, r3, #1
 8008ff4:	9304      	str	r3, [sp, #16]
 8008ff6:	4643      	mov	r3, r8
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	bfb8      	it	lt
 8008ffc:	2301      	movlt	r3, #1
 8008ffe:	e7ba      	b.n	8008f76 <_dtoa_r+0x24e>
 8009000:	2300      	movs	r3, #0
 8009002:	e7b2      	b.n	8008f6a <_dtoa_r+0x242>
 8009004:	2300      	movs	r3, #0
 8009006:	e7f0      	b.n	8008fea <_dtoa_r+0x2c2>
 8009008:	2501      	movs	r5, #1
 800900a:	2300      	movs	r3, #0
 800900c:	9509      	str	r5, [sp, #36]	; 0x24
 800900e:	931e      	str	r3, [sp, #120]	; 0x78
 8009010:	f04f 33ff 	mov.w	r3, #4294967295
 8009014:	2200      	movs	r2, #0
 8009016:	9304      	str	r3, [sp, #16]
 8009018:	4698      	mov	r8, r3
 800901a:	2312      	movs	r3, #18
 800901c:	921f      	str	r2, [sp, #124]	; 0x7c
 800901e:	e7aa      	b.n	8008f76 <_dtoa_r+0x24e>
 8009020:	2301      	movs	r3, #1
 8009022:	9309      	str	r3, [sp, #36]	; 0x24
 8009024:	e7f4      	b.n	8009010 <_dtoa_r+0x2e8>
 8009026:	bf00      	nop
 8009028:	636f4361 	.word	0x636f4361
 800902c:	3fd287a7 	.word	0x3fd287a7
 8009030:	8b60c8b3 	.word	0x8b60c8b3
 8009034:	3fc68a28 	.word	0x3fc68a28
 8009038:	509f79fb 	.word	0x509f79fb
 800903c:	3fd34413 	.word	0x3fd34413
 8009040:	7ff00000 	.word	0x7ff00000
 8009044:	0800ca71 	.word	0x0800ca71
 8009048:	0800ca68 	.word	0x0800ca68
 800904c:	0800c9f1 	.word	0x0800c9f1
 8009050:	3ff80000 	.word	0x3ff80000
 8009054:	0800caa8 	.word	0x0800caa8
 8009058:	0800ca80 	.word	0x0800ca80
 800905c:	2301      	movs	r3, #1
 800905e:	9304      	str	r3, [sp, #16]
 8009060:	4698      	mov	r8, r3
 8009062:	461a      	mov	r2, r3
 8009064:	e7da      	b.n	800901c <_dtoa_r+0x2f4>
 8009066:	3101      	adds	r1, #1
 8009068:	6071      	str	r1, [r6, #4]
 800906a:	0052      	lsls	r2, r2, #1
 800906c:	e787      	b.n	8008f7e <_dtoa_r+0x256>
 800906e:	07f1      	lsls	r1, r6, #31
 8009070:	d508      	bpl.n	8009084 <_dtoa_r+0x35c>
 8009072:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800907a:	f7f7 fa2d 	bl	80004d8 <__aeabi_dmul>
 800907e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009082:	3501      	adds	r5, #1
 8009084:	1076      	asrs	r6, r6, #1
 8009086:	3708      	adds	r7, #8
 8009088:	2e00      	cmp	r6, #0
 800908a:	d1f0      	bne.n	800906e <_dtoa_r+0x346>
 800908c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009094:	f7f7 fb4a 	bl	800072c <__aeabi_ddiv>
 8009098:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800909c:	e01b      	b.n	80090d6 <_dtoa_r+0x3ae>
 800909e:	2502      	movs	r5, #2
 80090a0:	e7a0      	b.n	8008fe4 <_dtoa_r+0x2bc>
 80090a2:	f000 80a4 	beq.w	80091ee <_dtoa_r+0x4c6>
 80090a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80090aa:	f1ca 0600 	rsb	r6, sl, #0
 80090ae:	4ba0      	ldr	r3, [pc, #640]	; (8009330 <_dtoa_r+0x608>)
 80090b0:	f006 020f 	and.w	r2, r6, #15
 80090b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090bc:	f7f7 fa0c 	bl	80004d8 <__aeabi_dmul>
 80090c0:	2502      	movs	r5, #2
 80090c2:	2300      	movs	r3, #0
 80090c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090c8:	4f9a      	ldr	r7, [pc, #616]	; (8009334 <_dtoa_r+0x60c>)
 80090ca:	1136      	asrs	r6, r6, #4
 80090cc:	2e00      	cmp	r6, #0
 80090ce:	f040 8083 	bne.w	80091d8 <_dtoa_r+0x4b0>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1e0      	bne.n	8009098 <_dtoa_r+0x370>
 80090d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 808a 	beq.w	80091f2 <_dtoa_r+0x4ca>
 80090de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80090e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80090ea:	2200      	movs	r2, #0
 80090ec:	4b92      	ldr	r3, [pc, #584]	; (8009338 <_dtoa_r+0x610>)
 80090ee:	f7f7 fc65 	bl	80009bc <__aeabi_dcmplt>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d07d      	beq.n	80091f2 <_dtoa_r+0x4ca>
 80090f6:	f1b8 0f00 	cmp.w	r8, #0
 80090fa:	d07a      	beq.n	80091f2 <_dtoa_r+0x4ca>
 80090fc:	9b04      	ldr	r3, [sp, #16]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	dd36      	ble.n	8009170 <_dtoa_r+0x448>
 8009102:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009106:	2200      	movs	r2, #0
 8009108:	4b8c      	ldr	r3, [pc, #560]	; (800933c <_dtoa_r+0x614>)
 800910a:	f7f7 f9e5 	bl	80004d8 <__aeabi_dmul>
 800910e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009112:	9e04      	ldr	r6, [sp, #16]
 8009114:	f10a 37ff 	add.w	r7, sl, #4294967295
 8009118:	3501      	adds	r5, #1
 800911a:	4628      	mov	r0, r5
 800911c:	f7f7 f972 	bl	8000404 <__aeabi_i2d>
 8009120:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009124:	f7f7 f9d8 	bl	80004d8 <__aeabi_dmul>
 8009128:	2200      	movs	r2, #0
 800912a:	4b85      	ldr	r3, [pc, #532]	; (8009340 <_dtoa_r+0x618>)
 800912c:	f7f7 f81e 	bl	800016c <__adddf3>
 8009130:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8009134:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009138:	950b      	str	r5, [sp, #44]	; 0x2c
 800913a:	2e00      	cmp	r6, #0
 800913c:	d15c      	bne.n	80091f8 <_dtoa_r+0x4d0>
 800913e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009142:	2200      	movs	r2, #0
 8009144:	4b7f      	ldr	r3, [pc, #508]	; (8009344 <_dtoa_r+0x61c>)
 8009146:	f7f7 f80f 	bl	8000168 <__aeabi_dsub>
 800914a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800914c:	462b      	mov	r3, r5
 800914e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009152:	f7f7 fc51 	bl	80009f8 <__aeabi_dcmpgt>
 8009156:	2800      	cmp	r0, #0
 8009158:	f040 8281 	bne.w	800965e <_dtoa_r+0x936>
 800915c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009162:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009166:	f7f7 fc29 	bl	80009bc <__aeabi_dcmplt>
 800916a:	2800      	cmp	r0, #0
 800916c:	f040 8275 	bne.w	800965a <_dtoa_r+0x932>
 8009170:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009174:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009178:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800917a:	2b00      	cmp	r3, #0
 800917c:	f2c0 814b 	blt.w	8009416 <_dtoa_r+0x6ee>
 8009180:	f1ba 0f0e 	cmp.w	sl, #14
 8009184:	f300 8147 	bgt.w	8009416 <_dtoa_r+0x6ee>
 8009188:	4b69      	ldr	r3, [pc, #420]	; (8009330 <_dtoa_r+0x608>)
 800918a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800918e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009192:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009196:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009198:	2b00      	cmp	r3, #0
 800919a:	f280 80d7 	bge.w	800934c <_dtoa_r+0x624>
 800919e:	f1b8 0f00 	cmp.w	r8, #0
 80091a2:	f300 80d3 	bgt.w	800934c <_dtoa_r+0x624>
 80091a6:	f040 8257 	bne.w	8009658 <_dtoa_r+0x930>
 80091aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091ae:	2200      	movs	r2, #0
 80091b0:	4b64      	ldr	r3, [pc, #400]	; (8009344 <_dtoa_r+0x61c>)
 80091b2:	f7f7 f991 	bl	80004d8 <__aeabi_dmul>
 80091b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091ba:	f7f7 fc13 	bl	80009e4 <__aeabi_dcmpge>
 80091be:	4646      	mov	r6, r8
 80091c0:	4647      	mov	r7, r8
 80091c2:	2800      	cmp	r0, #0
 80091c4:	f040 822d 	bne.w	8009622 <_dtoa_r+0x8fa>
 80091c8:	9b06      	ldr	r3, [sp, #24]
 80091ca:	9a06      	ldr	r2, [sp, #24]
 80091cc:	1c5d      	adds	r5, r3, #1
 80091ce:	2331      	movs	r3, #49	; 0x31
 80091d0:	f10a 0a01 	add.w	sl, sl, #1
 80091d4:	7013      	strb	r3, [r2, #0]
 80091d6:	e228      	b.n	800962a <_dtoa_r+0x902>
 80091d8:	07f2      	lsls	r2, r6, #31
 80091da:	d505      	bpl.n	80091e8 <_dtoa_r+0x4c0>
 80091dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091e0:	f7f7 f97a 	bl	80004d8 <__aeabi_dmul>
 80091e4:	2301      	movs	r3, #1
 80091e6:	3501      	adds	r5, #1
 80091e8:	1076      	asrs	r6, r6, #1
 80091ea:	3708      	adds	r7, #8
 80091ec:	e76e      	b.n	80090cc <_dtoa_r+0x3a4>
 80091ee:	2502      	movs	r5, #2
 80091f0:	e771      	b.n	80090d6 <_dtoa_r+0x3ae>
 80091f2:	4657      	mov	r7, sl
 80091f4:	4646      	mov	r6, r8
 80091f6:	e790      	b.n	800911a <_dtoa_r+0x3f2>
 80091f8:	4b4d      	ldr	r3, [pc, #308]	; (8009330 <_dtoa_r+0x608>)
 80091fa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80091fe:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009204:	2b00      	cmp	r3, #0
 8009206:	d048      	beq.n	800929a <_dtoa_r+0x572>
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	2000      	movs	r0, #0
 800920e:	494e      	ldr	r1, [pc, #312]	; (8009348 <_dtoa_r+0x620>)
 8009210:	f7f7 fa8c 	bl	800072c <__aeabi_ddiv>
 8009214:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009218:	f7f6 ffa6 	bl	8000168 <__aeabi_dsub>
 800921c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009220:	9d06      	ldr	r5, [sp, #24]
 8009222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009226:	f7f7 fc07 	bl	8000a38 <__aeabi_d2iz>
 800922a:	9011      	str	r0, [sp, #68]	; 0x44
 800922c:	f7f7 f8ea 	bl	8000404 <__aeabi_i2d>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009238:	f7f6 ff96 	bl	8000168 <__aeabi_dsub>
 800923c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800923e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009242:	3330      	adds	r3, #48	; 0x30
 8009244:	f805 3b01 	strb.w	r3, [r5], #1
 8009248:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800924c:	f7f7 fbb6 	bl	80009bc <__aeabi_dcmplt>
 8009250:	2800      	cmp	r0, #0
 8009252:	d163      	bne.n	800931c <_dtoa_r+0x5f4>
 8009254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009258:	2000      	movs	r0, #0
 800925a:	4937      	ldr	r1, [pc, #220]	; (8009338 <_dtoa_r+0x610>)
 800925c:	f7f6 ff84 	bl	8000168 <__aeabi_dsub>
 8009260:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009264:	f7f7 fbaa 	bl	80009bc <__aeabi_dcmplt>
 8009268:	2800      	cmp	r0, #0
 800926a:	f040 80b5 	bne.w	80093d8 <_dtoa_r+0x6b0>
 800926e:	9b06      	ldr	r3, [sp, #24]
 8009270:	1aeb      	subs	r3, r5, r3
 8009272:	429e      	cmp	r6, r3
 8009274:	f77f af7c 	ble.w	8009170 <_dtoa_r+0x448>
 8009278:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800927c:	2200      	movs	r2, #0
 800927e:	4b2f      	ldr	r3, [pc, #188]	; (800933c <_dtoa_r+0x614>)
 8009280:	f7f7 f92a 	bl	80004d8 <__aeabi_dmul>
 8009284:	2200      	movs	r2, #0
 8009286:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800928a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800928e:	4b2b      	ldr	r3, [pc, #172]	; (800933c <_dtoa_r+0x614>)
 8009290:	f7f7 f922 	bl	80004d8 <__aeabi_dmul>
 8009294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009298:	e7c3      	b.n	8009222 <_dtoa_r+0x4fa>
 800929a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800929e:	f7f7 f91b 	bl	80004d8 <__aeabi_dmul>
 80092a2:	9b06      	ldr	r3, [sp, #24]
 80092a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80092a8:	199d      	adds	r5, r3, r6
 80092aa:	461e      	mov	r6, r3
 80092ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092b0:	f7f7 fbc2 	bl	8000a38 <__aeabi_d2iz>
 80092b4:	9011      	str	r0, [sp, #68]	; 0x44
 80092b6:	f7f7 f8a5 	bl	8000404 <__aeabi_i2d>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092c2:	f7f6 ff51 	bl	8000168 <__aeabi_dsub>
 80092c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092cc:	3330      	adds	r3, #48	; 0x30
 80092ce:	f806 3b01 	strb.w	r3, [r6], #1
 80092d2:	42ae      	cmp	r6, r5
 80092d4:	f04f 0200 	mov.w	r2, #0
 80092d8:	d124      	bne.n	8009324 <_dtoa_r+0x5fc>
 80092da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092de:	4b1a      	ldr	r3, [pc, #104]	; (8009348 <_dtoa_r+0x620>)
 80092e0:	f7f6 ff44 	bl	800016c <__adddf3>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092ec:	f7f7 fb84 	bl	80009f8 <__aeabi_dcmpgt>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d171      	bne.n	80093d8 <_dtoa_r+0x6b0>
 80092f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80092f8:	2000      	movs	r0, #0
 80092fa:	4913      	ldr	r1, [pc, #76]	; (8009348 <_dtoa_r+0x620>)
 80092fc:	f7f6 ff34 	bl	8000168 <__aeabi_dsub>
 8009300:	4602      	mov	r2, r0
 8009302:	460b      	mov	r3, r1
 8009304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009308:	f7f7 fb58 	bl	80009bc <__aeabi_dcmplt>
 800930c:	2800      	cmp	r0, #0
 800930e:	f43f af2f 	beq.w	8009170 <_dtoa_r+0x448>
 8009312:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009316:	1e6a      	subs	r2, r5, #1
 8009318:	2b30      	cmp	r3, #48	; 0x30
 800931a:	d001      	beq.n	8009320 <_dtoa_r+0x5f8>
 800931c:	46ba      	mov	sl, r7
 800931e:	e04a      	b.n	80093b6 <_dtoa_r+0x68e>
 8009320:	4615      	mov	r5, r2
 8009322:	e7f6      	b.n	8009312 <_dtoa_r+0x5ea>
 8009324:	4b05      	ldr	r3, [pc, #20]	; (800933c <_dtoa_r+0x614>)
 8009326:	f7f7 f8d7 	bl	80004d8 <__aeabi_dmul>
 800932a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800932e:	e7bd      	b.n	80092ac <_dtoa_r+0x584>
 8009330:	0800caa8 	.word	0x0800caa8
 8009334:	0800ca80 	.word	0x0800ca80
 8009338:	3ff00000 	.word	0x3ff00000
 800933c:	40240000 	.word	0x40240000
 8009340:	401c0000 	.word	0x401c0000
 8009344:	40140000 	.word	0x40140000
 8009348:	3fe00000 	.word	0x3fe00000
 800934c:	9d06      	ldr	r5, [sp, #24]
 800934e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009356:	4630      	mov	r0, r6
 8009358:	4639      	mov	r1, r7
 800935a:	f7f7 f9e7 	bl	800072c <__aeabi_ddiv>
 800935e:	f7f7 fb6b 	bl	8000a38 <__aeabi_d2iz>
 8009362:	4681      	mov	r9, r0
 8009364:	f7f7 f84e 	bl	8000404 <__aeabi_i2d>
 8009368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800936c:	f7f7 f8b4 	bl	80004d8 <__aeabi_dmul>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4630      	mov	r0, r6
 8009376:	4639      	mov	r1, r7
 8009378:	f7f6 fef6 	bl	8000168 <__aeabi_dsub>
 800937c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009380:	f805 6b01 	strb.w	r6, [r5], #1
 8009384:	9e06      	ldr	r6, [sp, #24]
 8009386:	4602      	mov	r2, r0
 8009388:	1bae      	subs	r6, r5, r6
 800938a:	45b0      	cmp	r8, r6
 800938c:	460b      	mov	r3, r1
 800938e:	d135      	bne.n	80093fc <_dtoa_r+0x6d4>
 8009390:	f7f6 feec 	bl	800016c <__adddf3>
 8009394:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009398:	4606      	mov	r6, r0
 800939a:	460f      	mov	r7, r1
 800939c:	f7f7 fb2c 	bl	80009f8 <__aeabi_dcmpgt>
 80093a0:	b9c8      	cbnz	r0, 80093d6 <_dtoa_r+0x6ae>
 80093a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093a6:	4630      	mov	r0, r6
 80093a8:	4639      	mov	r1, r7
 80093aa:	f7f7 fafd 	bl	80009a8 <__aeabi_dcmpeq>
 80093ae:	b110      	cbz	r0, 80093b6 <_dtoa_r+0x68e>
 80093b0:	f019 0f01 	tst.w	r9, #1
 80093b4:	d10f      	bne.n	80093d6 <_dtoa_r+0x6ae>
 80093b6:	4659      	mov	r1, fp
 80093b8:	4620      	mov	r0, r4
 80093ba:	f000 fe08 	bl	8009fce <_Bfree>
 80093be:	2300      	movs	r3, #0
 80093c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093c2:	702b      	strb	r3, [r5, #0]
 80093c4:	f10a 0301 	add.w	r3, sl, #1
 80093c8:	6013      	str	r3, [r2, #0]
 80093ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f43f acf3 	beq.w	8008db8 <_dtoa_r+0x90>
 80093d2:	601d      	str	r5, [r3, #0]
 80093d4:	e4f0      	b.n	8008db8 <_dtoa_r+0x90>
 80093d6:	4657      	mov	r7, sl
 80093d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80093dc:	1e6b      	subs	r3, r5, #1
 80093de:	2a39      	cmp	r2, #57	; 0x39
 80093e0:	d106      	bne.n	80093f0 <_dtoa_r+0x6c8>
 80093e2:	9a06      	ldr	r2, [sp, #24]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d107      	bne.n	80093f8 <_dtoa_r+0x6d0>
 80093e8:	2330      	movs	r3, #48	; 0x30
 80093ea:	7013      	strb	r3, [r2, #0]
 80093ec:	4613      	mov	r3, r2
 80093ee:	3701      	adds	r7, #1
 80093f0:	781a      	ldrb	r2, [r3, #0]
 80093f2:	3201      	adds	r2, #1
 80093f4:	701a      	strb	r2, [r3, #0]
 80093f6:	e791      	b.n	800931c <_dtoa_r+0x5f4>
 80093f8:	461d      	mov	r5, r3
 80093fa:	e7ed      	b.n	80093d8 <_dtoa_r+0x6b0>
 80093fc:	2200      	movs	r2, #0
 80093fe:	4b99      	ldr	r3, [pc, #612]	; (8009664 <_dtoa_r+0x93c>)
 8009400:	f7f7 f86a 	bl	80004d8 <__aeabi_dmul>
 8009404:	2200      	movs	r2, #0
 8009406:	2300      	movs	r3, #0
 8009408:	4606      	mov	r6, r0
 800940a:	460f      	mov	r7, r1
 800940c:	f7f7 facc 	bl	80009a8 <__aeabi_dcmpeq>
 8009410:	2800      	cmp	r0, #0
 8009412:	d09e      	beq.n	8009352 <_dtoa_r+0x62a>
 8009414:	e7cf      	b.n	80093b6 <_dtoa_r+0x68e>
 8009416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009418:	2a00      	cmp	r2, #0
 800941a:	f000 8088 	beq.w	800952e <_dtoa_r+0x806>
 800941e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009420:	2a01      	cmp	r2, #1
 8009422:	dc6d      	bgt.n	8009500 <_dtoa_r+0x7d8>
 8009424:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009426:	2a00      	cmp	r2, #0
 8009428:	d066      	beq.n	80094f8 <_dtoa_r+0x7d0>
 800942a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800942e:	464d      	mov	r5, r9
 8009430:	9e08      	ldr	r6, [sp, #32]
 8009432:	9a07      	ldr	r2, [sp, #28]
 8009434:	2101      	movs	r1, #1
 8009436:	441a      	add	r2, r3
 8009438:	4620      	mov	r0, r4
 800943a:	4499      	add	r9, r3
 800943c:	9207      	str	r2, [sp, #28]
 800943e:	f000 fea4 	bl	800a18a <__i2b>
 8009442:	4607      	mov	r7, r0
 8009444:	2d00      	cmp	r5, #0
 8009446:	dd0b      	ble.n	8009460 <_dtoa_r+0x738>
 8009448:	9b07      	ldr	r3, [sp, #28]
 800944a:	2b00      	cmp	r3, #0
 800944c:	dd08      	ble.n	8009460 <_dtoa_r+0x738>
 800944e:	42ab      	cmp	r3, r5
 8009450:	bfa8      	it	ge
 8009452:	462b      	movge	r3, r5
 8009454:	9a07      	ldr	r2, [sp, #28]
 8009456:	eba9 0903 	sub.w	r9, r9, r3
 800945a:	1aed      	subs	r5, r5, r3
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	9307      	str	r3, [sp, #28]
 8009460:	9b08      	ldr	r3, [sp, #32]
 8009462:	b1eb      	cbz	r3, 80094a0 <_dtoa_r+0x778>
 8009464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009466:	2b00      	cmp	r3, #0
 8009468:	d065      	beq.n	8009536 <_dtoa_r+0x80e>
 800946a:	b18e      	cbz	r6, 8009490 <_dtoa_r+0x768>
 800946c:	4639      	mov	r1, r7
 800946e:	4632      	mov	r2, r6
 8009470:	4620      	mov	r0, r4
 8009472:	f000 ff29 	bl	800a2c8 <__pow5mult>
 8009476:	465a      	mov	r2, fp
 8009478:	4601      	mov	r1, r0
 800947a:	4607      	mov	r7, r0
 800947c:	4620      	mov	r0, r4
 800947e:	f000 fe8d 	bl	800a19c <__multiply>
 8009482:	4659      	mov	r1, fp
 8009484:	900a      	str	r0, [sp, #40]	; 0x28
 8009486:	4620      	mov	r0, r4
 8009488:	f000 fda1 	bl	8009fce <_Bfree>
 800948c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800948e:	469b      	mov	fp, r3
 8009490:	9b08      	ldr	r3, [sp, #32]
 8009492:	1b9a      	subs	r2, r3, r6
 8009494:	d004      	beq.n	80094a0 <_dtoa_r+0x778>
 8009496:	4659      	mov	r1, fp
 8009498:	4620      	mov	r0, r4
 800949a:	f000 ff15 	bl	800a2c8 <__pow5mult>
 800949e:	4683      	mov	fp, r0
 80094a0:	2101      	movs	r1, #1
 80094a2:	4620      	mov	r0, r4
 80094a4:	f000 fe71 	bl	800a18a <__i2b>
 80094a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094aa:	4606      	mov	r6, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 81c6 	beq.w	800983e <_dtoa_r+0xb16>
 80094b2:	461a      	mov	r2, r3
 80094b4:	4601      	mov	r1, r0
 80094b6:	4620      	mov	r0, r4
 80094b8:	f000 ff06 	bl	800a2c8 <__pow5mult>
 80094bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80094be:	4606      	mov	r6, r0
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	dc3e      	bgt.n	8009542 <_dtoa_r+0x81a>
 80094c4:	9b02      	ldr	r3, [sp, #8]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d137      	bne.n	800953a <_dtoa_r+0x812>
 80094ca:	9b03      	ldr	r3, [sp, #12]
 80094cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d134      	bne.n	800953e <_dtoa_r+0x816>
 80094d4:	9b03      	ldr	r3, [sp, #12]
 80094d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094da:	0d1b      	lsrs	r3, r3, #20
 80094dc:	051b      	lsls	r3, r3, #20
 80094de:	b12b      	cbz	r3, 80094ec <_dtoa_r+0x7c4>
 80094e0:	9b07      	ldr	r3, [sp, #28]
 80094e2:	f109 0901 	add.w	r9, r9, #1
 80094e6:	3301      	adds	r3, #1
 80094e8:	9307      	str	r3, [sp, #28]
 80094ea:	2301      	movs	r3, #1
 80094ec:	9308      	str	r3, [sp, #32]
 80094ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d128      	bne.n	8009546 <_dtoa_r+0x81e>
 80094f4:	2001      	movs	r0, #1
 80094f6:	e02e      	b.n	8009556 <_dtoa_r+0x82e>
 80094f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80094fe:	e796      	b.n	800942e <_dtoa_r+0x706>
 8009500:	9b08      	ldr	r3, [sp, #32]
 8009502:	f108 36ff 	add.w	r6, r8, #4294967295
 8009506:	42b3      	cmp	r3, r6
 8009508:	bfb7      	itett	lt
 800950a:	9b08      	ldrlt	r3, [sp, #32]
 800950c:	1b9e      	subge	r6, r3, r6
 800950e:	1af2      	sublt	r2, r6, r3
 8009510:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8009512:	bfbf      	itttt	lt
 8009514:	9608      	strlt	r6, [sp, #32]
 8009516:	189b      	addlt	r3, r3, r2
 8009518:	930c      	strlt	r3, [sp, #48]	; 0x30
 800951a:	2600      	movlt	r6, #0
 800951c:	f1b8 0f00 	cmp.w	r8, #0
 8009520:	bfb9      	ittee	lt
 8009522:	eba9 0508 	sublt.w	r5, r9, r8
 8009526:	2300      	movlt	r3, #0
 8009528:	464d      	movge	r5, r9
 800952a:	4643      	movge	r3, r8
 800952c:	e781      	b.n	8009432 <_dtoa_r+0x70a>
 800952e:	9e08      	ldr	r6, [sp, #32]
 8009530:	464d      	mov	r5, r9
 8009532:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009534:	e786      	b.n	8009444 <_dtoa_r+0x71c>
 8009536:	9a08      	ldr	r2, [sp, #32]
 8009538:	e7ad      	b.n	8009496 <_dtoa_r+0x76e>
 800953a:	2300      	movs	r3, #0
 800953c:	e7d6      	b.n	80094ec <_dtoa_r+0x7c4>
 800953e:	9b02      	ldr	r3, [sp, #8]
 8009540:	e7d4      	b.n	80094ec <_dtoa_r+0x7c4>
 8009542:	2300      	movs	r3, #0
 8009544:	9308      	str	r3, [sp, #32]
 8009546:	6933      	ldr	r3, [r6, #16]
 8009548:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800954c:	6918      	ldr	r0, [r3, #16]
 800954e:	f000 fdce 	bl	800a0ee <__hi0bits>
 8009552:	f1c0 0020 	rsb	r0, r0, #32
 8009556:	9b07      	ldr	r3, [sp, #28]
 8009558:	4418      	add	r0, r3
 800955a:	f010 001f 	ands.w	r0, r0, #31
 800955e:	d047      	beq.n	80095f0 <_dtoa_r+0x8c8>
 8009560:	f1c0 0320 	rsb	r3, r0, #32
 8009564:	2b04      	cmp	r3, #4
 8009566:	dd3b      	ble.n	80095e0 <_dtoa_r+0x8b8>
 8009568:	9b07      	ldr	r3, [sp, #28]
 800956a:	f1c0 001c 	rsb	r0, r0, #28
 800956e:	4481      	add	r9, r0
 8009570:	4405      	add	r5, r0
 8009572:	4403      	add	r3, r0
 8009574:	9307      	str	r3, [sp, #28]
 8009576:	f1b9 0f00 	cmp.w	r9, #0
 800957a:	dd05      	ble.n	8009588 <_dtoa_r+0x860>
 800957c:	4659      	mov	r1, fp
 800957e:	464a      	mov	r2, r9
 8009580:	4620      	mov	r0, r4
 8009582:	f000 feef 	bl	800a364 <__lshift>
 8009586:	4683      	mov	fp, r0
 8009588:	9b07      	ldr	r3, [sp, #28]
 800958a:	2b00      	cmp	r3, #0
 800958c:	dd05      	ble.n	800959a <_dtoa_r+0x872>
 800958e:	4631      	mov	r1, r6
 8009590:	461a      	mov	r2, r3
 8009592:	4620      	mov	r0, r4
 8009594:	f000 fee6 	bl	800a364 <__lshift>
 8009598:	4606      	mov	r6, r0
 800959a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800959c:	b353      	cbz	r3, 80095f4 <_dtoa_r+0x8cc>
 800959e:	4631      	mov	r1, r6
 80095a0:	4658      	mov	r0, fp
 80095a2:	f000 ff33 	bl	800a40c <__mcmp>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	da24      	bge.n	80095f4 <_dtoa_r+0x8cc>
 80095aa:	2300      	movs	r3, #0
 80095ac:	4659      	mov	r1, fp
 80095ae:	220a      	movs	r2, #10
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 fd23 	bl	8009ffc <__multadd>
 80095b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095bc:	4683      	mov	fp, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f000 8144 	beq.w	800984c <_dtoa_r+0xb24>
 80095c4:	2300      	movs	r3, #0
 80095c6:	4639      	mov	r1, r7
 80095c8:	220a      	movs	r2, #10
 80095ca:	4620      	mov	r0, r4
 80095cc:	f000 fd16 	bl	8009ffc <__multadd>
 80095d0:	9b04      	ldr	r3, [sp, #16]
 80095d2:	4607      	mov	r7, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	dc4d      	bgt.n	8009674 <_dtoa_r+0x94c>
 80095d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80095da:	2b02      	cmp	r3, #2
 80095dc:	dd4a      	ble.n	8009674 <_dtoa_r+0x94c>
 80095de:	e011      	b.n	8009604 <_dtoa_r+0x8dc>
 80095e0:	d0c9      	beq.n	8009576 <_dtoa_r+0x84e>
 80095e2:	9a07      	ldr	r2, [sp, #28]
 80095e4:	331c      	adds	r3, #28
 80095e6:	441a      	add	r2, r3
 80095e8:	4499      	add	r9, r3
 80095ea:	441d      	add	r5, r3
 80095ec:	4613      	mov	r3, r2
 80095ee:	e7c1      	b.n	8009574 <_dtoa_r+0x84c>
 80095f0:	4603      	mov	r3, r0
 80095f2:	e7f6      	b.n	80095e2 <_dtoa_r+0x8ba>
 80095f4:	f1b8 0f00 	cmp.w	r8, #0
 80095f8:	dc36      	bgt.n	8009668 <_dtoa_r+0x940>
 80095fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	dd33      	ble.n	8009668 <_dtoa_r+0x940>
 8009600:	f8cd 8010 	str.w	r8, [sp, #16]
 8009604:	9b04      	ldr	r3, [sp, #16]
 8009606:	b963      	cbnz	r3, 8009622 <_dtoa_r+0x8fa>
 8009608:	4631      	mov	r1, r6
 800960a:	2205      	movs	r2, #5
 800960c:	4620      	mov	r0, r4
 800960e:	f000 fcf5 	bl	8009ffc <__multadd>
 8009612:	4601      	mov	r1, r0
 8009614:	4606      	mov	r6, r0
 8009616:	4658      	mov	r0, fp
 8009618:	f000 fef8 	bl	800a40c <__mcmp>
 800961c:	2800      	cmp	r0, #0
 800961e:	f73f add3 	bgt.w	80091c8 <_dtoa_r+0x4a0>
 8009622:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009624:	9d06      	ldr	r5, [sp, #24]
 8009626:	ea6f 0a03 	mvn.w	sl, r3
 800962a:	f04f 0900 	mov.w	r9, #0
 800962e:	4631      	mov	r1, r6
 8009630:	4620      	mov	r0, r4
 8009632:	f000 fccc 	bl	8009fce <_Bfree>
 8009636:	2f00      	cmp	r7, #0
 8009638:	f43f aebd 	beq.w	80093b6 <_dtoa_r+0x68e>
 800963c:	f1b9 0f00 	cmp.w	r9, #0
 8009640:	d005      	beq.n	800964e <_dtoa_r+0x926>
 8009642:	45b9      	cmp	r9, r7
 8009644:	d003      	beq.n	800964e <_dtoa_r+0x926>
 8009646:	4649      	mov	r1, r9
 8009648:	4620      	mov	r0, r4
 800964a:	f000 fcc0 	bl	8009fce <_Bfree>
 800964e:	4639      	mov	r1, r7
 8009650:	4620      	mov	r0, r4
 8009652:	f000 fcbc 	bl	8009fce <_Bfree>
 8009656:	e6ae      	b.n	80093b6 <_dtoa_r+0x68e>
 8009658:	2600      	movs	r6, #0
 800965a:	4637      	mov	r7, r6
 800965c:	e7e1      	b.n	8009622 <_dtoa_r+0x8fa>
 800965e:	46ba      	mov	sl, r7
 8009660:	4637      	mov	r7, r6
 8009662:	e5b1      	b.n	80091c8 <_dtoa_r+0x4a0>
 8009664:	40240000 	.word	0x40240000
 8009668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800966a:	f8cd 8010 	str.w	r8, [sp, #16]
 800966e:	2b00      	cmp	r3, #0
 8009670:	f000 80f3 	beq.w	800985a <_dtoa_r+0xb32>
 8009674:	2d00      	cmp	r5, #0
 8009676:	dd05      	ble.n	8009684 <_dtoa_r+0x95c>
 8009678:	4639      	mov	r1, r7
 800967a:	462a      	mov	r2, r5
 800967c:	4620      	mov	r0, r4
 800967e:	f000 fe71 	bl	800a364 <__lshift>
 8009682:	4607      	mov	r7, r0
 8009684:	9b08      	ldr	r3, [sp, #32]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d04c      	beq.n	8009724 <_dtoa_r+0x9fc>
 800968a:	6879      	ldr	r1, [r7, #4]
 800968c:	4620      	mov	r0, r4
 800968e:	f000 fc6a 	bl	8009f66 <_Balloc>
 8009692:	4605      	mov	r5, r0
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	f107 010c 	add.w	r1, r7, #12
 800969a:	3202      	adds	r2, #2
 800969c:	0092      	lsls	r2, r2, #2
 800969e:	300c      	adds	r0, #12
 80096a0:	f000 fc56 	bl	8009f50 <memcpy>
 80096a4:	2201      	movs	r2, #1
 80096a6:	4629      	mov	r1, r5
 80096a8:	4620      	mov	r0, r4
 80096aa:	f000 fe5b 	bl	800a364 <__lshift>
 80096ae:	46b9      	mov	r9, r7
 80096b0:	4607      	mov	r7, r0
 80096b2:	9b06      	ldr	r3, [sp, #24]
 80096b4:	9307      	str	r3, [sp, #28]
 80096b6:	9b02      	ldr	r3, [sp, #8]
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	9308      	str	r3, [sp, #32]
 80096be:	4631      	mov	r1, r6
 80096c0:	4658      	mov	r0, fp
 80096c2:	f7ff faa3 	bl	8008c0c <quorem>
 80096c6:	4649      	mov	r1, r9
 80096c8:	4605      	mov	r5, r0
 80096ca:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80096ce:	4658      	mov	r0, fp
 80096d0:	f000 fe9c 	bl	800a40c <__mcmp>
 80096d4:	463a      	mov	r2, r7
 80096d6:	9002      	str	r0, [sp, #8]
 80096d8:	4631      	mov	r1, r6
 80096da:	4620      	mov	r0, r4
 80096dc:	f000 feb0 	bl	800a440 <__mdiff>
 80096e0:	68c3      	ldr	r3, [r0, #12]
 80096e2:	4602      	mov	r2, r0
 80096e4:	bb03      	cbnz	r3, 8009728 <_dtoa_r+0xa00>
 80096e6:	4601      	mov	r1, r0
 80096e8:	9009      	str	r0, [sp, #36]	; 0x24
 80096ea:	4658      	mov	r0, fp
 80096ec:	f000 fe8e 	bl	800a40c <__mcmp>
 80096f0:	4603      	mov	r3, r0
 80096f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096f4:	4611      	mov	r1, r2
 80096f6:	4620      	mov	r0, r4
 80096f8:	9309      	str	r3, [sp, #36]	; 0x24
 80096fa:	f000 fc68 	bl	8009fce <_Bfree>
 80096fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009700:	b9a3      	cbnz	r3, 800972c <_dtoa_r+0xa04>
 8009702:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009704:	b992      	cbnz	r2, 800972c <_dtoa_r+0xa04>
 8009706:	9a08      	ldr	r2, [sp, #32]
 8009708:	b982      	cbnz	r2, 800972c <_dtoa_r+0xa04>
 800970a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800970e:	d029      	beq.n	8009764 <_dtoa_r+0xa3c>
 8009710:	9b02      	ldr	r3, [sp, #8]
 8009712:	2b00      	cmp	r3, #0
 8009714:	dd01      	ble.n	800971a <_dtoa_r+0x9f2>
 8009716:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800971a:	9b07      	ldr	r3, [sp, #28]
 800971c:	1c5d      	adds	r5, r3, #1
 800971e:	f883 8000 	strb.w	r8, [r3]
 8009722:	e784      	b.n	800962e <_dtoa_r+0x906>
 8009724:	4638      	mov	r0, r7
 8009726:	e7c2      	b.n	80096ae <_dtoa_r+0x986>
 8009728:	2301      	movs	r3, #1
 800972a:	e7e3      	b.n	80096f4 <_dtoa_r+0x9cc>
 800972c:	9a02      	ldr	r2, [sp, #8]
 800972e:	2a00      	cmp	r2, #0
 8009730:	db04      	blt.n	800973c <_dtoa_r+0xa14>
 8009732:	d123      	bne.n	800977c <_dtoa_r+0xa54>
 8009734:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009736:	bb0a      	cbnz	r2, 800977c <_dtoa_r+0xa54>
 8009738:	9a08      	ldr	r2, [sp, #32]
 800973a:	b9fa      	cbnz	r2, 800977c <_dtoa_r+0xa54>
 800973c:	2b00      	cmp	r3, #0
 800973e:	ddec      	ble.n	800971a <_dtoa_r+0x9f2>
 8009740:	4659      	mov	r1, fp
 8009742:	2201      	movs	r2, #1
 8009744:	4620      	mov	r0, r4
 8009746:	f000 fe0d 	bl	800a364 <__lshift>
 800974a:	4631      	mov	r1, r6
 800974c:	4683      	mov	fp, r0
 800974e:	f000 fe5d 	bl	800a40c <__mcmp>
 8009752:	2800      	cmp	r0, #0
 8009754:	dc03      	bgt.n	800975e <_dtoa_r+0xa36>
 8009756:	d1e0      	bne.n	800971a <_dtoa_r+0x9f2>
 8009758:	f018 0f01 	tst.w	r8, #1
 800975c:	d0dd      	beq.n	800971a <_dtoa_r+0x9f2>
 800975e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009762:	d1d8      	bne.n	8009716 <_dtoa_r+0x9ee>
 8009764:	9b07      	ldr	r3, [sp, #28]
 8009766:	9a07      	ldr	r2, [sp, #28]
 8009768:	1c5d      	adds	r5, r3, #1
 800976a:	2339      	movs	r3, #57	; 0x39
 800976c:	7013      	strb	r3, [r2, #0]
 800976e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009772:	1e6a      	subs	r2, r5, #1
 8009774:	2b39      	cmp	r3, #57	; 0x39
 8009776:	d04d      	beq.n	8009814 <_dtoa_r+0xaec>
 8009778:	3301      	adds	r3, #1
 800977a:	e052      	b.n	8009822 <_dtoa_r+0xafa>
 800977c:	9a07      	ldr	r2, [sp, #28]
 800977e:	2b00      	cmp	r3, #0
 8009780:	f102 0501 	add.w	r5, r2, #1
 8009784:	dd06      	ble.n	8009794 <_dtoa_r+0xa6c>
 8009786:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800978a:	d0eb      	beq.n	8009764 <_dtoa_r+0xa3c>
 800978c:	f108 0801 	add.w	r8, r8, #1
 8009790:	9b07      	ldr	r3, [sp, #28]
 8009792:	e7c4      	b.n	800971e <_dtoa_r+0x9f6>
 8009794:	9b06      	ldr	r3, [sp, #24]
 8009796:	9a04      	ldr	r2, [sp, #16]
 8009798:	1aeb      	subs	r3, r5, r3
 800979a:	4293      	cmp	r3, r2
 800979c:	f805 8c01 	strb.w	r8, [r5, #-1]
 80097a0:	d021      	beq.n	80097e6 <_dtoa_r+0xabe>
 80097a2:	4659      	mov	r1, fp
 80097a4:	2300      	movs	r3, #0
 80097a6:	220a      	movs	r2, #10
 80097a8:	4620      	mov	r0, r4
 80097aa:	f000 fc27 	bl	8009ffc <__multadd>
 80097ae:	45b9      	cmp	r9, r7
 80097b0:	4683      	mov	fp, r0
 80097b2:	f04f 0300 	mov.w	r3, #0
 80097b6:	f04f 020a 	mov.w	r2, #10
 80097ba:	4649      	mov	r1, r9
 80097bc:	4620      	mov	r0, r4
 80097be:	d105      	bne.n	80097cc <_dtoa_r+0xaa4>
 80097c0:	f000 fc1c 	bl	8009ffc <__multadd>
 80097c4:	4681      	mov	r9, r0
 80097c6:	4607      	mov	r7, r0
 80097c8:	9507      	str	r5, [sp, #28]
 80097ca:	e778      	b.n	80096be <_dtoa_r+0x996>
 80097cc:	f000 fc16 	bl	8009ffc <__multadd>
 80097d0:	4639      	mov	r1, r7
 80097d2:	4681      	mov	r9, r0
 80097d4:	2300      	movs	r3, #0
 80097d6:	220a      	movs	r2, #10
 80097d8:	4620      	mov	r0, r4
 80097da:	f000 fc0f 	bl	8009ffc <__multadd>
 80097de:	4607      	mov	r7, r0
 80097e0:	e7f2      	b.n	80097c8 <_dtoa_r+0xaa0>
 80097e2:	f04f 0900 	mov.w	r9, #0
 80097e6:	4659      	mov	r1, fp
 80097e8:	2201      	movs	r2, #1
 80097ea:	4620      	mov	r0, r4
 80097ec:	f000 fdba 	bl	800a364 <__lshift>
 80097f0:	4631      	mov	r1, r6
 80097f2:	4683      	mov	fp, r0
 80097f4:	f000 fe0a 	bl	800a40c <__mcmp>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	dcb8      	bgt.n	800976e <_dtoa_r+0xa46>
 80097fc:	d102      	bne.n	8009804 <_dtoa_r+0xadc>
 80097fe:	f018 0f01 	tst.w	r8, #1
 8009802:	d1b4      	bne.n	800976e <_dtoa_r+0xa46>
 8009804:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009808:	1e6a      	subs	r2, r5, #1
 800980a:	2b30      	cmp	r3, #48	; 0x30
 800980c:	f47f af0f 	bne.w	800962e <_dtoa_r+0x906>
 8009810:	4615      	mov	r5, r2
 8009812:	e7f7      	b.n	8009804 <_dtoa_r+0xadc>
 8009814:	9b06      	ldr	r3, [sp, #24]
 8009816:	4293      	cmp	r3, r2
 8009818:	d105      	bne.n	8009826 <_dtoa_r+0xafe>
 800981a:	2331      	movs	r3, #49	; 0x31
 800981c:	9a06      	ldr	r2, [sp, #24]
 800981e:	f10a 0a01 	add.w	sl, sl, #1
 8009822:	7013      	strb	r3, [r2, #0]
 8009824:	e703      	b.n	800962e <_dtoa_r+0x906>
 8009826:	4615      	mov	r5, r2
 8009828:	e7a1      	b.n	800976e <_dtoa_r+0xa46>
 800982a:	4b17      	ldr	r3, [pc, #92]	; (8009888 <_dtoa_r+0xb60>)
 800982c:	f7ff bae1 	b.w	8008df2 <_dtoa_r+0xca>
 8009830:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009832:	2b00      	cmp	r3, #0
 8009834:	f47f aabb 	bne.w	8008dae <_dtoa_r+0x86>
 8009838:	4b14      	ldr	r3, [pc, #80]	; (800988c <_dtoa_r+0xb64>)
 800983a:	f7ff bada 	b.w	8008df2 <_dtoa_r+0xca>
 800983e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009840:	2b01      	cmp	r3, #1
 8009842:	f77f ae3f 	ble.w	80094c4 <_dtoa_r+0x79c>
 8009846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009848:	9308      	str	r3, [sp, #32]
 800984a:	e653      	b.n	80094f4 <_dtoa_r+0x7cc>
 800984c:	9b04      	ldr	r3, [sp, #16]
 800984e:	2b00      	cmp	r3, #0
 8009850:	dc03      	bgt.n	800985a <_dtoa_r+0xb32>
 8009852:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009854:	2b02      	cmp	r3, #2
 8009856:	f73f aed5 	bgt.w	8009604 <_dtoa_r+0x8dc>
 800985a:	9d06      	ldr	r5, [sp, #24]
 800985c:	4631      	mov	r1, r6
 800985e:	4658      	mov	r0, fp
 8009860:	f7ff f9d4 	bl	8008c0c <quorem>
 8009864:	9b06      	ldr	r3, [sp, #24]
 8009866:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800986a:	f805 8b01 	strb.w	r8, [r5], #1
 800986e:	9a04      	ldr	r2, [sp, #16]
 8009870:	1aeb      	subs	r3, r5, r3
 8009872:	429a      	cmp	r2, r3
 8009874:	ddb5      	ble.n	80097e2 <_dtoa_r+0xaba>
 8009876:	4659      	mov	r1, fp
 8009878:	2300      	movs	r3, #0
 800987a:	220a      	movs	r2, #10
 800987c:	4620      	mov	r0, r4
 800987e:	f000 fbbd 	bl	8009ffc <__multadd>
 8009882:	4683      	mov	fp, r0
 8009884:	e7ea      	b.n	800985c <_dtoa_r+0xb34>
 8009886:	bf00      	nop
 8009888:	0800c9f0 	.word	0x0800c9f0
 800988c:	0800ca68 	.word	0x0800ca68

08009890 <rshift>:
 8009890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009892:	6906      	ldr	r6, [r0, #16]
 8009894:	114b      	asrs	r3, r1, #5
 8009896:	429e      	cmp	r6, r3
 8009898:	f100 0414 	add.w	r4, r0, #20
 800989c:	dd31      	ble.n	8009902 <rshift+0x72>
 800989e:	f011 011f 	ands.w	r1, r1, #31
 80098a2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80098a6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80098aa:	d108      	bne.n	80098be <rshift+0x2e>
 80098ac:	4621      	mov	r1, r4
 80098ae:	42b2      	cmp	r2, r6
 80098b0:	460b      	mov	r3, r1
 80098b2:	d211      	bcs.n	80098d8 <rshift+0x48>
 80098b4:	f852 3b04 	ldr.w	r3, [r2], #4
 80098b8:	f841 3b04 	str.w	r3, [r1], #4
 80098bc:	e7f7      	b.n	80098ae <rshift+0x1e>
 80098be:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80098c2:	4623      	mov	r3, r4
 80098c4:	f1c1 0c20 	rsb	ip, r1, #32
 80098c8:	40cd      	lsrs	r5, r1
 80098ca:	3204      	adds	r2, #4
 80098cc:	42b2      	cmp	r2, r6
 80098ce:	4617      	mov	r7, r2
 80098d0:	d30d      	bcc.n	80098ee <rshift+0x5e>
 80098d2:	601d      	str	r5, [r3, #0]
 80098d4:	b105      	cbz	r5, 80098d8 <rshift+0x48>
 80098d6:	3304      	adds	r3, #4
 80098d8:	42a3      	cmp	r3, r4
 80098da:	eba3 0204 	sub.w	r2, r3, r4
 80098de:	bf08      	it	eq
 80098e0:	2300      	moveq	r3, #0
 80098e2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80098e6:	6102      	str	r2, [r0, #16]
 80098e8:	bf08      	it	eq
 80098ea:	6143      	streq	r3, [r0, #20]
 80098ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ee:	683f      	ldr	r7, [r7, #0]
 80098f0:	fa07 f70c 	lsl.w	r7, r7, ip
 80098f4:	433d      	orrs	r5, r7
 80098f6:	f843 5b04 	str.w	r5, [r3], #4
 80098fa:	f852 5b04 	ldr.w	r5, [r2], #4
 80098fe:	40cd      	lsrs	r5, r1
 8009900:	e7e4      	b.n	80098cc <rshift+0x3c>
 8009902:	4623      	mov	r3, r4
 8009904:	e7e8      	b.n	80098d8 <rshift+0x48>

08009906 <__hexdig_fun>:
 8009906:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800990a:	2b09      	cmp	r3, #9
 800990c:	d802      	bhi.n	8009914 <__hexdig_fun+0xe>
 800990e:	3820      	subs	r0, #32
 8009910:	b2c0      	uxtb	r0, r0
 8009912:	4770      	bx	lr
 8009914:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009918:	2b05      	cmp	r3, #5
 800991a:	d801      	bhi.n	8009920 <__hexdig_fun+0x1a>
 800991c:	3847      	subs	r0, #71	; 0x47
 800991e:	e7f7      	b.n	8009910 <__hexdig_fun+0xa>
 8009920:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009924:	2b05      	cmp	r3, #5
 8009926:	d801      	bhi.n	800992c <__hexdig_fun+0x26>
 8009928:	3827      	subs	r0, #39	; 0x27
 800992a:	e7f1      	b.n	8009910 <__hexdig_fun+0xa>
 800992c:	2000      	movs	r0, #0
 800992e:	4770      	bx	lr

08009930 <__gethex>:
 8009930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009934:	b08b      	sub	sp, #44	; 0x2c
 8009936:	9002      	str	r0, [sp, #8]
 8009938:	9816      	ldr	r0, [sp, #88]	; 0x58
 800993a:	468a      	mov	sl, r1
 800993c:	4690      	mov	r8, r2
 800993e:	9306      	str	r3, [sp, #24]
 8009940:	f000 face 	bl	8009ee0 <__localeconv_l>
 8009944:	6803      	ldr	r3, [r0, #0]
 8009946:	f04f 0b00 	mov.w	fp, #0
 800994a:	4618      	mov	r0, r3
 800994c:	9303      	str	r3, [sp, #12]
 800994e:	f7f6 fbff 	bl	8000150 <strlen>
 8009952:	9b03      	ldr	r3, [sp, #12]
 8009954:	9001      	str	r0, [sp, #4]
 8009956:	4403      	add	r3, r0
 8009958:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800995c:	9307      	str	r3, [sp, #28]
 800995e:	f8da 3000 	ldr.w	r3, [sl]
 8009962:	3302      	adds	r3, #2
 8009964:	461f      	mov	r7, r3
 8009966:	f813 0b01 	ldrb.w	r0, [r3], #1
 800996a:	2830      	cmp	r0, #48	; 0x30
 800996c:	d06c      	beq.n	8009a48 <__gethex+0x118>
 800996e:	f7ff ffca 	bl	8009906 <__hexdig_fun>
 8009972:	4604      	mov	r4, r0
 8009974:	2800      	cmp	r0, #0
 8009976:	d16a      	bne.n	8009a4e <__gethex+0x11e>
 8009978:	9a01      	ldr	r2, [sp, #4]
 800997a:	9903      	ldr	r1, [sp, #12]
 800997c:	4638      	mov	r0, r7
 800997e:	f001 f901 	bl	800ab84 <strncmp>
 8009982:	2800      	cmp	r0, #0
 8009984:	d166      	bne.n	8009a54 <__gethex+0x124>
 8009986:	9b01      	ldr	r3, [sp, #4]
 8009988:	5cf8      	ldrb	r0, [r7, r3]
 800998a:	18fe      	adds	r6, r7, r3
 800998c:	f7ff ffbb 	bl	8009906 <__hexdig_fun>
 8009990:	2800      	cmp	r0, #0
 8009992:	d062      	beq.n	8009a5a <__gethex+0x12a>
 8009994:	4633      	mov	r3, r6
 8009996:	7818      	ldrb	r0, [r3, #0]
 8009998:	461f      	mov	r7, r3
 800999a:	2830      	cmp	r0, #48	; 0x30
 800999c:	f103 0301 	add.w	r3, r3, #1
 80099a0:	d0f9      	beq.n	8009996 <__gethex+0x66>
 80099a2:	f7ff ffb0 	bl	8009906 <__hexdig_fun>
 80099a6:	fab0 f580 	clz	r5, r0
 80099aa:	4634      	mov	r4, r6
 80099ac:	f04f 0b01 	mov.w	fp, #1
 80099b0:	096d      	lsrs	r5, r5, #5
 80099b2:	463a      	mov	r2, r7
 80099b4:	4616      	mov	r6, r2
 80099b6:	7830      	ldrb	r0, [r6, #0]
 80099b8:	3201      	adds	r2, #1
 80099ba:	f7ff ffa4 	bl	8009906 <__hexdig_fun>
 80099be:	2800      	cmp	r0, #0
 80099c0:	d1f8      	bne.n	80099b4 <__gethex+0x84>
 80099c2:	9a01      	ldr	r2, [sp, #4]
 80099c4:	9903      	ldr	r1, [sp, #12]
 80099c6:	4630      	mov	r0, r6
 80099c8:	f001 f8dc 	bl	800ab84 <strncmp>
 80099cc:	b950      	cbnz	r0, 80099e4 <__gethex+0xb4>
 80099ce:	b954      	cbnz	r4, 80099e6 <__gethex+0xb6>
 80099d0:	9b01      	ldr	r3, [sp, #4]
 80099d2:	18f4      	adds	r4, r6, r3
 80099d4:	4622      	mov	r2, r4
 80099d6:	4616      	mov	r6, r2
 80099d8:	7830      	ldrb	r0, [r6, #0]
 80099da:	3201      	adds	r2, #1
 80099dc:	f7ff ff93 	bl	8009906 <__hexdig_fun>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d1f8      	bne.n	80099d6 <__gethex+0xa6>
 80099e4:	b10c      	cbz	r4, 80099ea <__gethex+0xba>
 80099e6:	1ba4      	subs	r4, r4, r6
 80099e8:	00a4      	lsls	r4, r4, #2
 80099ea:	7833      	ldrb	r3, [r6, #0]
 80099ec:	2b50      	cmp	r3, #80	; 0x50
 80099ee:	d001      	beq.n	80099f4 <__gethex+0xc4>
 80099f0:	2b70      	cmp	r3, #112	; 0x70
 80099f2:	d140      	bne.n	8009a76 <__gethex+0x146>
 80099f4:	7873      	ldrb	r3, [r6, #1]
 80099f6:	2b2b      	cmp	r3, #43	; 0x2b
 80099f8:	d031      	beq.n	8009a5e <__gethex+0x12e>
 80099fa:	2b2d      	cmp	r3, #45	; 0x2d
 80099fc:	d033      	beq.n	8009a66 <__gethex+0x136>
 80099fe:	f04f 0900 	mov.w	r9, #0
 8009a02:	1c71      	adds	r1, r6, #1
 8009a04:	7808      	ldrb	r0, [r1, #0]
 8009a06:	f7ff ff7e 	bl	8009906 <__hexdig_fun>
 8009a0a:	1e43      	subs	r3, r0, #1
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	2b18      	cmp	r3, #24
 8009a10:	d831      	bhi.n	8009a76 <__gethex+0x146>
 8009a12:	f1a0 0210 	sub.w	r2, r0, #16
 8009a16:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a1a:	f7ff ff74 	bl	8009906 <__hexdig_fun>
 8009a1e:	1e43      	subs	r3, r0, #1
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	2b18      	cmp	r3, #24
 8009a24:	d922      	bls.n	8009a6c <__gethex+0x13c>
 8009a26:	f1b9 0f00 	cmp.w	r9, #0
 8009a2a:	d000      	beq.n	8009a2e <__gethex+0xfe>
 8009a2c:	4252      	negs	r2, r2
 8009a2e:	4414      	add	r4, r2
 8009a30:	f8ca 1000 	str.w	r1, [sl]
 8009a34:	b30d      	cbz	r5, 8009a7a <__gethex+0x14a>
 8009a36:	f1bb 0f00 	cmp.w	fp, #0
 8009a3a:	bf0c      	ite	eq
 8009a3c:	2706      	moveq	r7, #6
 8009a3e:	2700      	movne	r7, #0
 8009a40:	4638      	mov	r0, r7
 8009a42:	b00b      	add	sp, #44	; 0x2c
 8009a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a48:	f10b 0b01 	add.w	fp, fp, #1
 8009a4c:	e78a      	b.n	8009964 <__gethex+0x34>
 8009a4e:	2500      	movs	r5, #0
 8009a50:	462c      	mov	r4, r5
 8009a52:	e7ae      	b.n	80099b2 <__gethex+0x82>
 8009a54:	463e      	mov	r6, r7
 8009a56:	2501      	movs	r5, #1
 8009a58:	e7c7      	b.n	80099ea <__gethex+0xba>
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	e7fb      	b.n	8009a56 <__gethex+0x126>
 8009a5e:	f04f 0900 	mov.w	r9, #0
 8009a62:	1cb1      	adds	r1, r6, #2
 8009a64:	e7ce      	b.n	8009a04 <__gethex+0xd4>
 8009a66:	f04f 0901 	mov.w	r9, #1
 8009a6a:	e7fa      	b.n	8009a62 <__gethex+0x132>
 8009a6c:	230a      	movs	r3, #10
 8009a6e:	fb03 0202 	mla	r2, r3, r2, r0
 8009a72:	3a10      	subs	r2, #16
 8009a74:	e7cf      	b.n	8009a16 <__gethex+0xe6>
 8009a76:	4631      	mov	r1, r6
 8009a78:	e7da      	b.n	8009a30 <__gethex+0x100>
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	1bf3      	subs	r3, r6, r7
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	2b07      	cmp	r3, #7
 8009a82:	dc49      	bgt.n	8009b18 <__gethex+0x1e8>
 8009a84:	9802      	ldr	r0, [sp, #8]
 8009a86:	f000 fa6e 	bl	8009f66 <_Balloc>
 8009a8a:	f04f 0b00 	mov.w	fp, #0
 8009a8e:	4605      	mov	r5, r0
 8009a90:	46da      	mov	sl, fp
 8009a92:	9b01      	ldr	r3, [sp, #4]
 8009a94:	f100 0914 	add.w	r9, r0, #20
 8009a98:	f1c3 0301 	rsb	r3, r3, #1
 8009a9c:	f8cd 9010 	str.w	r9, [sp, #16]
 8009aa0:	9308      	str	r3, [sp, #32]
 8009aa2:	42b7      	cmp	r7, r6
 8009aa4:	d33b      	bcc.n	8009b1e <__gethex+0x1ee>
 8009aa6:	9804      	ldr	r0, [sp, #16]
 8009aa8:	f840 ab04 	str.w	sl, [r0], #4
 8009aac:	eba0 0009 	sub.w	r0, r0, r9
 8009ab0:	1080      	asrs	r0, r0, #2
 8009ab2:	6128      	str	r0, [r5, #16]
 8009ab4:	0147      	lsls	r7, r0, #5
 8009ab6:	4650      	mov	r0, sl
 8009ab8:	f000 fb19 	bl	800a0ee <__hi0bits>
 8009abc:	f8d8 6000 	ldr.w	r6, [r8]
 8009ac0:	1a3f      	subs	r7, r7, r0
 8009ac2:	42b7      	cmp	r7, r6
 8009ac4:	dd64      	ble.n	8009b90 <__gethex+0x260>
 8009ac6:	1bbf      	subs	r7, r7, r6
 8009ac8:	4639      	mov	r1, r7
 8009aca:	4628      	mov	r0, r5
 8009acc:	f000 fe23 	bl	800a716 <__any_on>
 8009ad0:	4682      	mov	sl, r0
 8009ad2:	b178      	cbz	r0, 8009af4 <__gethex+0x1c4>
 8009ad4:	f04f 0a01 	mov.w	sl, #1
 8009ad8:	1e7b      	subs	r3, r7, #1
 8009ada:	1159      	asrs	r1, r3, #5
 8009adc:	f003 021f 	and.w	r2, r3, #31
 8009ae0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009ae4:	fa0a f202 	lsl.w	r2, sl, r2
 8009ae8:	420a      	tst	r2, r1
 8009aea:	d003      	beq.n	8009af4 <__gethex+0x1c4>
 8009aec:	4553      	cmp	r3, sl
 8009aee:	dc46      	bgt.n	8009b7e <__gethex+0x24e>
 8009af0:	f04f 0a02 	mov.w	sl, #2
 8009af4:	4639      	mov	r1, r7
 8009af6:	4628      	mov	r0, r5
 8009af8:	f7ff feca 	bl	8009890 <rshift>
 8009afc:	443c      	add	r4, r7
 8009afe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b02:	42a3      	cmp	r3, r4
 8009b04:	da52      	bge.n	8009bac <__gethex+0x27c>
 8009b06:	4629      	mov	r1, r5
 8009b08:	9802      	ldr	r0, [sp, #8]
 8009b0a:	f000 fa60 	bl	8009fce <_Bfree>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b12:	27a3      	movs	r7, #163	; 0xa3
 8009b14:	6013      	str	r3, [r2, #0]
 8009b16:	e793      	b.n	8009a40 <__gethex+0x110>
 8009b18:	3101      	adds	r1, #1
 8009b1a:	105b      	asrs	r3, r3, #1
 8009b1c:	e7b0      	b.n	8009a80 <__gethex+0x150>
 8009b1e:	1e73      	subs	r3, r6, #1
 8009b20:	9305      	str	r3, [sp, #20]
 8009b22:	9a07      	ldr	r2, [sp, #28]
 8009b24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d018      	beq.n	8009b5e <__gethex+0x22e>
 8009b2c:	f1bb 0f20 	cmp.w	fp, #32
 8009b30:	d107      	bne.n	8009b42 <__gethex+0x212>
 8009b32:	9b04      	ldr	r3, [sp, #16]
 8009b34:	f8c3 a000 	str.w	sl, [r3]
 8009b38:	f04f 0a00 	mov.w	sl, #0
 8009b3c:	46d3      	mov	fp, sl
 8009b3e:	3304      	adds	r3, #4
 8009b40:	9304      	str	r3, [sp, #16]
 8009b42:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009b46:	f7ff fede 	bl	8009906 <__hexdig_fun>
 8009b4a:	f000 000f 	and.w	r0, r0, #15
 8009b4e:	fa00 f00b 	lsl.w	r0, r0, fp
 8009b52:	ea4a 0a00 	orr.w	sl, sl, r0
 8009b56:	f10b 0b04 	add.w	fp, fp, #4
 8009b5a:	9b05      	ldr	r3, [sp, #20]
 8009b5c:	e00d      	b.n	8009b7a <__gethex+0x24a>
 8009b5e:	9b05      	ldr	r3, [sp, #20]
 8009b60:	9a08      	ldr	r2, [sp, #32]
 8009b62:	4413      	add	r3, r2
 8009b64:	42bb      	cmp	r3, r7
 8009b66:	d3e1      	bcc.n	8009b2c <__gethex+0x1fc>
 8009b68:	4618      	mov	r0, r3
 8009b6a:	9a01      	ldr	r2, [sp, #4]
 8009b6c:	9903      	ldr	r1, [sp, #12]
 8009b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b70:	f001 f808 	bl	800ab84 <strncmp>
 8009b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d1d8      	bne.n	8009b2c <__gethex+0x1fc>
 8009b7a:	461e      	mov	r6, r3
 8009b7c:	e791      	b.n	8009aa2 <__gethex+0x172>
 8009b7e:	1eb9      	subs	r1, r7, #2
 8009b80:	4628      	mov	r0, r5
 8009b82:	f000 fdc8 	bl	800a716 <__any_on>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d0b2      	beq.n	8009af0 <__gethex+0x1c0>
 8009b8a:	f04f 0a03 	mov.w	sl, #3
 8009b8e:	e7b1      	b.n	8009af4 <__gethex+0x1c4>
 8009b90:	da09      	bge.n	8009ba6 <__gethex+0x276>
 8009b92:	1bf7      	subs	r7, r6, r7
 8009b94:	4629      	mov	r1, r5
 8009b96:	463a      	mov	r2, r7
 8009b98:	9802      	ldr	r0, [sp, #8]
 8009b9a:	f000 fbe3 	bl	800a364 <__lshift>
 8009b9e:	4605      	mov	r5, r0
 8009ba0:	1be4      	subs	r4, r4, r7
 8009ba2:	f100 0914 	add.w	r9, r0, #20
 8009ba6:	f04f 0a00 	mov.w	sl, #0
 8009baa:	e7a8      	b.n	8009afe <__gethex+0x1ce>
 8009bac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009bb0:	42a0      	cmp	r0, r4
 8009bb2:	dd6b      	ble.n	8009c8c <__gethex+0x35c>
 8009bb4:	1b04      	subs	r4, r0, r4
 8009bb6:	42a6      	cmp	r6, r4
 8009bb8:	dc2e      	bgt.n	8009c18 <__gethex+0x2e8>
 8009bba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d022      	beq.n	8009c08 <__gethex+0x2d8>
 8009bc2:	2b03      	cmp	r3, #3
 8009bc4:	d024      	beq.n	8009c10 <__gethex+0x2e0>
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d115      	bne.n	8009bf6 <__gethex+0x2c6>
 8009bca:	42a6      	cmp	r6, r4
 8009bcc:	d113      	bne.n	8009bf6 <__gethex+0x2c6>
 8009bce:	2e01      	cmp	r6, #1
 8009bd0:	dc0b      	bgt.n	8009bea <__gethex+0x2ba>
 8009bd2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009bd6:	9a06      	ldr	r2, [sp, #24]
 8009bd8:	2762      	movs	r7, #98	; 0x62
 8009bda:	6013      	str	r3, [r2, #0]
 8009bdc:	2301      	movs	r3, #1
 8009bde:	612b      	str	r3, [r5, #16]
 8009be0:	f8c9 3000 	str.w	r3, [r9]
 8009be4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009be6:	601d      	str	r5, [r3, #0]
 8009be8:	e72a      	b.n	8009a40 <__gethex+0x110>
 8009bea:	1e71      	subs	r1, r6, #1
 8009bec:	4628      	mov	r0, r5
 8009bee:	f000 fd92 	bl	800a716 <__any_on>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d1ed      	bne.n	8009bd2 <__gethex+0x2a2>
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	9802      	ldr	r0, [sp, #8]
 8009bfa:	f000 f9e8 	bl	8009fce <_Bfree>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c02:	2750      	movs	r7, #80	; 0x50
 8009c04:	6013      	str	r3, [r2, #0]
 8009c06:	e71b      	b.n	8009a40 <__gethex+0x110>
 8009c08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0e1      	beq.n	8009bd2 <__gethex+0x2a2>
 8009c0e:	e7f2      	b.n	8009bf6 <__gethex+0x2c6>
 8009c10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1dd      	bne.n	8009bd2 <__gethex+0x2a2>
 8009c16:	e7ee      	b.n	8009bf6 <__gethex+0x2c6>
 8009c18:	1e67      	subs	r7, r4, #1
 8009c1a:	f1ba 0f00 	cmp.w	sl, #0
 8009c1e:	d132      	bne.n	8009c86 <__gethex+0x356>
 8009c20:	b127      	cbz	r7, 8009c2c <__gethex+0x2fc>
 8009c22:	4639      	mov	r1, r7
 8009c24:	4628      	mov	r0, r5
 8009c26:	f000 fd76 	bl	800a716 <__any_on>
 8009c2a:	4682      	mov	sl, r0
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	117a      	asrs	r2, r7, #5
 8009c30:	f007 071f 	and.w	r7, r7, #31
 8009c34:	fa03 f707 	lsl.w	r7, r3, r7
 8009c38:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	421f      	tst	r7, r3
 8009c40:	f04f 0702 	mov.w	r7, #2
 8009c44:	4628      	mov	r0, r5
 8009c46:	bf18      	it	ne
 8009c48:	f04a 0a02 	orrne.w	sl, sl, #2
 8009c4c:	1b36      	subs	r6, r6, r4
 8009c4e:	f7ff fe1f 	bl	8009890 <rshift>
 8009c52:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009c56:	f1ba 0f00 	cmp.w	sl, #0
 8009c5a:	d048      	beq.n	8009cee <__gethex+0x3be>
 8009c5c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d015      	beq.n	8009c90 <__gethex+0x360>
 8009c64:	2b03      	cmp	r3, #3
 8009c66:	d017      	beq.n	8009c98 <__gethex+0x368>
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d109      	bne.n	8009c80 <__gethex+0x350>
 8009c6c:	f01a 0f02 	tst.w	sl, #2
 8009c70:	d006      	beq.n	8009c80 <__gethex+0x350>
 8009c72:	f8d9 3000 	ldr.w	r3, [r9]
 8009c76:	ea4a 0a03 	orr.w	sl, sl, r3
 8009c7a:	f01a 0f01 	tst.w	sl, #1
 8009c7e:	d10e      	bne.n	8009c9e <__gethex+0x36e>
 8009c80:	f047 0710 	orr.w	r7, r7, #16
 8009c84:	e033      	b.n	8009cee <__gethex+0x3be>
 8009c86:	f04f 0a01 	mov.w	sl, #1
 8009c8a:	e7cf      	b.n	8009c2c <__gethex+0x2fc>
 8009c8c:	2701      	movs	r7, #1
 8009c8e:	e7e2      	b.n	8009c56 <__gethex+0x326>
 8009c90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c92:	f1c3 0301 	rsb	r3, r3, #1
 8009c96:	9315      	str	r3, [sp, #84]	; 0x54
 8009c98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d0f0      	beq.n	8009c80 <__gethex+0x350>
 8009c9e:	f04f 0c00 	mov.w	ip, #0
 8009ca2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009ca6:	f105 0314 	add.w	r3, r5, #20
 8009caa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009cae:	eb03 010a 	add.w	r1, r3, sl
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cb8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009cbc:	d01c      	beq.n	8009cf8 <__gethex+0x3c8>
 8009cbe:	3201      	adds	r2, #1
 8009cc0:	6002      	str	r2, [r0, #0]
 8009cc2:	2f02      	cmp	r7, #2
 8009cc4:	f105 0314 	add.w	r3, r5, #20
 8009cc8:	d138      	bne.n	8009d3c <__gethex+0x40c>
 8009cca:	f8d8 2000 	ldr.w	r2, [r8]
 8009cce:	3a01      	subs	r2, #1
 8009cd0:	42b2      	cmp	r2, r6
 8009cd2:	d10a      	bne.n	8009cea <__gethex+0x3ba>
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	1171      	asrs	r1, r6, #5
 8009cd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009cdc:	f006 061f 	and.w	r6, r6, #31
 8009ce0:	fa02 f606 	lsl.w	r6, r2, r6
 8009ce4:	421e      	tst	r6, r3
 8009ce6:	bf18      	it	ne
 8009ce8:	4617      	movne	r7, r2
 8009cea:	f047 0720 	orr.w	r7, r7, #32
 8009cee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cf0:	601d      	str	r5, [r3, #0]
 8009cf2:	9b06      	ldr	r3, [sp, #24]
 8009cf4:	601c      	str	r4, [r3, #0]
 8009cf6:	e6a3      	b.n	8009a40 <__gethex+0x110>
 8009cf8:	4299      	cmp	r1, r3
 8009cfa:	f843 cc04 	str.w	ip, [r3, #-4]
 8009cfe:	d8d8      	bhi.n	8009cb2 <__gethex+0x382>
 8009d00:	68ab      	ldr	r3, [r5, #8]
 8009d02:	4599      	cmp	r9, r3
 8009d04:	db12      	blt.n	8009d2c <__gethex+0x3fc>
 8009d06:	6869      	ldr	r1, [r5, #4]
 8009d08:	9802      	ldr	r0, [sp, #8]
 8009d0a:	3101      	adds	r1, #1
 8009d0c:	f000 f92b 	bl	8009f66 <_Balloc>
 8009d10:	4683      	mov	fp, r0
 8009d12:	692a      	ldr	r2, [r5, #16]
 8009d14:	f105 010c 	add.w	r1, r5, #12
 8009d18:	3202      	adds	r2, #2
 8009d1a:	0092      	lsls	r2, r2, #2
 8009d1c:	300c      	adds	r0, #12
 8009d1e:	f000 f917 	bl	8009f50 <memcpy>
 8009d22:	4629      	mov	r1, r5
 8009d24:	9802      	ldr	r0, [sp, #8]
 8009d26:	f000 f952 	bl	8009fce <_Bfree>
 8009d2a:	465d      	mov	r5, fp
 8009d2c:	692b      	ldr	r3, [r5, #16]
 8009d2e:	1c5a      	adds	r2, r3, #1
 8009d30:	612a      	str	r2, [r5, #16]
 8009d32:	2201      	movs	r2, #1
 8009d34:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009d38:	615a      	str	r2, [r3, #20]
 8009d3a:	e7c2      	b.n	8009cc2 <__gethex+0x392>
 8009d3c:	692a      	ldr	r2, [r5, #16]
 8009d3e:	454a      	cmp	r2, r9
 8009d40:	dd0b      	ble.n	8009d5a <__gethex+0x42a>
 8009d42:	2101      	movs	r1, #1
 8009d44:	4628      	mov	r0, r5
 8009d46:	f7ff fda3 	bl	8009890 <rshift>
 8009d4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d4e:	3401      	adds	r4, #1
 8009d50:	42a3      	cmp	r3, r4
 8009d52:	f6ff aed8 	blt.w	8009b06 <__gethex+0x1d6>
 8009d56:	2701      	movs	r7, #1
 8009d58:	e7c7      	b.n	8009cea <__gethex+0x3ba>
 8009d5a:	f016 061f 	ands.w	r6, r6, #31
 8009d5e:	d0fa      	beq.n	8009d56 <__gethex+0x426>
 8009d60:	449a      	add	sl, r3
 8009d62:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009d66:	f000 f9c2 	bl	800a0ee <__hi0bits>
 8009d6a:	f1c6 0620 	rsb	r6, r6, #32
 8009d6e:	42b0      	cmp	r0, r6
 8009d70:	dbe7      	blt.n	8009d42 <__gethex+0x412>
 8009d72:	e7f0      	b.n	8009d56 <__gethex+0x426>

08009d74 <L_shift>:
 8009d74:	f1c2 0208 	rsb	r2, r2, #8
 8009d78:	0092      	lsls	r2, r2, #2
 8009d7a:	b570      	push	{r4, r5, r6, lr}
 8009d7c:	f1c2 0620 	rsb	r6, r2, #32
 8009d80:	6843      	ldr	r3, [r0, #4]
 8009d82:	6804      	ldr	r4, [r0, #0]
 8009d84:	fa03 f506 	lsl.w	r5, r3, r6
 8009d88:	432c      	orrs	r4, r5
 8009d8a:	40d3      	lsrs	r3, r2
 8009d8c:	6004      	str	r4, [r0, #0]
 8009d8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d92:	4288      	cmp	r0, r1
 8009d94:	d3f4      	bcc.n	8009d80 <L_shift+0xc>
 8009d96:	bd70      	pop	{r4, r5, r6, pc}

08009d98 <__match>:
 8009d98:	b530      	push	{r4, r5, lr}
 8009d9a:	6803      	ldr	r3, [r0, #0]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009da2:	b914      	cbnz	r4, 8009daa <__match+0x12>
 8009da4:	6003      	str	r3, [r0, #0]
 8009da6:	2001      	movs	r0, #1
 8009da8:	bd30      	pop	{r4, r5, pc}
 8009daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009db2:	2d19      	cmp	r5, #25
 8009db4:	bf98      	it	ls
 8009db6:	3220      	addls	r2, #32
 8009db8:	42a2      	cmp	r2, r4
 8009dba:	d0f0      	beq.n	8009d9e <__match+0x6>
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	e7f3      	b.n	8009da8 <__match+0x10>

08009dc0 <__hexnan>:
 8009dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc4:	2500      	movs	r5, #0
 8009dc6:	680b      	ldr	r3, [r1, #0]
 8009dc8:	4682      	mov	sl, r0
 8009dca:	115f      	asrs	r7, r3, #5
 8009dcc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009dd0:	f013 031f 	ands.w	r3, r3, #31
 8009dd4:	bf18      	it	ne
 8009dd6:	3704      	addne	r7, #4
 8009dd8:	1f3e      	subs	r6, r7, #4
 8009dda:	4690      	mov	r8, r2
 8009ddc:	46b1      	mov	r9, r6
 8009dde:	4634      	mov	r4, r6
 8009de0:	46ab      	mov	fp, r5
 8009de2:	b087      	sub	sp, #28
 8009de4:	6801      	ldr	r1, [r0, #0]
 8009de6:	9301      	str	r3, [sp, #4]
 8009de8:	f847 5c04 	str.w	r5, [r7, #-4]
 8009dec:	9502      	str	r5, [sp, #8]
 8009dee:	784a      	ldrb	r2, [r1, #1]
 8009df0:	1c4b      	adds	r3, r1, #1
 8009df2:	9303      	str	r3, [sp, #12]
 8009df4:	b342      	cbz	r2, 8009e48 <__hexnan+0x88>
 8009df6:	4610      	mov	r0, r2
 8009df8:	9105      	str	r1, [sp, #20]
 8009dfa:	9204      	str	r2, [sp, #16]
 8009dfc:	f7ff fd83 	bl	8009906 <__hexdig_fun>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d143      	bne.n	8009e8c <__hexnan+0xcc>
 8009e04:	9a04      	ldr	r2, [sp, #16]
 8009e06:	9905      	ldr	r1, [sp, #20]
 8009e08:	2a20      	cmp	r2, #32
 8009e0a:	d818      	bhi.n	8009e3e <__hexnan+0x7e>
 8009e0c:	9b02      	ldr	r3, [sp, #8]
 8009e0e:	459b      	cmp	fp, r3
 8009e10:	dd13      	ble.n	8009e3a <__hexnan+0x7a>
 8009e12:	454c      	cmp	r4, r9
 8009e14:	d206      	bcs.n	8009e24 <__hexnan+0x64>
 8009e16:	2d07      	cmp	r5, #7
 8009e18:	dc04      	bgt.n	8009e24 <__hexnan+0x64>
 8009e1a:	462a      	mov	r2, r5
 8009e1c:	4649      	mov	r1, r9
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f7ff ffa8 	bl	8009d74 <L_shift>
 8009e24:	4544      	cmp	r4, r8
 8009e26:	d944      	bls.n	8009eb2 <__hexnan+0xf2>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	f1a4 0904 	sub.w	r9, r4, #4
 8009e2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e32:	461d      	mov	r5, r3
 8009e34:	464c      	mov	r4, r9
 8009e36:	f8cd b008 	str.w	fp, [sp, #8]
 8009e3a:	9903      	ldr	r1, [sp, #12]
 8009e3c:	e7d7      	b.n	8009dee <__hexnan+0x2e>
 8009e3e:	2a29      	cmp	r2, #41	; 0x29
 8009e40:	d14a      	bne.n	8009ed8 <__hexnan+0x118>
 8009e42:	3102      	adds	r1, #2
 8009e44:	f8ca 1000 	str.w	r1, [sl]
 8009e48:	f1bb 0f00 	cmp.w	fp, #0
 8009e4c:	d044      	beq.n	8009ed8 <__hexnan+0x118>
 8009e4e:	454c      	cmp	r4, r9
 8009e50:	d206      	bcs.n	8009e60 <__hexnan+0xa0>
 8009e52:	2d07      	cmp	r5, #7
 8009e54:	dc04      	bgt.n	8009e60 <__hexnan+0xa0>
 8009e56:	462a      	mov	r2, r5
 8009e58:	4649      	mov	r1, r9
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f7ff ff8a 	bl	8009d74 <L_shift>
 8009e60:	4544      	cmp	r4, r8
 8009e62:	d928      	bls.n	8009eb6 <__hexnan+0xf6>
 8009e64:	4643      	mov	r3, r8
 8009e66:	f854 2b04 	ldr.w	r2, [r4], #4
 8009e6a:	42a6      	cmp	r6, r4
 8009e6c:	f843 2b04 	str.w	r2, [r3], #4
 8009e70:	d2f9      	bcs.n	8009e66 <__hexnan+0xa6>
 8009e72:	2200      	movs	r2, #0
 8009e74:	f843 2b04 	str.w	r2, [r3], #4
 8009e78:	429e      	cmp	r6, r3
 8009e7a:	d2fb      	bcs.n	8009e74 <__hexnan+0xb4>
 8009e7c:	6833      	ldr	r3, [r6, #0]
 8009e7e:	b91b      	cbnz	r3, 8009e88 <__hexnan+0xc8>
 8009e80:	4546      	cmp	r6, r8
 8009e82:	d127      	bne.n	8009ed4 <__hexnan+0x114>
 8009e84:	2301      	movs	r3, #1
 8009e86:	6033      	str	r3, [r6, #0]
 8009e88:	2005      	movs	r0, #5
 8009e8a:	e026      	b.n	8009eda <__hexnan+0x11a>
 8009e8c:	3501      	adds	r5, #1
 8009e8e:	2d08      	cmp	r5, #8
 8009e90:	f10b 0b01 	add.w	fp, fp, #1
 8009e94:	dd06      	ble.n	8009ea4 <__hexnan+0xe4>
 8009e96:	4544      	cmp	r4, r8
 8009e98:	d9cf      	bls.n	8009e3a <__hexnan+0x7a>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	2501      	movs	r5, #1
 8009e9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ea2:	3c04      	subs	r4, #4
 8009ea4:	6822      	ldr	r2, [r4, #0]
 8009ea6:	f000 000f 	and.w	r0, r0, #15
 8009eaa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009eae:	6020      	str	r0, [r4, #0]
 8009eb0:	e7c3      	b.n	8009e3a <__hexnan+0x7a>
 8009eb2:	2508      	movs	r5, #8
 8009eb4:	e7c1      	b.n	8009e3a <__hexnan+0x7a>
 8009eb6:	9b01      	ldr	r3, [sp, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d0df      	beq.n	8009e7c <__hexnan+0xbc>
 8009ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ec0:	f1c3 0320 	rsb	r3, r3, #32
 8009ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ec8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009ecc:	401a      	ands	r2, r3
 8009ece:	f847 2c04 	str.w	r2, [r7, #-4]
 8009ed2:	e7d3      	b.n	8009e7c <__hexnan+0xbc>
 8009ed4:	3e04      	subs	r6, #4
 8009ed6:	e7d1      	b.n	8009e7c <__hexnan+0xbc>
 8009ed8:	2004      	movs	r0, #4
 8009eda:	b007      	add	sp, #28
 8009edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ee0 <__localeconv_l>:
 8009ee0:	30f0      	adds	r0, #240	; 0xf0
 8009ee2:	4770      	bx	lr

08009ee4 <_localeconv_r>:
 8009ee4:	4b04      	ldr	r3, [pc, #16]	; (8009ef8 <_localeconv_r+0x14>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6a18      	ldr	r0, [r3, #32]
 8009eea:	4b04      	ldr	r3, [pc, #16]	; (8009efc <_localeconv_r+0x18>)
 8009eec:	2800      	cmp	r0, #0
 8009eee:	bf08      	it	eq
 8009ef0:	4618      	moveq	r0, r3
 8009ef2:	30f0      	adds	r0, #240	; 0xf0
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	2000002c 	.word	0x2000002c
 8009efc:	20000090 	.word	0x20000090

08009f00 <malloc>:
 8009f00:	4b02      	ldr	r3, [pc, #8]	; (8009f0c <malloc+0xc>)
 8009f02:	4601      	mov	r1, r0
 8009f04:	6818      	ldr	r0, [r3, #0]
 8009f06:	f000 bc81 	b.w	800a80c <_malloc_r>
 8009f0a:	bf00      	nop
 8009f0c:	2000002c 	.word	0x2000002c

08009f10 <__ascii_mbtowc>:
 8009f10:	b082      	sub	sp, #8
 8009f12:	b901      	cbnz	r1, 8009f16 <__ascii_mbtowc+0x6>
 8009f14:	a901      	add	r1, sp, #4
 8009f16:	b142      	cbz	r2, 8009f2a <__ascii_mbtowc+0x1a>
 8009f18:	b14b      	cbz	r3, 8009f2e <__ascii_mbtowc+0x1e>
 8009f1a:	7813      	ldrb	r3, [r2, #0]
 8009f1c:	600b      	str	r3, [r1, #0]
 8009f1e:	7812      	ldrb	r2, [r2, #0]
 8009f20:	1c10      	adds	r0, r2, #0
 8009f22:	bf18      	it	ne
 8009f24:	2001      	movne	r0, #1
 8009f26:	b002      	add	sp, #8
 8009f28:	4770      	bx	lr
 8009f2a:	4610      	mov	r0, r2
 8009f2c:	e7fb      	b.n	8009f26 <__ascii_mbtowc+0x16>
 8009f2e:	f06f 0001 	mvn.w	r0, #1
 8009f32:	e7f8      	b.n	8009f26 <__ascii_mbtowc+0x16>

08009f34 <memchr>:
 8009f34:	b510      	push	{r4, lr}
 8009f36:	b2c9      	uxtb	r1, r1
 8009f38:	4402      	add	r2, r0
 8009f3a:	4290      	cmp	r0, r2
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	d101      	bne.n	8009f44 <memchr+0x10>
 8009f40:	2300      	movs	r3, #0
 8009f42:	e003      	b.n	8009f4c <memchr+0x18>
 8009f44:	781c      	ldrb	r4, [r3, #0]
 8009f46:	3001      	adds	r0, #1
 8009f48:	428c      	cmp	r4, r1
 8009f4a:	d1f6      	bne.n	8009f3a <memchr+0x6>
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	bd10      	pop	{r4, pc}

08009f50 <memcpy>:
 8009f50:	b510      	push	{r4, lr}
 8009f52:	1e43      	subs	r3, r0, #1
 8009f54:	440a      	add	r2, r1
 8009f56:	4291      	cmp	r1, r2
 8009f58:	d100      	bne.n	8009f5c <memcpy+0xc>
 8009f5a:	bd10      	pop	{r4, pc}
 8009f5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f64:	e7f7      	b.n	8009f56 <memcpy+0x6>

08009f66 <_Balloc>:
 8009f66:	b570      	push	{r4, r5, r6, lr}
 8009f68:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	460e      	mov	r6, r1
 8009f6e:	b93d      	cbnz	r5, 8009f80 <_Balloc+0x1a>
 8009f70:	2010      	movs	r0, #16
 8009f72:	f7ff ffc5 	bl	8009f00 <malloc>
 8009f76:	6260      	str	r0, [r4, #36]	; 0x24
 8009f78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f7c:	6005      	str	r5, [r0, #0]
 8009f7e:	60c5      	str	r5, [r0, #12]
 8009f80:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009f82:	68eb      	ldr	r3, [r5, #12]
 8009f84:	b183      	cbz	r3, 8009fa8 <_Balloc+0x42>
 8009f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009f8e:	b9b8      	cbnz	r0, 8009fc0 <_Balloc+0x5a>
 8009f90:	2101      	movs	r1, #1
 8009f92:	fa01 f506 	lsl.w	r5, r1, r6
 8009f96:	1d6a      	adds	r2, r5, #5
 8009f98:	0092      	lsls	r2, r2, #2
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	f000 fbdc 	bl	800a758 <_calloc_r>
 8009fa0:	b160      	cbz	r0, 8009fbc <_Balloc+0x56>
 8009fa2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009fa6:	e00e      	b.n	8009fc6 <_Balloc+0x60>
 8009fa8:	2221      	movs	r2, #33	; 0x21
 8009faa:	2104      	movs	r1, #4
 8009fac:	4620      	mov	r0, r4
 8009fae:	f000 fbd3 	bl	800a758 <_calloc_r>
 8009fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fb4:	60e8      	str	r0, [r5, #12]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d1e4      	bne.n	8009f86 <_Balloc+0x20>
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	bd70      	pop	{r4, r5, r6, pc}
 8009fc0:	6802      	ldr	r2, [r0, #0]
 8009fc2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fcc:	e7f7      	b.n	8009fbe <_Balloc+0x58>

08009fce <_Bfree>:
 8009fce:	b570      	push	{r4, r5, r6, lr}
 8009fd0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	460d      	mov	r5, r1
 8009fd6:	b93c      	cbnz	r4, 8009fe8 <_Bfree+0x1a>
 8009fd8:	2010      	movs	r0, #16
 8009fda:	f7ff ff91 	bl	8009f00 <malloc>
 8009fde:	6270      	str	r0, [r6, #36]	; 0x24
 8009fe0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fe4:	6004      	str	r4, [r0, #0]
 8009fe6:	60c4      	str	r4, [r0, #12]
 8009fe8:	b13d      	cbz	r5, 8009ffa <_Bfree+0x2c>
 8009fea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009fec:	686a      	ldr	r2, [r5, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ff4:	6029      	str	r1, [r5, #0]
 8009ff6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}

08009ffc <__multadd>:
 8009ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a000:	461f      	mov	r7, r3
 800a002:	4606      	mov	r6, r0
 800a004:	460c      	mov	r4, r1
 800a006:	2300      	movs	r3, #0
 800a008:	690d      	ldr	r5, [r1, #16]
 800a00a:	f101 0c14 	add.w	ip, r1, #20
 800a00e:	f8dc 0000 	ldr.w	r0, [ip]
 800a012:	3301      	adds	r3, #1
 800a014:	b281      	uxth	r1, r0
 800a016:	fb02 7101 	mla	r1, r2, r1, r7
 800a01a:	0c00      	lsrs	r0, r0, #16
 800a01c:	0c0f      	lsrs	r7, r1, #16
 800a01e:	fb02 7000 	mla	r0, r2, r0, r7
 800a022:	b289      	uxth	r1, r1
 800a024:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a028:	429d      	cmp	r5, r3
 800a02a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a02e:	f84c 1b04 	str.w	r1, [ip], #4
 800a032:	dcec      	bgt.n	800a00e <__multadd+0x12>
 800a034:	b1d7      	cbz	r7, 800a06c <__multadd+0x70>
 800a036:	68a3      	ldr	r3, [r4, #8]
 800a038:	42ab      	cmp	r3, r5
 800a03a:	dc12      	bgt.n	800a062 <__multadd+0x66>
 800a03c:	6861      	ldr	r1, [r4, #4]
 800a03e:	4630      	mov	r0, r6
 800a040:	3101      	adds	r1, #1
 800a042:	f7ff ff90 	bl	8009f66 <_Balloc>
 800a046:	4680      	mov	r8, r0
 800a048:	6922      	ldr	r2, [r4, #16]
 800a04a:	f104 010c 	add.w	r1, r4, #12
 800a04e:	3202      	adds	r2, #2
 800a050:	0092      	lsls	r2, r2, #2
 800a052:	300c      	adds	r0, #12
 800a054:	f7ff ff7c 	bl	8009f50 <memcpy>
 800a058:	4621      	mov	r1, r4
 800a05a:	4630      	mov	r0, r6
 800a05c:	f7ff ffb7 	bl	8009fce <_Bfree>
 800a060:	4644      	mov	r4, r8
 800a062:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a066:	3501      	adds	r5, #1
 800a068:	615f      	str	r7, [r3, #20]
 800a06a:	6125      	str	r5, [r4, #16]
 800a06c:	4620      	mov	r0, r4
 800a06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a072 <__s2b>:
 800a072:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a076:	4615      	mov	r5, r2
 800a078:	2209      	movs	r2, #9
 800a07a:	461f      	mov	r7, r3
 800a07c:	3308      	adds	r3, #8
 800a07e:	460c      	mov	r4, r1
 800a080:	fb93 f3f2 	sdiv	r3, r3, r2
 800a084:	4606      	mov	r6, r0
 800a086:	2201      	movs	r2, #1
 800a088:	2100      	movs	r1, #0
 800a08a:	429a      	cmp	r2, r3
 800a08c:	db20      	blt.n	800a0d0 <__s2b+0x5e>
 800a08e:	4630      	mov	r0, r6
 800a090:	f7ff ff69 	bl	8009f66 <_Balloc>
 800a094:	9b08      	ldr	r3, [sp, #32]
 800a096:	2d09      	cmp	r5, #9
 800a098:	6143      	str	r3, [r0, #20]
 800a09a:	f04f 0301 	mov.w	r3, #1
 800a09e:	6103      	str	r3, [r0, #16]
 800a0a0:	dd19      	ble.n	800a0d6 <__s2b+0x64>
 800a0a2:	f104 0809 	add.w	r8, r4, #9
 800a0a6:	46c1      	mov	r9, r8
 800a0a8:	442c      	add	r4, r5
 800a0aa:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a0ae:	4601      	mov	r1, r0
 800a0b0:	3b30      	subs	r3, #48	; 0x30
 800a0b2:	220a      	movs	r2, #10
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	f7ff ffa1 	bl	8009ffc <__multadd>
 800a0ba:	45a1      	cmp	r9, r4
 800a0bc:	d1f5      	bne.n	800a0aa <__s2b+0x38>
 800a0be:	eb08 0405 	add.w	r4, r8, r5
 800a0c2:	3c08      	subs	r4, #8
 800a0c4:	1b2d      	subs	r5, r5, r4
 800a0c6:	1963      	adds	r3, r4, r5
 800a0c8:	42bb      	cmp	r3, r7
 800a0ca:	db07      	blt.n	800a0dc <__s2b+0x6a>
 800a0cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0d0:	0052      	lsls	r2, r2, #1
 800a0d2:	3101      	adds	r1, #1
 800a0d4:	e7d9      	b.n	800a08a <__s2b+0x18>
 800a0d6:	340a      	adds	r4, #10
 800a0d8:	2509      	movs	r5, #9
 800a0da:	e7f3      	b.n	800a0c4 <__s2b+0x52>
 800a0dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a0e0:	4601      	mov	r1, r0
 800a0e2:	3b30      	subs	r3, #48	; 0x30
 800a0e4:	220a      	movs	r2, #10
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f7ff ff88 	bl	8009ffc <__multadd>
 800a0ec:	e7eb      	b.n	800a0c6 <__s2b+0x54>

0800a0ee <__hi0bits>:
 800a0ee:	0c02      	lsrs	r2, r0, #16
 800a0f0:	0412      	lsls	r2, r2, #16
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	b9b2      	cbnz	r2, 800a124 <__hi0bits+0x36>
 800a0f6:	0403      	lsls	r3, r0, #16
 800a0f8:	2010      	movs	r0, #16
 800a0fa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a0fe:	bf04      	itt	eq
 800a100:	021b      	lsleq	r3, r3, #8
 800a102:	3008      	addeq	r0, #8
 800a104:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a108:	bf04      	itt	eq
 800a10a:	011b      	lsleq	r3, r3, #4
 800a10c:	3004      	addeq	r0, #4
 800a10e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a112:	bf04      	itt	eq
 800a114:	009b      	lsleq	r3, r3, #2
 800a116:	3002      	addeq	r0, #2
 800a118:	2b00      	cmp	r3, #0
 800a11a:	db06      	blt.n	800a12a <__hi0bits+0x3c>
 800a11c:	005b      	lsls	r3, r3, #1
 800a11e:	d503      	bpl.n	800a128 <__hi0bits+0x3a>
 800a120:	3001      	adds	r0, #1
 800a122:	4770      	bx	lr
 800a124:	2000      	movs	r0, #0
 800a126:	e7e8      	b.n	800a0fa <__hi0bits+0xc>
 800a128:	2020      	movs	r0, #32
 800a12a:	4770      	bx	lr

0800a12c <__lo0bits>:
 800a12c:	6803      	ldr	r3, [r0, #0]
 800a12e:	4601      	mov	r1, r0
 800a130:	f013 0207 	ands.w	r2, r3, #7
 800a134:	d00b      	beq.n	800a14e <__lo0bits+0x22>
 800a136:	07da      	lsls	r2, r3, #31
 800a138:	d423      	bmi.n	800a182 <__lo0bits+0x56>
 800a13a:	0798      	lsls	r0, r3, #30
 800a13c:	bf49      	itett	mi
 800a13e:	085b      	lsrmi	r3, r3, #1
 800a140:	089b      	lsrpl	r3, r3, #2
 800a142:	2001      	movmi	r0, #1
 800a144:	600b      	strmi	r3, [r1, #0]
 800a146:	bf5c      	itt	pl
 800a148:	600b      	strpl	r3, [r1, #0]
 800a14a:	2002      	movpl	r0, #2
 800a14c:	4770      	bx	lr
 800a14e:	b298      	uxth	r0, r3
 800a150:	b9a8      	cbnz	r0, 800a17e <__lo0bits+0x52>
 800a152:	2010      	movs	r0, #16
 800a154:	0c1b      	lsrs	r3, r3, #16
 800a156:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a15a:	bf04      	itt	eq
 800a15c:	0a1b      	lsreq	r3, r3, #8
 800a15e:	3008      	addeq	r0, #8
 800a160:	071a      	lsls	r2, r3, #28
 800a162:	bf04      	itt	eq
 800a164:	091b      	lsreq	r3, r3, #4
 800a166:	3004      	addeq	r0, #4
 800a168:	079a      	lsls	r2, r3, #30
 800a16a:	bf04      	itt	eq
 800a16c:	089b      	lsreq	r3, r3, #2
 800a16e:	3002      	addeq	r0, #2
 800a170:	07da      	lsls	r2, r3, #31
 800a172:	d402      	bmi.n	800a17a <__lo0bits+0x4e>
 800a174:	085b      	lsrs	r3, r3, #1
 800a176:	d006      	beq.n	800a186 <__lo0bits+0x5a>
 800a178:	3001      	adds	r0, #1
 800a17a:	600b      	str	r3, [r1, #0]
 800a17c:	4770      	bx	lr
 800a17e:	4610      	mov	r0, r2
 800a180:	e7e9      	b.n	800a156 <__lo0bits+0x2a>
 800a182:	2000      	movs	r0, #0
 800a184:	4770      	bx	lr
 800a186:	2020      	movs	r0, #32
 800a188:	4770      	bx	lr

0800a18a <__i2b>:
 800a18a:	b510      	push	{r4, lr}
 800a18c:	460c      	mov	r4, r1
 800a18e:	2101      	movs	r1, #1
 800a190:	f7ff fee9 	bl	8009f66 <_Balloc>
 800a194:	2201      	movs	r2, #1
 800a196:	6144      	str	r4, [r0, #20]
 800a198:	6102      	str	r2, [r0, #16]
 800a19a:	bd10      	pop	{r4, pc}

0800a19c <__multiply>:
 800a19c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a0:	4614      	mov	r4, r2
 800a1a2:	690a      	ldr	r2, [r1, #16]
 800a1a4:	6923      	ldr	r3, [r4, #16]
 800a1a6:	4688      	mov	r8, r1
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	bfbe      	ittt	lt
 800a1ac:	460b      	movlt	r3, r1
 800a1ae:	46a0      	movlt	r8, r4
 800a1b0:	461c      	movlt	r4, r3
 800a1b2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a1b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a1ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a1c2:	eb07 0609 	add.w	r6, r7, r9
 800a1c6:	42b3      	cmp	r3, r6
 800a1c8:	bfb8      	it	lt
 800a1ca:	3101      	addlt	r1, #1
 800a1cc:	f7ff fecb 	bl	8009f66 <_Balloc>
 800a1d0:	f100 0514 	add.w	r5, r0, #20
 800a1d4:	462b      	mov	r3, r5
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a1dc:	4573      	cmp	r3, lr
 800a1de:	d316      	bcc.n	800a20e <__multiply+0x72>
 800a1e0:	f104 0214 	add.w	r2, r4, #20
 800a1e4:	f108 0114 	add.w	r1, r8, #20
 800a1e8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a1ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	9b00      	ldr	r3, [sp, #0]
 800a1f4:	9201      	str	r2, [sp, #4]
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d80c      	bhi.n	800a214 <__multiply+0x78>
 800a1fa:	2e00      	cmp	r6, #0
 800a1fc:	dd03      	ble.n	800a206 <__multiply+0x6a>
 800a1fe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a202:	2b00      	cmp	r3, #0
 800a204:	d05d      	beq.n	800a2c2 <__multiply+0x126>
 800a206:	6106      	str	r6, [r0, #16]
 800a208:	b003      	add	sp, #12
 800a20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a20e:	f843 2b04 	str.w	r2, [r3], #4
 800a212:	e7e3      	b.n	800a1dc <__multiply+0x40>
 800a214:	f8b2 b000 	ldrh.w	fp, [r2]
 800a218:	f1bb 0f00 	cmp.w	fp, #0
 800a21c:	d023      	beq.n	800a266 <__multiply+0xca>
 800a21e:	4689      	mov	r9, r1
 800a220:	46ac      	mov	ip, r5
 800a222:	f04f 0800 	mov.w	r8, #0
 800a226:	f859 4b04 	ldr.w	r4, [r9], #4
 800a22a:	f8dc a000 	ldr.w	sl, [ip]
 800a22e:	b2a3      	uxth	r3, r4
 800a230:	fa1f fa8a 	uxth.w	sl, sl
 800a234:	fb0b a303 	mla	r3, fp, r3, sl
 800a238:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a23c:	f8dc 4000 	ldr.w	r4, [ip]
 800a240:	4443      	add	r3, r8
 800a242:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a246:	fb0b 840a 	mla	r4, fp, sl, r8
 800a24a:	46e2      	mov	sl, ip
 800a24c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a250:	b29b      	uxth	r3, r3
 800a252:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a256:	454f      	cmp	r7, r9
 800a258:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a25c:	f84a 3b04 	str.w	r3, [sl], #4
 800a260:	d82b      	bhi.n	800a2ba <__multiply+0x11e>
 800a262:	f8cc 8004 	str.w	r8, [ip, #4]
 800a266:	9b01      	ldr	r3, [sp, #4]
 800a268:	3204      	adds	r2, #4
 800a26a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a26e:	f1ba 0f00 	cmp.w	sl, #0
 800a272:	d020      	beq.n	800a2b6 <__multiply+0x11a>
 800a274:	4689      	mov	r9, r1
 800a276:	46a8      	mov	r8, r5
 800a278:	f04f 0b00 	mov.w	fp, #0
 800a27c:	682b      	ldr	r3, [r5, #0]
 800a27e:	f8b9 c000 	ldrh.w	ip, [r9]
 800a282:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a286:	b29b      	uxth	r3, r3
 800a288:	fb0a 440c 	mla	r4, sl, ip, r4
 800a28c:	46c4      	mov	ip, r8
 800a28e:	445c      	add	r4, fp
 800a290:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a294:	f84c 3b04 	str.w	r3, [ip], #4
 800a298:	f859 3b04 	ldr.w	r3, [r9], #4
 800a29c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a2a0:	0c1b      	lsrs	r3, r3, #16
 800a2a2:	fb0a b303 	mla	r3, sl, r3, fp
 800a2a6:	454f      	cmp	r7, r9
 800a2a8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a2ac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a2b0:	d805      	bhi.n	800a2be <__multiply+0x122>
 800a2b2:	f8c8 3004 	str.w	r3, [r8, #4]
 800a2b6:	3504      	adds	r5, #4
 800a2b8:	e79b      	b.n	800a1f2 <__multiply+0x56>
 800a2ba:	46d4      	mov	ip, sl
 800a2bc:	e7b3      	b.n	800a226 <__multiply+0x8a>
 800a2be:	46e0      	mov	r8, ip
 800a2c0:	e7dd      	b.n	800a27e <__multiply+0xe2>
 800a2c2:	3e01      	subs	r6, #1
 800a2c4:	e799      	b.n	800a1fa <__multiply+0x5e>
	...

0800a2c8 <__pow5mult>:
 800a2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2cc:	4615      	mov	r5, r2
 800a2ce:	f012 0203 	ands.w	r2, r2, #3
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	460f      	mov	r7, r1
 800a2d6:	d007      	beq.n	800a2e8 <__pow5mult+0x20>
 800a2d8:	4c21      	ldr	r4, [pc, #132]	; (800a360 <__pow5mult+0x98>)
 800a2da:	3a01      	subs	r2, #1
 800a2dc:	2300      	movs	r3, #0
 800a2de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2e2:	f7ff fe8b 	bl	8009ffc <__multadd>
 800a2e6:	4607      	mov	r7, r0
 800a2e8:	10ad      	asrs	r5, r5, #2
 800a2ea:	d035      	beq.n	800a358 <__pow5mult+0x90>
 800a2ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a2ee:	b93c      	cbnz	r4, 800a300 <__pow5mult+0x38>
 800a2f0:	2010      	movs	r0, #16
 800a2f2:	f7ff fe05 	bl	8009f00 <malloc>
 800a2f6:	6270      	str	r0, [r6, #36]	; 0x24
 800a2f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2fc:	6004      	str	r4, [r0, #0]
 800a2fe:	60c4      	str	r4, [r0, #12]
 800a300:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a304:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a308:	b94c      	cbnz	r4, 800a31e <__pow5mult+0x56>
 800a30a:	f240 2171 	movw	r1, #625	; 0x271
 800a30e:	4630      	mov	r0, r6
 800a310:	f7ff ff3b 	bl	800a18a <__i2b>
 800a314:	2300      	movs	r3, #0
 800a316:	4604      	mov	r4, r0
 800a318:	f8c8 0008 	str.w	r0, [r8, #8]
 800a31c:	6003      	str	r3, [r0, #0]
 800a31e:	f04f 0800 	mov.w	r8, #0
 800a322:	07eb      	lsls	r3, r5, #31
 800a324:	d50a      	bpl.n	800a33c <__pow5mult+0x74>
 800a326:	4639      	mov	r1, r7
 800a328:	4622      	mov	r2, r4
 800a32a:	4630      	mov	r0, r6
 800a32c:	f7ff ff36 	bl	800a19c <__multiply>
 800a330:	4681      	mov	r9, r0
 800a332:	4639      	mov	r1, r7
 800a334:	4630      	mov	r0, r6
 800a336:	f7ff fe4a 	bl	8009fce <_Bfree>
 800a33a:	464f      	mov	r7, r9
 800a33c:	106d      	asrs	r5, r5, #1
 800a33e:	d00b      	beq.n	800a358 <__pow5mult+0x90>
 800a340:	6820      	ldr	r0, [r4, #0]
 800a342:	b938      	cbnz	r0, 800a354 <__pow5mult+0x8c>
 800a344:	4622      	mov	r2, r4
 800a346:	4621      	mov	r1, r4
 800a348:	4630      	mov	r0, r6
 800a34a:	f7ff ff27 	bl	800a19c <__multiply>
 800a34e:	6020      	str	r0, [r4, #0]
 800a350:	f8c0 8000 	str.w	r8, [r0]
 800a354:	4604      	mov	r4, r0
 800a356:	e7e4      	b.n	800a322 <__pow5mult+0x5a>
 800a358:	4638      	mov	r0, r7
 800a35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a35e:	bf00      	nop
 800a360:	0800cb70 	.word	0x0800cb70

0800a364 <__lshift>:
 800a364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a368:	460c      	mov	r4, r1
 800a36a:	4607      	mov	r7, r0
 800a36c:	4616      	mov	r6, r2
 800a36e:	6923      	ldr	r3, [r4, #16]
 800a370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a374:	eb0a 0903 	add.w	r9, sl, r3
 800a378:	6849      	ldr	r1, [r1, #4]
 800a37a:	68a3      	ldr	r3, [r4, #8]
 800a37c:	f109 0501 	add.w	r5, r9, #1
 800a380:	42ab      	cmp	r3, r5
 800a382:	db32      	blt.n	800a3ea <__lshift+0x86>
 800a384:	4638      	mov	r0, r7
 800a386:	f7ff fdee 	bl	8009f66 <_Balloc>
 800a38a:	2300      	movs	r3, #0
 800a38c:	4680      	mov	r8, r0
 800a38e:	461a      	mov	r2, r3
 800a390:	f100 0114 	add.w	r1, r0, #20
 800a394:	4553      	cmp	r3, sl
 800a396:	db2b      	blt.n	800a3f0 <__lshift+0x8c>
 800a398:	6920      	ldr	r0, [r4, #16]
 800a39a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a39e:	f104 0314 	add.w	r3, r4, #20
 800a3a2:	f016 021f 	ands.w	r2, r6, #31
 800a3a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3aa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a3ae:	d025      	beq.n	800a3fc <__lshift+0x98>
 800a3b0:	2000      	movs	r0, #0
 800a3b2:	f1c2 0e20 	rsb	lr, r2, #32
 800a3b6:	468a      	mov	sl, r1
 800a3b8:	681e      	ldr	r6, [r3, #0]
 800a3ba:	4096      	lsls	r6, r2
 800a3bc:	4330      	orrs	r0, r6
 800a3be:	f84a 0b04 	str.w	r0, [sl], #4
 800a3c2:	f853 0b04 	ldr.w	r0, [r3], #4
 800a3c6:	459c      	cmp	ip, r3
 800a3c8:	fa20 f00e 	lsr.w	r0, r0, lr
 800a3cc:	d814      	bhi.n	800a3f8 <__lshift+0x94>
 800a3ce:	6048      	str	r0, [r1, #4]
 800a3d0:	b108      	cbz	r0, 800a3d6 <__lshift+0x72>
 800a3d2:	f109 0502 	add.w	r5, r9, #2
 800a3d6:	3d01      	subs	r5, #1
 800a3d8:	4638      	mov	r0, r7
 800a3da:	f8c8 5010 	str.w	r5, [r8, #16]
 800a3de:	4621      	mov	r1, r4
 800a3e0:	f7ff fdf5 	bl	8009fce <_Bfree>
 800a3e4:	4640      	mov	r0, r8
 800a3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ea:	3101      	adds	r1, #1
 800a3ec:	005b      	lsls	r3, r3, #1
 800a3ee:	e7c7      	b.n	800a380 <__lshift+0x1c>
 800a3f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	e7cd      	b.n	800a394 <__lshift+0x30>
 800a3f8:	4651      	mov	r1, sl
 800a3fa:	e7dc      	b.n	800a3b6 <__lshift+0x52>
 800a3fc:	3904      	subs	r1, #4
 800a3fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a402:	459c      	cmp	ip, r3
 800a404:	f841 2f04 	str.w	r2, [r1, #4]!
 800a408:	d8f9      	bhi.n	800a3fe <__lshift+0x9a>
 800a40a:	e7e4      	b.n	800a3d6 <__lshift+0x72>

0800a40c <__mcmp>:
 800a40c:	6903      	ldr	r3, [r0, #16]
 800a40e:	690a      	ldr	r2, [r1, #16]
 800a410:	b530      	push	{r4, r5, lr}
 800a412:	1a9b      	subs	r3, r3, r2
 800a414:	d10c      	bne.n	800a430 <__mcmp+0x24>
 800a416:	0092      	lsls	r2, r2, #2
 800a418:	3014      	adds	r0, #20
 800a41a:	3114      	adds	r1, #20
 800a41c:	1884      	adds	r4, r0, r2
 800a41e:	4411      	add	r1, r2
 800a420:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a424:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a428:	4295      	cmp	r5, r2
 800a42a:	d003      	beq.n	800a434 <__mcmp+0x28>
 800a42c:	d305      	bcc.n	800a43a <__mcmp+0x2e>
 800a42e:	2301      	movs	r3, #1
 800a430:	4618      	mov	r0, r3
 800a432:	bd30      	pop	{r4, r5, pc}
 800a434:	42a0      	cmp	r0, r4
 800a436:	d3f3      	bcc.n	800a420 <__mcmp+0x14>
 800a438:	e7fa      	b.n	800a430 <__mcmp+0x24>
 800a43a:	f04f 33ff 	mov.w	r3, #4294967295
 800a43e:	e7f7      	b.n	800a430 <__mcmp+0x24>

0800a440 <__mdiff>:
 800a440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a444:	460d      	mov	r5, r1
 800a446:	4607      	mov	r7, r0
 800a448:	4611      	mov	r1, r2
 800a44a:	4628      	mov	r0, r5
 800a44c:	4614      	mov	r4, r2
 800a44e:	f7ff ffdd 	bl	800a40c <__mcmp>
 800a452:	1e06      	subs	r6, r0, #0
 800a454:	d108      	bne.n	800a468 <__mdiff+0x28>
 800a456:	4631      	mov	r1, r6
 800a458:	4638      	mov	r0, r7
 800a45a:	f7ff fd84 	bl	8009f66 <_Balloc>
 800a45e:	2301      	movs	r3, #1
 800a460:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a468:	bfa4      	itt	ge
 800a46a:	4623      	movge	r3, r4
 800a46c:	462c      	movge	r4, r5
 800a46e:	4638      	mov	r0, r7
 800a470:	6861      	ldr	r1, [r4, #4]
 800a472:	bfa6      	itte	ge
 800a474:	461d      	movge	r5, r3
 800a476:	2600      	movge	r6, #0
 800a478:	2601      	movlt	r6, #1
 800a47a:	f7ff fd74 	bl	8009f66 <_Balloc>
 800a47e:	f04f 0e00 	mov.w	lr, #0
 800a482:	60c6      	str	r6, [r0, #12]
 800a484:	692b      	ldr	r3, [r5, #16]
 800a486:	6926      	ldr	r6, [r4, #16]
 800a488:	f104 0214 	add.w	r2, r4, #20
 800a48c:	f105 0914 	add.w	r9, r5, #20
 800a490:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a494:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a498:	f100 0114 	add.w	r1, r0, #20
 800a49c:	f852 ab04 	ldr.w	sl, [r2], #4
 800a4a0:	f859 5b04 	ldr.w	r5, [r9], #4
 800a4a4:	fa1f f38a 	uxth.w	r3, sl
 800a4a8:	4473      	add	r3, lr
 800a4aa:	b2ac      	uxth	r4, r5
 800a4ac:	1b1b      	subs	r3, r3, r4
 800a4ae:	0c2c      	lsrs	r4, r5, #16
 800a4b0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800a4b4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800a4be:	45c8      	cmp	r8, r9
 800a4c0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800a4c4:	4694      	mov	ip, r2
 800a4c6:	f841 4b04 	str.w	r4, [r1], #4
 800a4ca:	d8e7      	bhi.n	800a49c <__mdiff+0x5c>
 800a4cc:	45bc      	cmp	ip, r7
 800a4ce:	d304      	bcc.n	800a4da <__mdiff+0x9a>
 800a4d0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a4d4:	b183      	cbz	r3, 800a4f8 <__mdiff+0xb8>
 800a4d6:	6106      	str	r6, [r0, #16]
 800a4d8:	e7c4      	b.n	800a464 <__mdiff+0x24>
 800a4da:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a4de:	b2a2      	uxth	r2, r4
 800a4e0:	4472      	add	r2, lr
 800a4e2:	1413      	asrs	r3, r2, #16
 800a4e4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a4e8:	b292      	uxth	r2, r2
 800a4ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a4ee:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a4f2:	f841 2b04 	str.w	r2, [r1], #4
 800a4f6:	e7e9      	b.n	800a4cc <__mdiff+0x8c>
 800a4f8:	3e01      	subs	r6, #1
 800a4fa:	e7e9      	b.n	800a4d0 <__mdiff+0x90>

0800a4fc <__ulp>:
 800a4fc:	4b10      	ldr	r3, [pc, #64]	; (800a540 <__ulp+0x44>)
 800a4fe:	400b      	ands	r3, r1
 800a500:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a504:	2b00      	cmp	r3, #0
 800a506:	dd02      	ble.n	800a50e <__ulp+0x12>
 800a508:	2000      	movs	r0, #0
 800a50a:	4619      	mov	r1, r3
 800a50c:	4770      	bx	lr
 800a50e:	425b      	negs	r3, r3
 800a510:	151b      	asrs	r3, r3, #20
 800a512:	2b13      	cmp	r3, #19
 800a514:	f04f 0000 	mov.w	r0, #0
 800a518:	f04f 0100 	mov.w	r1, #0
 800a51c:	dc04      	bgt.n	800a528 <__ulp+0x2c>
 800a51e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a522:	fa42 f103 	asr.w	r1, r2, r3
 800a526:	4770      	bx	lr
 800a528:	2201      	movs	r2, #1
 800a52a:	3b14      	subs	r3, #20
 800a52c:	2b1e      	cmp	r3, #30
 800a52e:	bfce      	itee	gt
 800a530:	4613      	movgt	r3, r2
 800a532:	f1c3 031f 	rsble	r3, r3, #31
 800a536:	fa02 f303 	lslle.w	r3, r2, r3
 800a53a:	4618      	mov	r0, r3
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	7ff00000 	.word	0x7ff00000

0800a544 <__b2d>:
 800a544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a548:	6907      	ldr	r7, [r0, #16]
 800a54a:	f100 0914 	add.w	r9, r0, #20
 800a54e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a552:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a556:	f1a7 0804 	sub.w	r8, r7, #4
 800a55a:	4630      	mov	r0, r6
 800a55c:	f7ff fdc7 	bl	800a0ee <__hi0bits>
 800a560:	f1c0 0320 	rsb	r3, r0, #32
 800a564:	280a      	cmp	r0, #10
 800a566:	600b      	str	r3, [r1, #0]
 800a568:	491e      	ldr	r1, [pc, #120]	; (800a5e4 <__b2d+0xa0>)
 800a56a:	dc17      	bgt.n	800a59c <__b2d+0x58>
 800a56c:	45c1      	cmp	r9, r8
 800a56e:	bf28      	it	cs
 800a570:	2200      	movcs	r2, #0
 800a572:	f1c0 0c0b 	rsb	ip, r0, #11
 800a576:	fa26 f30c 	lsr.w	r3, r6, ip
 800a57a:	bf38      	it	cc
 800a57c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a580:	ea43 0501 	orr.w	r5, r3, r1
 800a584:	f100 0315 	add.w	r3, r0, #21
 800a588:	fa06 f303 	lsl.w	r3, r6, r3
 800a58c:	fa22 f20c 	lsr.w	r2, r2, ip
 800a590:	ea43 0402 	orr.w	r4, r3, r2
 800a594:	4620      	mov	r0, r4
 800a596:	4629      	mov	r1, r5
 800a598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a59c:	45c1      	cmp	r9, r8
 800a59e:	bf3a      	itte	cc
 800a5a0:	f1a7 0808 	subcc.w	r8, r7, #8
 800a5a4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a5a8:	2200      	movcs	r2, #0
 800a5aa:	f1b0 030b 	subs.w	r3, r0, #11
 800a5ae:	d015      	beq.n	800a5dc <__b2d+0x98>
 800a5b0:	409e      	lsls	r6, r3
 800a5b2:	f1c3 0720 	rsb	r7, r3, #32
 800a5b6:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800a5ba:	fa22 f107 	lsr.w	r1, r2, r7
 800a5be:	45c8      	cmp	r8, r9
 800a5c0:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800a5c4:	ea46 0501 	orr.w	r5, r6, r1
 800a5c8:	bf94      	ite	ls
 800a5ca:	2100      	movls	r1, #0
 800a5cc:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a5d0:	fa02 f003 	lsl.w	r0, r2, r3
 800a5d4:	40f9      	lsrs	r1, r7
 800a5d6:	ea40 0401 	orr.w	r4, r0, r1
 800a5da:	e7db      	b.n	800a594 <__b2d+0x50>
 800a5dc:	ea46 0501 	orr.w	r5, r6, r1
 800a5e0:	4614      	mov	r4, r2
 800a5e2:	e7d7      	b.n	800a594 <__b2d+0x50>
 800a5e4:	3ff00000 	.word	0x3ff00000

0800a5e8 <__d2b>:
 800a5e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a5ec:	461c      	mov	r4, r3
 800a5ee:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800a5f2:	2101      	movs	r1, #1
 800a5f4:	4690      	mov	r8, r2
 800a5f6:	f7ff fcb6 	bl	8009f66 <_Balloc>
 800a5fa:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800a5fe:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a602:	4607      	mov	r7, r0
 800a604:	bb34      	cbnz	r4, 800a654 <__d2b+0x6c>
 800a606:	9201      	str	r2, [sp, #4]
 800a608:	f1b8 0200 	subs.w	r2, r8, #0
 800a60c:	d027      	beq.n	800a65e <__d2b+0x76>
 800a60e:	a802      	add	r0, sp, #8
 800a610:	f840 2d08 	str.w	r2, [r0, #-8]!
 800a614:	f7ff fd8a 	bl	800a12c <__lo0bits>
 800a618:	9900      	ldr	r1, [sp, #0]
 800a61a:	b1f0      	cbz	r0, 800a65a <__d2b+0x72>
 800a61c:	9a01      	ldr	r2, [sp, #4]
 800a61e:	f1c0 0320 	rsb	r3, r0, #32
 800a622:	fa02 f303 	lsl.w	r3, r2, r3
 800a626:	430b      	orrs	r3, r1
 800a628:	40c2      	lsrs	r2, r0
 800a62a:	617b      	str	r3, [r7, #20]
 800a62c:	9201      	str	r2, [sp, #4]
 800a62e:	9b01      	ldr	r3, [sp, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	bf14      	ite	ne
 800a634:	2102      	movne	r1, #2
 800a636:	2101      	moveq	r1, #1
 800a638:	61bb      	str	r3, [r7, #24]
 800a63a:	6139      	str	r1, [r7, #16]
 800a63c:	b1c4      	cbz	r4, 800a670 <__d2b+0x88>
 800a63e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a642:	4404      	add	r4, r0
 800a644:	6034      	str	r4, [r6, #0]
 800a646:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a64a:	6028      	str	r0, [r5, #0]
 800a64c:	4638      	mov	r0, r7
 800a64e:	b002      	add	sp, #8
 800a650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a654:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a658:	e7d5      	b.n	800a606 <__d2b+0x1e>
 800a65a:	6179      	str	r1, [r7, #20]
 800a65c:	e7e7      	b.n	800a62e <__d2b+0x46>
 800a65e:	a801      	add	r0, sp, #4
 800a660:	f7ff fd64 	bl	800a12c <__lo0bits>
 800a664:	2101      	movs	r1, #1
 800a666:	9b01      	ldr	r3, [sp, #4]
 800a668:	6139      	str	r1, [r7, #16]
 800a66a:	617b      	str	r3, [r7, #20]
 800a66c:	3020      	adds	r0, #32
 800a66e:	e7e5      	b.n	800a63c <__d2b+0x54>
 800a670:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a674:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a678:	6030      	str	r0, [r6, #0]
 800a67a:	6918      	ldr	r0, [r3, #16]
 800a67c:	f7ff fd37 	bl	800a0ee <__hi0bits>
 800a680:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a684:	e7e1      	b.n	800a64a <__d2b+0x62>

0800a686 <__ratio>:
 800a686:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68a:	4688      	mov	r8, r1
 800a68c:	4669      	mov	r1, sp
 800a68e:	4681      	mov	r9, r0
 800a690:	f7ff ff58 	bl	800a544 <__b2d>
 800a694:	468b      	mov	fp, r1
 800a696:	4606      	mov	r6, r0
 800a698:	460f      	mov	r7, r1
 800a69a:	4640      	mov	r0, r8
 800a69c:	a901      	add	r1, sp, #4
 800a69e:	f7ff ff51 	bl	800a544 <__b2d>
 800a6a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a6aa:	460d      	mov	r5, r1
 800a6ac:	eba3 0c02 	sub.w	ip, r3, r2
 800a6b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a6b4:	1a9b      	subs	r3, r3, r2
 800a6b6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	bfd5      	itete	le
 800a6be:	460a      	movle	r2, r1
 800a6c0:	463a      	movgt	r2, r7
 800a6c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a6c6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a6ca:	bfd8      	it	le
 800a6cc:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800a6d0:	462b      	mov	r3, r5
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	4659      	mov	r1, fp
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	f7f6 f828 	bl	800072c <__aeabi_ddiv>
 800a6dc:	b003      	add	sp, #12
 800a6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6e2 <__copybits>:
 800a6e2:	3901      	subs	r1, #1
 800a6e4:	b510      	push	{r4, lr}
 800a6e6:	1149      	asrs	r1, r1, #5
 800a6e8:	6914      	ldr	r4, [r2, #16]
 800a6ea:	3101      	adds	r1, #1
 800a6ec:	f102 0314 	add.w	r3, r2, #20
 800a6f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a6f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a6f8:	42a3      	cmp	r3, r4
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	d303      	bcc.n	800a706 <__copybits+0x24>
 800a6fe:	2300      	movs	r3, #0
 800a700:	428a      	cmp	r2, r1
 800a702:	d305      	bcc.n	800a710 <__copybits+0x2e>
 800a704:	bd10      	pop	{r4, pc}
 800a706:	f853 2b04 	ldr.w	r2, [r3], #4
 800a70a:	f840 2b04 	str.w	r2, [r0], #4
 800a70e:	e7f3      	b.n	800a6f8 <__copybits+0x16>
 800a710:	f842 3b04 	str.w	r3, [r2], #4
 800a714:	e7f4      	b.n	800a700 <__copybits+0x1e>

0800a716 <__any_on>:
 800a716:	f100 0214 	add.w	r2, r0, #20
 800a71a:	6900      	ldr	r0, [r0, #16]
 800a71c:	114b      	asrs	r3, r1, #5
 800a71e:	4298      	cmp	r0, r3
 800a720:	b510      	push	{r4, lr}
 800a722:	db11      	blt.n	800a748 <__any_on+0x32>
 800a724:	dd0a      	ble.n	800a73c <__any_on+0x26>
 800a726:	f011 011f 	ands.w	r1, r1, #31
 800a72a:	d007      	beq.n	800a73c <__any_on+0x26>
 800a72c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a730:	fa24 f001 	lsr.w	r0, r4, r1
 800a734:	fa00 f101 	lsl.w	r1, r0, r1
 800a738:	428c      	cmp	r4, r1
 800a73a:	d10b      	bne.n	800a754 <__any_on+0x3e>
 800a73c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a740:	4293      	cmp	r3, r2
 800a742:	d803      	bhi.n	800a74c <__any_on+0x36>
 800a744:	2000      	movs	r0, #0
 800a746:	bd10      	pop	{r4, pc}
 800a748:	4603      	mov	r3, r0
 800a74a:	e7f7      	b.n	800a73c <__any_on+0x26>
 800a74c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a750:	2900      	cmp	r1, #0
 800a752:	d0f5      	beq.n	800a740 <__any_on+0x2a>
 800a754:	2001      	movs	r0, #1
 800a756:	e7f6      	b.n	800a746 <__any_on+0x30>

0800a758 <_calloc_r>:
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	fb02 f401 	mul.w	r4, r2, r1
 800a75e:	4621      	mov	r1, r4
 800a760:	f000 f854 	bl	800a80c <_malloc_r>
 800a764:	4605      	mov	r5, r0
 800a766:	b118      	cbz	r0, 800a770 <_calloc_r+0x18>
 800a768:	4622      	mov	r2, r4
 800a76a:	2100      	movs	r1, #0
 800a76c:	f7fc ffa2 	bl	80076b4 <memset>
 800a770:	4628      	mov	r0, r5
 800a772:	bd38      	pop	{r3, r4, r5, pc}

0800a774 <_free_r>:
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	4605      	mov	r5, r0
 800a778:	2900      	cmp	r1, #0
 800a77a:	d043      	beq.n	800a804 <_free_r+0x90>
 800a77c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a780:	1f0c      	subs	r4, r1, #4
 800a782:	2b00      	cmp	r3, #0
 800a784:	bfb8      	it	lt
 800a786:	18e4      	addlt	r4, r4, r3
 800a788:	f000 fa34 	bl	800abf4 <__malloc_lock>
 800a78c:	4a1e      	ldr	r2, [pc, #120]	; (800a808 <_free_r+0x94>)
 800a78e:	6813      	ldr	r3, [r2, #0]
 800a790:	4610      	mov	r0, r2
 800a792:	b933      	cbnz	r3, 800a7a2 <_free_r+0x2e>
 800a794:	6063      	str	r3, [r4, #4]
 800a796:	6014      	str	r4, [r2, #0]
 800a798:	4628      	mov	r0, r5
 800a79a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a79e:	f000 ba2a 	b.w	800abf6 <__malloc_unlock>
 800a7a2:	42a3      	cmp	r3, r4
 800a7a4:	d90b      	bls.n	800a7be <_free_r+0x4a>
 800a7a6:	6821      	ldr	r1, [r4, #0]
 800a7a8:	1862      	adds	r2, r4, r1
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	bf01      	itttt	eq
 800a7ae:	681a      	ldreq	r2, [r3, #0]
 800a7b0:	685b      	ldreq	r3, [r3, #4]
 800a7b2:	1852      	addeq	r2, r2, r1
 800a7b4:	6022      	streq	r2, [r4, #0]
 800a7b6:	6063      	str	r3, [r4, #4]
 800a7b8:	6004      	str	r4, [r0, #0]
 800a7ba:	e7ed      	b.n	800a798 <_free_r+0x24>
 800a7bc:	4613      	mov	r3, r2
 800a7be:	685a      	ldr	r2, [r3, #4]
 800a7c0:	b10a      	cbz	r2, 800a7c6 <_free_r+0x52>
 800a7c2:	42a2      	cmp	r2, r4
 800a7c4:	d9fa      	bls.n	800a7bc <_free_r+0x48>
 800a7c6:	6819      	ldr	r1, [r3, #0]
 800a7c8:	1858      	adds	r0, r3, r1
 800a7ca:	42a0      	cmp	r0, r4
 800a7cc:	d10b      	bne.n	800a7e6 <_free_r+0x72>
 800a7ce:	6820      	ldr	r0, [r4, #0]
 800a7d0:	4401      	add	r1, r0
 800a7d2:	1858      	adds	r0, r3, r1
 800a7d4:	4282      	cmp	r2, r0
 800a7d6:	6019      	str	r1, [r3, #0]
 800a7d8:	d1de      	bne.n	800a798 <_free_r+0x24>
 800a7da:	6810      	ldr	r0, [r2, #0]
 800a7dc:	6852      	ldr	r2, [r2, #4]
 800a7de:	4401      	add	r1, r0
 800a7e0:	6019      	str	r1, [r3, #0]
 800a7e2:	605a      	str	r2, [r3, #4]
 800a7e4:	e7d8      	b.n	800a798 <_free_r+0x24>
 800a7e6:	d902      	bls.n	800a7ee <_free_r+0x7a>
 800a7e8:	230c      	movs	r3, #12
 800a7ea:	602b      	str	r3, [r5, #0]
 800a7ec:	e7d4      	b.n	800a798 <_free_r+0x24>
 800a7ee:	6820      	ldr	r0, [r4, #0]
 800a7f0:	1821      	adds	r1, r4, r0
 800a7f2:	428a      	cmp	r2, r1
 800a7f4:	bf01      	itttt	eq
 800a7f6:	6811      	ldreq	r1, [r2, #0]
 800a7f8:	6852      	ldreq	r2, [r2, #4]
 800a7fa:	1809      	addeq	r1, r1, r0
 800a7fc:	6021      	streq	r1, [r4, #0]
 800a7fe:	6062      	str	r2, [r4, #4]
 800a800:	605c      	str	r4, [r3, #4]
 800a802:	e7c9      	b.n	800a798 <_free_r+0x24>
 800a804:	bd38      	pop	{r3, r4, r5, pc}
 800a806:	bf00      	nop
 800a808:	20000410 	.word	0x20000410

0800a80c <_malloc_r>:
 800a80c:	b570      	push	{r4, r5, r6, lr}
 800a80e:	1ccd      	adds	r5, r1, #3
 800a810:	f025 0503 	bic.w	r5, r5, #3
 800a814:	3508      	adds	r5, #8
 800a816:	2d0c      	cmp	r5, #12
 800a818:	bf38      	it	cc
 800a81a:	250c      	movcc	r5, #12
 800a81c:	2d00      	cmp	r5, #0
 800a81e:	4606      	mov	r6, r0
 800a820:	db01      	blt.n	800a826 <_malloc_r+0x1a>
 800a822:	42a9      	cmp	r1, r5
 800a824:	d903      	bls.n	800a82e <_malloc_r+0x22>
 800a826:	230c      	movs	r3, #12
 800a828:	6033      	str	r3, [r6, #0]
 800a82a:	2000      	movs	r0, #0
 800a82c:	bd70      	pop	{r4, r5, r6, pc}
 800a82e:	f000 f9e1 	bl	800abf4 <__malloc_lock>
 800a832:	4a21      	ldr	r2, [pc, #132]	; (800a8b8 <_malloc_r+0xac>)
 800a834:	6814      	ldr	r4, [r2, #0]
 800a836:	4621      	mov	r1, r4
 800a838:	b991      	cbnz	r1, 800a860 <_malloc_r+0x54>
 800a83a:	4c20      	ldr	r4, [pc, #128]	; (800a8bc <_malloc_r+0xb0>)
 800a83c:	6823      	ldr	r3, [r4, #0]
 800a83e:	b91b      	cbnz	r3, 800a848 <_malloc_r+0x3c>
 800a840:	4630      	mov	r0, r6
 800a842:	f000 f98f 	bl	800ab64 <_sbrk_r>
 800a846:	6020      	str	r0, [r4, #0]
 800a848:	4629      	mov	r1, r5
 800a84a:	4630      	mov	r0, r6
 800a84c:	f000 f98a 	bl	800ab64 <_sbrk_r>
 800a850:	1c43      	adds	r3, r0, #1
 800a852:	d124      	bne.n	800a89e <_malloc_r+0x92>
 800a854:	230c      	movs	r3, #12
 800a856:	4630      	mov	r0, r6
 800a858:	6033      	str	r3, [r6, #0]
 800a85a:	f000 f9cc 	bl	800abf6 <__malloc_unlock>
 800a85e:	e7e4      	b.n	800a82a <_malloc_r+0x1e>
 800a860:	680b      	ldr	r3, [r1, #0]
 800a862:	1b5b      	subs	r3, r3, r5
 800a864:	d418      	bmi.n	800a898 <_malloc_r+0x8c>
 800a866:	2b0b      	cmp	r3, #11
 800a868:	d90f      	bls.n	800a88a <_malloc_r+0x7e>
 800a86a:	600b      	str	r3, [r1, #0]
 800a86c:	18cc      	adds	r4, r1, r3
 800a86e:	50cd      	str	r5, [r1, r3]
 800a870:	4630      	mov	r0, r6
 800a872:	f000 f9c0 	bl	800abf6 <__malloc_unlock>
 800a876:	f104 000b 	add.w	r0, r4, #11
 800a87a:	1d23      	adds	r3, r4, #4
 800a87c:	f020 0007 	bic.w	r0, r0, #7
 800a880:	1ac3      	subs	r3, r0, r3
 800a882:	d0d3      	beq.n	800a82c <_malloc_r+0x20>
 800a884:	425a      	negs	r2, r3
 800a886:	50e2      	str	r2, [r4, r3]
 800a888:	e7d0      	b.n	800a82c <_malloc_r+0x20>
 800a88a:	684b      	ldr	r3, [r1, #4]
 800a88c:	428c      	cmp	r4, r1
 800a88e:	bf16      	itet	ne
 800a890:	6063      	strne	r3, [r4, #4]
 800a892:	6013      	streq	r3, [r2, #0]
 800a894:	460c      	movne	r4, r1
 800a896:	e7eb      	b.n	800a870 <_malloc_r+0x64>
 800a898:	460c      	mov	r4, r1
 800a89a:	6849      	ldr	r1, [r1, #4]
 800a89c:	e7cc      	b.n	800a838 <_malloc_r+0x2c>
 800a89e:	1cc4      	adds	r4, r0, #3
 800a8a0:	f024 0403 	bic.w	r4, r4, #3
 800a8a4:	42a0      	cmp	r0, r4
 800a8a6:	d005      	beq.n	800a8b4 <_malloc_r+0xa8>
 800a8a8:	1a21      	subs	r1, r4, r0
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	f000 f95a 	bl	800ab64 <_sbrk_r>
 800a8b0:	3001      	adds	r0, #1
 800a8b2:	d0cf      	beq.n	800a854 <_malloc_r+0x48>
 800a8b4:	6025      	str	r5, [r4, #0]
 800a8b6:	e7db      	b.n	800a870 <_malloc_r+0x64>
 800a8b8:	20000410 	.word	0x20000410
 800a8bc:	20000414 	.word	0x20000414

0800a8c0 <__ssputs_r>:
 800a8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c4:	688e      	ldr	r6, [r1, #8]
 800a8c6:	4682      	mov	sl, r0
 800a8c8:	429e      	cmp	r6, r3
 800a8ca:	460c      	mov	r4, r1
 800a8cc:	4690      	mov	r8, r2
 800a8ce:	4699      	mov	r9, r3
 800a8d0:	d837      	bhi.n	800a942 <__ssputs_r+0x82>
 800a8d2:	898a      	ldrh	r2, [r1, #12]
 800a8d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8d8:	d031      	beq.n	800a93e <__ssputs_r+0x7e>
 800a8da:	2302      	movs	r3, #2
 800a8dc:	6825      	ldr	r5, [r4, #0]
 800a8de:	6909      	ldr	r1, [r1, #16]
 800a8e0:	1a6f      	subs	r7, r5, r1
 800a8e2:	6965      	ldr	r5, [r4, #20]
 800a8e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8e8:	fb95 f5f3 	sdiv	r5, r5, r3
 800a8ec:	f109 0301 	add.w	r3, r9, #1
 800a8f0:	443b      	add	r3, r7
 800a8f2:	429d      	cmp	r5, r3
 800a8f4:	bf38      	it	cc
 800a8f6:	461d      	movcc	r5, r3
 800a8f8:	0553      	lsls	r3, r2, #21
 800a8fa:	d530      	bpl.n	800a95e <__ssputs_r+0x9e>
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	f7ff ff85 	bl	800a80c <_malloc_r>
 800a902:	4606      	mov	r6, r0
 800a904:	b950      	cbnz	r0, 800a91c <__ssputs_r+0x5c>
 800a906:	230c      	movs	r3, #12
 800a908:	f04f 30ff 	mov.w	r0, #4294967295
 800a90c:	f8ca 3000 	str.w	r3, [sl]
 800a910:	89a3      	ldrh	r3, [r4, #12]
 800a912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a916:	81a3      	strh	r3, [r4, #12]
 800a918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a91c:	463a      	mov	r2, r7
 800a91e:	6921      	ldr	r1, [r4, #16]
 800a920:	f7ff fb16 	bl	8009f50 <memcpy>
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a92a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a92e:	81a3      	strh	r3, [r4, #12]
 800a930:	6126      	str	r6, [r4, #16]
 800a932:	443e      	add	r6, r7
 800a934:	6026      	str	r6, [r4, #0]
 800a936:	464e      	mov	r6, r9
 800a938:	6165      	str	r5, [r4, #20]
 800a93a:	1bed      	subs	r5, r5, r7
 800a93c:	60a5      	str	r5, [r4, #8]
 800a93e:	454e      	cmp	r6, r9
 800a940:	d900      	bls.n	800a944 <__ssputs_r+0x84>
 800a942:	464e      	mov	r6, r9
 800a944:	4632      	mov	r2, r6
 800a946:	4641      	mov	r1, r8
 800a948:	6820      	ldr	r0, [r4, #0]
 800a94a:	f000 f93a 	bl	800abc2 <memmove>
 800a94e:	68a3      	ldr	r3, [r4, #8]
 800a950:	2000      	movs	r0, #0
 800a952:	1b9b      	subs	r3, r3, r6
 800a954:	60a3      	str	r3, [r4, #8]
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	441e      	add	r6, r3
 800a95a:	6026      	str	r6, [r4, #0]
 800a95c:	e7dc      	b.n	800a918 <__ssputs_r+0x58>
 800a95e:	462a      	mov	r2, r5
 800a960:	f000 f94a 	bl	800abf8 <_realloc_r>
 800a964:	4606      	mov	r6, r0
 800a966:	2800      	cmp	r0, #0
 800a968:	d1e2      	bne.n	800a930 <__ssputs_r+0x70>
 800a96a:	6921      	ldr	r1, [r4, #16]
 800a96c:	4650      	mov	r0, sl
 800a96e:	f7ff ff01 	bl	800a774 <_free_r>
 800a972:	e7c8      	b.n	800a906 <__ssputs_r+0x46>

0800a974 <_svfiprintf_r>:
 800a974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a978:	461d      	mov	r5, r3
 800a97a:	898b      	ldrh	r3, [r1, #12]
 800a97c:	b09d      	sub	sp, #116	; 0x74
 800a97e:	061f      	lsls	r7, r3, #24
 800a980:	4680      	mov	r8, r0
 800a982:	460c      	mov	r4, r1
 800a984:	4616      	mov	r6, r2
 800a986:	d50f      	bpl.n	800a9a8 <_svfiprintf_r+0x34>
 800a988:	690b      	ldr	r3, [r1, #16]
 800a98a:	b96b      	cbnz	r3, 800a9a8 <_svfiprintf_r+0x34>
 800a98c:	2140      	movs	r1, #64	; 0x40
 800a98e:	f7ff ff3d 	bl	800a80c <_malloc_r>
 800a992:	6020      	str	r0, [r4, #0]
 800a994:	6120      	str	r0, [r4, #16]
 800a996:	b928      	cbnz	r0, 800a9a4 <_svfiprintf_r+0x30>
 800a998:	230c      	movs	r3, #12
 800a99a:	f8c8 3000 	str.w	r3, [r8]
 800a99e:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a2:	e0c8      	b.n	800ab36 <_svfiprintf_r+0x1c2>
 800a9a4:	2340      	movs	r3, #64	; 0x40
 800a9a6:	6163      	str	r3, [r4, #20]
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ac:	2320      	movs	r3, #32
 800a9ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9b2:	2330      	movs	r3, #48	; 0x30
 800a9b4:	f04f 0b01 	mov.w	fp, #1
 800a9b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9bc:	9503      	str	r5, [sp, #12]
 800a9be:	4637      	mov	r7, r6
 800a9c0:	463d      	mov	r5, r7
 800a9c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a9c6:	b10b      	cbz	r3, 800a9cc <_svfiprintf_r+0x58>
 800a9c8:	2b25      	cmp	r3, #37	; 0x25
 800a9ca:	d13e      	bne.n	800aa4a <_svfiprintf_r+0xd6>
 800a9cc:	ebb7 0a06 	subs.w	sl, r7, r6
 800a9d0:	d00b      	beq.n	800a9ea <_svfiprintf_r+0x76>
 800a9d2:	4653      	mov	r3, sl
 800a9d4:	4632      	mov	r2, r6
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	4640      	mov	r0, r8
 800a9da:	f7ff ff71 	bl	800a8c0 <__ssputs_r>
 800a9de:	3001      	adds	r0, #1
 800a9e0:	f000 80a4 	beq.w	800ab2c <_svfiprintf_r+0x1b8>
 800a9e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e6:	4453      	add	r3, sl
 800a9e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ea:	783b      	ldrb	r3, [r7, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f000 809d 	beq.w	800ab2c <_svfiprintf_r+0x1b8>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9fc:	9304      	str	r3, [sp, #16]
 800a9fe:	9307      	str	r3, [sp, #28]
 800aa00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa04:	931a      	str	r3, [sp, #104]	; 0x68
 800aa06:	462f      	mov	r7, r5
 800aa08:	2205      	movs	r2, #5
 800aa0a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800aa0e:	4850      	ldr	r0, [pc, #320]	; (800ab50 <_svfiprintf_r+0x1dc>)
 800aa10:	f7ff fa90 	bl	8009f34 <memchr>
 800aa14:	9b04      	ldr	r3, [sp, #16]
 800aa16:	b9d0      	cbnz	r0, 800aa4e <_svfiprintf_r+0xda>
 800aa18:	06d9      	lsls	r1, r3, #27
 800aa1a:	bf44      	itt	mi
 800aa1c:	2220      	movmi	r2, #32
 800aa1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aa22:	071a      	lsls	r2, r3, #28
 800aa24:	bf44      	itt	mi
 800aa26:	222b      	movmi	r2, #43	; 0x2b
 800aa28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aa2c:	782a      	ldrb	r2, [r5, #0]
 800aa2e:	2a2a      	cmp	r2, #42	; 0x2a
 800aa30:	d015      	beq.n	800aa5e <_svfiprintf_r+0xea>
 800aa32:	462f      	mov	r7, r5
 800aa34:	2000      	movs	r0, #0
 800aa36:	250a      	movs	r5, #10
 800aa38:	9a07      	ldr	r2, [sp, #28]
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa40:	3b30      	subs	r3, #48	; 0x30
 800aa42:	2b09      	cmp	r3, #9
 800aa44:	d94d      	bls.n	800aae2 <_svfiprintf_r+0x16e>
 800aa46:	b1b8      	cbz	r0, 800aa78 <_svfiprintf_r+0x104>
 800aa48:	e00f      	b.n	800aa6a <_svfiprintf_r+0xf6>
 800aa4a:	462f      	mov	r7, r5
 800aa4c:	e7b8      	b.n	800a9c0 <_svfiprintf_r+0x4c>
 800aa4e:	4a40      	ldr	r2, [pc, #256]	; (800ab50 <_svfiprintf_r+0x1dc>)
 800aa50:	463d      	mov	r5, r7
 800aa52:	1a80      	subs	r0, r0, r2
 800aa54:	fa0b f000 	lsl.w	r0, fp, r0
 800aa58:	4318      	orrs	r0, r3
 800aa5a:	9004      	str	r0, [sp, #16]
 800aa5c:	e7d3      	b.n	800aa06 <_svfiprintf_r+0x92>
 800aa5e:	9a03      	ldr	r2, [sp, #12]
 800aa60:	1d11      	adds	r1, r2, #4
 800aa62:	6812      	ldr	r2, [r2, #0]
 800aa64:	9103      	str	r1, [sp, #12]
 800aa66:	2a00      	cmp	r2, #0
 800aa68:	db01      	blt.n	800aa6e <_svfiprintf_r+0xfa>
 800aa6a:	9207      	str	r2, [sp, #28]
 800aa6c:	e004      	b.n	800aa78 <_svfiprintf_r+0x104>
 800aa6e:	4252      	negs	r2, r2
 800aa70:	f043 0302 	orr.w	r3, r3, #2
 800aa74:	9207      	str	r2, [sp, #28]
 800aa76:	9304      	str	r3, [sp, #16]
 800aa78:	783b      	ldrb	r3, [r7, #0]
 800aa7a:	2b2e      	cmp	r3, #46	; 0x2e
 800aa7c:	d10c      	bne.n	800aa98 <_svfiprintf_r+0x124>
 800aa7e:	787b      	ldrb	r3, [r7, #1]
 800aa80:	2b2a      	cmp	r3, #42	; 0x2a
 800aa82:	d133      	bne.n	800aaec <_svfiprintf_r+0x178>
 800aa84:	9b03      	ldr	r3, [sp, #12]
 800aa86:	3702      	adds	r7, #2
 800aa88:	1d1a      	adds	r2, r3, #4
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	9203      	str	r2, [sp, #12]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	bfb8      	it	lt
 800aa92:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa96:	9305      	str	r3, [sp, #20]
 800aa98:	4d2e      	ldr	r5, [pc, #184]	; (800ab54 <_svfiprintf_r+0x1e0>)
 800aa9a:	2203      	movs	r2, #3
 800aa9c:	7839      	ldrb	r1, [r7, #0]
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	f7ff fa48 	bl	8009f34 <memchr>
 800aaa4:	b138      	cbz	r0, 800aab6 <_svfiprintf_r+0x142>
 800aaa6:	2340      	movs	r3, #64	; 0x40
 800aaa8:	1b40      	subs	r0, r0, r5
 800aaaa:	fa03 f000 	lsl.w	r0, r3, r0
 800aaae:	9b04      	ldr	r3, [sp, #16]
 800aab0:	3701      	adds	r7, #1
 800aab2:	4303      	orrs	r3, r0
 800aab4:	9304      	str	r3, [sp, #16]
 800aab6:	7839      	ldrb	r1, [r7, #0]
 800aab8:	2206      	movs	r2, #6
 800aaba:	4827      	ldr	r0, [pc, #156]	; (800ab58 <_svfiprintf_r+0x1e4>)
 800aabc:	1c7e      	adds	r6, r7, #1
 800aabe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aac2:	f7ff fa37 	bl	8009f34 <memchr>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	d038      	beq.n	800ab3c <_svfiprintf_r+0x1c8>
 800aaca:	4b24      	ldr	r3, [pc, #144]	; (800ab5c <_svfiprintf_r+0x1e8>)
 800aacc:	bb13      	cbnz	r3, 800ab14 <_svfiprintf_r+0x1a0>
 800aace:	9b03      	ldr	r3, [sp, #12]
 800aad0:	3307      	adds	r3, #7
 800aad2:	f023 0307 	bic.w	r3, r3, #7
 800aad6:	3308      	adds	r3, #8
 800aad8:	9303      	str	r3, [sp, #12]
 800aada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aadc:	444b      	add	r3, r9
 800aade:	9309      	str	r3, [sp, #36]	; 0x24
 800aae0:	e76d      	b.n	800a9be <_svfiprintf_r+0x4a>
 800aae2:	fb05 3202 	mla	r2, r5, r2, r3
 800aae6:	2001      	movs	r0, #1
 800aae8:	460f      	mov	r7, r1
 800aaea:	e7a6      	b.n	800aa3a <_svfiprintf_r+0xc6>
 800aaec:	2300      	movs	r3, #0
 800aaee:	250a      	movs	r5, #10
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	3701      	adds	r7, #1
 800aaf4:	9305      	str	r3, [sp, #20]
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aafc:	3a30      	subs	r2, #48	; 0x30
 800aafe:	2a09      	cmp	r2, #9
 800ab00:	d903      	bls.n	800ab0a <_svfiprintf_r+0x196>
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d0c8      	beq.n	800aa98 <_svfiprintf_r+0x124>
 800ab06:	9105      	str	r1, [sp, #20]
 800ab08:	e7c6      	b.n	800aa98 <_svfiprintf_r+0x124>
 800ab0a:	fb05 2101 	mla	r1, r5, r1, r2
 800ab0e:	2301      	movs	r3, #1
 800ab10:	4607      	mov	r7, r0
 800ab12:	e7f0      	b.n	800aaf6 <_svfiprintf_r+0x182>
 800ab14:	ab03      	add	r3, sp, #12
 800ab16:	9300      	str	r3, [sp, #0]
 800ab18:	4622      	mov	r2, r4
 800ab1a:	4b11      	ldr	r3, [pc, #68]	; (800ab60 <_svfiprintf_r+0x1ec>)
 800ab1c:	a904      	add	r1, sp, #16
 800ab1e:	4640      	mov	r0, r8
 800ab20:	f7fc fe62 	bl	80077e8 <_printf_float>
 800ab24:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ab28:	4681      	mov	r9, r0
 800ab2a:	d1d6      	bne.n	800aada <_svfiprintf_r+0x166>
 800ab2c:	89a3      	ldrh	r3, [r4, #12]
 800ab2e:	065b      	lsls	r3, r3, #25
 800ab30:	f53f af35 	bmi.w	800a99e <_svfiprintf_r+0x2a>
 800ab34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab36:	b01d      	add	sp, #116	; 0x74
 800ab38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3c:	ab03      	add	r3, sp, #12
 800ab3e:	9300      	str	r3, [sp, #0]
 800ab40:	4622      	mov	r2, r4
 800ab42:	4b07      	ldr	r3, [pc, #28]	; (800ab60 <_svfiprintf_r+0x1ec>)
 800ab44:	a904      	add	r1, sp, #16
 800ab46:	4640      	mov	r0, r8
 800ab48:	f7fd f8fa 	bl	8007d40 <_printf_i>
 800ab4c:	e7ea      	b.n	800ab24 <_svfiprintf_r+0x1b0>
 800ab4e:	bf00      	nop
 800ab50:	0800cb7c 	.word	0x0800cb7c
 800ab54:	0800cb82 	.word	0x0800cb82
 800ab58:	0800cb86 	.word	0x0800cb86
 800ab5c:	080077e9 	.word	0x080077e9
 800ab60:	0800a8c1 	.word	0x0800a8c1

0800ab64 <_sbrk_r>:
 800ab64:	b538      	push	{r3, r4, r5, lr}
 800ab66:	2300      	movs	r3, #0
 800ab68:	4c05      	ldr	r4, [pc, #20]	; (800ab80 <_sbrk_r+0x1c>)
 800ab6a:	4605      	mov	r5, r0
 800ab6c:	4608      	mov	r0, r1
 800ab6e:	6023      	str	r3, [r4, #0]
 800ab70:	f7f9 f82a 	bl	8003bc8 <_sbrk>
 800ab74:	1c43      	adds	r3, r0, #1
 800ab76:	d102      	bne.n	800ab7e <_sbrk_r+0x1a>
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	b103      	cbz	r3, 800ab7e <_sbrk_r+0x1a>
 800ab7c:	602b      	str	r3, [r5, #0]
 800ab7e:	bd38      	pop	{r3, r4, r5, pc}
 800ab80:	200006bc 	.word	0x200006bc

0800ab84 <strncmp>:
 800ab84:	b510      	push	{r4, lr}
 800ab86:	b16a      	cbz	r2, 800aba4 <strncmp+0x20>
 800ab88:	3901      	subs	r1, #1
 800ab8a:	1884      	adds	r4, r0, r2
 800ab8c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ab90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d103      	bne.n	800aba0 <strncmp+0x1c>
 800ab98:	42a0      	cmp	r0, r4
 800ab9a:	d001      	beq.n	800aba0 <strncmp+0x1c>
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1f5      	bne.n	800ab8c <strncmp+0x8>
 800aba0:	1a98      	subs	r0, r3, r2
 800aba2:	bd10      	pop	{r4, pc}
 800aba4:	4610      	mov	r0, r2
 800aba6:	e7fc      	b.n	800aba2 <strncmp+0x1e>

0800aba8 <__ascii_wctomb>:
 800aba8:	b149      	cbz	r1, 800abbe <__ascii_wctomb+0x16>
 800abaa:	2aff      	cmp	r2, #255	; 0xff
 800abac:	bf8b      	itete	hi
 800abae:	238a      	movhi	r3, #138	; 0x8a
 800abb0:	700a      	strbls	r2, [r1, #0]
 800abb2:	6003      	strhi	r3, [r0, #0]
 800abb4:	2001      	movls	r0, #1
 800abb6:	bf88      	it	hi
 800abb8:	f04f 30ff 	movhi.w	r0, #4294967295
 800abbc:	4770      	bx	lr
 800abbe:	4608      	mov	r0, r1
 800abc0:	4770      	bx	lr

0800abc2 <memmove>:
 800abc2:	4288      	cmp	r0, r1
 800abc4:	b510      	push	{r4, lr}
 800abc6:	eb01 0302 	add.w	r3, r1, r2
 800abca:	d807      	bhi.n	800abdc <memmove+0x1a>
 800abcc:	1e42      	subs	r2, r0, #1
 800abce:	4299      	cmp	r1, r3
 800abd0:	d00a      	beq.n	800abe8 <memmove+0x26>
 800abd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abd6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800abda:	e7f8      	b.n	800abce <memmove+0xc>
 800abdc:	4283      	cmp	r3, r0
 800abde:	d9f5      	bls.n	800abcc <memmove+0xa>
 800abe0:	1881      	adds	r1, r0, r2
 800abe2:	1ad2      	subs	r2, r2, r3
 800abe4:	42d3      	cmn	r3, r2
 800abe6:	d100      	bne.n	800abea <memmove+0x28>
 800abe8:	bd10      	pop	{r4, pc}
 800abea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800abf2:	e7f7      	b.n	800abe4 <memmove+0x22>

0800abf4 <__malloc_lock>:
 800abf4:	4770      	bx	lr

0800abf6 <__malloc_unlock>:
 800abf6:	4770      	bx	lr

0800abf8 <_realloc_r>:
 800abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfa:	4607      	mov	r7, r0
 800abfc:	4614      	mov	r4, r2
 800abfe:	460e      	mov	r6, r1
 800ac00:	b921      	cbnz	r1, 800ac0c <_realloc_r+0x14>
 800ac02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac06:	4611      	mov	r1, r2
 800ac08:	f7ff be00 	b.w	800a80c <_malloc_r>
 800ac0c:	b922      	cbnz	r2, 800ac18 <_realloc_r+0x20>
 800ac0e:	f7ff fdb1 	bl	800a774 <_free_r>
 800ac12:	4625      	mov	r5, r4
 800ac14:	4628      	mov	r0, r5
 800ac16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac18:	f000 f814 	bl	800ac44 <_malloc_usable_size_r>
 800ac1c:	42a0      	cmp	r0, r4
 800ac1e:	d20f      	bcs.n	800ac40 <_realloc_r+0x48>
 800ac20:	4621      	mov	r1, r4
 800ac22:	4638      	mov	r0, r7
 800ac24:	f7ff fdf2 	bl	800a80c <_malloc_r>
 800ac28:	4605      	mov	r5, r0
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d0f2      	beq.n	800ac14 <_realloc_r+0x1c>
 800ac2e:	4631      	mov	r1, r6
 800ac30:	4622      	mov	r2, r4
 800ac32:	f7ff f98d 	bl	8009f50 <memcpy>
 800ac36:	4631      	mov	r1, r6
 800ac38:	4638      	mov	r0, r7
 800ac3a:	f7ff fd9b 	bl	800a774 <_free_r>
 800ac3e:	e7e9      	b.n	800ac14 <_realloc_r+0x1c>
 800ac40:	4635      	mov	r5, r6
 800ac42:	e7e7      	b.n	800ac14 <_realloc_r+0x1c>

0800ac44 <_malloc_usable_size_r>:
 800ac44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac48:	1f18      	subs	r0, r3, #4
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	bfbc      	itt	lt
 800ac4e:	580b      	ldrlt	r3, [r1, r0]
 800ac50:	18c0      	addlt	r0, r0, r3
 800ac52:	4770      	bx	lr

0800ac54 <cos>:
 800ac54:	b530      	push	{r4, r5, lr}
 800ac56:	4a18      	ldr	r2, [pc, #96]	; (800acb8 <cos+0x64>)
 800ac58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	b087      	sub	sp, #28
 800ac60:	dc04      	bgt.n	800ac6c <cos+0x18>
 800ac62:	2200      	movs	r2, #0
 800ac64:	2300      	movs	r3, #0
 800ac66:	f000 fccb 	bl	800b600 <__kernel_cos>
 800ac6a:	e006      	b.n	800ac7a <cos+0x26>
 800ac6c:	4a13      	ldr	r2, [pc, #76]	; (800acbc <cos+0x68>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	dd05      	ble.n	800ac7e <cos+0x2a>
 800ac72:	4602      	mov	r2, r0
 800ac74:	460b      	mov	r3, r1
 800ac76:	f7f5 fa77 	bl	8000168 <__aeabi_dsub>
 800ac7a:	b007      	add	sp, #28
 800ac7c:	bd30      	pop	{r4, r5, pc}
 800ac7e:	aa02      	add	r2, sp, #8
 800ac80:	f000 f992 	bl	800afa8 <__ieee754_rem_pio2>
 800ac84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac88:	f000 0403 	and.w	r4, r0, #3
 800ac8c:	2c01      	cmp	r4, #1
 800ac8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac92:	d008      	beq.n	800aca6 <cos+0x52>
 800ac94:	2c02      	cmp	r4, #2
 800ac96:	d00c      	beq.n	800acb2 <cos+0x5e>
 800ac98:	2c00      	cmp	r4, #0
 800ac9a:	d0e4      	beq.n	800ac66 <cos+0x12>
 800ac9c:	2401      	movs	r4, #1
 800ac9e:	9400      	str	r4, [sp, #0]
 800aca0:	f001 f8b6 	bl	800be10 <__kernel_sin>
 800aca4:	e7e9      	b.n	800ac7a <cos+0x26>
 800aca6:	9400      	str	r4, [sp, #0]
 800aca8:	f001 f8b2 	bl	800be10 <__kernel_sin>
 800acac:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800acb0:	e7e3      	b.n	800ac7a <cos+0x26>
 800acb2:	f000 fca5 	bl	800b600 <__kernel_cos>
 800acb6:	e7f9      	b.n	800acac <cos+0x58>
 800acb8:	3fe921fb 	.word	0x3fe921fb
 800acbc:	7fefffff 	.word	0x7fefffff

0800acc0 <sin>:
 800acc0:	b530      	push	{r4, r5, lr}
 800acc2:	4a1a      	ldr	r2, [pc, #104]	; (800ad2c <sin+0x6c>)
 800acc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800acc8:	4293      	cmp	r3, r2
 800acca:	b087      	sub	sp, #28
 800accc:	dc06      	bgt.n	800acdc <sin+0x1c>
 800acce:	2300      	movs	r3, #0
 800acd0:	2200      	movs	r2, #0
 800acd2:	9300      	str	r3, [sp, #0]
 800acd4:	2300      	movs	r3, #0
 800acd6:	f001 f89b 	bl	800be10 <__kernel_sin>
 800acda:	e006      	b.n	800acea <sin+0x2a>
 800acdc:	4a14      	ldr	r2, [pc, #80]	; (800ad30 <sin+0x70>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	dd05      	ble.n	800acee <sin+0x2e>
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	f7f5 fa3f 	bl	8000168 <__aeabi_dsub>
 800acea:	b007      	add	sp, #28
 800acec:	bd30      	pop	{r4, r5, pc}
 800acee:	aa02      	add	r2, sp, #8
 800acf0:	f000 f95a 	bl	800afa8 <__ieee754_rem_pio2>
 800acf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acf8:	f000 0403 	and.w	r4, r0, #3
 800acfc:	2c01      	cmp	r4, #1
 800acfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad02:	d005      	beq.n	800ad10 <sin+0x50>
 800ad04:	2c02      	cmp	r4, #2
 800ad06:	d006      	beq.n	800ad16 <sin+0x56>
 800ad08:	b964      	cbnz	r4, 800ad24 <sin+0x64>
 800ad0a:	2401      	movs	r4, #1
 800ad0c:	9400      	str	r4, [sp, #0]
 800ad0e:	e7e2      	b.n	800acd6 <sin+0x16>
 800ad10:	f000 fc76 	bl	800b600 <__kernel_cos>
 800ad14:	e7e9      	b.n	800acea <sin+0x2a>
 800ad16:	2401      	movs	r4, #1
 800ad18:	9400      	str	r4, [sp, #0]
 800ad1a:	f001 f879 	bl	800be10 <__kernel_sin>
 800ad1e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ad22:	e7e2      	b.n	800acea <sin+0x2a>
 800ad24:	f000 fc6c 	bl	800b600 <__kernel_cos>
 800ad28:	e7f9      	b.n	800ad1e <sin+0x5e>
 800ad2a:	bf00      	nop
 800ad2c:	3fe921fb 	.word	0x3fe921fb
 800ad30:	7fefffff 	.word	0x7fefffff

0800ad34 <atan2>:
 800ad34:	f000 b858 	b.w	800ade8 <__ieee754_atan2>

0800ad38 <sqrt>:
 800ad38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3c:	b08b      	sub	sp, #44	; 0x2c
 800ad3e:	4604      	mov	r4, r0
 800ad40:	460d      	mov	r5, r1
 800ad42:	f000 fb21 	bl	800b388 <__ieee754_sqrt>
 800ad46:	4b24      	ldr	r3, [pc, #144]	; (800add8 <sqrt+0xa0>)
 800ad48:	4680      	mov	r8, r0
 800ad4a:	f993 a000 	ldrsb.w	sl, [r3]
 800ad4e:	4689      	mov	r9, r1
 800ad50:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ad54:	d02b      	beq.n	800adae <sqrt+0x76>
 800ad56:	4622      	mov	r2, r4
 800ad58:	462b      	mov	r3, r5
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	f7f5 fe55 	bl	8000a0c <__aeabi_dcmpun>
 800ad62:	4683      	mov	fp, r0
 800ad64:	bb18      	cbnz	r0, 800adae <sqrt+0x76>
 800ad66:	2600      	movs	r6, #0
 800ad68:	2700      	movs	r7, #0
 800ad6a:	4632      	mov	r2, r6
 800ad6c:	463b      	mov	r3, r7
 800ad6e:	4620      	mov	r0, r4
 800ad70:	4629      	mov	r1, r5
 800ad72:	f7f5 fe23 	bl	80009bc <__aeabi_dcmplt>
 800ad76:	b1d0      	cbz	r0, 800adae <sqrt+0x76>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	4b17      	ldr	r3, [pc, #92]	; (800addc <sqrt+0xa4>)
 800ad7e:	f8cd b020 	str.w	fp, [sp, #32]
 800ad82:	9301      	str	r3, [sp, #4]
 800ad84:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ad88:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ad8c:	f1ba 0f00 	cmp.w	sl, #0
 800ad90:	d112      	bne.n	800adb8 <sqrt+0x80>
 800ad92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ad96:	4668      	mov	r0, sp
 800ad98:	f001 fb06 	bl	800c3a8 <matherr>
 800ad9c:	b1b8      	cbz	r0, 800adce <sqrt+0x96>
 800ad9e:	9b08      	ldr	r3, [sp, #32]
 800ada0:	b11b      	cbz	r3, 800adaa <sqrt+0x72>
 800ada2:	f7fc fc5d 	bl	8007660 <__errno>
 800ada6:	9b08      	ldr	r3, [sp, #32]
 800ada8:	6003      	str	r3, [r0, #0]
 800adaa:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800adae:	4640      	mov	r0, r8
 800adb0:	4649      	mov	r1, r9
 800adb2:	b00b      	add	sp, #44	; 0x2c
 800adb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb8:	4632      	mov	r2, r6
 800adba:	463b      	mov	r3, r7
 800adbc:	4630      	mov	r0, r6
 800adbe:	4639      	mov	r1, r7
 800adc0:	f7f5 fcb4 	bl	800072c <__aeabi_ddiv>
 800adc4:	f1ba 0f02 	cmp.w	sl, #2
 800adc8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800adcc:	d1e3      	bne.n	800ad96 <sqrt+0x5e>
 800adce:	f7fc fc47 	bl	8007660 <__errno>
 800add2:	2321      	movs	r3, #33	; 0x21
 800add4:	6003      	str	r3, [r0, #0]
 800add6:	e7e2      	b.n	800ad9e <sqrt+0x66>
 800add8:	200001fc 	.word	0x200001fc
 800addc:	0800cc8e 	.word	0x0800cc8e

0800ade0 <atan2f>:
 800ade0:	f000 bb7e 	b.w	800b4e0 <__ieee754_atan2f>
 800ade4:	0000      	movs	r0, r0
	...

0800ade8 <__ieee754_atan2>:
 800ade8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adec:	4256      	negs	r6, r2
 800adee:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800adf2:	4316      	orrs	r6, r2
 800adf4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800afa0 <__ieee754_atan2+0x1b8>
 800adf8:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800adfc:	454e      	cmp	r6, r9
 800adfe:	4604      	mov	r4, r0
 800ae00:	460d      	mov	r5, r1
 800ae02:	469e      	mov	lr, r3
 800ae04:	d808      	bhi.n	800ae18 <__ieee754_atan2+0x30>
 800ae06:	4246      	negs	r6, r0
 800ae08:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800ae0c:	4306      	orrs	r6, r0
 800ae0e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800ae12:	454e      	cmp	r6, r9
 800ae14:	4688      	mov	r8, r1
 800ae16:	d906      	bls.n	800ae26 <__ieee754_atan2+0x3e>
 800ae18:	4620      	mov	r0, r4
 800ae1a:	4629      	mov	r1, r5
 800ae1c:	f7f5 f9a6 	bl	800016c <__adddf3>
 800ae20:	4604      	mov	r4, r0
 800ae22:	460d      	mov	r5, r1
 800ae24:	e030      	b.n	800ae88 <__ieee754_atan2+0xa0>
 800ae26:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800ae2a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800ae2e:	4316      	orrs	r6, r2
 800ae30:	d103      	bne.n	800ae3a <__ieee754_atan2+0x52>
 800ae32:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae36:	f001 b8a3 	b.w	800bf80 <atan>
 800ae3a:	179e      	asrs	r6, r3, #30
 800ae3c:	f006 0602 	and.w	r6, r6, #2
 800ae40:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800ae44:	ea57 0100 	orrs.w	r1, r7, r0
 800ae48:	d107      	bne.n	800ae5a <__ieee754_atan2+0x72>
 800ae4a:	2e02      	cmp	r6, #2
 800ae4c:	d079      	beq.n	800af42 <__ieee754_atan2+0x15a>
 800ae4e:	2e03      	cmp	r6, #3
 800ae50:	d11a      	bne.n	800ae88 <__ieee754_atan2+0xa0>
 800ae52:	a541      	add	r5, pc, #260	; (adr r5, 800af58 <__ieee754_atan2+0x170>)
 800ae54:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae58:	e016      	b.n	800ae88 <__ieee754_atan2+0xa0>
 800ae5a:	ea5c 0102 	orrs.w	r1, ip, r2
 800ae5e:	d106      	bne.n	800ae6e <__ieee754_atan2+0x86>
 800ae60:	f1b8 0f00 	cmp.w	r8, #0
 800ae64:	da71      	bge.n	800af4a <__ieee754_atan2+0x162>
 800ae66:	a53e      	add	r5, pc, #248	; (adr r5, 800af60 <__ieee754_atan2+0x178>)
 800ae68:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae6c:	e00c      	b.n	800ae88 <__ieee754_atan2+0xa0>
 800ae6e:	45cc      	cmp	ip, r9
 800ae70:	d123      	bne.n	800aeba <__ieee754_atan2+0xd2>
 800ae72:	4567      	cmp	r7, ip
 800ae74:	d114      	bne.n	800aea0 <__ieee754_atan2+0xb8>
 800ae76:	2e02      	cmp	r6, #2
 800ae78:	d00a      	beq.n	800ae90 <__ieee754_atan2+0xa8>
 800ae7a:	2e03      	cmp	r6, #3
 800ae7c:	d00c      	beq.n	800ae98 <__ieee754_atan2+0xb0>
 800ae7e:	2e01      	cmp	r6, #1
 800ae80:	d15b      	bne.n	800af3a <__ieee754_atan2+0x152>
 800ae82:	a539      	add	r5, pc, #228	; (adr r5, 800af68 <__ieee754_atan2+0x180>)
 800ae84:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae88:	4620      	mov	r0, r4
 800ae8a:	4629      	mov	r1, r5
 800ae8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae90:	a537      	add	r5, pc, #220	; (adr r5, 800af70 <__ieee754_atan2+0x188>)
 800ae92:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae96:	e7f7      	b.n	800ae88 <__ieee754_atan2+0xa0>
 800ae98:	a537      	add	r5, pc, #220	; (adr r5, 800af78 <__ieee754_atan2+0x190>)
 800ae9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae9e:	e7f3      	b.n	800ae88 <__ieee754_atan2+0xa0>
 800aea0:	2e02      	cmp	r6, #2
 800aea2:	d04e      	beq.n	800af42 <__ieee754_atan2+0x15a>
 800aea4:	2e03      	cmp	r6, #3
 800aea6:	d0d4      	beq.n	800ae52 <__ieee754_atan2+0x6a>
 800aea8:	2e01      	cmp	r6, #1
 800aeaa:	f04f 0400 	mov.w	r4, #0
 800aeae:	d102      	bne.n	800aeb6 <__ieee754_atan2+0xce>
 800aeb0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800aeb4:	e7e8      	b.n	800ae88 <__ieee754_atan2+0xa0>
 800aeb6:	2500      	movs	r5, #0
 800aeb8:	e7e6      	b.n	800ae88 <__ieee754_atan2+0xa0>
 800aeba:	454f      	cmp	r7, r9
 800aebc:	d0d0      	beq.n	800ae60 <__ieee754_atan2+0x78>
 800aebe:	eba7 070c 	sub.w	r7, r7, ip
 800aec2:	153f      	asrs	r7, r7, #20
 800aec4:	2f3c      	cmp	r7, #60	; 0x3c
 800aec6:	dc1e      	bgt.n	800af06 <__ieee754_atan2+0x11e>
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	da01      	bge.n	800aed0 <__ieee754_atan2+0xe8>
 800aecc:	373c      	adds	r7, #60	; 0x3c
 800aece:	db1e      	blt.n	800af0e <__ieee754_atan2+0x126>
 800aed0:	4620      	mov	r0, r4
 800aed2:	4629      	mov	r1, r5
 800aed4:	f7f5 fc2a 	bl	800072c <__aeabi_ddiv>
 800aed8:	f001 f9dc 	bl	800c294 <fabs>
 800aedc:	f001 f850 	bl	800bf80 <atan>
 800aee0:	4604      	mov	r4, r0
 800aee2:	460d      	mov	r5, r1
 800aee4:	2e01      	cmp	r6, #1
 800aee6:	d015      	beq.n	800af14 <__ieee754_atan2+0x12c>
 800aee8:	2e02      	cmp	r6, #2
 800aeea:	d017      	beq.n	800af1c <__ieee754_atan2+0x134>
 800aeec:	2e00      	cmp	r6, #0
 800aeee:	d0cb      	beq.n	800ae88 <__ieee754_atan2+0xa0>
 800aef0:	a323      	add	r3, pc, #140	; (adr r3, 800af80 <__ieee754_atan2+0x198>)
 800aef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef6:	4620      	mov	r0, r4
 800aef8:	4629      	mov	r1, r5
 800aefa:	f7f5 f935 	bl	8000168 <__aeabi_dsub>
 800aefe:	a322      	add	r3, pc, #136	; (adr r3, 800af88 <__ieee754_atan2+0x1a0>)
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	e016      	b.n	800af34 <__ieee754_atan2+0x14c>
 800af06:	a522      	add	r5, pc, #136	; (adr r5, 800af90 <__ieee754_atan2+0x1a8>)
 800af08:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af0c:	e7ea      	b.n	800aee4 <__ieee754_atan2+0xfc>
 800af0e:	2400      	movs	r4, #0
 800af10:	2500      	movs	r5, #0
 800af12:	e7e7      	b.n	800aee4 <__ieee754_atan2+0xfc>
 800af14:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800af18:	461d      	mov	r5, r3
 800af1a:	e7b5      	b.n	800ae88 <__ieee754_atan2+0xa0>
 800af1c:	a318      	add	r3, pc, #96	; (adr r3, 800af80 <__ieee754_atan2+0x198>)
 800af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af22:	4620      	mov	r0, r4
 800af24:	4629      	mov	r1, r5
 800af26:	f7f5 f91f 	bl	8000168 <__aeabi_dsub>
 800af2a:	4602      	mov	r2, r0
 800af2c:	460b      	mov	r3, r1
 800af2e:	a116      	add	r1, pc, #88	; (adr r1, 800af88 <__ieee754_atan2+0x1a0>)
 800af30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af34:	f7f5 f918 	bl	8000168 <__aeabi_dsub>
 800af38:	e772      	b.n	800ae20 <__ieee754_atan2+0x38>
 800af3a:	a517      	add	r5, pc, #92	; (adr r5, 800af98 <__ieee754_atan2+0x1b0>)
 800af3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af40:	e7a2      	b.n	800ae88 <__ieee754_atan2+0xa0>
 800af42:	a511      	add	r5, pc, #68	; (adr r5, 800af88 <__ieee754_atan2+0x1a0>)
 800af44:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af48:	e79e      	b.n	800ae88 <__ieee754_atan2+0xa0>
 800af4a:	a511      	add	r5, pc, #68	; (adr r5, 800af90 <__ieee754_atan2+0x1a8>)
 800af4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af50:	e79a      	b.n	800ae88 <__ieee754_atan2+0xa0>
 800af52:	bf00      	nop
 800af54:	f3af 8000 	nop.w
 800af58:	54442d18 	.word	0x54442d18
 800af5c:	c00921fb 	.word	0xc00921fb
 800af60:	54442d18 	.word	0x54442d18
 800af64:	bff921fb 	.word	0xbff921fb
 800af68:	54442d18 	.word	0x54442d18
 800af6c:	bfe921fb 	.word	0xbfe921fb
 800af70:	7f3321d2 	.word	0x7f3321d2
 800af74:	4002d97c 	.word	0x4002d97c
 800af78:	7f3321d2 	.word	0x7f3321d2
 800af7c:	c002d97c 	.word	0xc002d97c
 800af80:	33145c07 	.word	0x33145c07
 800af84:	3ca1a626 	.word	0x3ca1a626
 800af88:	54442d18 	.word	0x54442d18
 800af8c:	400921fb 	.word	0x400921fb
 800af90:	54442d18 	.word	0x54442d18
 800af94:	3ff921fb 	.word	0x3ff921fb
 800af98:	54442d18 	.word	0x54442d18
 800af9c:	3fe921fb 	.word	0x3fe921fb
 800afa0:	7ff00000 	.word	0x7ff00000
 800afa4:	00000000 	.word	0x00000000

0800afa8 <__ieee754_rem_pio2>:
 800afa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afac:	4614      	mov	r4, r2
 800afae:	4ac2      	ldr	r2, [pc, #776]	; (800b2b8 <__ieee754_rem_pio2+0x310>)
 800afb0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800afb4:	4592      	cmp	sl, r2
 800afb6:	b08d      	sub	sp, #52	; 0x34
 800afb8:	468b      	mov	fp, r1
 800afba:	dc07      	bgt.n	800afcc <__ieee754_rem_pio2+0x24>
 800afbc:	2200      	movs	r2, #0
 800afbe:	2300      	movs	r3, #0
 800afc0:	e9c4 0100 	strd	r0, r1, [r4]
 800afc4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800afc8:	2500      	movs	r5, #0
 800afca:	e023      	b.n	800b014 <__ieee754_rem_pio2+0x6c>
 800afcc:	4abb      	ldr	r2, [pc, #748]	; (800b2bc <__ieee754_rem_pio2+0x314>)
 800afce:	4592      	cmp	sl, r2
 800afd0:	dc71      	bgt.n	800b0b6 <__ieee754_rem_pio2+0x10e>
 800afd2:	a3ab      	add	r3, pc, #684	; (adr r3, 800b280 <__ieee754_rem_pio2+0x2d8>)
 800afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd8:	2900      	cmp	r1, #0
 800afda:	4db9      	ldr	r5, [pc, #740]	; (800b2c0 <__ieee754_rem_pio2+0x318>)
 800afdc:	dd36      	ble.n	800b04c <__ieee754_rem_pio2+0xa4>
 800afde:	f7f5 f8c3 	bl	8000168 <__aeabi_dsub>
 800afe2:	45aa      	cmp	sl, r5
 800afe4:	4606      	mov	r6, r0
 800afe6:	460f      	mov	r7, r1
 800afe8:	d018      	beq.n	800b01c <__ieee754_rem_pio2+0x74>
 800afea:	a3a7      	add	r3, pc, #668	; (adr r3, 800b288 <__ieee754_rem_pio2+0x2e0>)
 800afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff0:	f7f5 f8ba 	bl	8000168 <__aeabi_dsub>
 800aff4:	4602      	mov	r2, r0
 800aff6:	460b      	mov	r3, r1
 800aff8:	4630      	mov	r0, r6
 800affa:	e9c4 2300 	strd	r2, r3, [r4]
 800affe:	4639      	mov	r1, r7
 800b000:	f7f5 f8b2 	bl	8000168 <__aeabi_dsub>
 800b004:	a3a0      	add	r3, pc, #640	; (adr r3, 800b288 <__ieee754_rem_pio2+0x2e0>)
 800b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00a:	f7f5 f8ad 	bl	8000168 <__aeabi_dsub>
 800b00e:	2501      	movs	r5, #1
 800b010:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b014:	4628      	mov	r0, r5
 800b016:	b00d      	add	sp, #52	; 0x34
 800b018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b01c:	a39c      	add	r3, pc, #624	; (adr r3, 800b290 <__ieee754_rem_pio2+0x2e8>)
 800b01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b022:	f7f5 f8a1 	bl	8000168 <__aeabi_dsub>
 800b026:	a39c      	add	r3, pc, #624	; (adr r3, 800b298 <__ieee754_rem_pio2+0x2f0>)
 800b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02c:	4606      	mov	r6, r0
 800b02e:	460f      	mov	r7, r1
 800b030:	f7f5 f89a 	bl	8000168 <__aeabi_dsub>
 800b034:	4602      	mov	r2, r0
 800b036:	460b      	mov	r3, r1
 800b038:	4630      	mov	r0, r6
 800b03a:	e9c4 2300 	strd	r2, r3, [r4]
 800b03e:	4639      	mov	r1, r7
 800b040:	f7f5 f892 	bl	8000168 <__aeabi_dsub>
 800b044:	a394      	add	r3, pc, #592	; (adr r3, 800b298 <__ieee754_rem_pio2+0x2f0>)
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	e7de      	b.n	800b00a <__ieee754_rem_pio2+0x62>
 800b04c:	f7f5 f88e 	bl	800016c <__adddf3>
 800b050:	45aa      	cmp	sl, r5
 800b052:	4606      	mov	r6, r0
 800b054:	460f      	mov	r7, r1
 800b056:	d016      	beq.n	800b086 <__ieee754_rem_pio2+0xde>
 800b058:	a38b      	add	r3, pc, #556	; (adr r3, 800b288 <__ieee754_rem_pio2+0x2e0>)
 800b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05e:	f7f5 f885 	bl	800016c <__adddf3>
 800b062:	4602      	mov	r2, r0
 800b064:	460b      	mov	r3, r1
 800b066:	4630      	mov	r0, r6
 800b068:	e9c4 2300 	strd	r2, r3, [r4]
 800b06c:	4639      	mov	r1, r7
 800b06e:	f7f5 f87b 	bl	8000168 <__aeabi_dsub>
 800b072:	a385      	add	r3, pc, #532	; (adr r3, 800b288 <__ieee754_rem_pio2+0x2e0>)
 800b074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b078:	f7f5 f878 	bl	800016c <__adddf3>
 800b07c:	f04f 35ff 	mov.w	r5, #4294967295
 800b080:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b084:	e7c6      	b.n	800b014 <__ieee754_rem_pio2+0x6c>
 800b086:	a382      	add	r3, pc, #520	; (adr r3, 800b290 <__ieee754_rem_pio2+0x2e8>)
 800b088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08c:	f7f5 f86e 	bl	800016c <__adddf3>
 800b090:	a381      	add	r3, pc, #516	; (adr r3, 800b298 <__ieee754_rem_pio2+0x2f0>)
 800b092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b096:	4606      	mov	r6, r0
 800b098:	460f      	mov	r7, r1
 800b09a:	f7f5 f867 	bl	800016c <__adddf3>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	e9c4 2300 	strd	r2, r3, [r4]
 800b0a8:	4639      	mov	r1, r7
 800b0aa:	f7f5 f85d 	bl	8000168 <__aeabi_dsub>
 800b0ae:	a37a      	add	r3, pc, #488	; (adr r3, 800b298 <__ieee754_rem_pio2+0x2f0>)
 800b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b4:	e7e0      	b.n	800b078 <__ieee754_rem_pio2+0xd0>
 800b0b6:	4a83      	ldr	r2, [pc, #524]	; (800b2c4 <__ieee754_rem_pio2+0x31c>)
 800b0b8:	4592      	cmp	sl, r2
 800b0ba:	f300 80d2 	bgt.w	800b262 <__ieee754_rem_pio2+0x2ba>
 800b0be:	f001 f8e9 	bl	800c294 <fabs>
 800b0c2:	a377      	add	r3, pc, #476	; (adr r3, 800b2a0 <__ieee754_rem_pio2+0x2f8>)
 800b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c8:	4606      	mov	r6, r0
 800b0ca:	460f      	mov	r7, r1
 800b0cc:	f7f5 fa04 	bl	80004d8 <__aeabi_dmul>
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	4b7d      	ldr	r3, [pc, #500]	; (800b2c8 <__ieee754_rem_pio2+0x320>)
 800b0d4:	f7f5 f84a 	bl	800016c <__adddf3>
 800b0d8:	f7f5 fcae 	bl	8000a38 <__aeabi_d2iz>
 800b0dc:	4605      	mov	r5, r0
 800b0de:	f7f5 f991 	bl	8000404 <__aeabi_i2d>
 800b0e2:	a367      	add	r3, pc, #412	; (adr r3, 800b280 <__ieee754_rem_pio2+0x2d8>)
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0ec:	f7f5 f9f4 	bl	80004d8 <__aeabi_dmul>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	4639      	mov	r1, r7
 800b0f8:	f7f5 f836 	bl	8000168 <__aeabi_dsub>
 800b0fc:	a362      	add	r3, pc, #392	; (adr r3, 800b288 <__ieee754_rem_pio2+0x2e0>)
 800b0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b102:	4606      	mov	r6, r0
 800b104:	460f      	mov	r7, r1
 800b106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b10a:	f7f5 f9e5 	bl	80004d8 <__aeabi_dmul>
 800b10e:	2d1f      	cmp	r5, #31
 800b110:	4680      	mov	r8, r0
 800b112:	4689      	mov	r9, r1
 800b114:	dc0e      	bgt.n	800b134 <__ieee754_rem_pio2+0x18c>
 800b116:	4b6d      	ldr	r3, [pc, #436]	; (800b2cc <__ieee754_rem_pio2+0x324>)
 800b118:	1e6a      	subs	r2, r5, #1
 800b11a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11e:	4553      	cmp	r3, sl
 800b120:	d008      	beq.n	800b134 <__ieee754_rem_pio2+0x18c>
 800b122:	4642      	mov	r2, r8
 800b124:	464b      	mov	r3, r9
 800b126:	4630      	mov	r0, r6
 800b128:	4639      	mov	r1, r7
 800b12a:	f7f5 f81d 	bl	8000168 <__aeabi_dsub>
 800b12e:	e9c4 0100 	strd	r0, r1, [r4]
 800b132:	e011      	b.n	800b158 <__ieee754_rem_pio2+0x1b0>
 800b134:	464b      	mov	r3, r9
 800b136:	4642      	mov	r2, r8
 800b138:	4630      	mov	r0, r6
 800b13a:	4639      	mov	r1, r7
 800b13c:	f7f5 f814 	bl	8000168 <__aeabi_dsub>
 800b140:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b144:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b148:	ebaa 0303 	sub.w	r3, sl, r3
 800b14c:	2b10      	cmp	r3, #16
 800b14e:	dc1f      	bgt.n	800b190 <__ieee754_rem_pio2+0x1e8>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	e9c4 2300 	strd	r2, r3, [r4]
 800b158:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800b15c:	4630      	mov	r0, r6
 800b15e:	4653      	mov	r3, sl
 800b160:	4639      	mov	r1, r7
 800b162:	f7f5 f801 	bl	8000168 <__aeabi_dsub>
 800b166:	4642      	mov	r2, r8
 800b168:	464b      	mov	r3, r9
 800b16a:	f7f4 fffd 	bl	8000168 <__aeabi_dsub>
 800b16e:	4602      	mov	r2, r0
 800b170:	460b      	mov	r3, r1
 800b172:	f1bb 0f00 	cmp.w	fp, #0
 800b176:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b17a:	f6bf af4b 	bge.w	800b014 <__ieee754_rem_pio2+0x6c>
 800b17e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800b182:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800b186:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b18a:	60e1      	str	r1, [r4, #12]
 800b18c:	426d      	negs	r5, r5
 800b18e:	e741      	b.n	800b014 <__ieee754_rem_pio2+0x6c>
 800b190:	a33f      	add	r3, pc, #252	; (adr r3, 800b290 <__ieee754_rem_pio2+0x2e8>)
 800b192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b19a:	f7f5 f99d 	bl	80004d8 <__aeabi_dmul>
 800b19e:	4680      	mov	r8, r0
 800b1a0:	4689      	mov	r9, r1
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	4639      	mov	r1, r7
 800b1aa:	f7f4 ffdd 	bl	8000168 <__aeabi_dsub>
 800b1ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	4639      	mov	r1, r7
 800b1ba:	f7f4 ffd5 	bl	8000168 <__aeabi_dsub>
 800b1be:	4642      	mov	r2, r8
 800b1c0:	464b      	mov	r3, r9
 800b1c2:	f7f4 ffd1 	bl	8000168 <__aeabi_dsub>
 800b1c6:	a334      	add	r3, pc, #208	; (adr r3, 800b298 <__ieee754_rem_pio2+0x2f0>)
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	4606      	mov	r6, r0
 800b1ce:	460f      	mov	r7, r1
 800b1d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1d4:	f7f5 f980 	bl	80004d8 <__aeabi_dmul>
 800b1d8:	4632      	mov	r2, r6
 800b1da:	463b      	mov	r3, r7
 800b1dc:	f7f4 ffc4 	bl	8000168 <__aeabi_dsub>
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	4680      	mov	r8, r0
 800b1e6:	4689      	mov	r9, r1
 800b1e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1ec:	f7f4 ffbc 	bl	8000168 <__aeabi_dsub>
 800b1f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b1f4:	ebaa 0a03 	sub.w	sl, sl, r3
 800b1f8:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800b1fc:	dc06      	bgt.n	800b20c <__ieee754_rem_pio2+0x264>
 800b1fe:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800b202:	4602      	mov	r2, r0
 800b204:	460b      	mov	r3, r1
 800b206:	e9c4 2300 	strd	r2, r3, [r4]
 800b20a:	e7a5      	b.n	800b158 <__ieee754_rem_pio2+0x1b0>
 800b20c:	a326      	add	r3, pc, #152	; (adr r3, 800b2a8 <__ieee754_rem_pio2+0x300>)
 800b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b216:	f7f5 f95f 	bl	80004d8 <__aeabi_dmul>
 800b21a:	4680      	mov	r8, r0
 800b21c:	4689      	mov	r9, r1
 800b21e:	4602      	mov	r2, r0
 800b220:	460b      	mov	r3, r1
 800b222:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b226:	f7f4 ff9f 	bl	8000168 <__aeabi_dsub>
 800b22a:	4602      	mov	r2, r0
 800b22c:	460b      	mov	r3, r1
 800b22e:	4606      	mov	r6, r0
 800b230:	460f      	mov	r7, r1
 800b232:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b236:	f7f4 ff97 	bl	8000168 <__aeabi_dsub>
 800b23a:	4642      	mov	r2, r8
 800b23c:	464b      	mov	r3, r9
 800b23e:	f7f4 ff93 	bl	8000168 <__aeabi_dsub>
 800b242:	a31b      	add	r3, pc, #108	; (adr r3, 800b2b0 <__ieee754_rem_pio2+0x308>)
 800b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b248:	4680      	mov	r8, r0
 800b24a:	4689      	mov	r9, r1
 800b24c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b250:	f7f5 f942 	bl	80004d8 <__aeabi_dmul>
 800b254:	4642      	mov	r2, r8
 800b256:	464b      	mov	r3, r9
 800b258:	f7f4 ff86 	bl	8000168 <__aeabi_dsub>
 800b25c:	4680      	mov	r8, r0
 800b25e:	4689      	mov	r9, r1
 800b260:	e75f      	b.n	800b122 <__ieee754_rem_pio2+0x17a>
 800b262:	4a1b      	ldr	r2, [pc, #108]	; (800b2d0 <__ieee754_rem_pio2+0x328>)
 800b264:	4592      	cmp	sl, r2
 800b266:	dd35      	ble.n	800b2d4 <__ieee754_rem_pio2+0x32c>
 800b268:	4602      	mov	r2, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	f7f4 ff7c 	bl	8000168 <__aeabi_dsub>
 800b270:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b274:	e9c4 0100 	strd	r0, r1, [r4]
 800b278:	e6a6      	b.n	800afc8 <__ieee754_rem_pio2+0x20>
 800b27a:	bf00      	nop
 800b27c:	f3af 8000 	nop.w
 800b280:	54400000 	.word	0x54400000
 800b284:	3ff921fb 	.word	0x3ff921fb
 800b288:	1a626331 	.word	0x1a626331
 800b28c:	3dd0b461 	.word	0x3dd0b461
 800b290:	1a600000 	.word	0x1a600000
 800b294:	3dd0b461 	.word	0x3dd0b461
 800b298:	2e037073 	.word	0x2e037073
 800b29c:	3ba3198a 	.word	0x3ba3198a
 800b2a0:	6dc9c883 	.word	0x6dc9c883
 800b2a4:	3fe45f30 	.word	0x3fe45f30
 800b2a8:	2e000000 	.word	0x2e000000
 800b2ac:	3ba3198a 	.word	0x3ba3198a
 800b2b0:	252049c1 	.word	0x252049c1
 800b2b4:	397b839a 	.word	0x397b839a
 800b2b8:	3fe921fb 	.word	0x3fe921fb
 800b2bc:	4002d97b 	.word	0x4002d97b
 800b2c0:	3ff921fb 	.word	0x3ff921fb
 800b2c4:	413921fb 	.word	0x413921fb
 800b2c8:	3fe00000 	.word	0x3fe00000
 800b2cc:	0800cc94 	.word	0x0800cc94
 800b2d0:	7fefffff 	.word	0x7fefffff
 800b2d4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800b2d8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b2dc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800b2e0:	460f      	mov	r7, r1
 800b2e2:	4606      	mov	r6, r0
 800b2e4:	f7f5 fba8 	bl	8000a38 <__aeabi_d2iz>
 800b2e8:	f7f5 f88c 	bl	8000404 <__aeabi_i2d>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	4639      	mov	r1, r7
 800b2f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b2f8:	f7f4 ff36 	bl	8000168 <__aeabi_dsub>
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	4b20      	ldr	r3, [pc, #128]	; (800b380 <__ieee754_rem_pio2+0x3d8>)
 800b300:	f7f5 f8ea 	bl	80004d8 <__aeabi_dmul>
 800b304:	460f      	mov	r7, r1
 800b306:	4606      	mov	r6, r0
 800b308:	f7f5 fb96 	bl	8000a38 <__aeabi_d2iz>
 800b30c:	f7f5 f87a 	bl	8000404 <__aeabi_i2d>
 800b310:	4602      	mov	r2, r0
 800b312:	460b      	mov	r3, r1
 800b314:	4630      	mov	r0, r6
 800b316:	4639      	mov	r1, r7
 800b318:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b31c:	f7f4 ff24 	bl	8000168 <__aeabi_dsub>
 800b320:	2200      	movs	r2, #0
 800b322:	4b17      	ldr	r3, [pc, #92]	; (800b380 <__ieee754_rem_pio2+0x3d8>)
 800b324:	f7f5 f8d8 	bl	80004d8 <__aeabi_dmul>
 800b328:	f04f 0803 	mov.w	r8, #3
 800b32c:	2600      	movs	r6, #0
 800b32e:	2700      	movs	r7, #0
 800b330:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b334:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b338:	4632      	mov	r2, r6
 800b33a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b33e:	463b      	mov	r3, r7
 800b340:	f108 3aff 	add.w	sl, r8, #4294967295
 800b344:	f7f5 fb30 	bl	80009a8 <__aeabi_dcmpeq>
 800b348:	b9b8      	cbnz	r0, 800b37a <__ieee754_rem_pio2+0x3d2>
 800b34a:	4b0e      	ldr	r3, [pc, #56]	; (800b384 <__ieee754_rem_pio2+0x3dc>)
 800b34c:	462a      	mov	r2, r5
 800b34e:	9301      	str	r3, [sp, #4]
 800b350:	2302      	movs	r3, #2
 800b352:	4621      	mov	r1, r4
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	a806      	add	r0, sp, #24
 800b358:	4643      	mov	r3, r8
 800b35a:	f000 fa0f 	bl	800b77c <__kernel_rem_pio2>
 800b35e:	f1bb 0f00 	cmp.w	fp, #0
 800b362:	4605      	mov	r5, r0
 800b364:	f6bf ae56 	bge.w	800b014 <__ieee754_rem_pio2+0x6c>
 800b368:	6863      	ldr	r3, [r4, #4]
 800b36a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b36e:	6063      	str	r3, [r4, #4]
 800b370:	68e3      	ldr	r3, [r4, #12]
 800b372:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b376:	60e3      	str	r3, [r4, #12]
 800b378:	e708      	b.n	800b18c <__ieee754_rem_pio2+0x1e4>
 800b37a:	46d0      	mov	r8, sl
 800b37c:	e7dc      	b.n	800b338 <__ieee754_rem_pio2+0x390>
 800b37e:	bf00      	nop
 800b380:	41700000 	.word	0x41700000
 800b384:	0800cd14 	.word	0x0800cd14

0800b388 <__ieee754_sqrt>:
 800b388:	4b54      	ldr	r3, [pc, #336]	; (800b4dc <__ieee754_sqrt+0x154>)
 800b38a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b38e:	438b      	bics	r3, r1
 800b390:	4606      	mov	r6, r0
 800b392:	460d      	mov	r5, r1
 800b394:	460a      	mov	r2, r1
 800b396:	460c      	mov	r4, r1
 800b398:	d10f      	bne.n	800b3ba <__ieee754_sqrt+0x32>
 800b39a:	4602      	mov	r2, r0
 800b39c:	460b      	mov	r3, r1
 800b39e:	f7f5 f89b 	bl	80004d8 <__aeabi_dmul>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	f7f4 fedf 	bl	800016c <__adddf3>
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	460d      	mov	r5, r1
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ba:	2900      	cmp	r1, #0
 800b3bc:	4607      	mov	r7, r0
 800b3be:	4603      	mov	r3, r0
 800b3c0:	dc0e      	bgt.n	800b3e0 <__ieee754_sqrt+0x58>
 800b3c2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b3c6:	ea5c 0707 	orrs.w	r7, ip, r7
 800b3ca:	d0f2      	beq.n	800b3b2 <__ieee754_sqrt+0x2a>
 800b3cc:	b141      	cbz	r1, 800b3e0 <__ieee754_sqrt+0x58>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	f7f4 fec9 	bl	8000168 <__aeabi_dsub>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	460b      	mov	r3, r1
 800b3da:	f7f5 f9a7 	bl	800072c <__aeabi_ddiv>
 800b3de:	e7e6      	b.n	800b3ae <__ieee754_sqrt+0x26>
 800b3e0:	1512      	asrs	r2, r2, #20
 800b3e2:	d074      	beq.n	800b4ce <__ieee754_sqrt+0x146>
 800b3e4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b3e8:	07d5      	lsls	r5, r2, #31
 800b3ea:	f04f 0500 	mov.w	r5, #0
 800b3ee:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b3f2:	bf48      	it	mi
 800b3f4:	0fd9      	lsrmi	r1, r3, #31
 800b3f6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800b3fa:	bf44      	itt	mi
 800b3fc:	005b      	lslmi	r3, r3, #1
 800b3fe:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800b402:	1051      	asrs	r1, r2, #1
 800b404:	0fda      	lsrs	r2, r3, #31
 800b406:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800b40a:	4628      	mov	r0, r5
 800b40c:	2216      	movs	r2, #22
 800b40e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b412:	005b      	lsls	r3, r3, #1
 800b414:	1987      	adds	r7, r0, r6
 800b416:	42a7      	cmp	r7, r4
 800b418:	bfde      	ittt	le
 800b41a:	19b8      	addle	r0, r7, r6
 800b41c:	1be4      	suble	r4, r4, r7
 800b41e:	19ad      	addle	r5, r5, r6
 800b420:	0fdf      	lsrs	r7, r3, #31
 800b422:	3a01      	subs	r2, #1
 800b424:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800b428:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b42c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b430:	d1f0      	bne.n	800b414 <__ieee754_sqrt+0x8c>
 800b432:	f04f 0c20 	mov.w	ip, #32
 800b436:	4696      	mov	lr, r2
 800b438:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b43c:	4284      	cmp	r4, r0
 800b43e:	eb06 070e 	add.w	r7, r6, lr
 800b442:	dc02      	bgt.n	800b44a <__ieee754_sqrt+0xc2>
 800b444:	d112      	bne.n	800b46c <__ieee754_sqrt+0xe4>
 800b446:	429f      	cmp	r7, r3
 800b448:	d810      	bhi.n	800b46c <__ieee754_sqrt+0xe4>
 800b44a:	2f00      	cmp	r7, #0
 800b44c:	eb07 0e06 	add.w	lr, r7, r6
 800b450:	da42      	bge.n	800b4d8 <__ieee754_sqrt+0x150>
 800b452:	f1be 0f00 	cmp.w	lr, #0
 800b456:	db3f      	blt.n	800b4d8 <__ieee754_sqrt+0x150>
 800b458:	f100 0801 	add.w	r8, r0, #1
 800b45c:	1a24      	subs	r4, r4, r0
 800b45e:	4640      	mov	r0, r8
 800b460:	429f      	cmp	r7, r3
 800b462:	bf88      	it	hi
 800b464:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800b468:	1bdb      	subs	r3, r3, r7
 800b46a:	4432      	add	r2, r6
 800b46c:	0064      	lsls	r4, r4, #1
 800b46e:	f1bc 0c01 	subs.w	ip, ip, #1
 800b472:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800b476:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b47a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b47e:	d1dd      	bne.n	800b43c <__ieee754_sqrt+0xb4>
 800b480:	4323      	orrs	r3, r4
 800b482:	d006      	beq.n	800b492 <__ieee754_sqrt+0x10a>
 800b484:	1c54      	adds	r4, r2, #1
 800b486:	bf0b      	itete	eq
 800b488:	4662      	moveq	r2, ip
 800b48a:	3201      	addne	r2, #1
 800b48c:	3501      	addeq	r5, #1
 800b48e:	f022 0201 	bicne.w	r2, r2, #1
 800b492:	106b      	asrs	r3, r5, #1
 800b494:	0852      	lsrs	r2, r2, #1
 800b496:	07e8      	lsls	r0, r5, #31
 800b498:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b49c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b4a0:	bf48      	it	mi
 800b4a2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b4a6:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800b4aa:	4616      	mov	r6, r2
 800b4ac:	e781      	b.n	800b3b2 <__ieee754_sqrt+0x2a>
 800b4ae:	0adc      	lsrs	r4, r3, #11
 800b4b0:	3915      	subs	r1, #21
 800b4b2:	055b      	lsls	r3, r3, #21
 800b4b4:	2c00      	cmp	r4, #0
 800b4b6:	d0fa      	beq.n	800b4ae <__ieee754_sqrt+0x126>
 800b4b8:	02e6      	lsls	r6, r4, #11
 800b4ba:	d50a      	bpl.n	800b4d2 <__ieee754_sqrt+0x14a>
 800b4bc:	f1c2 0020 	rsb	r0, r2, #32
 800b4c0:	fa23 f000 	lsr.w	r0, r3, r0
 800b4c4:	1e55      	subs	r5, r2, #1
 800b4c6:	4093      	lsls	r3, r2
 800b4c8:	4304      	orrs	r4, r0
 800b4ca:	1b4a      	subs	r2, r1, r5
 800b4cc:	e78a      	b.n	800b3e4 <__ieee754_sqrt+0x5c>
 800b4ce:	4611      	mov	r1, r2
 800b4d0:	e7f0      	b.n	800b4b4 <__ieee754_sqrt+0x12c>
 800b4d2:	0064      	lsls	r4, r4, #1
 800b4d4:	3201      	adds	r2, #1
 800b4d6:	e7ef      	b.n	800b4b8 <__ieee754_sqrt+0x130>
 800b4d8:	4680      	mov	r8, r0
 800b4da:	e7bf      	b.n	800b45c <__ieee754_sqrt+0xd4>
 800b4dc:	7ff00000 	.word	0x7ff00000

0800b4e0 <__ieee754_atan2f>:
 800b4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4e2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b4e6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	dc05      	bgt.n	800b4fa <__ieee754_atan2f+0x1a>
 800b4ee:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b4f2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b4f6:	4607      	mov	r7, r0
 800b4f8:	dd04      	ble.n	800b504 <__ieee754_atan2f+0x24>
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7f5 fb3a 	bl	8000b74 <__addsf3>
 800b500:	4603      	mov	r3, r0
 800b502:	e024      	b.n	800b54e <__ieee754_atan2f+0x6e>
 800b504:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800b508:	d103      	bne.n	800b512 <__ieee754_atan2f+0x32>
 800b50a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b50e:	f000 bfbd 	b.w	800c48c <atanf>
 800b512:	178c      	asrs	r4, r1, #30
 800b514:	f004 0402 	and.w	r4, r4, #2
 800b518:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b51c:	b92a      	cbnz	r2, 800b52a <__ieee754_atan2f+0x4a>
 800b51e:	2c02      	cmp	r4, #2
 800b520:	d057      	beq.n	800b5d2 <__ieee754_atan2f+0xf2>
 800b522:	2c03      	cmp	r4, #3
 800b524:	d113      	bne.n	800b54e <__ieee754_atan2f+0x6e>
 800b526:	4b2d      	ldr	r3, [pc, #180]	; (800b5dc <__ieee754_atan2f+0xfc>)
 800b528:	e011      	b.n	800b54e <__ieee754_atan2f+0x6e>
 800b52a:	b91e      	cbnz	r6, 800b534 <__ieee754_atan2f+0x54>
 800b52c:	2f00      	cmp	r7, #0
 800b52e:	da52      	bge.n	800b5d6 <__ieee754_atan2f+0xf6>
 800b530:	4b2b      	ldr	r3, [pc, #172]	; (800b5e0 <__ieee754_atan2f+0x100>)
 800b532:	e00c      	b.n	800b54e <__ieee754_atan2f+0x6e>
 800b534:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b538:	d11a      	bne.n	800b570 <__ieee754_atan2f+0x90>
 800b53a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b53e:	d10c      	bne.n	800b55a <__ieee754_atan2f+0x7a>
 800b540:	2c02      	cmp	r4, #2
 800b542:	d006      	beq.n	800b552 <__ieee754_atan2f+0x72>
 800b544:	2c03      	cmp	r4, #3
 800b546:	d006      	beq.n	800b556 <__ieee754_atan2f+0x76>
 800b548:	2c01      	cmp	r4, #1
 800b54a:	d140      	bne.n	800b5ce <__ieee754_atan2f+0xee>
 800b54c:	4b25      	ldr	r3, [pc, #148]	; (800b5e4 <__ieee754_atan2f+0x104>)
 800b54e:	4618      	mov	r0, r3
 800b550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b552:	4b25      	ldr	r3, [pc, #148]	; (800b5e8 <__ieee754_atan2f+0x108>)
 800b554:	e7fb      	b.n	800b54e <__ieee754_atan2f+0x6e>
 800b556:	4b25      	ldr	r3, [pc, #148]	; (800b5ec <__ieee754_atan2f+0x10c>)
 800b558:	e7f9      	b.n	800b54e <__ieee754_atan2f+0x6e>
 800b55a:	2c02      	cmp	r4, #2
 800b55c:	d039      	beq.n	800b5d2 <__ieee754_atan2f+0xf2>
 800b55e:	2c03      	cmp	r4, #3
 800b560:	d0e1      	beq.n	800b526 <__ieee754_atan2f+0x46>
 800b562:	2c01      	cmp	r4, #1
 800b564:	d102      	bne.n	800b56c <__ieee754_atan2f+0x8c>
 800b566:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b56a:	e7f0      	b.n	800b54e <__ieee754_atan2f+0x6e>
 800b56c:	2300      	movs	r3, #0
 800b56e:	e7ee      	b.n	800b54e <__ieee754_atan2f+0x6e>
 800b570:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b574:	d0da      	beq.n	800b52c <__ieee754_atan2f+0x4c>
 800b576:	1b92      	subs	r2, r2, r6
 800b578:	15d2      	asrs	r2, r2, #23
 800b57a:	2a3c      	cmp	r2, #60	; 0x3c
 800b57c:	dc17      	bgt.n	800b5ae <__ieee754_atan2f+0xce>
 800b57e:	2900      	cmp	r1, #0
 800b580:	da01      	bge.n	800b586 <__ieee754_atan2f+0xa6>
 800b582:	323c      	adds	r2, #60	; 0x3c
 800b584:	db15      	blt.n	800b5b2 <__ieee754_atan2f+0xd2>
 800b586:	4618      	mov	r0, r3
 800b588:	f7f5 fcb0 	bl	8000eec <__aeabi_fdiv>
 800b58c:	f001 f88a 	bl	800c6a4 <fabsf>
 800b590:	f000 ff7c 	bl	800c48c <atanf>
 800b594:	4603      	mov	r3, r0
 800b596:	2c01      	cmp	r4, #1
 800b598:	d00d      	beq.n	800b5b6 <__ieee754_atan2f+0xd6>
 800b59a:	2c02      	cmp	r4, #2
 800b59c:	d00e      	beq.n	800b5bc <__ieee754_atan2f+0xdc>
 800b59e:	2c00      	cmp	r4, #0
 800b5a0:	d0d5      	beq.n	800b54e <__ieee754_atan2f+0x6e>
 800b5a2:	4913      	ldr	r1, [pc, #76]	; (800b5f0 <__ieee754_atan2f+0x110>)
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7f5 fae5 	bl	8000b74 <__addsf3>
 800b5aa:	4912      	ldr	r1, [pc, #72]	; (800b5f4 <__ieee754_atan2f+0x114>)
 800b5ac:	e00c      	b.n	800b5c8 <__ieee754_atan2f+0xe8>
 800b5ae:	4b12      	ldr	r3, [pc, #72]	; (800b5f8 <__ieee754_atan2f+0x118>)
 800b5b0:	e7f1      	b.n	800b596 <__ieee754_atan2f+0xb6>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	e7ef      	b.n	800b596 <__ieee754_atan2f+0xb6>
 800b5b6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b5ba:	e7c8      	b.n	800b54e <__ieee754_atan2f+0x6e>
 800b5bc:	490c      	ldr	r1, [pc, #48]	; (800b5f0 <__ieee754_atan2f+0x110>)
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7f5 fad8 	bl	8000b74 <__addsf3>
 800b5c4:	4601      	mov	r1, r0
 800b5c6:	480b      	ldr	r0, [pc, #44]	; (800b5f4 <__ieee754_atan2f+0x114>)
 800b5c8:	f7f5 fad2 	bl	8000b70 <__aeabi_fsub>
 800b5cc:	e798      	b.n	800b500 <__ieee754_atan2f+0x20>
 800b5ce:	4b0b      	ldr	r3, [pc, #44]	; (800b5fc <__ieee754_atan2f+0x11c>)
 800b5d0:	e7bd      	b.n	800b54e <__ieee754_atan2f+0x6e>
 800b5d2:	4b08      	ldr	r3, [pc, #32]	; (800b5f4 <__ieee754_atan2f+0x114>)
 800b5d4:	e7bb      	b.n	800b54e <__ieee754_atan2f+0x6e>
 800b5d6:	4b08      	ldr	r3, [pc, #32]	; (800b5f8 <__ieee754_atan2f+0x118>)
 800b5d8:	e7b9      	b.n	800b54e <__ieee754_atan2f+0x6e>
 800b5da:	bf00      	nop
 800b5dc:	c0490fdb 	.word	0xc0490fdb
 800b5e0:	bfc90fdb 	.word	0xbfc90fdb
 800b5e4:	bf490fdb 	.word	0xbf490fdb
 800b5e8:	4016cbe4 	.word	0x4016cbe4
 800b5ec:	c016cbe4 	.word	0xc016cbe4
 800b5f0:	33bbbd2e 	.word	0x33bbbd2e
 800b5f4:	40490fdb 	.word	0x40490fdb
 800b5f8:	3fc90fdb 	.word	0x3fc90fdb
 800b5fc:	3f490fdb 	.word	0x3f490fdb

0800b600 <__kernel_cos>:
 800b600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b604:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b608:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b60c:	4680      	mov	r8, r0
 800b60e:	460f      	mov	r7, r1
 800b610:	e9cd 2300 	strd	r2, r3, [sp]
 800b614:	da04      	bge.n	800b620 <__kernel_cos+0x20>
 800b616:	f7f5 fa0f 	bl	8000a38 <__aeabi_d2iz>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	f000 8086 	beq.w	800b72c <__kernel_cos+0x12c>
 800b620:	4642      	mov	r2, r8
 800b622:	463b      	mov	r3, r7
 800b624:	4640      	mov	r0, r8
 800b626:	4639      	mov	r1, r7
 800b628:	f7f4 ff56 	bl	80004d8 <__aeabi_dmul>
 800b62c:	2200      	movs	r2, #0
 800b62e:	4b4e      	ldr	r3, [pc, #312]	; (800b768 <__kernel_cos+0x168>)
 800b630:	4604      	mov	r4, r0
 800b632:	460d      	mov	r5, r1
 800b634:	f7f4 ff50 	bl	80004d8 <__aeabi_dmul>
 800b638:	a33f      	add	r3, pc, #252	; (adr r3, 800b738 <__kernel_cos+0x138>)
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	4682      	mov	sl, r0
 800b640:	468b      	mov	fp, r1
 800b642:	4620      	mov	r0, r4
 800b644:	4629      	mov	r1, r5
 800b646:	f7f4 ff47 	bl	80004d8 <__aeabi_dmul>
 800b64a:	a33d      	add	r3, pc, #244	; (adr r3, 800b740 <__kernel_cos+0x140>)
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	f7f4 fd8c 	bl	800016c <__adddf3>
 800b654:	4622      	mov	r2, r4
 800b656:	462b      	mov	r3, r5
 800b658:	f7f4 ff3e 	bl	80004d8 <__aeabi_dmul>
 800b65c:	a33a      	add	r3, pc, #232	; (adr r3, 800b748 <__kernel_cos+0x148>)
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	f7f4 fd81 	bl	8000168 <__aeabi_dsub>
 800b666:	4622      	mov	r2, r4
 800b668:	462b      	mov	r3, r5
 800b66a:	f7f4 ff35 	bl	80004d8 <__aeabi_dmul>
 800b66e:	a338      	add	r3, pc, #224	; (adr r3, 800b750 <__kernel_cos+0x150>)
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	f7f4 fd7a 	bl	800016c <__adddf3>
 800b678:	4622      	mov	r2, r4
 800b67a:	462b      	mov	r3, r5
 800b67c:	f7f4 ff2c 	bl	80004d8 <__aeabi_dmul>
 800b680:	a335      	add	r3, pc, #212	; (adr r3, 800b758 <__kernel_cos+0x158>)
 800b682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b686:	f7f4 fd6f 	bl	8000168 <__aeabi_dsub>
 800b68a:	4622      	mov	r2, r4
 800b68c:	462b      	mov	r3, r5
 800b68e:	f7f4 ff23 	bl	80004d8 <__aeabi_dmul>
 800b692:	a333      	add	r3, pc, #204	; (adr r3, 800b760 <__kernel_cos+0x160>)
 800b694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b698:	f7f4 fd68 	bl	800016c <__adddf3>
 800b69c:	4622      	mov	r2, r4
 800b69e:	462b      	mov	r3, r5
 800b6a0:	f7f4 ff1a 	bl	80004d8 <__aeabi_dmul>
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	462b      	mov	r3, r5
 800b6a8:	f7f4 ff16 	bl	80004d8 <__aeabi_dmul>
 800b6ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6b0:	4604      	mov	r4, r0
 800b6b2:	460d      	mov	r5, r1
 800b6b4:	4640      	mov	r0, r8
 800b6b6:	4639      	mov	r1, r7
 800b6b8:	f7f4 ff0e 	bl	80004d8 <__aeabi_dmul>
 800b6bc:	460b      	mov	r3, r1
 800b6be:	4602      	mov	r2, r0
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f7f4 fd50 	bl	8000168 <__aeabi_dsub>
 800b6c8:	4b28      	ldr	r3, [pc, #160]	; (800b76c <__kernel_cos+0x16c>)
 800b6ca:	4680      	mov	r8, r0
 800b6cc:	429e      	cmp	r6, r3
 800b6ce:	4689      	mov	r9, r1
 800b6d0:	dc0e      	bgt.n	800b6f0 <__kernel_cos+0xf0>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	4650      	mov	r0, sl
 800b6d8:	4659      	mov	r1, fp
 800b6da:	f7f4 fd45 	bl	8000168 <__aeabi_dsub>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	4922      	ldr	r1, [pc, #136]	; (800b770 <__kernel_cos+0x170>)
 800b6e6:	f7f4 fd3f 	bl	8000168 <__aeabi_dsub>
 800b6ea:	b003      	add	sp, #12
 800b6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f0:	2400      	movs	r4, #0
 800b6f2:	4b20      	ldr	r3, [pc, #128]	; (800b774 <__kernel_cos+0x174>)
 800b6f4:	4622      	mov	r2, r4
 800b6f6:	429e      	cmp	r6, r3
 800b6f8:	bfcc      	ite	gt
 800b6fa:	4d1f      	ldrgt	r5, [pc, #124]	; (800b778 <__kernel_cos+0x178>)
 800b6fc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b700:	462b      	mov	r3, r5
 800b702:	2000      	movs	r0, #0
 800b704:	491a      	ldr	r1, [pc, #104]	; (800b770 <__kernel_cos+0x170>)
 800b706:	f7f4 fd2f 	bl	8000168 <__aeabi_dsub>
 800b70a:	4622      	mov	r2, r4
 800b70c:	4606      	mov	r6, r0
 800b70e:	460f      	mov	r7, r1
 800b710:	462b      	mov	r3, r5
 800b712:	4650      	mov	r0, sl
 800b714:	4659      	mov	r1, fp
 800b716:	f7f4 fd27 	bl	8000168 <__aeabi_dsub>
 800b71a:	4642      	mov	r2, r8
 800b71c:	464b      	mov	r3, r9
 800b71e:	f7f4 fd23 	bl	8000168 <__aeabi_dsub>
 800b722:	4602      	mov	r2, r0
 800b724:	460b      	mov	r3, r1
 800b726:	4630      	mov	r0, r6
 800b728:	4639      	mov	r1, r7
 800b72a:	e7dc      	b.n	800b6e6 <__kernel_cos+0xe6>
 800b72c:	2000      	movs	r0, #0
 800b72e:	4910      	ldr	r1, [pc, #64]	; (800b770 <__kernel_cos+0x170>)
 800b730:	e7db      	b.n	800b6ea <__kernel_cos+0xea>
 800b732:	bf00      	nop
 800b734:	f3af 8000 	nop.w
 800b738:	be8838d4 	.word	0xbe8838d4
 800b73c:	bda8fae9 	.word	0xbda8fae9
 800b740:	bdb4b1c4 	.word	0xbdb4b1c4
 800b744:	3e21ee9e 	.word	0x3e21ee9e
 800b748:	809c52ad 	.word	0x809c52ad
 800b74c:	3e927e4f 	.word	0x3e927e4f
 800b750:	19cb1590 	.word	0x19cb1590
 800b754:	3efa01a0 	.word	0x3efa01a0
 800b758:	16c15177 	.word	0x16c15177
 800b75c:	3f56c16c 	.word	0x3f56c16c
 800b760:	5555554c 	.word	0x5555554c
 800b764:	3fa55555 	.word	0x3fa55555
 800b768:	3fe00000 	.word	0x3fe00000
 800b76c:	3fd33332 	.word	0x3fd33332
 800b770:	3ff00000 	.word	0x3ff00000
 800b774:	3fe90000 	.word	0x3fe90000
 800b778:	3fd20000 	.word	0x3fd20000

0800b77c <__kernel_rem_pio2>:
 800b77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b780:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b784:	9307      	str	r3, [sp, #28]
 800b786:	9104      	str	r1, [sp, #16]
 800b788:	4bbf      	ldr	r3, [pc, #764]	; (800ba88 <__kernel_rem_pio2+0x30c>)
 800b78a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b78c:	1ed4      	subs	r4, r2, #3
 800b78e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b792:	2500      	movs	r5, #0
 800b794:	9302      	str	r3, [sp, #8]
 800b796:	9b07      	ldr	r3, [sp, #28]
 800b798:	9008      	str	r0, [sp, #32]
 800b79a:	3b01      	subs	r3, #1
 800b79c:	9306      	str	r3, [sp, #24]
 800b79e:	2318      	movs	r3, #24
 800b7a0:	fb94 f4f3 	sdiv	r4, r4, r3
 800b7a4:	f06f 0317 	mvn.w	r3, #23
 800b7a8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b7ac:	fb04 3303 	mla	r3, r4, r3, r3
 800b7b0:	eb03 0a02 	add.w	sl, r3, r2
 800b7b4:	9a06      	ldr	r2, [sp, #24]
 800b7b6:	9b02      	ldr	r3, [sp, #8]
 800b7b8:	1aa7      	subs	r7, r4, r2
 800b7ba:	eb03 0802 	add.w	r8, r3, r2
 800b7be:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	ae1e      	add	r6, sp, #120	; 0x78
 800b7ca:	4545      	cmp	r5, r8
 800b7cc:	dd14      	ble.n	800b7f8 <__kernel_rem_pio2+0x7c>
 800b7ce:	2600      	movs	r6, #0
 800b7d0:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800b7d4:	9b02      	ldr	r3, [sp, #8]
 800b7d6:	429e      	cmp	r6, r3
 800b7d8:	dc39      	bgt.n	800b84e <__kernel_rem_pio2+0xd2>
 800b7da:	9b08      	ldr	r3, [sp, #32]
 800b7dc:	f04f 0800 	mov.w	r8, #0
 800b7e0:	3b08      	subs	r3, #8
 800b7e2:	9300      	str	r3, [sp, #0]
 800b7e4:	9b07      	ldr	r3, [sp, #28]
 800b7e6:	f04f 0900 	mov.w	r9, #0
 800b7ea:	199d      	adds	r5, r3, r6
 800b7ec:	ab20      	add	r3, sp, #128	; 0x80
 800b7ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b7f2:	9305      	str	r3, [sp, #20]
 800b7f4:	2700      	movs	r7, #0
 800b7f6:	e023      	b.n	800b840 <__kernel_rem_pio2+0xc4>
 800b7f8:	42ef      	cmn	r7, r5
 800b7fa:	d40b      	bmi.n	800b814 <__kernel_rem_pio2+0x98>
 800b7fc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b800:	e9cd 2300 	strd	r2, r3, [sp]
 800b804:	f7f4 fdfe 	bl	8000404 <__aeabi_i2d>
 800b808:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b80c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800b810:	3501      	adds	r5, #1
 800b812:	e7da      	b.n	800b7ca <__kernel_rem_pio2+0x4e>
 800b814:	4610      	mov	r0, r2
 800b816:	4619      	mov	r1, r3
 800b818:	e7f8      	b.n	800b80c <__kernel_rem_pio2+0x90>
 800b81a:	9905      	ldr	r1, [sp, #20]
 800b81c:	9d00      	ldr	r5, [sp, #0]
 800b81e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b822:	9105      	str	r1, [sp, #20]
 800b824:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800b828:	9500      	str	r5, [sp, #0]
 800b82a:	f7f4 fe55 	bl	80004d8 <__aeabi_dmul>
 800b82e:	4602      	mov	r2, r0
 800b830:	460b      	mov	r3, r1
 800b832:	4640      	mov	r0, r8
 800b834:	4649      	mov	r1, r9
 800b836:	f7f4 fc99 	bl	800016c <__adddf3>
 800b83a:	4680      	mov	r8, r0
 800b83c:	4689      	mov	r9, r1
 800b83e:	3701      	adds	r7, #1
 800b840:	9b06      	ldr	r3, [sp, #24]
 800b842:	429f      	cmp	r7, r3
 800b844:	dde9      	ble.n	800b81a <__kernel_rem_pio2+0x9e>
 800b846:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800b84a:	3601      	adds	r6, #1
 800b84c:	e7c2      	b.n	800b7d4 <__kernel_rem_pio2+0x58>
 800b84e:	9b02      	ldr	r3, [sp, #8]
 800b850:	aa0c      	add	r2, sp, #48	; 0x30
 800b852:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b856:	930b      	str	r3, [sp, #44]	; 0x2c
 800b858:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b85a:	9f02      	ldr	r7, [sp, #8]
 800b85c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b860:	930a      	str	r3, [sp, #40]	; 0x28
 800b862:	2600      	movs	r6, #0
 800b864:	ab98      	add	r3, sp, #608	; 0x260
 800b866:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800b86a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b86e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b872:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b876:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b87a:	ab98      	add	r3, sp, #608	; 0x260
 800b87c:	445b      	add	r3, fp
 800b87e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800b882:	1bbb      	subs	r3, r7, r6
 800b884:	2b00      	cmp	r3, #0
 800b886:	dc71      	bgt.n	800b96c <__kernel_rem_pio2+0x1f0>
 800b888:	4652      	mov	r2, sl
 800b88a:	4640      	mov	r0, r8
 800b88c:	4649      	mov	r1, r9
 800b88e:	f000 fd8f 	bl	800c3b0 <scalbn>
 800b892:	2200      	movs	r2, #0
 800b894:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b898:	4604      	mov	r4, r0
 800b89a:	460d      	mov	r5, r1
 800b89c:	f7f4 fe1c 	bl	80004d8 <__aeabi_dmul>
 800b8a0:	f000 fcfe 	bl	800c2a0 <floor>
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	4b79      	ldr	r3, [pc, #484]	; (800ba8c <__kernel_rem_pio2+0x310>)
 800b8a8:	f7f4 fe16 	bl	80004d8 <__aeabi_dmul>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	f7f4 fc58 	bl	8000168 <__aeabi_dsub>
 800b8b8:	460d      	mov	r5, r1
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	f7f5 f8bc 	bl	8000a38 <__aeabi_d2iz>
 800b8c0:	9005      	str	r0, [sp, #20]
 800b8c2:	f7f4 fd9f 	bl	8000404 <__aeabi_i2d>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	4629      	mov	r1, r5
 800b8ce:	f7f4 fc4b 	bl	8000168 <__aeabi_dsub>
 800b8d2:	f1ba 0f00 	cmp.w	sl, #0
 800b8d6:	4680      	mov	r8, r0
 800b8d8:	4689      	mov	r9, r1
 800b8da:	dd6c      	ble.n	800b9b6 <__kernel_rem_pio2+0x23a>
 800b8dc:	1e7a      	subs	r2, r7, #1
 800b8de:	ab0c      	add	r3, sp, #48	; 0x30
 800b8e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b8e4:	f1ca 0118 	rsb	r1, sl, #24
 800b8e8:	9c05      	ldr	r4, [sp, #20]
 800b8ea:	fa40 f301 	asr.w	r3, r0, r1
 800b8ee:	441c      	add	r4, r3
 800b8f0:	408b      	lsls	r3, r1
 800b8f2:	1ac0      	subs	r0, r0, r3
 800b8f4:	ab0c      	add	r3, sp, #48	; 0x30
 800b8f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b8fa:	f1ca 0317 	rsb	r3, sl, #23
 800b8fe:	9405      	str	r4, [sp, #20]
 800b900:	fa40 f303 	asr.w	r3, r0, r3
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	9b00      	ldr	r3, [sp, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	dd62      	ble.n	800b9d2 <__kernel_rem_pio2+0x256>
 800b90c:	2200      	movs	r2, #0
 800b90e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b912:	4614      	mov	r4, r2
 800b914:	9b05      	ldr	r3, [sp, #20]
 800b916:	3301      	adds	r3, #1
 800b918:	9305      	str	r3, [sp, #20]
 800b91a:	4297      	cmp	r7, r2
 800b91c:	f300 809f 	bgt.w	800ba5e <__kernel_rem_pio2+0x2e2>
 800b920:	f1ba 0f00 	cmp.w	sl, #0
 800b924:	dd07      	ble.n	800b936 <__kernel_rem_pio2+0x1ba>
 800b926:	f1ba 0f01 	cmp.w	sl, #1
 800b92a:	f000 80bb 	beq.w	800baa4 <__kernel_rem_pio2+0x328>
 800b92e:	f1ba 0f02 	cmp.w	sl, #2
 800b932:	f000 80c1 	beq.w	800bab8 <__kernel_rem_pio2+0x33c>
 800b936:	9b00      	ldr	r3, [sp, #0]
 800b938:	2b02      	cmp	r3, #2
 800b93a:	d14a      	bne.n	800b9d2 <__kernel_rem_pio2+0x256>
 800b93c:	4642      	mov	r2, r8
 800b93e:	464b      	mov	r3, r9
 800b940:	2000      	movs	r0, #0
 800b942:	4953      	ldr	r1, [pc, #332]	; (800ba90 <__kernel_rem_pio2+0x314>)
 800b944:	f7f4 fc10 	bl	8000168 <__aeabi_dsub>
 800b948:	4680      	mov	r8, r0
 800b94a:	4689      	mov	r9, r1
 800b94c:	2c00      	cmp	r4, #0
 800b94e:	d040      	beq.n	800b9d2 <__kernel_rem_pio2+0x256>
 800b950:	4652      	mov	r2, sl
 800b952:	2000      	movs	r0, #0
 800b954:	494e      	ldr	r1, [pc, #312]	; (800ba90 <__kernel_rem_pio2+0x314>)
 800b956:	f000 fd2b 	bl	800c3b0 <scalbn>
 800b95a:	4602      	mov	r2, r0
 800b95c:	460b      	mov	r3, r1
 800b95e:	4640      	mov	r0, r8
 800b960:	4649      	mov	r1, r9
 800b962:	f7f4 fc01 	bl	8000168 <__aeabi_dsub>
 800b966:	4680      	mov	r8, r0
 800b968:	4689      	mov	r9, r1
 800b96a:	e032      	b.n	800b9d2 <__kernel_rem_pio2+0x256>
 800b96c:	2200      	movs	r2, #0
 800b96e:	4b49      	ldr	r3, [pc, #292]	; (800ba94 <__kernel_rem_pio2+0x318>)
 800b970:	4640      	mov	r0, r8
 800b972:	4649      	mov	r1, r9
 800b974:	f7f4 fdb0 	bl	80004d8 <__aeabi_dmul>
 800b978:	f7f5 f85e 	bl	8000a38 <__aeabi_d2iz>
 800b97c:	f7f4 fd42 	bl	8000404 <__aeabi_i2d>
 800b980:	2200      	movs	r2, #0
 800b982:	4b45      	ldr	r3, [pc, #276]	; (800ba98 <__kernel_rem_pio2+0x31c>)
 800b984:	e9cd 0100 	strd	r0, r1, [sp]
 800b988:	f7f4 fda6 	bl	80004d8 <__aeabi_dmul>
 800b98c:	4602      	mov	r2, r0
 800b98e:	460b      	mov	r3, r1
 800b990:	4640      	mov	r0, r8
 800b992:	4649      	mov	r1, r9
 800b994:	f7f4 fbe8 	bl	8000168 <__aeabi_dsub>
 800b998:	f7f5 f84e 	bl	8000a38 <__aeabi_d2iz>
 800b99c:	ab0c      	add	r3, sp, #48	; 0x30
 800b99e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b9a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b9a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9aa:	f7f4 fbdf 	bl	800016c <__adddf3>
 800b9ae:	3601      	adds	r6, #1
 800b9b0:	4680      	mov	r8, r0
 800b9b2:	4689      	mov	r9, r1
 800b9b4:	e765      	b.n	800b882 <__kernel_rem_pio2+0x106>
 800b9b6:	d105      	bne.n	800b9c4 <__kernel_rem_pio2+0x248>
 800b9b8:	1e7b      	subs	r3, r7, #1
 800b9ba:	aa0c      	add	r2, sp, #48	; 0x30
 800b9bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b9c0:	15c3      	asrs	r3, r0, #23
 800b9c2:	e79f      	b.n	800b904 <__kernel_rem_pio2+0x188>
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	4b35      	ldr	r3, [pc, #212]	; (800ba9c <__kernel_rem_pio2+0x320>)
 800b9c8:	f7f5 f80c 	bl	80009e4 <__aeabi_dcmpge>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d143      	bne.n	800ba58 <__kernel_rem_pio2+0x2dc>
 800b9d0:	9000      	str	r0, [sp, #0]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	4640      	mov	r0, r8
 800b9d8:	4649      	mov	r1, r9
 800b9da:	f7f4 ffe5 	bl	80009a8 <__aeabi_dcmpeq>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	f000 80c3 	beq.w	800bb6a <__kernel_rem_pio2+0x3ee>
 800b9e4:	1e7c      	subs	r4, r7, #1
 800b9e6:	4623      	mov	r3, r4
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	9902      	ldr	r1, [sp, #8]
 800b9ec:	428b      	cmp	r3, r1
 800b9ee:	da6a      	bge.n	800bac6 <__kernel_rem_pio2+0x34a>
 800b9f0:	2a00      	cmp	r2, #0
 800b9f2:	f000 8084 	beq.w	800bafe <__kernel_rem_pio2+0x382>
 800b9f6:	ab0c      	add	r3, sp, #48	; 0x30
 800b9f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b9fc:	f1aa 0a18 	sub.w	sl, sl, #24
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f000 80b0 	beq.w	800bb66 <__kernel_rem_pio2+0x3ea>
 800ba06:	4652      	mov	r2, sl
 800ba08:	2000      	movs	r0, #0
 800ba0a:	4921      	ldr	r1, [pc, #132]	; (800ba90 <__kernel_rem_pio2+0x314>)
 800ba0c:	f000 fcd0 	bl	800c3b0 <scalbn>
 800ba10:	4625      	mov	r5, r4
 800ba12:	4606      	mov	r6, r0
 800ba14:	460f      	mov	r7, r1
 800ba16:	f04f 0a00 	mov.w	sl, #0
 800ba1a:	00e3      	lsls	r3, r4, #3
 800ba1c:	aa98      	add	r2, sp, #608	; 0x260
 800ba1e:	eb02 0803 	add.w	r8, r2, r3
 800ba22:	f8df b070 	ldr.w	fp, [pc, #112]	; 800ba94 <__kernel_rem_pio2+0x318>
 800ba26:	9306      	str	r3, [sp, #24]
 800ba28:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800ba2c:	2d00      	cmp	r5, #0
 800ba2e:	f280 80d2 	bge.w	800bbd6 <__kernel_rem_pio2+0x45a>
 800ba32:	2500      	movs	r5, #0
 800ba34:	9a06      	ldr	r2, [sp, #24]
 800ba36:	ab98      	add	r3, sp, #608	; 0x260
 800ba38:	189e      	adds	r6, r3, r2
 800ba3a:	3ea8      	subs	r6, #168	; 0xa8
 800ba3c:	1b63      	subs	r3, r4, r5
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f2c0 80f9 	blt.w	800bc36 <__kernel_rem_pio2+0x4ba>
 800ba44:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800baa0 <__kernel_rem_pio2+0x324>
 800ba48:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800ba4c:	f04f 0a00 	mov.w	sl, #0
 800ba50:	f04f 0b00 	mov.w	fp, #0
 800ba54:	2700      	movs	r7, #0
 800ba56:	e0e2      	b.n	800bc1e <__kernel_rem_pio2+0x4a2>
 800ba58:	2302      	movs	r3, #2
 800ba5a:	9300      	str	r3, [sp, #0]
 800ba5c:	e756      	b.n	800b90c <__kernel_rem_pio2+0x190>
 800ba5e:	ab0c      	add	r3, sp, #48	; 0x30
 800ba60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba64:	b94c      	cbnz	r4, 800ba7a <__kernel_rem_pio2+0x2fe>
 800ba66:	b12b      	cbz	r3, 800ba74 <__kernel_rem_pio2+0x2f8>
 800ba68:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ba6c:	a80c      	add	r0, sp, #48	; 0x30
 800ba6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ba72:	2301      	movs	r3, #1
 800ba74:	3201      	adds	r2, #1
 800ba76:	461c      	mov	r4, r3
 800ba78:	e74f      	b.n	800b91a <__kernel_rem_pio2+0x19e>
 800ba7a:	1acb      	subs	r3, r1, r3
 800ba7c:	a80c      	add	r0, sp, #48	; 0x30
 800ba7e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ba82:	4623      	mov	r3, r4
 800ba84:	e7f6      	b.n	800ba74 <__kernel_rem_pio2+0x2f8>
 800ba86:	bf00      	nop
 800ba88:	0800ce60 	.word	0x0800ce60
 800ba8c:	40200000 	.word	0x40200000
 800ba90:	3ff00000 	.word	0x3ff00000
 800ba94:	3e700000 	.word	0x3e700000
 800ba98:	41700000 	.word	0x41700000
 800ba9c:	3fe00000 	.word	0x3fe00000
 800baa0:	0800ce18 	.word	0x0800ce18
 800baa4:	1e7a      	subs	r2, r7, #1
 800baa6:	ab0c      	add	r3, sp, #48	; 0x30
 800baa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bab0:	a90c      	add	r1, sp, #48	; 0x30
 800bab2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bab6:	e73e      	b.n	800b936 <__kernel_rem_pio2+0x1ba>
 800bab8:	1e7a      	subs	r2, r7, #1
 800baba:	ab0c      	add	r3, sp, #48	; 0x30
 800babc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bac4:	e7f4      	b.n	800bab0 <__kernel_rem_pio2+0x334>
 800bac6:	a90c      	add	r1, sp, #48	; 0x30
 800bac8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bacc:	3b01      	subs	r3, #1
 800bace:	430a      	orrs	r2, r1
 800bad0:	e78b      	b.n	800b9ea <__kernel_rem_pio2+0x26e>
 800bad2:	3401      	adds	r4, #1
 800bad4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bad8:	2a00      	cmp	r2, #0
 800bada:	d0fa      	beq.n	800bad2 <__kernel_rem_pio2+0x356>
 800badc:	ab98      	add	r3, sp, #608	; 0x260
 800bade:	449b      	add	fp, r3
 800bae0:	9b07      	ldr	r3, [sp, #28]
 800bae2:	1c7e      	adds	r6, r7, #1
 800bae4:	19dd      	adds	r5, r3, r7
 800bae6:	ab98      	add	r3, sp, #608	; 0x260
 800bae8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800baec:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800baf0:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800baf4:	443c      	add	r4, r7
 800baf6:	42b4      	cmp	r4, r6
 800baf8:	da04      	bge.n	800bb04 <__kernel_rem_pio2+0x388>
 800bafa:	4627      	mov	r7, r4
 800bafc:	e6b1      	b.n	800b862 <__kernel_rem_pio2+0xe6>
 800bafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb00:	2401      	movs	r4, #1
 800bb02:	e7e7      	b.n	800bad4 <__kernel_rem_pio2+0x358>
 800bb04:	f105 0308 	add.w	r3, r5, #8
 800bb08:	9309      	str	r3, [sp, #36]	; 0x24
 800bb0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb0c:	2700      	movs	r7, #0
 800bb0e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bb12:	f7f4 fc77 	bl	8000404 <__aeabi_i2d>
 800bb16:	f04f 0800 	mov.w	r8, #0
 800bb1a:	f04f 0900 	mov.w	r9, #0
 800bb1e:	9b08      	ldr	r3, [sp, #32]
 800bb20:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800bb24:	3b08      	subs	r3, #8
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	f105 0310 	add.w	r3, r5, #16
 800bb2c:	9305      	str	r3, [sp, #20]
 800bb2e:	9b06      	ldr	r3, [sp, #24]
 800bb30:	429f      	cmp	r7, r3
 800bb32:	dd04      	ble.n	800bb3e <__kernel_rem_pio2+0x3c2>
 800bb34:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800bb38:	3601      	adds	r6, #1
 800bb3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bb3c:	e7db      	b.n	800baf6 <__kernel_rem_pio2+0x37a>
 800bb3e:	9905      	ldr	r1, [sp, #20]
 800bb40:	9d00      	ldr	r5, [sp, #0]
 800bb42:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800bb46:	9105      	str	r1, [sp, #20]
 800bb48:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800bb4c:	9500      	str	r5, [sp, #0]
 800bb4e:	f7f4 fcc3 	bl	80004d8 <__aeabi_dmul>
 800bb52:	4602      	mov	r2, r0
 800bb54:	460b      	mov	r3, r1
 800bb56:	4640      	mov	r0, r8
 800bb58:	4649      	mov	r1, r9
 800bb5a:	f7f4 fb07 	bl	800016c <__adddf3>
 800bb5e:	3701      	adds	r7, #1
 800bb60:	4680      	mov	r8, r0
 800bb62:	4689      	mov	r9, r1
 800bb64:	e7e3      	b.n	800bb2e <__kernel_rem_pio2+0x3b2>
 800bb66:	3c01      	subs	r4, #1
 800bb68:	e745      	b.n	800b9f6 <__kernel_rem_pio2+0x27a>
 800bb6a:	f1ca 0200 	rsb	r2, sl, #0
 800bb6e:	4640      	mov	r0, r8
 800bb70:	4649      	mov	r1, r9
 800bb72:	f000 fc1d 	bl	800c3b0 <scalbn>
 800bb76:	2200      	movs	r2, #0
 800bb78:	4ba3      	ldr	r3, [pc, #652]	; (800be08 <__kernel_rem_pio2+0x68c>)
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	460d      	mov	r5, r1
 800bb7e:	f7f4 ff31 	bl	80009e4 <__aeabi_dcmpge>
 800bb82:	b1f8      	cbz	r0, 800bbc4 <__kernel_rem_pio2+0x448>
 800bb84:	2200      	movs	r2, #0
 800bb86:	4ba1      	ldr	r3, [pc, #644]	; (800be0c <__kernel_rem_pio2+0x690>)
 800bb88:	4620      	mov	r0, r4
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	f7f4 fca4 	bl	80004d8 <__aeabi_dmul>
 800bb90:	f7f4 ff52 	bl	8000a38 <__aeabi_d2iz>
 800bb94:	4606      	mov	r6, r0
 800bb96:	f7f4 fc35 	bl	8000404 <__aeabi_i2d>
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	4b9a      	ldr	r3, [pc, #616]	; (800be08 <__kernel_rem_pio2+0x68c>)
 800bb9e:	f7f4 fc9b 	bl	80004d8 <__aeabi_dmul>
 800bba2:	460b      	mov	r3, r1
 800bba4:	4602      	mov	r2, r0
 800bba6:	4629      	mov	r1, r5
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f7f4 fadd 	bl	8000168 <__aeabi_dsub>
 800bbae:	f7f4 ff43 	bl	8000a38 <__aeabi_d2iz>
 800bbb2:	1c7c      	adds	r4, r7, #1
 800bbb4:	ab0c      	add	r3, sp, #48	; 0x30
 800bbb6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bbba:	f10a 0a18 	add.w	sl, sl, #24
 800bbbe:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800bbc2:	e720      	b.n	800ba06 <__kernel_rem_pio2+0x28a>
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	4629      	mov	r1, r5
 800bbc8:	f7f4 ff36 	bl	8000a38 <__aeabi_d2iz>
 800bbcc:	ab0c      	add	r3, sp, #48	; 0x30
 800bbce:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bbd2:	463c      	mov	r4, r7
 800bbd4:	e717      	b.n	800ba06 <__kernel_rem_pio2+0x28a>
 800bbd6:	ab0c      	add	r3, sp, #48	; 0x30
 800bbd8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bbdc:	f7f4 fc12 	bl	8000404 <__aeabi_i2d>
 800bbe0:	4632      	mov	r2, r6
 800bbe2:	463b      	mov	r3, r7
 800bbe4:	f7f4 fc78 	bl	80004d8 <__aeabi_dmul>
 800bbe8:	4652      	mov	r2, sl
 800bbea:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800bbee:	465b      	mov	r3, fp
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	4639      	mov	r1, r7
 800bbf4:	f7f4 fc70 	bl	80004d8 <__aeabi_dmul>
 800bbf8:	3d01      	subs	r5, #1
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	460f      	mov	r7, r1
 800bbfe:	e715      	b.n	800ba2c <__kernel_rem_pio2+0x2b0>
 800bc00:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800bc04:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800bc08:	f7f4 fc66 	bl	80004d8 <__aeabi_dmul>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
 800bc10:	4650      	mov	r0, sl
 800bc12:	4659      	mov	r1, fp
 800bc14:	f7f4 faaa 	bl	800016c <__adddf3>
 800bc18:	4682      	mov	sl, r0
 800bc1a:	468b      	mov	fp, r1
 800bc1c:	3701      	adds	r7, #1
 800bc1e:	9b02      	ldr	r3, [sp, #8]
 800bc20:	429f      	cmp	r7, r3
 800bc22:	dc01      	bgt.n	800bc28 <__kernel_rem_pio2+0x4ac>
 800bc24:	42bd      	cmp	r5, r7
 800bc26:	daeb      	bge.n	800bc00 <__kernel_rem_pio2+0x484>
 800bc28:	ab48      	add	r3, sp, #288	; 0x120
 800bc2a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bc2e:	e9c3 ab00 	strd	sl, fp, [r3]
 800bc32:	3501      	adds	r5, #1
 800bc34:	e702      	b.n	800ba3c <__kernel_rem_pio2+0x2c0>
 800bc36:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800bc38:	2b03      	cmp	r3, #3
 800bc3a:	d86c      	bhi.n	800bd16 <__kernel_rem_pio2+0x59a>
 800bc3c:	e8df f003 	tbb	[pc, r3]
 800bc40:	022f2f59 	.word	0x022f2f59
 800bc44:	9a06      	ldr	r2, [sp, #24]
 800bc46:	ab48      	add	r3, sp, #288	; 0x120
 800bc48:	189d      	adds	r5, r3, r2
 800bc4a:	46aa      	mov	sl, r5
 800bc4c:	46a3      	mov	fp, r4
 800bc4e:	f1bb 0f00 	cmp.w	fp, #0
 800bc52:	f300 8087 	bgt.w	800bd64 <__kernel_rem_pio2+0x5e8>
 800bc56:	46a2      	mov	sl, r4
 800bc58:	f1ba 0f01 	cmp.w	sl, #1
 800bc5c:	f300 809f 	bgt.w	800bd9e <__kernel_rem_pio2+0x622>
 800bc60:	2700      	movs	r7, #0
 800bc62:	463e      	mov	r6, r7
 800bc64:	9d06      	ldr	r5, [sp, #24]
 800bc66:	ab48      	add	r3, sp, #288	; 0x120
 800bc68:	3508      	adds	r5, #8
 800bc6a:	441d      	add	r5, r3
 800bc6c:	2c01      	cmp	r4, #1
 800bc6e:	f300 80b3 	bgt.w	800bdd8 <__kernel_rem_pio2+0x65c>
 800bc72:	9b00      	ldr	r3, [sp, #0]
 800bc74:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800bc76:	9849      	ldr	r0, [sp, #292]	; 0x124
 800bc78:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800bc7a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	f040 80b5 	bne.w	800bdec <__kernel_rem_pio2+0x670>
 800bc82:	4603      	mov	r3, r0
 800bc84:	462a      	mov	r2, r5
 800bc86:	9804      	ldr	r0, [sp, #16]
 800bc88:	e9c0 2300 	strd	r2, r3, [r0]
 800bc8c:	4622      	mov	r2, r4
 800bc8e:	460b      	mov	r3, r1
 800bc90:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bc94:	463a      	mov	r2, r7
 800bc96:	4633      	mov	r3, r6
 800bc98:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bc9c:	e03b      	b.n	800bd16 <__kernel_rem_pio2+0x59a>
 800bc9e:	f04f 0c00 	mov.w	ip, #0
 800bca2:	4626      	mov	r6, r4
 800bca4:	4667      	mov	r7, ip
 800bca6:	9d06      	ldr	r5, [sp, #24]
 800bca8:	ab48      	add	r3, sp, #288	; 0x120
 800bcaa:	3508      	adds	r5, #8
 800bcac:	441d      	add	r5, r3
 800bcae:	2e00      	cmp	r6, #0
 800bcb0:	da42      	bge.n	800bd38 <__kernel_rem_pio2+0x5bc>
 800bcb2:	9b00      	ldr	r3, [sp, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d049      	beq.n	800bd4c <__kernel_rem_pio2+0x5d0>
 800bcb8:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800bcbc:	4662      	mov	r2, ip
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	9904      	ldr	r1, [sp, #16]
 800bcc2:	2601      	movs	r6, #1
 800bcc4:	e9c1 2300 	strd	r2, r3, [r1]
 800bcc8:	a948      	add	r1, sp, #288	; 0x120
 800bcca:	463b      	mov	r3, r7
 800bccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcd0:	f7f4 fa4a 	bl	8000168 <__aeabi_dsub>
 800bcd4:	4684      	mov	ip, r0
 800bcd6:	460f      	mov	r7, r1
 800bcd8:	ad48      	add	r5, sp, #288	; 0x120
 800bcda:	42b4      	cmp	r4, r6
 800bcdc:	da38      	bge.n	800bd50 <__kernel_rem_pio2+0x5d4>
 800bcde:	9b00      	ldr	r3, [sp, #0]
 800bce0:	b10b      	cbz	r3, 800bce6 <__kernel_rem_pio2+0x56a>
 800bce2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bce6:	4662      	mov	r2, ip
 800bce8:	463b      	mov	r3, r7
 800bcea:	9904      	ldr	r1, [sp, #16]
 800bcec:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800bcf0:	e011      	b.n	800bd16 <__kernel_rem_pio2+0x59a>
 800bcf2:	2700      	movs	r7, #0
 800bcf4:	463d      	mov	r5, r7
 800bcf6:	9b06      	ldr	r3, [sp, #24]
 800bcf8:	aa98      	add	r2, sp, #608	; 0x260
 800bcfa:	4413      	add	r3, r2
 800bcfc:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800bd00:	2c00      	cmp	r4, #0
 800bd02:	da0f      	bge.n	800bd24 <__kernel_rem_pio2+0x5a8>
 800bd04:	9b00      	ldr	r3, [sp, #0]
 800bd06:	b10b      	cbz	r3, 800bd0c <__kernel_rem_pio2+0x590>
 800bd08:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800bd0c:	463a      	mov	r2, r7
 800bd0e:	462b      	mov	r3, r5
 800bd10:	9904      	ldr	r1, [sp, #16]
 800bd12:	e9c1 2300 	strd	r2, r3, [r1]
 800bd16:	9b05      	ldr	r3, [sp, #20]
 800bd18:	f003 0007 	and.w	r0, r3, #7
 800bd1c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd24:	4638      	mov	r0, r7
 800bd26:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	f7f4 fa1e 	bl	800016c <__adddf3>
 800bd30:	3c01      	subs	r4, #1
 800bd32:	4607      	mov	r7, r0
 800bd34:	460d      	mov	r5, r1
 800bd36:	e7e3      	b.n	800bd00 <__kernel_rem_pio2+0x584>
 800bd38:	4660      	mov	r0, ip
 800bd3a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bd3e:	4639      	mov	r1, r7
 800bd40:	f7f4 fa14 	bl	800016c <__adddf3>
 800bd44:	3e01      	subs	r6, #1
 800bd46:	4684      	mov	ip, r0
 800bd48:	460f      	mov	r7, r1
 800bd4a:	e7b0      	b.n	800bcae <__kernel_rem_pio2+0x532>
 800bd4c:	4639      	mov	r1, r7
 800bd4e:	e7b5      	b.n	800bcbc <__kernel_rem_pio2+0x540>
 800bd50:	4660      	mov	r0, ip
 800bd52:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800bd56:	4639      	mov	r1, r7
 800bd58:	f7f4 fa08 	bl	800016c <__adddf3>
 800bd5c:	3601      	adds	r6, #1
 800bd5e:	4684      	mov	ip, r0
 800bd60:	460f      	mov	r7, r1
 800bd62:	e7ba      	b.n	800bcda <__kernel_rem_pio2+0x55e>
 800bd64:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800bd68:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800bd6c:	4640      	mov	r0, r8
 800bd6e:	4649      	mov	r1, r9
 800bd70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd74:	f7f4 f9fa 	bl	800016c <__adddf3>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	4606      	mov	r6, r0
 800bd7e:	460f      	mov	r7, r1
 800bd80:	4640      	mov	r0, r8
 800bd82:	4649      	mov	r1, r9
 800bd84:	f7f4 f9f0 	bl	8000168 <__aeabi_dsub>
 800bd88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd8c:	f7f4 f9ee 	bl	800016c <__adddf3>
 800bd90:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd94:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bd98:	e9ca 6700 	strd	r6, r7, [sl]
 800bd9c:	e757      	b.n	800bc4e <__kernel_rem_pio2+0x4d2>
 800bd9e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800bda2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800bda6:	4630      	mov	r0, r6
 800bda8:	4639      	mov	r1, r7
 800bdaa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bdae:	f7f4 f9dd 	bl	800016c <__adddf3>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	4680      	mov	r8, r0
 800bdb8:	4689      	mov	r9, r1
 800bdba:	4630      	mov	r0, r6
 800bdbc:	4639      	mov	r1, r7
 800bdbe:	f7f4 f9d3 	bl	8000168 <__aeabi_dsub>
 800bdc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdc6:	f7f4 f9d1 	bl	800016c <__adddf3>
 800bdca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800bdd2:	e9c5 8900 	strd	r8, r9, [r5]
 800bdd6:	e73f      	b.n	800bc58 <__kernel_rem_pio2+0x4dc>
 800bdd8:	4638      	mov	r0, r7
 800bdda:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bdde:	4631      	mov	r1, r6
 800bde0:	f7f4 f9c4 	bl	800016c <__adddf3>
 800bde4:	3c01      	subs	r4, #1
 800bde6:	4607      	mov	r7, r0
 800bde8:	460e      	mov	r6, r1
 800bdea:	e73f      	b.n	800bc6c <__kernel_rem_pio2+0x4f0>
 800bdec:	9b04      	ldr	r3, [sp, #16]
 800bdee:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bdf2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bdf6:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800bdfa:	601d      	str	r5, [r3, #0]
 800bdfc:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800be00:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800be04:	615e      	str	r6, [r3, #20]
 800be06:	e786      	b.n	800bd16 <__kernel_rem_pio2+0x59a>
 800be08:	41700000 	.word	0x41700000
 800be0c:	3e700000 	.word	0x3e700000

0800be10 <__kernel_sin>:
 800be10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be14:	b086      	sub	sp, #24
 800be16:	e9cd 2300 	strd	r2, r3, [sp]
 800be1a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be1e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800be22:	4682      	mov	sl, r0
 800be24:	460c      	mov	r4, r1
 800be26:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800be28:	da03      	bge.n	800be32 <__kernel_sin+0x22>
 800be2a:	f7f4 fe05 	bl	8000a38 <__aeabi_d2iz>
 800be2e:	2800      	cmp	r0, #0
 800be30:	d050      	beq.n	800bed4 <__kernel_sin+0xc4>
 800be32:	4652      	mov	r2, sl
 800be34:	4623      	mov	r3, r4
 800be36:	4650      	mov	r0, sl
 800be38:	4621      	mov	r1, r4
 800be3a:	f7f4 fb4d 	bl	80004d8 <__aeabi_dmul>
 800be3e:	4606      	mov	r6, r0
 800be40:	460f      	mov	r7, r1
 800be42:	4602      	mov	r2, r0
 800be44:	460b      	mov	r3, r1
 800be46:	4650      	mov	r0, sl
 800be48:	4621      	mov	r1, r4
 800be4a:	f7f4 fb45 	bl	80004d8 <__aeabi_dmul>
 800be4e:	a33e      	add	r3, pc, #248	; (adr r3, 800bf48 <__kernel_sin+0x138>)
 800be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be54:	4680      	mov	r8, r0
 800be56:	4689      	mov	r9, r1
 800be58:	4630      	mov	r0, r6
 800be5a:	4639      	mov	r1, r7
 800be5c:	f7f4 fb3c 	bl	80004d8 <__aeabi_dmul>
 800be60:	a33b      	add	r3, pc, #236	; (adr r3, 800bf50 <__kernel_sin+0x140>)
 800be62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be66:	f7f4 f97f 	bl	8000168 <__aeabi_dsub>
 800be6a:	4632      	mov	r2, r6
 800be6c:	463b      	mov	r3, r7
 800be6e:	f7f4 fb33 	bl	80004d8 <__aeabi_dmul>
 800be72:	a339      	add	r3, pc, #228	; (adr r3, 800bf58 <__kernel_sin+0x148>)
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	f7f4 f978 	bl	800016c <__adddf3>
 800be7c:	4632      	mov	r2, r6
 800be7e:	463b      	mov	r3, r7
 800be80:	f7f4 fb2a 	bl	80004d8 <__aeabi_dmul>
 800be84:	a336      	add	r3, pc, #216	; (adr r3, 800bf60 <__kernel_sin+0x150>)
 800be86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8a:	f7f4 f96d 	bl	8000168 <__aeabi_dsub>
 800be8e:	4632      	mov	r2, r6
 800be90:	463b      	mov	r3, r7
 800be92:	f7f4 fb21 	bl	80004d8 <__aeabi_dmul>
 800be96:	a334      	add	r3, pc, #208	; (adr r3, 800bf68 <__kernel_sin+0x158>)
 800be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9c:	f7f4 f966 	bl	800016c <__adddf3>
 800bea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bea4:	b9dd      	cbnz	r5, 800bede <__kernel_sin+0xce>
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
 800beaa:	4630      	mov	r0, r6
 800beac:	4639      	mov	r1, r7
 800beae:	f7f4 fb13 	bl	80004d8 <__aeabi_dmul>
 800beb2:	a32f      	add	r3, pc, #188	; (adr r3, 800bf70 <__kernel_sin+0x160>)
 800beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb8:	f7f4 f956 	bl	8000168 <__aeabi_dsub>
 800bebc:	4642      	mov	r2, r8
 800bebe:	464b      	mov	r3, r9
 800bec0:	f7f4 fb0a 	bl	80004d8 <__aeabi_dmul>
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	4650      	mov	r0, sl
 800beca:	4621      	mov	r1, r4
 800becc:	f7f4 f94e 	bl	800016c <__adddf3>
 800bed0:	4682      	mov	sl, r0
 800bed2:	460c      	mov	r4, r1
 800bed4:	4650      	mov	r0, sl
 800bed6:	4621      	mov	r1, r4
 800bed8:	b006      	add	sp, #24
 800beda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bede:	2200      	movs	r2, #0
 800bee0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bee4:	4b24      	ldr	r3, [pc, #144]	; (800bf78 <__kernel_sin+0x168>)
 800bee6:	f7f4 faf7 	bl	80004d8 <__aeabi_dmul>
 800beea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800beee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bef2:	4640      	mov	r0, r8
 800bef4:	4649      	mov	r1, r9
 800bef6:	f7f4 faef 	bl	80004d8 <__aeabi_dmul>
 800befa:	4602      	mov	r2, r0
 800befc:	460b      	mov	r3, r1
 800befe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf02:	f7f4 f931 	bl	8000168 <__aeabi_dsub>
 800bf06:	4632      	mov	r2, r6
 800bf08:	463b      	mov	r3, r7
 800bf0a:	f7f4 fae5 	bl	80004d8 <__aeabi_dmul>
 800bf0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf12:	f7f4 f929 	bl	8000168 <__aeabi_dsub>
 800bf16:	a316      	add	r3, pc, #88	; (adr r3, 800bf70 <__kernel_sin+0x160>)
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	460f      	mov	r7, r1
 800bf20:	4640      	mov	r0, r8
 800bf22:	4649      	mov	r1, r9
 800bf24:	f7f4 fad8 	bl	80004d8 <__aeabi_dmul>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	4630      	mov	r0, r6
 800bf2e:	4639      	mov	r1, r7
 800bf30:	f7f4 f91c 	bl	800016c <__adddf3>
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	4650      	mov	r0, sl
 800bf3a:	4621      	mov	r1, r4
 800bf3c:	f7f4 f914 	bl	8000168 <__aeabi_dsub>
 800bf40:	e7c6      	b.n	800bed0 <__kernel_sin+0xc0>
 800bf42:	bf00      	nop
 800bf44:	f3af 8000 	nop.w
 800bf48:	5acfd57c 	.word	0x5acfd57c
 800bf4c:	3de5d93a 	.word	0x3de5d93a
 800bf50:	8a2b9ceb 	.word	0x8a2b9ceb
 800bf54:	3e5ae5e6 	.word	0x3e5ae5e6
 800bf58:	57b1fe7d 	.word	0x57b1fe7d
 800bf5c:	3ec71de3 	.word	0x3ec71de3
 800bf60:	19c161d5 	.word	0x19c161d5
 800bf64:	3f2a01a0 	.word	0x3f2a01a0
 800bf68:	1110f8a6 	.word	0x1110f8a6
 800bf6c:	3f811111 	.word	0x3f811111
 800bf70:	55555549 	.word	0x55555549
 800bf74:	3fc55555 	.word	0x3fc55555
 800bf78:	3fe00000 	.word	0x3fe00000
 800bf7c:	00000000 	.word	0x00000000

0800bf80 <atan>:
 800bf80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf84:	4bb6      	ldr	r3, [pc, #728]	; (800c260 <atan+0x2e0>)
 800bf86:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bf8a:	429e      	cmp	r6, r3
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	460d      	mov	r5, r1
 800bf90:	468b      	mov	fp, r1
 800bf92:	dd17      	ble.n	800bfc4 <atan+0x44>
 800bf94:	4bb3      	ldr	r3, [pc, #716]	; (800c264 <atan+0x2e4>)
 800bf96:	429e      	cmp	r6, r3
 800bf98:	dc01      	bgt.n	800bf9e <atan+0x1e>
 800bf9a:	d109      	bne.n	800bfb0 <atan+0x30>
 800bf9c:	b140      	cbz	r0, 800bfb0 <atan+0x30>
 800bf9e:	4622      	mov	r2, r4
 800bfa0:	462b      	mov	r3, r5
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	4629      	mov	r1, r5
 800bfa6:	f7f4 f8e1 	bl	800016c <__adddf3>
 800bfaa:	4604      	mov	r4, r0
 800bfac:	460d      	mov	r5, r1
 800bfae:	e005      	b.n	800bfbc <atan+0x3c>
 800bfb0:	f1bb 0f00 	cmp.w	fp, #0
 800bfb4:	4cac      	ldr	r4, [pc, #688]	; (800c268 <atan+0x2e8>)
 800bfb6:	f340 8121 	ble.w	800c1fc <atan+0x27c>
 800bfba:	4dac      	ldr	r5, [pc, #688]	; (800c26c <atan+0x2ec>)
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	4629      	mov	r1, r5
 800bfc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc4:	4baa      	ldr	r3, [pc, #680]	; (800c270 <atan+0x2f0>)
 800bfc6:	429e      	cmp	r6, r3
 800bfc8:	dc11      	bgt.n	800bfee <atan+0x6e>
 800bfca:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bfce:	429e      	cmp	r6, r3
 800bfd0:	dc0a      	bgt.n	800bfe8 <atan+0x68>
 800bfd2:	a38b      	add	r3, pc, #556	; (adr r3, 800c200 <atan+0x280>)
 800bfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd8:	f7f4 f8c8 	bl	800016c <__adddf3>
 800bfdc:	2200      	movs	r2, #0
 800bfde:	4ba5      	ldr	r3, [pc, #660]	; (800c274 <atan+0x2f4>)
 800bfe0:	f7f4 fd0a 	bl	80009f8 <__aeabi_dcmpgt>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d1e9      	bne.n	800bfbc <atan+0x3c>
 800bfe8:	f04f 3aff 	mov.w	sl, #4294967295
 800bfec:	e027      	b.n	800c03e <atan+0xbe>
 800bfee:	f000 f951 	bl	800c294 <fabs>
 800bff2:	4ba1      	ldr	r3, [pc, #644]	; (800c278 <atan+0x2f8>)
 800bff4:	4604      	mov	r4, r0
 800bff6:	429e      	cmp	r6, r3
 800bff8:	460d      	mov	r5, r1
 800bffa:	f300 80b8 	bgt.w	800c16e <atan+0x1ee>
 800bffe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c002:	429e      	cmp	r6, r3
 800c004:	f300 809c 	bgt.w	800c140 <atan+0x1c0>
 800c008:	4602      	mov	r2, r0
 800c00a:	460b      	mov	r3, r1
 800c00c:	f7f4 f8ae 	bl	800016c <__adddf3>
 800c010:	2200      	movs	r2, #0
 800c012:	4b98      	ldr	r3, [pc, #608]	; (800c274 <atan+0x2f4>)
 800c014:	f7f4 f8a8 	bl	8000168 <__aeabi_dsub>
 800c018:	2200      	movs	r2, #0
 800c01a:	4606      	mov	r6, r0
 800c01c:	460f      	mov	r7, r1
 800c01e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c022:	4620      	mov	r0, r4
 800c024:	4629      	mov	r1, r5
 800c026:	f7f4 f8a1 	bl	800016c <__adddf3>
 800c02a:	4602      	mov	r2, r0
 800c02c:	460b      	mov	r3, r1
 800c02e:	4630      	mov	r0, r6
 800c030:	4639      	mov	r1, r7
 800c032:	f7f4 fb7b 	bl	800072c <__aeabi_ddiv>
 800c036:	f04f 0a00 	mov.w	sl, #0
 800c03a:	4604      	mov	r4, r0
 800c03c:	460d      	mov	r5, r1
 800c03e:	4622      	mov	r2, r4
 800c040:	462b      	mov	r3, r5
 800c042:	4620      	mov	r0, r4
 800c044:	4629      	mov	r1, r5
 800c046:	f7f4 fa47 	bl	80004d8 <__aeabi_dmul>
 800c04a:	4602      	mov	r2, r0
 800c04c:	460b      	mov	r3, r1
 800c04e:	4680      	mov	r8, r0
 800c050:	4689      	mov	r9, r1
 800c052:	f7f4 fa41 	bl	80004d8 <__aeabi_dmul>
 800c056:	a36c      	add	r3, pc, #432	; (adr r3, 800c208 <atan+0x288>)
 800c058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05c:	4606      	mov	r6, r0
 800c05e:	460f      	mov	r7, r1
 800c060:	f7f4 fa3a 	bl	80004d8 <__aeabi_dmul>
 800c064:	a36a      	add	r3, pc, #424	; (adr r3, 800c210 <atan+0x290>)
 800c066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06a:	f7f4 f87f 	bl	800016c <__adddf3>
 800c06e:	4632      	mov	r2, r6
 800c070:	463b      	mov	r3, r7
 800c072:	f7f4 fa31 	bl	80004d8 <__aeabi_dmul>
 800c076:	a368      	add	r3, pc, #416	; (adr r3, 800c218 <atan+0x298>)
 800c078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07c:	f7f4 f876 	bl	800016c <__adddf3>
 800c080:	4632      	mov	r2, r6
 800c082:	463b      	mov	r3, r7
 800c084:	f7f4 fa28 	bl	80004d8 <__aeabi_dmul>
 800c088:	a365      	add	r3, pc, #404	; (adr r3, 800c220 <atan+0x2a0>)
 800c08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08e:	f7f4 f86d 	bl	800016c <__adddf3>
 800c092:	4632      	mov	r2, r6
 800c094:	463b      	mov	r3, r7
 800c096:	f7f4 fa1f 	bl	80004d8 <__aeabi_dmul>
 800c09a:	a363      	add	r3, pc, #396	; (adr r3, 800c228 <atan+0x2a8>)
 800c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a0:	f7f4 f864 	bl	800016c <__adddf3>
 800c0a4:	4632      	mov	r2, r6
 800c0a6:	463b      	mov	r3, r7
 800c0a8:	f7f4 fa16 	bl	80004d8 <__aeabi_dmul>
 800c0ac:	a360      	add	r3, pc, #384	; (adr r3, 800c230 <atan+0x2b0>)
 800c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b2:	f7f4 f85b 	bl	800016c <__adddf3>
 800c0b6:	4642      	mov	r2, r8
 800c0b8:	464b      	mov	r3, r9
 800c0ba:	f7f4 fa0d 	bl	80004d8 <__aeabi_dmul>
 800c0be:	a35e      	add	r3, pc, #376	; (adr r3, 800c238 <atan+0x2b8>)
 800c0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c4:	4680      	mov	r8, r0
 800c0c6:	4689      	mov	r9, r1
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	4639      	mov	r1, r7
 800c0cc:	f7f4 fa04 	bl	80004d8 <__aeabi_dmul>
 800c0d0:	a35b      	add	r3, pc, #364	; (adr r3, 800c240 <atan+0x2c0>)
 800c0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d6:	f7f4 f847 	bl	8000168 <__aeabi_dsub>
 800c0da:	4632      	mov	r2, r6
 800c0dc:	463b      	mov	r3, r7
 800c0de:	f7f4 f9fb 	bl	80004d8 <__aeabi_dmul>
 800c0e2:	a359      	add	r3, pc, #356	; (adr r3, 800c248 <atan+0x2c8>)
 800c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e8:	f7f4 f83e 	bl	8000168 <__aeabi_dsub>
 800c0ec:	4632      	mov	r2, r6
 800c0ee:	463b      	mov	r3, r7
 800c0f0:	f7f4 f9f2 	bl	80004d8 <__aeabi_dmul>
 800c0f4:	a356      	add	r3, pc, #344	; (adr r3, 800c250 <atan+0x2d0>)
 800c0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fa:	f7f4 f835 	bl	8000168 <__aeabi_dsub>
 800c0fe:	4632      	mov	r2, r6
 800c100:	463b      	mov	r3, r7
 800c102:	f7f4 f9e9 	bl	80004d8 <__aeabi_dmul>
 800c106:	a354      	add	r3, pc, #336	; (adr r3, 800c258 <atan+0x2d8>)
 800c108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10c:	f7f4 f82c 	bl	8000168 <__aeabi_dsub>
 800c110:	4632      	mov	r2, r6
 800c112:	463b      	mov	r3, r7
 800c114:	f7f4 f9e0 	bl	80004d8 <__aeabi_dmul>
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	4640      	mov	r0, r8
 800c11e:	4649      	mov	r1, r9
 800c120:	f7f4 f824 	bl	800016c <__adddf3>
 800c124:	4622      	mov	r2, r4
 800c126:	462b      	mov	r3, r5
 800c128:	f7f4 f9d6 	bl	80004d8 <__aeabi_dmul>
 800c12c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c130:	4602      	mov	r2, r0
 800c132:	460b      	mov	r3, r1
 800c134:	d144      	bne.n	800c1c0 <atan+0x240>
 800c136:	4620      	mov	r0, r4
 800c138:	4629      	mov	r1, r5
 800c13a:	f7f4 f815 	bl	8000168 <__aeabi_dsub>
 800c13e:	e734      	b.n	800bfaa <atan+0x2a>
 800c140:	2200      	movs	r2, #0
 800c142:	4b4c      	ldr	r3, [pc, #304]	; (800c274 <atan+0x2f4>)
 800c144:	f7f4 f810 	bl	8000168 <__aeabi_dsub>
 800c148:	2200      	movs	r2, #0
 800c14a:	4606      	mov	r6, r0
 800c14c:	460f      	mov	r7, r1
 800c14e:	4b49      	ldr	r3, [pc, #292]	; (800c274 <atan+0x2f4>)
 800c150:	4620      	mov	r0, r4
 800c152:	4629      	mov	r1, r5
 800c154:	f7f4 f80a 	bl	800016c <__adddf3>
 800c158:	4602      	mov	r2, r0
 800c15a:	460b      	mov	r3, r1
 800c15c:	4630      	mov	r0, r6
 800c15e:	4639      	mov	r1, r7
 800c160:	f7f4 fae4 	bl	800072c <__aeabi_ddiv>
 800c164:	f04f 0a01 	mov.w	sl, #1
 800c168:	4604      	mov	r4, r0
 800c16a:	460d      	mov	r5, r1
 800c16c:	e767      	b.n	800c03e <atan+0xbe>
 800c16e:	4b43      	ldr	r3, [pc, #268]	; (800c27c <atan+0x2fc>)
 800c170:	429e      	cmp	r6, r3
 800c172:	dc1a      	bgt.n	800c1aa <atan+0x22a>
 800c174:	2200      	movs	r2, #0
 800c176:	4b42      	ldr	r3, [pc, #264]	; (800c280 <atan+0x300>)
 800c178:	f7f3 fff6 	bl	8000168 <__aeabi_dsub>
 800c17c:	2200      	movs	r2, #0
 800c17e:	4606      	mov	r6, r0
 800c180:	460f      	mov	r7, r1
 800c182:	4b3f      	ldr	r3, [pc, #252]	; (800c280 <atan+0x300>)
 800c184:	4620      	mov	r0, r4
 800c186:	4629      	mov	r1, r5
 800c188:	f7f4 f9a6 	bl	80004d8 <__aeabi_dmul>
 800c18c:	2200      	movs	r2, #0
 800c18e:	4b39      	ldr	r3, [pc, #228]	; (800c274 <atan+0x2f4>)
 800c190:	f7f3 ffec 	bl	800016c <__adddf3>
 800c194:	4602      	mov	r2, r0
 800c196:	460b      	mov	r3, r1
 800c198:	4630      	mov	r0, r6
 800c19a:	4639      	mov	r1, r7
 800c19c:	f7f4 fac6 	bl	800072c <__aeabi_ddiv>
 800c1a0:	f04f 0a02 	mov.w	sl, #2
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	460d      	mov	r5, r1
 800c1a8:	e749      	b.n	800c03e <atan+0xbe>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	4934      	ldr	r1, [pc, #208]	; (800c284 <atan+0x304>)
 800c1b2:	f7f4 fabb 	bl	800072c <__aeabi_ddiv>
 800c1b6:	f04f 0a03 	mov.w	sl, #3
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	460d      	mov	r5, r1
 800c1be:	e73e      	b.n	800c03e <atan+0xbe>
 800c1c0:	4b31      	ldr	r3, [pc, #196]	; (800c288 <atan+0x308>)
 800c1c2:	4e32      	ldr	r6, [pc, #200]	; (800c28c <atan+0x30c>)
 800c1c4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c1c8:	4456      	add	r6, sl
 800c1ca:	449a      	add	sl, r3
 800c1cc:	e9da 2300 	ldrd	r2, r3, [sl]
 800c1d0:	f7f3 ffca 	bl	8000168 <__aeabi_dsub>
 800c1d4:	4622      	mov	r2, r4
 800c1d6:	462b      	mov	r3, r5
 800c1d8:	f7f3 ffc6 	bl	8000168 <__aeabi_dsub>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c1e4:	f7f3 ffc0 	bl	8000168 <__aeabi_dsub>
 800c1e8:	f1bb 0f00 	cmp.w	fp, #0
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	460d      	mov	r5, r1
 800c1f0:	f6bf aee4 	bge.w	800bfbc <atan+0x3c>
 800c1f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1f8:	461d      	mov	r5, r3
 800c1fa:	e6df      	b.n	800bfbc <atan+0x3c>
 800c1fc:	4d24      	ldr	r5, [pc, #144]	; (800c290 <atan+0x310>)
 800c1fe:	e6dd      	b.n	800bfbc <atan+0x3c>
 800c200:	8800759c 	.word	0x8800759c
 800c204:	7e37e43c 	.word	0x7e37e43c
 800c208:	e322da11 	.word	0xe322da11
 800c20c:	3f90ad3a 	.word	0x3f90ad3a
 800c210:	24760deb 	.word	0x24760deb
 800c214:	3fa97b4b 	.word	0x3fa97b4b
 800c218:	a0d03d51 	.word	0xa0d03d51
 800c21c:	3fb10d66 	.word	0x3fb10d66
 800c220:	c54c206e 	.word	0xc54c206e
 800c224:	3fb745cd 	.word	0x3fb745cd
 800c228:	920083ff 	.word	0x920083ff
 800c22c:	3fc24924 	.word	0x3fc24924
 800c230:	5555550d 	.word	0x5555550d
 800c234:	3fd55555 	.word	0x3fd55555
 800c238:	2c6a6c2f 	.word	0x2c6a6c2f
 800c23c:	bfa2b444 	.word	0xbfa2b444
 800c240:	52defd9a 	.word	0x52defd9a
 800c244:	3fadde2d 	.word	0x3fadde2d
 800c248:	af749a6d 	.word	0xaf749a6d
 800c24c:	3fb3b0f2 	.word	0x3fb3b0f2
 800c250:	fe231671 	.word	0xfe231671
 800c254:	3fbc71c6 	.word	0x3fbc71c6
 800c258:	9998ebc4 	.word	0x9998ebc4
 800c25c:	3fc99999 	.word	0x3fc99999
 800c260:	440fffff 	.word	0x440fffff
 800c264:	7ff00000 	.word	0x7ff00000
 800c268:	54442d18 	.word	0x54442d18
 800c26c:	3ff921fb 	.word	0x3ff921fb
 800c270:	3fdbffff 	.word	0x3fdbffff
 800c274:	3ff00000 	.word	0x3ff00000
 800c278:	3ff2ffff 	.word	0x3ff2ffff
 800c27c:	40037fff 	.word	0x40037fff
 800c280:	3ff80000 	.word	0x3ff80000
 800c284:	bff00000 	.word	0xbff00000
 800c288:	0800ce90 	.word	0x0800ce90
 800c28c:	0800ce70 	.word	0x0800ce70
 800c290:	bff921fb 	.word	0xbff921fb

0800c294 <fabs>:
 800c294:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c298:	4619      	mov	r1, r3
 800c29a:	4770      	bx	lr
 800c29c:	0000      	movs	r0, r0
	...

0800c2a0 <floor>:
 800c2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2a4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c2a8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c2ac:	2e13      	cmp	r6, #19
 800c2ae:	4607      	mov	r7, r0
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	460c      	mov	r4, r1
 800c2b4:	4605      	mov	r5, r0
 800c2b6:	dc35      	bgt.n	800c324 <floor+0x84>
 800c2b8:	2e00      	cmp	r6, #0
 800c2ba:	da16      	bge.n	800c2ea <floor+0x4a>
 800c2bc:	a336      	add	r3, pc, #216	; (adr r3, 800c398 <floor+0xf8>)
 800c2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c2:	f7f3 ff53 	bl	800016c <__adddf3>
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	f7f4 fb95 	bl	80009f8 <__aeabi_dcmpgt>
 800c2ce:	b148      	cbz	r0, 800c2e4 <floor+0x44>
 800c2d0:	2c00      	cmp	r4, #0
 800c2d2:	da5b      	bge.n	800c38c <floor+0xec>
 800c2d4:	2500      	movs	r5, #0
 800c2d6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c2da:	4a31      	ldr	r2, [pc, #196]	; (800c3a0 <floor+0x100>)
 800c2dc:	433b      	orrs	r3, r7
 800c2de:	42ab      	cmp	r3, r5
 800c2e0:	bf18      	it	ne
 800c2e2:	4614      	movne	r4, r2
 800c2e4:	4623      	mov	r3, r4
 800c2e6:	462f      	mov	r7, r5
 800c2e8:	e026      	b.n	800c338 <floor+0x98>
 800c2ea:	4a2e      	ldr	r2, [pc, #184]	; (800c3a4 <floor+0x104>)
 800c2ec:	fa42 f806 	asr.w	r8, r2, r6
 800c2f0:	ea01 0208 	and.w	r2, r1, r8
 800c2f4:	4302      	orrs	r2, r0
 800c2f6:	d01f      	beq.n	800c338 <floor+0x98>
 800c2f8:	a327      	add	r3, pc, #156	; (adr r3, 800c398 <floor+0xf8>)
 800c2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fe:	f7f3 ff35 	bl	800016c <__adddf3>
 800c302:	2200      	movs	r2, #0
 800c304:	2300      	movs	r3, #0
 800c306:	f7f4 fb77 	bl	80009f8 <__aeabi_dcmpgt>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d0ea      	beq.n	800c2e4 <floor+0x44>
 800c30e:	2c00      	cmp	r4, #0
 800c310:	bfbe      	ittt	lt
 800c312:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c316:	fa43 f606 	asrlt.w	r6, r3, r6
 800c31a:	19a4      	addlt	r4, r4, r6
 800c31c:	ea24 0408 	bic.w	r4, r4, r8
 800c320:	2500      	movs	r5, #0
 800c322:	e7df      	b.n	800c2e4 <floor+0x44>
 800c324:	2e33      	cmp	r6, #51	; 0x33
 800c326:	dd0b      	ble.n	800c340 <floor+0xa0>
 800c328:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c32c:	d104      	bne.n	800c338 <floor+0x98>
 800c32e:	4602      	mov	r2, r0
 800c330:	f7f3 ff1c 	bl	800016c <__adddf3>
 800c334:	4607      	mov	r7, r0
 800c336:	460b      	mov	r3, r1
 800c338:	4638      	mov	r0, r7
 800c33a:	4619      	mov	r1, r3
 800c33c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c340:	f04f 32ff 	mov.w	r2, #4294967295
 800c344:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c348:	fa22 f808 	lsr.w	r8, r2, r8
 800c34c:	ea18 0f00 	tst.w	r8, r0
 800c350:	d0f2      	beq.n	800c338 <floor+0x98>
 800c352:	a311      	add	r3, pc, #68	; (adr r3, 800c398 <floor+0xf8>)
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	f7f3 ff08 	bl	800016c <__adddf3>
 800c35c:	2200      	movs	r2, #0
 800c35e:	2300      	movs	r3, #0
 800c360:	f7f4 fb4a 	bl	80009f8 <__aeabi_dcmpgt>
 800c364:	2800      	cmp	r0, #0
 800c366:	d0bd      	beq.n	800c2e4 <floor+0x44>
 800c368:	2c00      	cmp	r4, #0
 800c36a:	da02      	bge.n	800c372 <floor+0xd2>
 800c36c:	2e14      	cmp	r6, #20
 800c36e:	d103      	bne.n	800c378 <floor+0xd8>
 800c370:	3401      	adds	r4, #1
 800c372:	ea25 0508 	bic.w	r5, r5, r8
 800c376:	e7b5      	b.n	800c2e4 <floor+0x44>
 800c378:	2301      	movs	r3, #1
 800c37a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c37e:	fa03 f606 	lsl.w	r6, r3, r6
 800c382:	4435      	add	r5, r6
 800c384:	42bd      	cmp	r5, r7
 800c386:	bf38      	it	cc
 800c388:	18e4      	addcc	r4, r4, r3
 800c38a:	e7f2      	b.n	800c372 <floor+0xd2>
 800c38c:	2500      	movs	r5, #0
 800c38e:	462c      	mov	r4, r5
 800c390:	e7a8      	b.n	800c2e4 <floor+0x44>
 800c392:	bf00      	nop
 800c394:	f3af 8000 	nop.w
 800c398:	8800759c 	.word	0x8800759c
 800c39c:	7e37e43c 	.word	0x7e37e43c
 800c3a0:	bff00000 	.word	0xbff00000
 800c3a4:	000fffff 	.word	0x000fffff

0800c3a8 <matherr>:
 800c3a8:	2000      	movs	r0, #0
 800c3aa:	4770      	bx	lr
 800c3ac:	0000      	movs	r0, r0
	...

0800c3b0 <scalbn>:
 800c3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3b2:	4616      	mov	r6, r2
 800c3b4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	460d      	mov	r5, r1
 800c3bc:	460b      	mov	r3, r1
 800c3be:	b982      	cbnz	r2, 800c3e2 <scalbn+0x32>
 800c3c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c3c4:	4303      	orrs	r3, r0
 800c3c6:	d034      	beq.n	800c432 <scalbn+0x82>
 800c3c8:	4b2d      	ldr	r3, [pc, #180]	; (800c480 <scalbn+0xd0>)
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f7f4 f884 	bl	80004d8 <__aeabi_dmul>
 800c3d0:	4b2c      	ldr	r3, [pc, #176]	; (800c484 <scalbn+0xd4>)
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	429e      	cmp	r6, r3
 800c3d6:	460d      	mov	r5, r1
 800c3d8:	da0d      	bge.n	800c3f6 <scalbn+0x46>
 800c3da:	a325      	add	r3, pc, #148	; (adr r3, 800c470 <scalbn+0xc0>)
 800c3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e0:	e01c      	b.n	800c41c <scalbn+0x6c>
 800c3e2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800c3e6:	42ba      	cmp	r2, r7
 800c3e8:	d109      	bne.n	800c3fe <scalbn+0x4e>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	f7f3 febe 	bl	800016c <__adddf3>
 800c3f0:	4604      	mov	r4, r0
 800c3f2:	460d      	mov	r5, r1
 800c3f4:	e01d      	b.n	800c432 <scalbn+0x82>
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c3fc:	3a36      	subs	r2, #54	; 0x36
 800c3fe:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c402:	4432      	add	r2, r6
 800c404:	428a      	cmp	r2, r1
 800c406:	dd0c      	ble.n	800c422 <scalbn+0x72>
 800c408:	4622      	mov	r2, r4
 800c40a:	462b      	mov	r3, r5
 800c40c:	a11a      	add	r1, pc, #104	; (adr r1, 800c478 <scalbn+0xc8>)
 800c40e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c412:	f000 f94a 	bl	800c6aa <copysign>
 800c416:	a318      	add	r3, pc, #96	; (adr r3, 800c478 <scalbn+0xc8>)
 800c418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41c:	f7f4 f85c 	bl	80004d8 <__aeabi_dmul>
 800c420:	e7e6      	b.n	800c3f0 <scalbn+0x40>
 800c422:	2a00      	cmp	r2, #0
 800c424:	dd08      	ble.n	800c438 <scalbn+0x88>
 800c426:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c42a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c42e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c432:	4620      	mov	r0, r4
 800c434:	4629      	mov	r1, r5
 800c436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c438:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c43c:	da0b      	bge.n	800c456 <scalbn+0xa6>
 800c43e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c442:	429e      	cmp	r6, r3
 800c444:	4622      	mov	r2, r4
 800c446:	462b      	mov	r3, r5
 800c448:	dce0      	bgt.n	800c40c <scalbn+0x5c>
 800c44a:	a109      	add	r1, pc, #36	; (adr r1, 800c470 <scalbn+0xc0>)
 800c44c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c450:	f000 f92b 	bl	800c6aa <copysign>
 800c454:	e7c1      	b.n	800c3da <scalbn+0x2a>
 800c456:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c45a:	3236      	adds	r2, #54	; 0x36
 800c45c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c460:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c464:	4620      	mov	r0, r4
 800c466:	4629      	mov	r1, r5
 800c468:	2200      	movs	r2, #0
 800c46a:	4b07      	ldr	r3, [pc, #28]	; (800c488 <scalbn+0xd8>)
 800c46c:	e7d6      	b.n	800c41c <scalbn+0x6c>
 800c46e:	bf00      	nop
 800c470:	c2f8f359 	.word	0xc2f8f359
 800c474:	01a56e1f 	.word	0x01a56e1f
 800c478:	8800759c 	.word	0x8800759c
 800c47c:	7e37e43c 	.word	0x7e37e43c
 800c480:	43500000 	.word	0x43500000
 800c484:	ffff3cb0 	.word	0xffff3cb0
 800c488:	3c900000 	.word	0x3c900000

0800c48c <atanf>:
 800c48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c490:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c494:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800c498:	4604      	mov	r4, r0
 800c49a:	4607      	mov	r7, r0
 800c49c:	db0e      	blt.n	800c4bc <atanf+0x30>
 800c49e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c4a2:	dd04      	ble.n	800c4ae <atanf+0x22>
 800c4a4:	4601      	mov	r1, r0
 800c4a6:	f7f4 fb65 	bl	8000b74 <__addsf3>
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	e003      	b.n	800c4b6 <atanf+0x2a>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	f340 80cd 	ble.w	800c64e <atanf+0x1c2>
 800c4b4:	4c67      	ldr	r4, [pc, #412]	; (800c654 <atanf+0x1c8>)
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4bc:	4b66      	ldr	r3, [pc, #408]	; (800c658 <atanf+0x1cc>)
 800c4be:	429d      	cmp	r5, r3
 800c4c0:	dc0e      	bgt.n	800c4e0 <atanf+0x54>
 800c4c2:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c4c6:	da08      	bge.n	800c4da <atanf+0x4e>
 800c4c8:	4964      	ldr	r1, [pc, #400]	; (800c65c <atanf+0x1d0>)
 800c4ca:	f7f4 fb53 	bl	8000b74 <__addsf3>
 800c4ce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c4d2:	f7f4 fe13 	bl	80010fc <__aeabi_fcmpgt>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	d1ed      	bne.n	800c4b6 <atanf+0x2a>
 800c4da:	f04f 36ff 	mov.w	r6, #4294967295
 800c4de:	e01c      	b.n	800c51a <atanf+0x8e>
 800c4e0:	f000 f8e0 	bl	800c6a4 <fabsf>
 800c4e4:	4b5e      	ldr	r3, [pc, #376]	; (800c660 <atanf+0x1d4>)
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	429d      	cmp	r5, r3
 800c4ea:	dc7c      	bgt.n	800c5e6 <atanf+0x15a>
 800c4ec:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c4f0:	429d      	cmp	r5, r3
 800c4f2:	dc67      	bgt.n	800c5c4 <atanf+0x138>
 800c4f4:	4601      	mov	r1, r0
 800c4f6:	f7f4 fb3d 	bl	8000b74 <__addsf3>
 800c4fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c4fe:	f7f4 fb37 	bl	8000b70 <__aeabi_fsub>
 800c502:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c506:	4605      	mov	r5, r0
 800c508:	4620      	mov	r0, r4
 800c50a:	f7f4 fb33 	bl	8000b74 <__addsf3>
 800c50e:	4601      	mov	r1, r0
 800c510:	4628      	mov	r0, r5
 800c512:	f7f4 fceb 	bl	8000eec <__aeabi_fdiv>
 800c516:	2600      	movs	r6, #0
 800c518:	4604      	mov	r4, r0
 800c51a:	4621      	mov	r1, r4
 800c51c:	4620      	mov	r0, r4
 800c51e:	f7f4 fc31 	bl	8000d84 <__aeabi_fmul>
 800c522:	4601      	mov	r1, r0
 800c524:	4680      	mov	r8, r0
 800c526:	f7f4 fc2d 	bl	8000d84 <__aeabi_fmul>
 800c52a:	4605      	mov	r5, r0
 800c52c:	494d      	ldr	r1, [pc, #308]	; (800c664 <atanf+0x1d8>)
 800c52e:	f7f4 fc29 	bl	8000d84 <__aeabi_fmul>
 800c532:	494d      	ldr	r1, [pc, #308]	; (800c668 <atanf+0x1dc>)
 800c534:	f7f4 fb1e 	bl	8000b74 <__addsf3>
 800c538:	4629      	mov	r1, r5
 800c53a:	f7f4 fc23 	bl	8000d84 <__aeabi_fmul>
 800c53e:	494b      	ldr	r1, [pc, #300]	; (800c66c <atanf+0x1e0>)
 800c540:	f7f4 fb18 	bl	8000b74 <__addsf3>
 800c544:	4629      	mov	r1, r5
 800c546:	f7f4 fc1d 	bl	8000d84 <__aeabi_fmul>
 800c54a:	4949      	ldr	r1, [pc, #292]	; (800c670 <atanf+0x1e4>)
 800c54c:	f7f4 fb12 	bl	8000b74 <__addsf3>
 800c550:	4629      	mov	r1, r5
 800c552:	f7f4 fc17 	bl	8000d84 <__aeabi_fmul>
 800c556:	4947      	ldr	r1, [pc, #284]	; (800c674 <atanf+0x1e8>)
 800c558:	f7f4 fb0c 	bl	8000b74 <__addsf3>
 800c55c:	4629      	mov	r1, r5
 800c55e:	f7f4 fc11 	bl	8000d84 <__aeabi_fmul>
 800c562:	4945      	ldr	r1, [pc, #276]	; (800c678 <atanf+0x1ec>)
 800c564:	f7f4 fb06 	bl	8000b74 <__addsf3>
 800c568:	4641      	mov	r1, r8
 800c56a:	f7f4 fc0b 	bl	8000d84 <__aeabi_fmul>
 800c56e:	4943      	ldr	r1, [pc, #268]	; (800c67c <atanf+0x1f0>)
 800c570:	4680      	mov	r8, r0
 800c572:	4628      	mov	r0, r5
 800c574:	f7f4 fc06 	bl	8000d84 <__aeabi_fmul>
 800c578:	4941      	ldr	r1, [pc, #260]	; (800c680 <atanf+0x1f4>)
 800c57a:	f7f4 faf9 	bl	8000b70 <__aeabi_fsub>
 800c57e:	4629      	mov	r1, r5
 800c580:	f7f4 fc00 	bl	8000d84 <__aeabi_fmul>
 800c584:	493f      	ldr	r1, [pc, #252]	; (800c684 <atanf+0x1f8>)
 800c586:	f7f4 faf3 	bl	8000b70 <__aeabi_fsub>
 800c58a:	4629      	mov	r1, r5
 800c58c:	f7f4 fbfa 	bl	8000d84 <__aeabi_fmul>
 800c590:	493d      	ldr	r1, [pc, #244]	; (800c688 <atanf+0x1fc>)
 800c592:	f7f4 faed 	bl	8000b70 <__aeabi_fsub>
 800c596:	4629      	mov	r1, r5
 800c598:	f7f4 fbf4 	bl	8000d84 <__aeabi_fmul>
 800c59c:	493b      	ldr	r1, [pc, #236]	; (800c68c <atanf+0x200>)
 800c59e:	f7f4 fae7 	bl	8000b70 <__aeabi_fsub>
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	f7f4 fbee 	bl	8000d84 <__aeabi_fmul>
 800c5a8:	4601      	mov	r1, r0
 800c5aa:	4640      	mov	r0, r8
 800c5ac:	f7f4 fae2 	bl	8000b74 <__addsf3>
 800c5b0:	4621      	mov	r1, r4
 800c5b2:	f7f4 fbe7 	bl	8000d84 <__aeabi_fmul>
 800c5b6:	1c73      	adds	r3, r6, #1
 800c5b8:	4601      	mov	r1, r0
 800c5ba:	d133      	bne.n	800c624 <atanf+0x198>
 800c5bc:	4620      	mov	r0, r4
 800c5be:	f7f4 fad7 	bl	8000b70 <__aeabi_fsub>
 800c5c2:	e772      	b.n	800c4aa <atanf+0x1e>
 800c5c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c5c8:	f7f4 fad2 	bl	8000b70 <__aeabi_fsub>
 800c5cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c5d0:	4605      	mov	r5, r0
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	f7f4 face 	bl	8000b74 <__addsf3>
 800c5d8:	4601      	mov	r1, r0
 800c5da:	4628      	mov	r0, r5
 800c5dc:	f7f4 fc86 	bl	8000eec <__aeabi_fdiv>
 800c5e0:	2601      	movs	r6, #1
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	e799      	b.n	800c51a <atanf+0x8e>
 800c5e6:	4b2a      	ldr	r3, [pc, #168]	; (800c690 <atanf+0x204>)
 800c5e8:	429d      	cmp	r5, r3
 800c5ea:	dc14      	bgt.n	800c616 <atanf+0x18a>
 800c5ec:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c5f0:	f7f4 fabe 	bl	8000b70 <__aeabi_fsub>
 800c5f4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c5f8:	4605      	mov	r5, r0
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f7f4 fbc2 	bl	8000d84 <__aeabi_fmul>
 800c600:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c604:	f7f4 fab6 	bl	8000b74 <__addsf3>
 800c608:	4601      	mov	r1, r0
 800c60a:	4628      	mov	r0, r5
 800c60c:	f7f4 fc6e 	bl	8000eec <__aeabi_fdiv>
 800c610:	2602      	movs	r6, #2
 800c612:	4604      	mov	r4, r0
 800c614:	e781      	b.n	800c51a <atanf+0x8e>
 800c616:	4601      	mov	r1, r0
 800c618:	481e      	ldr	r0, [pc, #120]	; (800c694 <atanf+0x208>)
 800c61a:	f7f4 fc67 	bl	8000eec <__aeabi_fdiv>
 800c61e:	2603      	movs	r6, #3
 800c620:	4604      	mov	r4, r0
 800c622:	e77a      	b.n	800c51a <atanf+0x8e>
 800c624:	4b1c      	ldr	r3, [pc, #112]	; (800c698 <atanf+0x20c>)
 800c626:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c62a:	f7f4 faa1 	bl	8000b70 <__aeabi_fsub>
 800c62e:	4621      	mov	r1, r4
 800c630:	f7f4 fa9e 	bl	8000b70 <__aeabi_fsub>
 800c634:	4b19      	ldr	r3, [pc, #100]	; (800c69c <atanf+0x210>)
 800c636:	4601      	mov	r1, r0
 800c638:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c63c:	f7f4 fa98 	bl	8000b70 <__aeabi_fsub>
 800c640:	2f00      	cmp	r7, #0
 800c642:	4604      	mov	r4, r0
 800c644:	f6bf af37 	bge.w	800c4b6 <atanf+0x2a>
 800c648:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800c64c:	e733      	b.n	800c4b6 <atanf+0x2a>
 800c64e:	4c14      	ldr	r4, [pc, #80]	; (800c6a0 <atanf+0x214>)
 800c650:	e731      	b.n	800c4b6 <atanf+0x2a>
 800c652:	bf00      	nop
 800c654:	3fc90fdb 	.word	0x3fc90fdb
 800c658:	3edfffff 	.word	0x3edfffff
 800c65c:	7149f2ca 	.word	0x7149f2ca
 800c660:	3f97ffff 	.word	0x3f97ffff
 800c664:	3c8569d7 	.word	0x3c8569d7
 800c668:	3d4bda59 	.word	0x3d4bda59
 800c66c:	3d886b35 	.word	0x3d886b35
 800c670:	3dba2e6e 	.word	0x3dba2e6e
 800c674:	3e124925 	.word	0x3e124925
 800c678:	3eaaaaab 	.word	0x3eaaaaab
 800c67c:	bd15a221 	.word	0xbd15a221
 800c680:	3d6ef16b 	.word	0x3d6ef16b
 800c684:	3d9d8795 	.word	0x3d9d8795
 800c688:	3de38e38 	.word	0x3de38e38
 800c68c:	3e4ccccd 	.word	0x3e4ccccd
 800c690:	401bffff 	.word	0x401bffff
 800c694:	bf800000 	.word	0xbf800000
 800c698:	0800cec0 	.word	0x0800cec0
 800c69c:	0800ceb0 	.word	0x0800ceb0
 800c6a0:	bfc90fdb 	.word	0xbfc90fdb

0800c6a4 <fabsf>:
 800c6a4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c6a8:	4770      	bx	lr

0800c6aa <copysign>:
 800c6aa:	b530      	push	{r4, r5, lr}
 800c6ac:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c6b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6b4:	ea42 0503 	orr.w	r5, r2, r3
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	bd30      	pop	{r4, r5, pc}

0800c6bc <_init>:
 800c6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6be:	bf00      	nop
 800c6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6c2:	bc08      	pop	{r3}
 800c6c4:	469e      	mov	lr, r3
 800c6c6:	4770      	bx	lr

0800c6c8 <_fini>:
 800c6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ca:	bf00      	nop
 800c6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ce:	bc08      	pop	{r3}
 800c6d0:	469e      	mov	lr, r3
 800c6d2:	4770      	bx	lr
