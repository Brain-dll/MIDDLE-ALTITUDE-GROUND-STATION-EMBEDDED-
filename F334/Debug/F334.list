
F334.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d110  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  0800d2a0  0800d2a0  0001d2a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dab0  0800dab0  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800dab0  0800dab0  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dab0  0800dab0  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dab0  0800dab0  0001dab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dab4  0800dab4  0001dab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800dab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000200  0800dcb8  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  0800dcb8  000206e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018167  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a9f  00000000  00000000  00038397  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001138  00000000  00000000  0003ae38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  0003bf70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021878  00000000  00000000  0003cf90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000109a2  00000000  00000000  0005e808  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5a12  00000000  00000000  0006f1aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134bbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058c4  00000000  00000000  00134c38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d288 	.word	0x0800d288

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800d288 	.word	0x0800d288

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <magneto_Init>:
uint8_t countm = 0;

int16_t Xmax, Xmin, Ymax, Ymin;
float Xsf, Ysf, Xoff, Yoff;

void magneto_Init(uint8_t confg_c) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af04      	add	r7, sp, #16
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]

//	HAL_I2C_Mem_Write(&hi2c1, MGN_WRITE_ADD, setr[0], 1, &setr[1], 1, 100);
//	HAL_I2C_Mem_Write(&hi2c1, MGN_WRITE_ADD, cntr[0], 1, &cntr[1], 1, 100);


	HAL_I2C_Mem_Write(&hi2c1, MGN_WRITE_ADD, 0x00, 1, &command[0], 1, 100);
 8000c92:	2364      	movs	r3, #100	; 0x64
 8000c94:	9302      	str	r3, [sp, #8]
 8000c96:	2301      	movs	r3, #1
 8000c98:	9301      	str	r3, [sp, #4]
 8000c9a:	4b9b      	ldr	r3, [pc, #620]	; (8000f08 <magneto_Init+0x280>)
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	213c      	movs	r1, #60	; 0x3c
 8000ca4:	4899      	ldr	r0, [pc, #612]	; (8000f0c <magneto_Init+0x284>)
 8000ca6:	f003 fb0d 	bl	80042c4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MGN_WRITE_ADD, 0x01, 1, &command[1], 1, 100);
 8000caa:	2364      	movs	r3, #100	; 0x64
 8000cac:	9302      	str	r3, [sp, #8]
 8000cae:	2301      	movs	r3, #1
 8000cb0:	9301      	str	r3, [sp, #4]
 8000cb2:	4b97      	ldr	r3, [pc, #604]	; (8000f10 <magneto_Init+0x288>)
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	2201      	movs	r2, #1
 8000cba:	213c      	movs	r1, #60	; 0x3c
 8000cbc:	4893      	ldr	r0, [pc, #588]	; (8000f0c <magneto_Init+0x284>)
 8000cbe:	f003 fb01 	bl	80042c4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MGN_WRITE_ADD, 0x02, 1, &command[2], 1, 100);
 8000cc2:	2364      	movs	r3, #100	; 0x64
 8000cc4:	9302      	str	r3, [sp, #8]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	4b92      	ldr	r3, [pc, #584]	; (8000f14 <magneto_Init+0x28c>)
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	2301      	movs	r3, #1
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	213c      	movs	r1, #60	; 0x3c
 8000cd4:	488d      	ldr	r0, [pc, #564]	; (8000f0c <magneto_Init+0x284>)
 8000cd6:	f003 faf5 	bl	80042c4 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8000cda:	2064      	movs	r0, #100	; 0x64
 8000cdc:	f002 fe20 	bl	8003920 <HAL_Delay>
	uint32_t full = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
	NXT_SEND_STR("page page0");
 8000ce4:	488c      	ldr	r0, [pc, #560]	; (8000f18 <magneto_Init+0x290>)
 8000ce6:	f002 fa03 	bl	80030f0 <NXT_SEND_STR>
	for (uint8_t i = 0; i < confg_c; i++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	73fb      	strb	r3, [r7, #15]
 8000cee:	e063      	b.n	8000db8 <magneto_Init+0x130>
		Read_mgn();
 8000cf0:	f000 f932 	bl	8000f58 <Read_mgn>
		HAL_Delay(70);
 8000cf4:	2046      	movs	r0, #70	; 0x46
 8000cf6:	f002 fe13 	bl	8003920 <HAL_Delay>
		if (enter == 0) {
 8000cfa:	4b88      	ldr	r3, [pc, #544]	; (8000f1c <magneto_Init+0x294>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10a      	bne.n	8000d18 <magneto_Init+0x90>
			Ymin = Ym;
 8000d02:	4b87      	ldr	r3, [pc, #540]	; (8000f20 <magneto_Init+0x298>)
 8000d04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d08:	4b86      	ldr	r3, [pc, #536]	; (8000f24 <magneto_Init+0x29c>)
 8000d0a:	801a      	strh	r2, [r3, #0]
			enter++;
 8000d0c:	4b83      	ldr	r3, [pc, #524]	; (8000f1c <magneto_Init+0x294>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	4b81      	ldr	r3, [pc, #516]	; (8000f1c <magneto_Init+0x294>)
 8000d16:	701a      	strb	r2, [r3, #0]
		}
		if (Xm < Xmin)
 8000d18:	4b83      	ldr	r3, [pc, #524]	; (8000f28 <magneto_Init+0x2a0>)
 8000d1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d1e:	4b83      	ldr	r3, [pc, #524]	; (8000f2c <magneto_Init+0x2a4>)
 8000d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	da04      	bge.n	8000d32 <magneto_Init+0xaa>
			Xmin = Xm;
 8000d28:	4b7f      	ldr	r3, [pc, #508]	; (8000f28 <magneto_Init+0x2a0>)
 8000d2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d2e:	4b7f      	ldr	r3, [pc, #508]	; (8000f2c <magneto_Init+0x2a4>)
 8000d30:	801a      	strh	r2, [r3, #0]
		if (Xm > Xmax)
 8000d32:	4b7d      	ldr	r3, [pc, #500]	; (8000f28 <magneto_Init+0x2a0>)
 8000d34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d38:	4b7d      	ldr	r3, [pc, #500]	; (8000f30 <magneto_Init+0x2a8>)
 8000d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	dd04      	ble.n	8000d4c <magneto_Init+0xc4>
			Xmax = Xm;
 8000d42:	4b79      	ldr	r3, [pc, #484]	; (8000f28 <magneto_Init+0x2a0>)
 8000d44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d48:	4b79      	ldr	r3, [pc, #484]	; (8000f30 <magneto_Init+0x2a8>)
 8000d4a:	801a      	strh	r2, [r3, #0]
		if (Ym < Ymin)
 8000d4c:	4b74      	ldr	r3, [pc, #464]	; (8000f20 <magneto_Init+0x298>)
 8000d4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d52:	4b74      	ldr	r3, [pc, #464]	; (8000f24 <magneto_Init+0x29c>)
 8000d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	da04      	bge.n	8000d66 <magneto_Init+0xde>
			Ymin = Ym;
 8000d5c:	4b70      	ldr	r3, [pc, #448]	; (8000f20 <magneto_Init+0x298>)
 8000d5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d62:	4b70      	ldr	r3, [pc, #448]	; (8000f24 <magneto_Init+0x29c>)
 8000d64:	801a      	strh	r2, [r3, #0]
		if (Ym > Ymax)
 8000d66:	4b6e      	ldr	r3, [pc, #440]	; (8000f20 <magneto_Init+0x298>)
 8000d68:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d6c:	4b71      	ldr	r3, [pc, #452]	; (8000f34 <magneto_Init+0x2ac>)
 8000d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	dd04      	ble.n	8000d80 <magneto_Init+0xf8>
			Ymax = Ym;
 8000d76:	4b6a      	ldr	r3, [pc, #424]	; (8000f20 <magneto_Init+0x298>)
 8000d78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d7c:	4b6d      	ldr	r3, [pc, #436]	; (8000f34 <magneto_Init+0x2ac>)
 8000d7e:	801a      	strh	r2, [r3, #0]
		full = ((float)i / (float)confg_c) * 100;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	ee07 3a90 	vmov	s15, r3
 8000d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	ee07 3a90 	vmov	s15, r3
 8000d90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d98:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8000f38 <magneto_Init+0x2b0>
 8000d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000da4:	ee17 3a90 	vmov	r3, s15
 8000da8:	60bb      	str	r3, [r7, #8]
		NXT_SEND_VAL("j0.val", full);
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	4863      	ldr	r0, [pc, #396]	; (8000f3c <magneto_Init+0x2b4>)
 8000dae:	f002 f915 	bl	8002fdc <NXT_SEND_VAL>
	for (uint8_t i = 0; i < confg_c; i++) {
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	3301      	adds	r3, #1
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	7bfa      	ldrb	r2, [r7, #15]
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d397      	bcc.n	8000cf0 <magneto_Init+0x68>
	}
	NXT_SEND_STR("page page1");
 8000dc0:	485f      	ldr	r0, [pc, #380]	; (8000f40 <magneto_Init+0x2b8>)
 8000dc2:	f002 f995 	bl	80030f0 <NXT_SEND_STR>
	Xsf = (float) (Ymax - Ymin) / (float) (Xmax - Xmin);
 8000dc6:	4b5b      	ldr	r3, [pc, #364]	; (8000f34 <magneto_Init+0x2ac>)
 8000dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b55      	ldr	r3, [pc, #340]	; (8000f24 <magneto_Init+0x29c>)
 8000dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dde:	4b54      	ldr	r3, [pc, #336]	; (8000f30 <magneto_Init+0x2a8>)
 8000de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b51      	ldr	r3, [pc, #324]	; (8000f2c <magneto_Init+0x2a4>)
 8000de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	ee07 3a90 	vmov	s15, r3
 8000df2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dfa:	4b52      	ldr	r3, [pc, #328]	; (8000f44 <magneto_Init+0x2bc>)
 8000dfc:	edc3 7a00 	vstr	s15, [r3]
	Ysf = (float) (Xmax - Xmin) / (float) (Ymax - Ymin);
 8000e00:	4b4b      	ldr	r3, [pc, #300]	; (8000f30 <magneto_Init+0x2a8>)
 8000e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b48      	ldr	r3, [pc, #288]	; (8000f2c <magneto_Init+0x2a4>)
 8000e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e18:	4b46      	ldr	r3, [pc, #280]	; (8000f34 <magneto_Init+0x2ac>)
 8000e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <magneto_Init+0x29c>)
 8000e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	ee07 3a90 	vmov	s15, r3
 8000e2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e34:	4b44      	ldr	r3, [pc, #272]	; (8000f48 <magneto_Init+0x2c0>)
 8000e36:	edc3 7a00 	vstr	s15, [r3]
	if (Xsf < 1)
 8000e3a:	4b42      	ldr	r3, [pc, #264]	; (8000f44 <magneto_Init+0x2bc>)
 8000e3c:	edd3 7a00 	vldr	s15, [r3]
 8000e40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4c:	d504      	bpl.n	8000e58 <magneto_Init+0x1d0>
		Xsf = 1.0;
 8000e4e:	4b3d      	ldr	r3, [pc, #244]	; (8000f44 <magneto_Init+0x2bc>)
 8000e50:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e00d      	b.n	8000e74 <magneto_Init+0x1ec>
	else if (Ysf < 1)
 8000e58:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <magneto_Init+0x2c0>)
 8000e5a:	edd3 7a00 	vldr	s15, [r3]
 8000e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6a:	d503      	bpl.n	8000e74 <magneto_Init+0x1ec>
		Ysf = 1.0;
 8000e6c:	4b36      	ldr	r3, [pc, #216]	; (8000f48 <magneto_Init+0x2c0>)
 8000e6e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e72:	601a      	str	r2, [r3, #0]

	Xoff = ((Xmax - Xmin) / 2 - Xmax) * Xsf;
 8000e74:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <magneto_Init+0x2a8>)
 8000e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b2b      	ldr	r3, [pc, #172]	; (8000f2c <magneto_Init+0x2a4>)
 8000e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	0fda      	lsrs	r2, r3, #31
 8000e86:	4413      	add	r3, r2
 8000e88:	105b      	asrs	r3, r3, #1
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <magneto_Init+0x2a8>)
 8000e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	ee07 3a90 	vmov	s15, r3
 8000e98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <magneto_Init+0x2bc>)
 8000e9e:	edd3 7a00 	vldr	s15, [r3]
 8000ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea6:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <magneto_Init+0x2c4>)
 8000ea8:	edc3 7a00 	vstr	s15, [r3]
	Yoff = ((Ymax - Ymin) / 2 - Ymax) * Ysf;
 8000eac:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <magneto_Init+0x2ac>)
 8000eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <magneto_Init+0x29c>)
 8000eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	0fda      	lsrs	r2, r3, #31
 8000ebe:	4413      	add	r3, r2
 8000ec0:	105b      	asrs	r3, r3, #1
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <magneto_Init+0x2ac>)
 8000ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <magneto_Init+0x2c0>)
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <magneto_Init+0x2c8>)
 8000ee0:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	481a      	ldr	r0, [pc, #104]	; (8000f54 <magneto_Init+0x2cc>)
 8000eea:	f003 f835 	bl	8003f58 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000eee:	2064      	movs	r0, #100	; 0x64
 8000ef0:	f002 fd16 	bl	8003920 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	4816      	ldr	r0, [pc, #88]	; (8000f54 <magneto_Init+0x2cc>)
 8000efa:	f003 f82d 	bl	8003f58 <HAL_GPIO_WritePin>
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	2000053c 	.word	0x2000053c
 8000f10:	20000001 	.word	0x20000001
 8000f14:	20000002 	.word	0x20000002
 8000f18:	0800d2a0 	.word	0x0800d2a0
 8000f1c:	2000022c 	.word	0x2000022c
 8000f20:	2000021e 	.word	0x2000021e
 8000f24:	20000484 	.word	0x20000484
 8000f28:	2000021c 	.word	0x2000021c
 8000f2c:	200004a8 	.word	0x200004a8
 8000f30:	20000486 	.word	0x20000486
 8000f34:	2000049c 	.word	0x2000049c
 8000f38:	42c80000 	.word	0x42c80000
 8000f3c:	0800d2ac 	.word	0x0800d2ac
 8000f40:	0800d2b4 	.word	0x0800d2b4
 8000f44:	2000047c 	.word	0x2000047c
 8000f48:	20000480 	.word	0x20000480
 8000f4c:	20000488 	.word	0x20000488
 8000f50:	20000494 	.word	0x20000494
 8000f54:	48000400 	.word	0x48000400

08000f58 <Read_mgn>:

void Read_mgn(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, MGN_READ_ADD, 0x03, 1, data, 6, 100);
 8000f5e:	2364      	movs	r3, #100	; 0x64
 8000f60:	9302      	str	r3, [sp, #8]
 8000f62:	2306      	movs	r3, #6
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <Read_mgn+0x78>)
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	213d      	movs	r1, #61	; 0x3d
 8000f70:	4818      	ldr	r0, [pc, #96]	; (8000fd4 <Read_mgn+0x7c>)
 8000f72:	f003 fabb 	bl	80044ec <HAL_I2C_Mem_Read>
	HAL_I2C_Master_Transmit(&hi2c1, MGN_WRITE_ADD, &command[3], 1, 100);
 8000f76:	2364      	movs	r3, #100	; 0x64
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <Read_mgn+0x80>)
 8000f7e:	213c      	movs	r1, #60	; 0x3c
 8000f80:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <Read_mgn+0x7c>)
 8000f82:	f003 f8ab 	bl	80040dc <HAL_I2C_Master_Transmit>
//		Xm = (int16_t)(data[1] << 8) | data[0];
//		Ym = (int16_t)(data[3] << 8) | data[2];
//		Zm = (int16_t)(data[5] << 8) | data[4];
//	}

	Xm = (int16_t)(data[0] << 8) | data[1];
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <Read_mgn+0x78>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <Read_mgn+0x78>)
 8000f90:	785b      	ldrb	r3, [r3, #1]
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <Read_mgn+0x84>)
 8000f9a:	801a      	strh	r2, [r3, #0]
	Ym = (int16_t)(data[4] << 8) | data[5];
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <Read_mgn+0x78>)
 8000f9e:	791b      	ldrb	r3, [r3, #4]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <Read_mgn+0x78>)
 8000fa6:	795b      	ldrb	r3, [r3, #5]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <Read_mgn+0x88>)
 8000fb0:	801a      	strh	r2, [r3, #0]
	Zm = (int16_t)(data[2] << 8) | data[3];
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <Read_mgn+0x78>)
 8000fb4:	789b      	ldrb	r3, [r3, #2]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <Read_mgn+0x78>)
 8000fbc:	78db      	ldrb	r3, [r3, #3]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <Read_mgn+0x8c>)
 8000fc6:	801a      	strh	r2, [r3, #0]
//		Ym = 0xFFFF - Ym + 1;

//	Xm = (int16_t)(data[1] << 8) | data[0];
//	Ym = (int16_t)(data[5] << 8) | data[4];
//	Zm = (int16_t)(data[3] << 8) | data[2];
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000230 	.word	0x20000230
 8000fd4:	2000053c 	.word	0x2000053c
 8000fd8:	20000003 	.word	0x20000003
 8000fdc:	2000021c 	.word	0x2000021c
 8000fe0:	2000021e 	.word	0x2000021e
 8000fe4:	20000220 	.word	0x20000220

08000fe8 <Read_compass>:

float Read_compass(void) {
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	Read_mgn();
 8000fec:	f7ff ffb4 	bl	8000f58 <Read_mgn>

	Az = MPU6050_AccZ();
 8000ff0:	f000 fa8a 	bl	8001508 <MPU6050_AccZ>
 8000ff4:	eef0 7a40 	vmov.f32	s15, s0
 8000ff8:	4bab      	ldr	r3, [pc, #684]	; (80012a8 <Read_compass+0x2c0>)
 8000ffa:	edc3 7a00 	vstr	s15, [r3]
	Ay = MPU6050_AccX();
 8000ffe:	f000 fa53 	bl	80014a8 <MPU6050_AccX>
 8001002:	eef0 7a40 	vmov.f32	s15, s0
 8001006:	4ba9      	ldr	r3, [pc, #676]	; (80012ac <Read_compass+0x2c4>)
 8001008:	edc3 7a00 	vstr	s15, [r3]
	Ax = MPU6050_AccY();
 800100c:	f000 fa64 	bl	80014d8 <MPU6050_AccY>
 8001010:	eef0 7a40 	vmov.f32	s15, s0
 8001014:	4ba6      	ldr	r3, [pc, #664]	; (80012b0 <Read_compass+0x2c8>)
 8001016:	edc3 7a00 	vstr	s15, [r3]

	roll = atan2(Ay , Az) * 180 / PI;
 800101a:	4ba4      	ldr	r3, [pc, #656]	; (80012ac <Read_compass+0x2c4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fa92 	bl	8000548 <__aeabi_f2d>
 8001024:	4604      	mov	r4, r0
 8001026:	460d      	mov	r5, r1
 8001028:	4b9f      	ldr	r3, [pc, #636]	; (80012a8 <Read_compass+0x2c0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa8b 	bl	8000548 <__aeabi_f2d>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	ec43 2b11 	vmov	d1, r2, r3
 800103a:	ec45 4b10 	vmov	d0, r4, r5
 800103e:	f00a fc3b 	bl	800b8b8 <atan2>
 8001042:	ec51 0b10 	vmov	r0, r1, d0
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b9a      	ldr	r3, [pc, #616]	; (80012b4 <Read_compass+0x2cc>)
 800104c:	f7ff fad4 	bl	80005f8 <__aeabi_dmul>
 8001050:	4603      	mov	r3, r0
 8001052:	460c      	mov	r4, r1
 8001054:	4618      	mov	r0, r3
 8001056:	4621      	mov	r1, r4
 8001058:	a38f      	add	r3, pc, #572	; (adr r3, 8001298 <Read_compass+0x2b0>)
 800105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105e:	f7ff fbf5 	bl	800084c <__aeabi_ddiv>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	4618      	mov	r0, r3
 8001068:	4621      	mov	r1, r4
 800106a:	f7ff fdbd 	bl	8000be8 <__aeabi_d2f>
 800106e:	4602      	mov	r2, r0
 8001070:	4b91      	ldr	r3, [pc, #580]	; (80012b8 <Read_compass+0x2d0>)
 8001072:	601a      	str	r2, [r3, #0]
	pitch = atan2((- Ax) , sqrt(Ay * Ay + Az * Az)) * 180 / PI;
 8001074:	4b8e      	ldr	r3, [pc, #568]	; (80012b0 <Read_compass+0x2c8>)
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	eef1 7a67 	vneg.f32	s15, s15
 800107e:	ee17 3a90 	vmov	r3, s15
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa60 	bl	8000548 <__aeabi_f2d>
 8001088:	4604      	mov	r4, r0
 800108a:	460d      	mov	r5, r1
 800108c:	4b87      	ldr	r3, [pc, #540]	; (80012ac <Read_compass+0x2c4>)
 800108e:	ed93 7a00 	vldr	s14, [r3]
 8001092:	4b86      	ldr	r3, [pc, #536]	; (80012ac <Read_compass+0x2c4>)
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800109c:	4b82      	ldr	r3, [pc, #520]	; (80012a8 <Read_compass+0x2c0>)
 800109e:	edd3 6a00 	vldr	s13, [r3]
 80010a2:	4b81      	ldr	r3, [pc, #516]	; (80012a8 <Read_compass+0x2c0>)
 80010a4:	edd3 7a00 	vldr	s15, [r3]
 80010a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b0:	ee17 0a90 	vmov	r0, s15
 80010b4:	f7ff fa48 	bl	8000548 <__aeabi_f2d>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	ec43 2b10 	vmov	d0, r2, r3
 80010c0:	f00a fbfc 	bl	800b8bc <sqrt>
 80010c4:	eeb0 7a40 	vmov.f32	s14, s0
 80010c8:	eef0 7a60 	vmov.f32	s15, s1
 80010cc:	eeb0 1a47 	vmov.f32	s2, s14
 80010d0:	eef0 1a67 	vmov.f32	s3, s15
 80010d4:	ec45 4b10 	vmov	d0, r4, r5
 80010d8:	f00a fbee 	bl	800b8b8 <atan2>
 80010dc:	ec51 0b10 	vmov	r0, r1, d0
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b73      	ldr	r3, [pc, #460]	; (80012b4 <Read_compass+0x2cc>)
 80010e6:	f7ff fa87 	bl	80005f8 <__aeabi_dmul>
 80010ea:	4603      	mov	r3, r0
 80010ec:	460c      	mov	r4, r1
 80010ee:	4618      	mov	r0, r3
 80010f0:	4621      	mov	r1, r4
 80010f2:	a369      	add	r3, pc, #420	; (adr r3, 8001298 <Read_compass+0x2b0>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff fba8 	bl	800084c <__aeabi_ddiv>
 80010fc:	4603      	mov	r3, r0
 80010fe:	460c      	mov	r4, r1
 8001100:	4618      	mov	r0, r3
 8001102:	4621      	mov	r1, r4
 8001104:	f7ff fd70 	bl	8000be8 <__aeabi_d2f>
 8001108:	4602      	mov	r2, r0
 800110a:	4b6c      	ldr	r3, [pc, #432]	; (80012bc <Read_compass+0x2d4>)
 800110c:	601a      	str	r2, [r3, #0]

	NXT_SEND_SVAL("n0.val", (int)roll);
 800110e:	4b6a      	ldr	r3, [pc, #424]	; (80012b8 <Read_compass+0x2d0>)
 8001110:	edd3 7a00 	vldr	s15, [r3]
 8001114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001118:	ee17 1a90 	vmov	r1, s15
 800111c:	4868      	ldr	r0, [pc, #416]	; (80012c0 <Read_compass+0x2d8>)
 800111e:	f001 ff89 	bl	8003034 <NXT_SEND_SVAL>
	NXT_SEND_SVAL("n1.val", (int)pitch);
 8001122:	4b66      	ldr	r3, [pc, #408]	; (80012bc <Read_compass+0x2d4>)
 8001124:	edd3 7a00 	vldr	s15, [r3]
 8001128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800112c:	ee17 1a90 	vmov	r1, s15
 8001130:	4864      	ldr	r0, [pc, #400]	; (80012c4 <Read_compass+0x2dc>)
 8001132:	f001 ff7f 	bl	8003034 <NXT_SEND_SVAL>
//	Ym = (Ym * sqrt(1 - pow(Ax , 2) - pow(Ay , 2))) - Zm * Ay;

//	Xm = Xm * cos(pitch) + Ym * sin(roll) * sin(pitch) - Zm * cos(roll) * sin(pitch);
//	Ym = Ym * cos(roll) + Zm * sin(roll);

	Xm = Xm * Xsf + Xoff;  // ********************
 8001136:	4b64      	ldr	r3, [pc, #400]	; (80012c8 <Read_compass+0x2e0>)
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001144:	4b61      	ldr	r3, [pc, #388]	; (80012cc <Read_compass+0x2e4>)
 8001146:	edd3 7a00 	vldr	s15, [r3]
 800114a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114e:	4b60      	ldr	r3, [pc, #384]	; (80012d0 <Read_compass+0x2e8>)
 8001150:	edd3 7a00 	vldr	s15, [r3]
 8001154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001158:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800115c:	ee17 3a90 	vmov	r3, s15
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b59      	ldr	r3, [pc, #356]	; (80012c8 <Read_compass+0x2e0>)
 8001164:	801a      	strh	r2, [r3, #0]
	Ym = Ym * Ysf + Yoff;
 8001166:	4b5b      	ldr	r3, [pc, #364]	; (80012d4 <Read_compass+0x2ec>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001174:	4b58      	ldr	r3, [pc, #352]	; (80012d8 <Read_compass+0x2f0>)
 8001176:	edd3 7a00 	vldr	s15, [r3]
 800117a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800117e:	4b57      	ldr	r3, [pc, #348]	; (80012dc <Read_compass+0x2f4>)
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800118c:	ee17 3a90 	vmov	r3, s15
 8001190:	b21a      	sxth	r2, r3
 8001192:	4b50      	ldr	r3, [pc, #320]	; (80012d4 <Read_compass+0x2ec>)
 8001194:	801a      	strh	r2, [r3, #0]



	if (Xm == 0 && Ym < 0)
 8001196:	4b4c      	ldr	r3, [pc, #304]	; (80012c8 <Read_compass+0x2e0>)
 8001198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d108      	bne.n	80011b2 <Read_compass+0x1ca>
 80011a0:	4b4c      	ldr	r3, [pc, #304]	; (80012d4 <Read_compass+0x2ec>)
 80011a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da03      	bge.n	80011b2 <Read_compass+0x1ca>
		compass_n = 90.0;
 80011aa:	4b4d      	ldr	r3, [pc, #308]	; (80012e0 <Read_compass+0x2f8>)
 80011ac:	4a4d      	ldr	r2, [pc, #308]	; (80012e4 <Read_compass+0x2fc>)
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	e034      	b.n	800121c <Read_compass+0x234>
	else if (Xm == 0 && Ym > 0)
 80011b2:	4b45      	ldr	r3, [pc, #276]	; (80012c8 <Read_compass+0x2e0>)
 80011b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d108      	bne.n	80011ce <Read_compass+0x1e6>
 80011bc:	4b45      	ldr	r3, [pc, #276]	; (80012d4 <Read_compass+0x2ec>)
 80011be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	dd03      	ble.n	80011ce <Read_compass+0x1e6>
		compass_n = 270.0;
 80011c6:	4b46      	ldr	r3, [pc, #280]	; (80012e0 <Read_compass+0x2f8>)
 80011c8:	4a47      	ldr	r2, [pc, #284]	; (80012e8 <Read_compass+0x300>)
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e026      	b.n	800121c <Read_compass+0x234>
	else {
		compass_n = (atan2f(Ym, Xm) * (180.0 / PI));
 80011ce:	4b41      	ldr	r3, [pc, #260]	; (80012d4 <Read_compass+0x2ec>)
 80011d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011dc:	4b3a      	ldr	r3, [pc, #232]	; (80012c8 <Read_compass+0x2e0>)
 80011de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e2:	ee07 3a10 	vmov	s14, r3
 80011e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80011ea:	eef0 0a47 	vmov.f32	s1, s14
 80011ee:	eeb0 0a67 	vmov.f32	s0, s15
 80011f2:	f00a fbbd 	bl	800b970 <atan2f>
 80011f6:	ee10 3a10 	vmov	r3, s0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f9a4 	bl	8000548 <__aeabi_f2d>
 8001200:	a327      	add	r3, pc, #156	; (adr r3, 80012a0 <Read_compass+0x2b8>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff f9f7 	bl	80005f8 <__aeabi_dmul>
 800120a:	4603      	mov	r3, r0
 800120c:	460c      	mov	r4, r1
 800120e:	4618      	mov	r0, r3
 8001210:	4621      	mov	r1, r4
 8001212:	f7ff fce9 	bl	8000be8 <__aeabi_d2f>
 8001216:	4602      	mov	r2, r0
 8001218:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <Read_compass+0x2f8>)
 800121a:	601a      	str	r2, [r3, #0]
//		}
//		else if (Ym < 0){
//					compass_n = 270.0 - (atanf(Ym/Xm)) * 180.0 / PI;
//					//compass_n = (atan2f(Ym, Xm) * (180.0 / PI));
//				}
	compass_n = compass_n + MGN_density + MGN_default_Angle;
 800121c:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <Read_compass+0x2f8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f991 	bl	8000548 <__aeabi_f2d>
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	4b30      	ldr	r3, [pc, #192]	; (80012ec <Read_compass+0x304>)
 800122c:	f7ff f82e 	bl	800028c <__adddf3>
 8001230:	4603      	mov	r3, r0
 8001232:	460c      	mov	r4, r1
 8001234:	4618      	mov	r0, r3
 8001236:	4621      	mov	r1, r4
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	f04f 0300 	mov.w	r3, #0
 8001240:	f7ff f824 	bl	800028c <__adddf3>
 8001244:	4603      	mov	r3, r0
 8001246:	460c      	mov	r4, r1
 8001248:	4618      	mov	r0, r3
 800124a:	4621      	mov	r1, r4
 800124c:	f7ff fccc 	bl	8000be8 <__aeabi_d2f>
 8001250:	4602      	mov	r2, r0
 8001252:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <Read_compass+0x2f8>)
 8001254:	601a      	str	r2, [r3, #0]
	if (compass_n < 0)
 8001256:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <Read_compass+0x2f8>)
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001264:	d50a      	bpl.n	800127c <Read_compass+0x294>
		compass = compass_n + 360;
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <Read_compass+0x2f8>)
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80012f0 <Read_compass+0x308>
 8001270:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <Read_compass+0x30c>)
 8001276:	edc3 7a00 	vstr	s15, [r3]
 800127a:	e003      	b.n	8001284 <Read_compass+0x29c>
	else
		compass = compass_n;
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <Read_compass+0x2f8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a1c      	ldr	r2, [pc, #112]	; (80012f4 <Read_compass+0x30c>)
 8001282:	6013      	str	r3, [r2, #0]
	return compass;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <Read_compass+0x30c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	ee07 3a90 	vmov	s15, r3
}
 800128c:	eeb0 0a67 	vmov.f32	s0, s15
 8001290:	bdb0      	pop	{r4, r5, r7, pc}
 8001292:	bf00      	nop
 8001294:	f3af 8000 	nop.w
 8001298:	54442d18 	.word	0x54442d18
 800129c:	400921fb 	.word	0x400921fb
 80012a0:	1a63c1f8 	.word	0x1a63c1f8
 80012a4:	404ca5dc 	.word	0x404ca5dc
 80012a8:	200004a0 	.word	0x200004a0
 80012ac:	2000048c 	.word	0x2000048c
 80012b0:	20000498 	.word	0x20000498
 80012b4:	40668000 	.word	0x40668000
 80012b8:	20000224 	.word	0x20000224
 80012bc:	20000228 	.word	0x20000228
 80012c0:	0800d2c0 	.word	0x0800d2c0
 80012c4:	0800d2c8 	.word	0x0800d2c8
 80012c8:	2000021c 	.word	0x2000021c
 80012cc:	2000047c 	.word	0x2000047c
 80012d0:	20000488 	.word	0x20000488
 80012d4:	2000021e 	.word	0x2000021e
 80012d8:	20000480 	.word	0x20000480
 80012dc:	20000494 	.word	0x20000494
 80012e0:	200004a4 	.word	0x200004a4
 80012e4:	42b40000 	.word	0x42b40000
 80012e8:	43870000 	.word	0x43870000
 80012ec:	40180000 	.word	0x40180000
 80012f0:	43b40000 	.word	0x43b40000
 80012f4:	20000490 	.word	0x20000490

080012f8 <MPU6050_Init>:
uint8_t CONFIG_RATE = 0x02;
uint8_t ACCEL_CONFIG_RATE = 0x10;
uint8_t PWR_MGMT_1_RATE = 0x00;

void MPU6050_Init()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU_6050_WRITE_ADRESS, 1, MPU_6050_TIMEOUT) != HAL_OK)
 80012fc:	2364      	movs	r3, #100	; 0x64
 80012fe:	2201      	movs	r2, #1
 8001300:	21d0      	movs	r1, #208	; 0xd0
 8001302:	4808      	ldr	r0, [pc, #32]	; (8001324 <MPU6050_Init+0x2c>)
 8001304:	f003 fa0c 	bl	8004720 <HAL_I2C_IsDeviceReady>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <MPU6050_Init+0x22>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);  // ONEMLI
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <MPU6050_Init+0x30>)
 8001316:	f002 fe1f 	bl	8003f58 <HAL_GPIO_WritePin>
	}

	MPU6050_SetCalibration();
 800131a:	f000 f807 	bl	800132c <MPU6050_SetCalibration>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000053c 	.word	0x2000053c
 8001328:	48000800 	.word	0x48000800

0800132c <MPU6050_SetCalibration>:

void MPU6050_SetCalibration()
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af04      	add	r7, sp, #16
	// This register allows the user to configure the power mode and clock source.
	HAL_I2C_Mem_Write(&hi2c1, MPU_6050_WRITE_ADRESS, PWR_MGMT_1, 1, &PWR_MGMT_1_RATE, 1, MPU_6050_TIMEOUT);
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MPU6050_SetCalibration+0x84>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b29a      	uxth	r2, r3
 8001338:	2364      	movs	r3, #100	; 0x64
 800133a:	9302      	str	r3, [sp, #8]
 800133c:	2301      	movs	r3, #1
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <MPU6050_SetCalibration+0x88>)
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	21d0      	movs	r1, #208	; 0xd0
 8001348:	481b      	ldr	r0, [pc, #108]	; (80013b8 <MPU6050_SetCalibration+0x8c>)
 800134a:	f002 ffbb 	bl	80042c4 <HAL_I2C_Mem_Write>

	// The Sample Rate is determined by dividing the gyroscope output rate by this value.
	HAL_I2C_Mem_Write(&hi2c1, MPU_6050_WRITE_ADRESS, SMPRT_DIV, 1, &SMPRT_DIV_RATE, 1, MPU_6050_TIMEOUT);
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <MPU6050_SetCalibration+0x90>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b29a      	uxth	r2, r3
 8001354:	2364      	movs	r3, #100	; 0x64
 8001356:	9302      	str	r3, [sp, #8]
 8001358:	2301      	movs	r3, #1
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <MPU6050_SetCalibration+0x94>)
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2301      	movs	r3, #1
 8001362:	21d0      	movs	r1, #208	; 0xd0
 8001364:	4814      	ldr	r0, [pc, #80]	; (80013b8 <MPU6050_SetCalibration+0x8c>)
 8001366:	f002 ffad 	bl	80042c4 <HAL_I2C_Mem_Write>

	// This register is used to trigger gyroscope self-test and configure the gyroscopes’ full scale range.
	HAL_I2C_Mem_Write(&hi2c1, MPU_6050_WRITE_ADRESS, GYRO_CONFIG, 1, &GYRO_CONFIG_RATE, 1, MPU_6050_TIMEOUT);
 800136a:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <MPU6050_SetCalibration+0x98>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b29a      	uxth	r2, r3
 8001370:	2364      	movs	r3, #100	; 0x64
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	2301      	movs	r3, #1
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <MPU6050_SetCalibration+0x9c>)
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	21d0      	movs	r1, #208	; 0xd0
 8001380:	480d      	ldr	r0, [pc, #52]	; (80013b8 <MPU6050_SetCalibration+0x8c>)
 8001382:	f002 ff9f 	bl	80042c4 <HAL_I2C_Mem_Write>

	// This register is used to trigger accelerometer self test and configure the accelerometer full scale range.
	HAL_I2C_Mem_Write(&hi2c1, MPU_6050_WRITE_ADRESS, ACCEL_CONFIG, 1, &ACCEL_CONFIG_RATE, 1, MPU_6050_TIMEOUT);
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MPU6050_SetCalibration+0xa0>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b29a      	uxth	r2, r3
 800138c:	2364      	movs	r3, #100	; 0x64
 800138e:	9302      	str	r3, [sp, #8]
 8001390:	2301      	movs	r3, #1
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MPU6050_SetCalibration+0xa4>)
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2301      	movs	r3, #1
 800139a:	21d0      	movs	r1, #208	; 0xd0
 800139c:	4806      	ldr	r0, [pc, #24]	; (80013b8 <MPU6050_SetCalibration+0x8c>)
 800139e:	f002 ff91 	bl	80042c4 <HAL_I2C_Mem_Write>

	HAL_Delay(50);
 80013a2:	2032      	movs	r0, #50	; 0x32
 80013a4:	f002 fabc 	bl	8003920 <HAL_Delay>

}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000007 	.word	0x20000007
 80013b4:	2000023f 	.word	0x2000023f
 80013b8:	2000053c 	.word	0x2000053c
 80013bc:	20000004 	.word	0x20000004
 80013c0:	20000009 	.word	0x20000009
 80013c4:	20000005 	.word	0x20000005
 80013c8:	2000000a 	.word	0x2000000a
 80013cc:	20000006 	.word	0x20000006
 80013d0:	2000000b 	.word	0x2000000b

080013d4 <MPU6050_Read_Accelarition>:

void MPU6050_Read_Accelarition()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, MPU_6050_READ_ADRESS, MPU_6050_ACCELERATION_REG, 1, Acc, MPU_6050_ACCELERATION_LENGTH, MPU_6050_TIMEOUT);
 80013da:	4b2c      	ldr	r3, [pc, #176]	; (800148c <MPU6050_Read_Accelarition+0xb8>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	2364      	movs	r3, #100	; 0x64
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	2306      	movs	r3, #6
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	4b29      	ldr	r3, [pc, #164]	; (8001490 <MPU6050_Read_Accelarition+0xbc>)
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2301      	movs	r3, #1
 80013ee:	21d1      	movs	r1, #209	; 0xd1
 80013f0:	4828      	ldr	r0, [pc, #160]	; (8001494 <MPU6050_Read_Accelarition+0xc0>)
 80013f2:	f003 f87b 	bl	80044ec <HAL_I2C_Mem_Read>
	//HAL_Delay(20);
	//HAL_Delay(12);
	Accx = (int16_t)((Acc[count] << 8) | (Acc[count + 1])); count +=2;
 80013f6:	4b28      	ldr	r3, [pc, #160]	; (8001498 <MPU6050_Read_Accelarition+0xc4>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b24      	ldr	r3, [pc, #144]	; (8001490 <MPU6050_Read_Accelarition+0xbc>)
 80013fe:	5c9b      	ldrb	r3, [r3, r2]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	b21a      	sxth	r2, r3
 8001404:	4b24      	ldr	r3, [pc, #144]	; (8001498 <MPU6050_Read_Accelarition+0xc4>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	4921      	ldr	r1, [pc, #132]	; (8001490 <MPU6050_Read_Accelarition+0xbc>)
 800140c:	5ccb      	ldrb	r3, [r1, r3]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21a      	sxth	r2, r3
 8001414:	4b21      	ldr	r3, [pc, #132]	; (800149c <MPU6050_Read_Accelarition+0xc8>)
 8001416:	801a      	strh	r2, [r3, #0]
 8001418:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <MPU6050_Read_Accelarition+0xc4>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	3302      	adds	r3, #2
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <MPU6050_Read_Accelarition+0xc4>)
 8001422:	701a      	strb	r2, [r3, #0]
	Accy = (int16_t)((Acc[count] << 8) | (Acc[count + 1])); count +=2;
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <MPU6050_Read_Accelarition+0xc4>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MPU6050_Read_Accelarition+0xbc>)
 800142c:	5c9b      	ldrb	r3, [r3, r2]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	b21a      	sxth	r2, r3
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <MPU6050_Read_Accelarition+0xc4>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	4915      	ldr	r1, [pc, #84]	; (8001490 <MPU6050_Read_Accelarition+0xbc>)
 800143a:	5ccb      	ldrb	r3, [r1, r3]
 800143c:	b21b      	sxth	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b21a      	sxth	r2, r3
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <MPU6050_Read_Accelarition+0xcc>)
 8001444:	801a      	strh	r2, [r3, #0]
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MPU6050_Read_Accelarition+0xc4>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	3302      	adds	r3, #2
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MPU6050_Read_Accelarition+0xc4>)
 8001450:	701a      	strb	r2, [r3, #0]
	Accz = (int16_t)((Acc[count] << 8) | (Acc[count + 1])); count +=2;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MPU6050_Read_Accelarition+0xc4>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <MPU6050_Read_Accelarition+0xbc>)
 800145a:	5c9b      	ldrb	r3, [r3, r2]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b21a      	sxth	r2, r3
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <MPU6050_Read_Accelarition+0xc4>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	490a      	ldr	r1, [pc, #40]	; (8001490 <MPU6050_Read_Accelarition+0xbc>)
 8001468:	5ccb      	ldrb	r3, [r1, r3]
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21a      	sxth	r2, r3
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MPU6050_Read_Accelarition+0xd0>)
 8001472:	801a      	strh	r2, [r3, #0]
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MPU6050_Read_Accelarition+0xc4>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	3302      	adds	r3, #2
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MPU6050_Read_Accelarition+0xc4>)
 800147e:	701a      	strb	r2, [r3, #0]
	count = 0;
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <MPU6050_Read_Accelarition+0xc4>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000008 	.word	0x20000008
 8001490:	20000238 	.word	0x20000238
 8001494:	2000053c 	.word	0x2000053c
 8001498:	2000023e 	.word	0x2000023e
 800149c:	200004ac 	.word	0x200004ac
 80014a0:	200004aa 	.word	0x200004aa
 80014a4:	200004b0 	.word	0x200004b0

080014a8 <MPU6050_AccX>:
	Gyroz = (int16_t)((Gyro[count] << 8) | (Gyro[count + 1])); count +=2;
	count = 0;
}

float MPU6050_AccX()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	MPU6050_Read_Accelarition();
 80014ac:	f7ff ff92 	bl	80013d4 <MPU6050_Read_Accelarition>
	return (float)Accx / 4096.0;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <MPU6050_AccX+0x28>)
 80014b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014be:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014d4 <MPU6050_AccX+0x2c>
 80014c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014c6:	eef0 7a66 	vmov.f32	s15, s13
}
 80014ca:	eeb0 0a67 	vmov.f32	s0, s15
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200004ac 	.word	0x200004ac
 80014d4:	45800000 	.word	0x45800000

080014d8 <MPU6050_AccY>:
float MPU6050_AccY()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	MPU6050_Read_Accelarition();
 80014dc:	f7ff ff7a 	bl	80013d4 <MPU6050_Read_Accelarition>
	return (float)Accy / 4096.0;
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <MPU6050_AccY+0x28>)
 80014e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ee:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001504 <MPU6050_AccY+0x2c>
 80014f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014f6:	eef0 7a66 	vmov.f32	s15, s13
}
 80014fa:	eeb0 0a67 	vmov.f32	s0, s15
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200004aa 	.word	0x200004aa
 8001504:	45800000 	.word	0x45800000

08001508 <MPU6050_AccZ>:
float MPU6050_AccZ()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	MPU6050_Read_Accelarition();
 800150c:	f7ff ff62 	bl	80013d4 <MPU6050_Read_Accelarition>
	return (float)Accz / 4096.0;
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <MPU6050_AccZ+0x28>)
 8001512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001534 <MPU6050_AccZ+0x2c>
 8001522:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001526:	eef0 7a66 	vmov.f32	s15, s13
}
 800152a:	eeb0 0a67 	vmov.f32	s0, s15
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200004b0 	.word	0x200004b0
 8001534:	45800000 	.word	0x45800000

08001538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153a:	b08b      	sub	sp, #44	; 0x2c
 800153c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153e:	f002 f989 	bl	8003854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001542:	f000 fc39 	bl	8001db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001546:	f000 fdb7 	bl	80020b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800154a:	f000 fc97 	bl	8001e7c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800154e:	f000 fd23 	bl	8001f98 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001552:	f000 fd51 	bl	8001ff8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001556:	f000 fd7f 	bl	8002058 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800155a:	f000 fccf 	bl	8001efc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //I2C_SCAN();
	LORA_READ_PARAMETER();
 800155e:	f000 fe69 	bl	8002234 <LORA_READ_PARAMETER>
	LORA_CONFG(ADDH, ADDL, CHN, MODE); // HIGH ADDRESS, LOW ADDRESS, CHANNEL, MODE (0 : TRANSPARENT, 1 : FIXED)
 8001562:	4b87      	ldr	r3, [pc, #540]	; (8001780 <main+0x248>)
 8001564:	7818      	ldrb	r0, [r3, #0]
 8001566:	4b87      	ldr	r3, [pc, #540]	; (8001784 <main+0x24c>)
 8001568:	7819      	ldrb	r1, [r3, #0]
 800156a:	4b87      	ldr	r3, [pc, #540]	; (8001788 <main+0x250>)
 800156c:	781a      	ldrb	r2, [r3, #0]
 800156e:	4b87      	ldr	r3, [pc, #540]	; (800178c <main+0x254>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	f000 fe01 	bl	8002178 <LORA_CONFG>
	MPU6050_Init();
 8001576:	f7ff febf 	bl	80012f8 <MPU6050_Init>
	for (uint8_t i = 0; i < 8; i++) {
 800157a:	2300      	movs	r3, #0
 800157c:	77fb      	strb	r3, [r7, #31]
 800157e:	e009      	b.n	8001594 <main+0x5c>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001580:	2110      	movs	r1, #16
 8001582:	4883      	ldr	r0, [pc, #524]	; (8001790 <main+0x258>)
 8001584:	f002 fd00 	bl	8003f88 <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8001588:	2032      	movs	r0, #50	; 0x32
 800158a:	f002 f9c9 	bl	8003920 <HAL_Delay>
	for (uint8_t i = 0; i < 8; i++) {
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	3301      	adds	r3, #1
 8001592:	77fb      	strb	r3, [r7, #31]
 8001594:	7ffb      	ldrb	r3, [r7, #31]
 8001596:	2b07      	cmp	r3, #7
 8001598:	d9f2      	bls.n	8001580 <main+0x48>
	}
	magneto_Init(cal_num);
 800159a:	2096      	movs	r0, #150	; 0x96
 800159c:	f7ff fb74 	bl	8000c88 <magneto_Init>
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80015a0:	4b7c      	ldr	r3, [pc, #496]	; (8001794 <main+0x25c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4b7b      	ldr	r3, [pc, #492]	; (8001794 <main+0x25c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0220 	orr.w	r2, r2, #32
 80015ae:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 80015b0:	4879      	ldr	r0, [pc, #484]	; (8001798 <main+0x260>)
 80015b2:	f004 ff4d 	bl	8006450 <HAL_TIM_Base_Start_IT>
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80015b6:	4b79      	ldr	r3, [pc, #484]	; (800179c <main+0x264>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b77      	ldr	r3, [pc, #476]	; (800179c <main+0x264>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f042 0220 	orr.w	r2, r2, #32
 80015c4:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80015c6:	4b76      	ldr	r3, [pc, #472]	; (80017a0 <main+0x268>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b74      	ldr	r3, [pc, #464]	; (80017a0 <main+0x268>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 0220 	orr.w	r2, r2, #32
 80015d4:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (mgn == 1) {
 80015d6:	4b73      	ldr	r3, [pc, #460]	; (80017a4 <main+0x26c>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d143      	bne.n	8001666 <main+0x12e>
			compass_val = Read_compass();
 80015de:	f7ff fd03 	bl	8000fe8 <Read_compass>
 80015e2:	eef0 7a40 	vmov.f32	s15, s0
 80015e6:	4b70      	ldr	r3, [pc, #448]	; (80017a8 <main+0x270>)
 80015e8:	edc3 7a00 	vstr	s15, [r3]
			NXT_SEND_VALFLOAT("page2.t7.txt", compass_val);
 80015ec:	4b6e      	ldr	r3, [pc, #440]	; (80017a8 <main+0x270>)
 80015ee:	edd3 7a00 	vldr	s15, [r3]
 80015f2:	eeb0 0a67 	vmov.f32	s0, s15
 80015f6:	486d      	ldr	r0, [pc, #436]	; (80017ac <main+0x274>)
 80015f8:	f001 fd48 	bl	800308c <NXT_SEND_VALFLOAT>
			NXT_SEND_VAL("page2.z0.val", (uint32_t) compass_val);
 80015fc:	4b6a      	ldr	r3, [pc, #424]	; (80017a8 <main+0x270>)
 80015fe:	edd3 7a00 	vldr	s15, [r3]
 8001602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001606:	ee17 1a90 	vmov	r1, s15
 800160a:	4869      	ldr	r0, [pc, #420]	; (80017b0 <main+0x278>)
 800160c:	f001 fce6 	bl	8002fdc <NXT_SEND_VAL>
			compass_val -= 90;
 8001610:	4b65      	ldr	r3, [pc, #404]	; (80017a8 <main+0x270>)
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80017b4 <main+0x27c>
 800161a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800161e:	4b62      	ldr	r3, [pc, #392]	; (80017a8 <main+0x270>)
 8001620:	edc3 7a00 	vstr	s15, [r3]
			if (compass_val < 0)
 8001624:	4b60      	ldr	r3, [pc, #384]	; (80017a8 <main+0x270>)
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	d509      	bpl.n	8001648 <main+0x110>
				compass_val += 360;
 8001634:	4b5c      	ldr	r3, [pc, #368]	; (80017a8 <main+0x270>)
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80017b8 <main+0x280>
 800163e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001642:	4b59      	ldr	r3, [pc, #356]	; (80017a8 <main+0x270>)
 8001644:	edc3 7a00 	vstr	s15, [r3]
			NXT_SEND_TXT("page2.t7.txt", (uint16_t) compass_val);
 8001648:	4b57      	ldr	r3, [pc, #348]	; (80017a8 <main+0x270>)
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001652:	ee17 3a90 	vmov	r3, s15
 8001656:	b29b      	uxth	r3, r3
 8001658:	4619      	mov	r1, r3
 800165a:	4854      	ldr	r0, [pc, #336]	; (80017ac <main+0x274>)
 800165c:	f001 fd6e 	bl	800313c <NXT_SEND_TXT>
			mgn = 0;
 8001660:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <main+0x26c>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
		}
		if (recal == 1) {
 8001666:	4b55      	ldr	r3, [pc, #340]	; (80017bc <main+0x284>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d102      	bne.n	8001674 <main+0x13c>
			//magneto_Init(cal_num);
			recal = 0;
 800166e:	4b53      	ldr	r3, [pc, #332]	; (80017bc <main+0x284>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
		}
		if (RX2 == 1) {
 8001674:	4b52      	ldr	r3, [pc, #328]	; (80017c0 <main+0x288>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d14d      	bne.n	8001718 <main+0x1e0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800167c:	2201      	movs	r2, #1
 800167e:	2110      	movs	r1, #16
 8001680:	4843      	ldr	r0, [pc, #268]	; (8001790 <main+0x258>)
 8001682:	f002 fc69 	bl	8003f58 <HAL_GPIO_WritePin>
			RX2 = 0;
 8001686:	4b4e      	ldr	r3, [pc, #312]	; (80017c0 <main+0x288>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
			uint8_t m = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	77bb      	strb	r3, [r7, #30]
			uint8_t go = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	777b      	strb	r3, [r7, #29]
			for (uint8_t k = 0; k < sizeof(RX2_BUF); k++) {
 8001694:	2300      	movs	r3, #0
 8001696:	773b      	strb	r3, [r7, #28]
 8001698:	e021      	b.n	80016de <main+0x1a6>
				if (RX2_BUF[k] == ':' && go == 0) {
 800169a:	7f3b      	ldrb	r3, [r7, #28]
 800169c:	4a49      	ldr	r2, [pc, #292]	; (80017c4 <main+0x28c>)
 800169e:	5cd3      	ldrb	r3, [r2, r3]
 80016a0:	2b3a      	cmp	r3, #58	; 0x3a
 80016a2:	d104      	bne.n	80016ae <main+0x176>
 80016a4:	7f7b      	ldrb	r3, [r7, #29]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <main+0x176>
					go = 1;
 80016aa:	2301      	movs	r3, #1
 80016ac:	777b      	strb	r3, [r7, #29]
				}
				if (go == 1) {
 80016ae:	7f7b      	ldrb	r3, [r7, #29]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d109      	bne.n	80016c8 <main+0x190>
					NEXT_BUFF[m] = RX2_BUF[k - 1];
 80016b4:	7f3b      	ldrb	r3, [r7, #28]
 80016b6:	1e5a      	subs	r2, r3, #1
 80016b8:	7fbb      	ldrb	r3, [r7, #30]
 80016ba:	4942      	ldr	r1, [pc, #264]	; (80017c4 <main+0x28c>)
 80016bc:	5c89      	ldrb	r1, [r1, r2]
 80016be:	4a42      	ldr	r2, [pc, #264]	; (80017c8 <main+0x290>)
 80016c0:	54d1      	strb	r1, [r2, r3]
					m++;
 80016c2:	7fbb      	ldrb	r3, [r7, #30]
 80016c4:	3301      	adds	r3, #1
 80016c6:	77bb      	strb	r3, [r7, #30]
				}
				if (go == 1 && RX2_BUF[k] == '\n')
 80016c8:	7f7b      	ldrb	r3, [r7, #29]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d104      	bne.n	80016d8 <main+0x1a0>
 80016ce:	7f3b      	ldrb	r3, [r7, #28]
 80016d0:	4a3c      	ldr	r2, [pc, #240]	; (80017c4 <main+0x28c>)
 80016d2:	5cd3      	ldrb	r3, [r2, r3]
 80016d4:	2b0a      	cmp	r3, #10
 80016d6:	d006      	beq.n	80016e6 <main+0x1ae>
			for (uint8_t k = 0; k < sizeof(RX2_BUF); k++) {
 80016d8:	7f3b      	ldrb	r3, [r7, #28]
 80016da:	3301      	adds	r3, #1
 80016dc:	773b      	strb	r3, [r7, #28]
 80016de:	7f3b      	ldrb	r3, [r7, #28]
 80016e0:	2b4f      	cmp	r3, #79	; 0x4f
 80016e2:	d9da      	bls.n	800169a <main+0x162>
 80016e4:	e000      	b.n	80016e8 <main+0x1b0>
					break;
 80016e6:	bf00      	nop
			}
			//if(NEXT_BUFF[0] != '\0' || NEXT_BUFF[1] || '\0' || NEXT_BUFF[2] != '\0')
			NXT_SEND_TXTBX("page1.t12.txt", NEXT_BUFF);
 80016e8:	4937      	ldr	r1, [pc, #220]	; (80017c8 <main+0x290>)
 80016ea:	4838      	ldr	r0, [pc, #224]	; (80017cc <main+0x294>)
 80016ec:	f001 fd52 	bl	8003194 <NXT_SEND_TXTBX>

			for (uint8_t i = 0; i < sizeof(RX2_BUF); i++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	76fb      	strb	r3, [r7, #27]
 80016f4:	e006      	b.n	8001704 <main+0x1cc>
				RX2_BUF[i] = '\0';
 80016f6:	7efb      	ldrb	r3, [r7, #27]
 80016f8:	4a32      	ldr	r2, [pc, #200]	; (80017c4 <main+0x28c>)
 80016fa:	2100      	movs	r1, #0
 80016fc:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < sizeof(RX2_BUF); i++)
 80016fe:	7efb      	ldrb	r3, [r7, #27]
 8001700:	3301      	adds	r3, #1
 8001702:	76fb      	strb	r3, [r7, #27]
 8001704:	7efb      	ldrb	r3, [r7, #27]
 8001706:	2b4f      	cmp	r3, #79	; 0x4f
 8001708:	d9f5      	bls.n	80016f6 <main+0x1be>
			Data_Parsing();
 800170a:	f000 fdd5 	bl	80022b8 <Data_Parsing>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2110      	movs	r1, #16
 8001712:	481f      	ldr	r0, [pc, #124]	; (8001790 <main+0x258>)
 8001714:	f002 fc20 	bl	8003f58 <HAL_GPIO_WritePin>
		}
		if (cal_dis == 1) {
 8001718:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <main+0x298>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	f040 815f 	bne.w	80019e0 <main+0x4a8>
			if (ground_lat == .0 && ground_lng == .0) {
 8001722:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <main+0x29c>)
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	eef5 7a40 	vcmp.f32	s15, #0.0
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	d110      	bne.n	8001754 <main+0x21c>
 8001732:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <main+0x2a0>)
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	eef5 7a40 	vcmp.f32	s15, #0.0
 800173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001740:	d108      	bne.n	8001754 <main+0x21c>
				NXT_SEND_TXTBX("page2.t4.txt", "veri yok");
 8001742:	4926      	ldr	r1, [pc, #152]	; (80017dc <main+0x2a4>)
 8001744:	4826      	ldr	r0, [pc, #152]	; (80017e0 <main+0x2a8>)
 8001746:	f001 fd25 	bl	8003194 <NXT_SEND_TXTBX>
				NXT_SEND_TXTBX("page2.t6.txt", "veri yok");
 800174a:	4924      	ldr	r1, [pc, #144]	; (80017dc <main+0x2a4>)
 800174c:	4825      	ldr	r0, [pc, #148]	; (80017e4 <main+0x2ac>)
 800174e:	f001 fd21 	bl	8003194 <NXT_SEND_TXTBX>
 8001752:	e0bb      	b.n	80018cc <main+0x394>
			} else if (EPH_lat == .0 && EPH_lng == .0) {
 8001754:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <main+0x2b0>)
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800175e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001762:	d145      	bne.n	80017f0 <main+0x2b8>
 8001764:	4b21      	ldr	r3, [pc, #132]	; (80017ec <main+0x2b4>)
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	d13d      	bne.n	80017f0 <main+0x2b8>
				NXT_SEND_TXTBX("page2.t4.txt", "veri yok");
 8001774:	4919      	ldr	r1, [pc, #100]	; (80017dc <main+0x2a4>)
 8001776:	481a      	ldr	r0, [pc, #104]	; (80017e0 <main+0x2a8>)
 8001778:	f001 fd0c 	bl	8003194 <NXT_SEND_TXTBX>
 800177c:	e0a6      	b.n	80018cc <main+0x394>
 800177e:	bf00      	nop
 8001780:	20000018 	.word	0x20000018
 8001784:	20000019 	.word	0x20000019
 8001788:	2000001a 	.word	0x2000001a
 800178c:	2000001b 	.word	0x2000001b
 8001790:	48000400 	.word	0x48000400
 8001794:	200004b8 	.word	0x200004b8
 8001798:	2000060c 	.word	0x2000060c
 800179c:	20000658 	.word	0x20000658
 80017a0:	20000588 	.word	0x20000588
 80017a4:	2000032c 	.word	0x2000032c
 80017a8:	200002f0 	.word	0x200002f0
 80017ac:	0800d2d0 	.word	0x0800d2d0
 80017b0:	0800d2e0 	.word	0x0800d2e0
 80017b4:	42b40000 	.word	0x42b40000
 80017b8:	43b40000 	.word	0x43b40000
 80017bc:	2000032d 	.word	0x2000032d
 80017c0:	20000458 	.word	0x20000458
 80017c4:	200003a4 	.word	0x200003a4
 80017c8:	200003f4 	.word	0x200003f4
 80017cc:	0800d2f0 	.word	0x0800d2f0
 80017d0:	20000376 	.word	0x20000376
 80017d4:	200002e4 	.word	0x200002e4
 80017d8:	200002e8 	.word	0x200002e8
 80017dc:	0800d300 	.word	0x0800d300
 80017e0:	0800d30c 	.word	0x0800d30c
 80017e4:	0800d31c 	.word	0x0800d31c
 80017e8:	200002f4 	.word	0x200002f4
 80017ec:	200002f8 	.word	0x200002f8
			} else {
				EPH_distance = Cal_distGPS(EPH_lat, EPH_lng, ground_lat,
 80017f0:	4bc2      	ldr	r3, [pc, #776]	; (8001afc <main+0x5c4>)
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	4bc2      	ldr	r3, [pc, #776]	; (8001b00 <main+0x5c8>)
 80017f8:	ed93 7a00 	vldr	s14, [r3]
 80017fc:	4bc1      	ldr	r3, [pc, #772]	; (8001b04 <main+0x5cc>)
 80017fe:	edd3 6a00 	vldr	s13, [r3]
 8001802:	4bc1      	ldr	r3, [pc, #772]	; (8001b08 <main+0x5d0>)
 8001804:	ed93 6a00 	vldr	s12, [r3]
 8001808:	eef0 1a46 	vmov.f32	s3, s12
 800180c:	eeb0 1a66 	vmov.f32	s2, s13
 8001810:	eef0 0a47 	vmov.f32	s1, s14
 8001814:	eeb0 0a67 	vmov.f32	s0, s15
 8001818:	f001 f910 	bl	8002a3c <Cal_distGPS>
 800181c:	eef0 7a40 	vmov.f32	s15, s0
 8001820:	4bba      	ldr	r3, [pc, #744]	; (8001b0c <main+0x5d4>)
 8001822:	edc3 7a00 	vstr	s15, [r3]
						ground_lng);
				EPH_Angle = GetAngle(EPH_lat, EPH_lng, ground_lat, ground_lng);
 8001826:	4bb5      	ldr	r3, [pc, #724]	; (8001afc <main+0x5c4>)
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	4bb4      	ldr	r3, [pc, #720]	; (8001b00 <main+0x5c8>)
 800182e:	ed93 7a00 	vldr	s14, [r3]
 8001832:	4bb4      	ldr	r3, [pc, #720]	; (8001b04 <main+0x5cc>)
 8001834:	edd3 6a00 	vldr	s13, [r3]
 8001838:	4bb3      	ldr	r3, [pc, #716]	; (8001b08 <main+0x5d0>)
 800183a:	ed93 6a00 	vldr	s12, [r3]
 800183e:	eef0 1a46 	vmov.f32	s3, s12
 8001842:	eeb0 1a66 	vmov.f32	s2, s13
 8001846:	eef0 0a47 	vmov.f32	s1, s14
 800184a:	eeb0 0a67 	vmov.f32	s0, s15
 800184e:	f001 fa2f 	bl	8002cb0 <GetAngle>
 8001852:	eef0 7a40 	vmov.f32	s15, s0
 8001856:	4bae      	ldr	r3, [pc, #696]	; (8001b10 <main+0x5d8>)
 8001858:	edc3 7a00 	vstr	s15, [r3]
				NXT_SEND_VALFLOAT("page2.t4.txt", EPH_distance);
 800185c:	4bab      	ldr	r3, [pc, #684]	; (8001b0c <main+0x5d4>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	eeb0 0a67 	vmov.f32	s0, s15
 8001866:	48ab      	ldr	r0, [pc, #684]	; (8001b14 <main+0x5dc>)
 8001868:	f001 fc10 	bl	800308c <NXT_SEND_VALFLOAT>
				NXT_SEND_VALFLOAT("page2.t3.txt", EPH_Angle);
 800186c:	4ba8      	ldr	r3, [pc, #672]	; (8001b10 <main+0x5d8>)
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	eeb0 0a67 	vmov.f32	s0, s15
 8001876:	48a8      	ldr	r0, [pc, #672]	; (8001b18 <main+0x5e0>)
 8001878:	f001 fc08 	bl	800308c <NXT_SEND_VALFLOAT>
				EPH_Angle += 90.0;
 800187c:	4ba4      	ldr	r3, [pc, #656]	; (8001b10 <main+0x5d8>)
 800187e:	edd3 7a00 	vldr	s15, [r3]
 8001882:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001b1c <main+0x5e4>
 8001886:	ee77 7a87 	vadd.f32	s15, s15, s14
 800188a:	4ba1      	ldr	r3, [pc, #644]	; (8001b10 <main+0x5d8>)
 800188c:	edc3 7a00 	vstr	s15, [r3]
				if (EPH_Angle > 360) {
 8001890:	4b9f      	ldr	r3, [pc, #636]	; (8001b10 <main+0x5d8>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8001b20 <main+0x5e8>
 800189a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800189e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a2:	dd09      	ble.n	80018b8 <main+0x380>
					EPH_Angle -= 360;
 80018a4:	4b9a      	ldr	r3, [pc, #616]	; (8001b10 <main+0x5d8>)
 80018a6:	edd3 7a00 	vldr	s15, [r3]
 80018aa:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8001b20 <main+0x5e8>
 80018ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018b2:	4b97      	ldr	r3, [pc, #604]	; (8001b10 <main+0x5d8>)
 80018b4:	edc3 7a00 	vstr	s15, [r3]
				}
				NXT_SEND_VAL("page2.z1.val", (uint32_t) EPH_Angle);
 80018b8:	4b95      	ldr	r3, [pc, #596]	; (8001b10 <main+0x5d8>)
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018c2:	ee17 1a90 	vmov	r1, s15
 80018c6:	4897      	ldr	r0, [pc, #604]	; (8001b24 <main+0x5ec>)
 80018c8:	f001 fb88 	bl	8002fdc <NXT_SEND_VAL>
			}
			if ((PL_lat == .0 && PL_lng == .0) || GS_LC == 1) {
 80018cc:	4b96      	ldr	r3, [pc, #600]	; (8001b28 <main+0x5f0>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	d107      	bne.n	80018ec <main+0x3b4>
 80018dc:	4b93      	ldr	r3, [pc, #588]	; (8001b2c <main+0x5f4>)
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ea:	d003      	beq.n	80018f4 <main+0x3bc>
 80018ec:	4b90      	ldr	r3, [pc, #576]	; (8001b30 <main+0x5f8>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d104      	bne.n	80018fe <main+0x3c6>
				NXT_SEND_TXTBX("page2.t6.txt", "veri yok");
 80018f4:	498f      	ldr	r1, [pc, #572]	; (8001b34 <main+0x5fc>)
 80018f6:	4890      	ldr	r0, [pc, #576]	; (8001b38 <main+0x600>)
 80018f8:	f001 fc4c 	bl	8003194 <NXT_SEND_TXTBX>
 80018fc:	e06d      	b.n	80019da <main+0x4a2>
			} else {
				PL_distance = Cal_distGPS(PL_lat, PL_lng, ground_lat,
 80018fe:	4b8a      	ldr	r3, [pc, #552]	; (8001b28 <main+0x5f0>)
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	4b89      	ldr	r3, [pc, #548]	; (8001b2c <main+0x5f4>)
 8001906:	ed93 7a00 	vldr	s14, [r3]
 800190a:	4b7e      	ldr	r3, [pc, #504]	; (8001b04 <main+0x5cc>)
 800190c:	edd3 6a00 	vldr	s13, [r3]
 8001910:	4b7d      	ldr	r3, [pc, #500]	; (8001b08 <main+0x5d0>)
 8001912:	ed93 6a00 	vldr	s12, [r3]
 8001916:	eef0 1a46 	vmov.f32	s3, s12
 800191a:	eeb0 1a66 	vmov.f32	s2, s13
 800191e:	eef0 0a47 	vmov.f32	s1, s14
 8001922:	eeb0 0a67 	vmov.f32	s0, s15
 8001926:	f001 f889 	bl	8002a3c <Cal_distGPS>
 800192a:	eef0 7a40 	vmov.f32	s15, s0
 800192e:	4b83      	ldr	r3, [pc, #524]	; (8001b3c <main+0x604>)
 8001930:	edc3 7a00 	vstr	s15, [r3]
						ground_lng);
				PL_Angle = GetAngle(PL_lat, PL_lng, ground_lat, ground_lng);
 8001934:	4b7c      	ldr	r3, [pc, #496]	; (8001b28 <main+0x5f0>)
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	4b7c      	ldr	r3, [pc, #496]	; (8001b2c <main+0x5f4>)
 800193c:	ed93 7a00 	vldr	s14, [r3]
 8001940:	4b70      	ldr	r3, [pc, #448]	; (8001b04 <main+0x5cc>)
 8001942:	edd3 6a00 	vldr	s13, [r3]
 8001946:	4b70      	ldr	r3, [pc, #448]	; (8001b08 <main+0x5d0>)
 8001948:	ed93 6a00 	vldr	s12, [r3]
 800194c:	eef0 1a46 	vmov.f32	s3, s12
 8001950:	eeb0 1a66 	vmov.f32	s2, s13
 8001954:	eef0 0a47 	vmov.f32	s1, s14
 8001958:	eeb0 0a67 	vmov.f32	s0, s15
 800195c:	f001 f9a8 	bl	8002cb0 <GetAngle>
 8001960:	eef0 7a40 	vmov.f32	s15, s0
 8001964:	4b76      	ldr	r3, [pc, #472]	; (8001b40 <main+0x608>)
 8001966:	edc3 7a00 	vstr	s15, [r3]
				NXT_SEND_VALFLOAT("page2.t6.txt", PL_distance);
 800196a:	4b74      	ldr	r3, [pc, #464]	; (8001b3c <main+0x604>)
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	eeb0 0a67 	vmov.f32	s0, s15
 8001974:	4870      	ldr	r0, [pc, #448]	; (8001b38 <main+0x600>)
 8001976:	f001 fb89 	bl	800308c <NXT_SEND_VALFLOAT>
				NXT_SEND_VALFLOAT("page2.t5.txt", PL_Angle);
 800197a:	4b71      	ldr	r3, [pc, #452]	; (8001b40 <main+0x608>)
 800197c:	edd3 7a00 	vldr	s15, [r3]
 8001980:	eeb0 0a67 	vmov.f32	s0, s15
 8001984:	486f      	ldr	r0, [pc, #444]	; (8001b44 <main+0x60c>)
 8001986:	f001 fb81 	bl	800308c <NXT_SEND_VALFLOAT>
				PL_Angle += 90.0;
 800198a:	4b6d      	ldr	r3, [pc, #436]	; (8001b40 <main+0x608>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001b1c <main+0x5e4>
 8001994:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001998:	4b69      	ldr	r3, [pc, #420]	; (8001b40 <main+0x608>)
 800199a:	edc3 7a00 	vstr	s15, [r3]
				if (PL_Angle > 360) {
 800199e:	4b68      	ldr	r3, [pc, #416]	; (8001b40 <main+0x608>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001b20 <main+0x5e8>
 80019a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b0:	dd09      	ble.n	80019c6 <main+0x48e>
					PL_Angle -= 360;
 80019b2:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <main+0x608>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001b20 <main+0x5e8>
 80019bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019c0:	4b5f      	ldr	r3, [pc, #380]	; (8001b40 <main+0x608>)
 80019c2:	edc3 7a00 	vstr	s15, [r3]
				}
				NXT_SEND_VAL("page2.z2.val", (uint32_t) PL_Angle);
 80019c6:	4b5e      	ldr	r3, [pc, #376]	; (8001b40 <main+0x608>)
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019d0:	ee17 1a90 	vmov	r1, s15
 80019d4:	485c      	ldr	r0, [pc, #368]	; (8001b48 <main+0x610>)
 80019d6:	f001 fb01 	bl	8002fdc <NXT_SEND_VAL>
			}

			cal_dis = 0;
 80019da:	4b5c      	ldr	r3, [pc, #368]	; (8001b4c <main+0x614>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
		}
		if (gps == 1) {
 80019e0:	4b5b      	ldr	r3, [pc, #364]	; (8001b50 <main+0x618>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	f47f adf6 	bne.w	80015d6 <main+0x9e>
			for (uint8_t i = 0; i < gps_size; i++) {
 80019ea:	2300      	movs	r3, #0
 80019ec:	76bb      	strb	r3, [r7, #26]
 80019ee:	e1b4      	b.n	8001d5a <main+0x822>
				if (RX1_BUF[i] == '$' && RX1_BUF[i + 1] == 'G'
 80019f0:	7ebb      	ldrb	r3, [r7, #26]
 80019f2:	4a58      	ldr	r2, [pc, #352]	; (8001b54 <main+0x61c>)
 80019f4:	5cd3      	ldrb	r3, [r2, r3]
 80019f6:	2b24      	cmp	r3, #36	; 0x24
 80019f8:	f040 81ac 	bne.w	8001d54 <main+0x81c>
 80019fc:	7ebb      	ldrb	r3, [r7, #26]
 80019fe:	3301      	adds	r3, #1
 8001a00:	4a54      	ldr	r2, [pc, #336]	; (8001b54 <main+0x61c>)
 8001a02:	5cd3      	ldrb	r3, [r2, r3]
 8001a04:	2b47      	cmp	r3, #71	; 0x47
 8001a06:	f040 81a5 	bne.w	8001d54 <main+0x81c>
						&& RX1_BUF[i + 2] == 'P' && RX1_BUF[i + 3] == 'G'
 8001a0a:	7ebb      	ldrb	r3, [r7, #26]
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	4a51      	ldr	r2, [pc, #324]	; (8001b54 <main+0x61c>)
 8001a10:	5cd3      	ldrb	r3, [r2, r3]
 8001a12:	2b50      	cmp	r3, #80	; 0x50
 8001a14:	f040 819e 	bne.w	8001d54 <main+0x81c>
 8001a18:	7ebb      	ldrb	r3, [r7, #26]
 8001a1a:	3303      	adds	r3, #3
 8001a1c:	4a4d      	ldr	r2, [pc, #308]	; (8001b54 <main+0x61c>)
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	2b47      	cmp	r3, #71	; 0x47
 8001a22:	f040 8197 	bne.w	8001d54 <main+0x81c>
						&& RX1_BUF[i + 4] == 'G' && RX1_BUF[i + 5] == 'A'
 8001a26:	7ebb      	ldrb	r3, [r7, #26]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	4a4a      	ldr	r2, [pc, #296]	; (8001b54 <main+0x61c>)
 8001a2c:	5cd3      	ldrb	r3, [r2, r3]
 8001a2e:	2b47      	cmp	r3, #71	; 0x47
 8001a30:	f040 8190 	bne.w	8001d54 <main+0x81c>
 8001a34:	7ebb      	ldrb	r3, [r7, #26]
 8001a36:	3305      	adds	r3, #5
 8001a38:	4a46      	ldr	r2, [pc, #280]	; (8001b54 <main+0x61c>)
 8001a3a:	5cd3      	ldrb	r3, [r2, r3]
 8001a3c:	2b41      	cmp	r3, #65	; 0x41
 8001a3e:	f040 8189 	bne.w	8001d54 <main+0x81c>
						&& RX1_BUF[i + 6] == ',') {
 8001a42:	7ebb      	ldrb	r3, [r7, #26]
 8001a44:	3306      	adds	r3, #6
 8001a46:	4a43      	ldr	r2, [pc, #268]	; (8001b54 <main+0x61c>)
 8001a48:	5cd3      	ldrb	r3, [r2, r3]
 8001a4a:	2b2c      	cmp	r3, #44	; 0x2c
 8001a4c:	f040 8182 	bne.w	8001d54 <main+0x81c>
					uint8_t v = 0, pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0,
 8001a50:	2300      	movs	r3, #0
 8001a52:	767b      	strb	r3, [r7, #25]
 8001a54:	2300      	movs	r3, #0
 8001a56:	763b      	strb	r3, [r7, #24]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	75fb      	strb	r3, [r7, #23]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	72fb      	strb	r3, [r7, #11]
 8001a60:	2300      	movs	r3, #0
 8001a62:	75bb      	strb	r3, [r7, #22]
							pos5 = 0, ok1 = 0, ok2 = 0, ok3 = 0, ok4 = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	72bb      	strb	r3, [r7, #10]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	757b      	strb	r3, [r7, #21]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	753b      	strb	r3, [r7, #20]
 8001a70:	2300      	movs	r3, #0
 8001a72:	74fb      	strb	r3, [r7, #19]
 8001a74:	2300      	movs	r3, #0
 8001a76:	74bb      	strb	r3, [r7, #18]
					for (uint8_t n = 0; n < sizeof(RX1_BUF); n++) {  //  ONEMLI
 8001a78:	2300      	movs	r3, #0
 8001a7a:	747b      	strb	r3, [r7, #17]
 8001a7c:	e00f      	b.n	8001a9e <main+0x566>
						if (RX1_BUF[n] == ',' && n > i + 5)
 8001a7e:	7c7b      	ldrb	r3, [r7, #17]
 8001a80:	4a34      	ldr	r2, [pc, #208]	; (8001b54 <main+0x61c>)
 8001a82:	5cd3      	ldrb	r3, [r2, r3]
 8001a84:	2b2c      	cmp	r3, #44	; 0x2c
 8001a86:	d107      	bne.n	8001a98 <main+0x560>
 8001a88:	7c7a      	ldrb	r2, [r7, #17]
 8001a8a:	7ebb      	ldrb	r3, [r7, #26]
 8001a8c:	3305      	adds	r3, #5
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	dd02      	ble.n	8001a98 <main+0x560>
							v++;
 8001a92:	7e7b      	ldrb	r3, [r7, #25]
 8001a94:	3301      	adds	r3, #1
 8001a96:	767b      	strb	r3, [r7, #25]
					for (uint8_t n = 0; n < sizeof(RX1_BUF); n++) {  //  ONEMLI
 8001a98:	7c7b      	ldrb	r3, [r7, #17]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	747b      	strb	r3, [r7, #17]
 8001a9e:	7c7b      	ldrb	r3, [r7, #17]
 8001aa0:	2b63      	cmp	r3, #99	; 0x63
 8001aa2:	d9ec      	bls.n	8001a7e <main+0x546>
					}
						if (v >= 5) { // new condition
 8001aa4:	7e7b      	ldrb	r3, [r7, #25]
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	f240 8154 	bls.w	8001d54 <main+0x81c>
							v = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	767b      	strb	r3, [r7, #25]
							for (uint8_t n = 0; n < sizeof(RX1_BUF); n++) { //  ONEMLI
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	743b      	strb	r3, [r7, #16]
 8001ab4:	e148      	b.n	8001d48 <main+0x810>
								if (RX1_BUF[n] == ',' && n > i + 5)
 8001ab6:	7c3b      	ldrb	r3, [r7, #16]
 8001ab8:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <main+0x61c>)
 8001aba:	5cd3      	ldrb	r3, [r2, r3]
 8001abc:	2b2c      	cmp	r3, #44	; 0x2c
 8001abe:	d107      	bne.n	8001ad0 <main+0x598>
 8001ac0:	7c3a      	ldrb	r2, [r7, #16]
 8001ac2:	7ebb      	ldrb	r3, [r7, #26]
 8001ac4:	3305      	adds	r3, #5
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	dd02      	ble.n	8001ad0 <main+0x598>
									v++;
 8001aca:	7e7b      	ldrb	r3, [r7, #25]
 8001acc:	3301      	adds	r3, #1
 8001ace:	767b      	strb	r3, [r7, #25]
								if (v == 1 && ok1 == 0) {
 8001ad0:	7e7b      	ldrb	r3, [r7, #25]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d106      	bne.n	8001ae4 <main+0x5ac>
 8001ad6:	7d7b      	ldrb	r3, [r7, #21]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d103      	bne.n	8001ae4 <main+0x5ac>
									pos1 = n;
 8001adc:	7c3b      	ldrb	r3, [r7, #16]
 8001ade:	763b      	strb	r3, [r7, #24]
									ok1 = 1;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	757b      	strb	r3, [r7, #21]
								}
								if (v == 2 && ok2 == 0) {
 8001ae4:	7e7b      	ldrb	r3, [r7, #25]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d14a      	bne.n	8001b80 <main+0x648>
 8001aea:	7d3b      	ldrb	r3, [r7, #20]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d147      	bne.n	8001b80 <main+0x648>
									pos2 = n;
 8001af0:	7c3b      	ldrb	r3, [r7, #16]
 8001af2:	75fb      	strb	r3, [r7, #23]
									for (uint8_t count = 0; count < pos2 - pos1;
 8001af4:	2300      	movs	r3, #0
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	e03a      	b.n	8001b70 <main+0x638>
 8001afa:	bf00      	nop
 8001afc:	200002f4 	.word	0x200002f4
 8001b00:	200002f8 	.word	0x200002f8
 8001b04:	200002e4 	.word	0x200002e4
 8001b08:	200002e8 	.word	0x200002e8
 8001b0c:	2000031c 	.word	0x2000031c
 8001b10:	20000324 	.word	0x20000324
 8001b14:	0800d30c 	.word	0x0800d30c
 8001b18:	0800d32c 	.word	0x0800d32c
 8001b1c:	42b40000 	.word	0x42b40000
 8001b20:	43b40000 	.word	0x43b40000
 8001b24:	0800d33c 	.word	0x0800d33c
 8001b28:	200002fc 	.word	0x200002fc
 8001b2c:	20000300 	.word	0x20000300
 8001b30:	20000377 	.word	0x20000377
 8001b34:	0800d300 	.word	0x0800d300
 8001b38:	0800d31c 	.word	0x0800d31c
 8001b3c:	20000320 	.word	0x20000320
 8001b40:	20000328 	.word	0x20000328
 8001b44:	0800d34c 	.word	0x0800d34c
 8001b48:	0800d35c 	.word	0x0800d35c
 8001b4c:	20000376 	.word	0x20000376
 8001b50:	20000464 	.word	0x20000464
 8001b54:	20000240 	.word	0x20000240
											count++)
										TIME[count] = RX1_BUF[pos1 + count + 1];
 8001b58:	7e3a      	ldrb	r2, [r7, #24]
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	4987      	ldr	r1, [pc, #540]	; (8001d80 <main+0x848>)
 8001b64:	5c89      	ldrb	r1, [r1, r2]
 8001b66:	4a87      	ldr	r2, [pc, #540]	; (8001d84 <main+0x84c>)
 8001b68:	54d1      	strb	r1, [r2, r3]
											count++)
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
									for (uint8_t count = 0; count < pos2 - pos1;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	7df9      	ldrb	r1, [r7, #23]
 8001b74:	7e3b      	ldrb	r3, [r7, #24]
 8001b76:	1acb      	subs	r3, r1, r3
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbed      	blt.n	8001b58 <main+0x620>
									ok2 = 1;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	753b      	strb	r3, [r7, #20]
								}
								if (v == 3 && ok3 == 0) {
 8001b80:	7e7b      	ldrb	r3, [r7, #25]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d11b      	bne.n	8001bbe <main+0x686>
 8001b86:	7cfb      	ldrb	r3, [r7, #19]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d118      	bne.n	8001bbe <main+0x686>
									pos3 = n;
 8001b8c:	7c3b      	ldrb	r3, [r7, #16]
 8001b8e:	72fb      	strb	r3, [r7, #11]
									for (uint8_t count = 0; count < pos3 - pos2;
 8001b90:	2300      	movs	r3, #0
 8001b92:	73bb      	strb	r3, [r7, #14]
 8001b94:	e00b      	b.n	8001bae <main+0x676>
											count++)
										LAT[count] = RX1_BUF[pos2 + count + 1];
 8001b96:	7dfa      	ldrb	r2, [r7, #23]
 8001b98:	7bbb      	ldrb	r3, [r7, #14]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ba0:	4977      	ldr	r1, [pc, #476]	; (8001d80 <main+0x848>)
 8001ba2:	5c89      	ldrb	r1, [r1, r2]
 8001ba4:	4a78      	ldr	r2, [pc, #480]	; (8001d88 <main+0x850>)
 8001ba6:	54d1      	strb	r1, [r2, r3]
											count++)
 8001ba8:	7bbb      	ldrb	r3, [r7, #14]
 8001baa:	3301      	adds	r3, #1
 8001bac:	73bb      	strb	r3, [r7, #14]
									for (uint8_t count = 0; count < pos3 - pos2;
 8001bae:	7bba      	ldrb	r2, [r7, #14]
 8001bb0:	7af9      	ldrb	r1, [r7, #11]
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	1acb      	subs	r3, r1, r3
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	dbed      	blt.n	8001b96 <main+0x65e>
									ok3 = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	74fb      	strb	r3, [r7, #19]
								}
								if (v == 4 && ok4 == 0) {
 8001bbe:	7e7b      	ldrb	r3, [r7, #25]
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d106      	bne.n	8001bd2 <main+0x69a>
 8001bc4:	7cbb      	ldrb	r3, [r7, #18]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d103      	bne.n	8001bd2 <main+0x69a>
									pos4 = n;
 8001bca:	7c3b      	ldrb	r3, [r7, #16]
 8001bcc:	75bb      	strb	r3, [r7, #22]
									ok4 = 1;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	74bb      	strb	r3, [r7, #18]
								}
								if (v == 5) {
 8001bd2:	7e7b      	ldrb	r3, [r7, #25]
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	f040 80b4 	bne.w	8001d42 <main+0x80a>
									pos5 = n;
 8001bda:	7c3b      	ldrb	r3, [r7, #16]
 8001bdc:	72bb      	strb	r3, [r7, #10]
									for (uint8_t count2 = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	737b      	strb	r3, [r7, #13]
 8001be2:	e00b      	b.n	8001bfc <main+0x6c4>
											count2 < pos5 - pos4; count2++)
										LONG[count2] =
												RX1_BUF[pos4 + count2 + 1];
 8001be4:	7dba      	ldrb	r2, [r7, #22]
 8001be6:	7b7b      	ldrb	r3, [r7, #13]
 8001be8:	4413      	add	r3, r2
 8001bea:	1c5a      	adds	r2, r3, #1
										LONG[count2] =
 8001bec:	7b7b      	ldrb	r3, [r7, #13]
												RX1_BUF[pos4 + count2 + 1];
 8001bee:	4964      	ldr	r1, [pc, #400]	; (8001d80 <main+0x848>)
 8001bf0:	5c89      	ldrb	r1, [r1, r2]
										LONG[count2] =
 8001bf2:	4a66      	ldr	r2, [pc, #408]	; (8001d8c <main+0x854>)
 8001bf4:	54d1      	strb	r1, [r2, r3]
											count2 < pos5 - pos4; count2++)
 8001bf6:	7b7b      	ldrb	r3, [r7, #13]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	737b      	strb	r3, [r7, #13]
 8001bfc:	7b7a      	ldrb	r2, [r7, #13]
 8001bfe:	7ab9      	ldrb	r1, [r7, #10]
 8001c00:	7dbb      	ldrb	r3, [r7, #22]
 8001c02:	1acb      	subs	r3, r1, r3
									for (uint8_t count2 = 0;
 8001c04:	429a      	cmp	r2, r3
 8001c06:	dbed      	blt.n	8001be4 <main+0x6ac>

									strcpy(TIME, TIME);
									strcpy(LAT, LAT);
									strcpy(LONG, LONG);
									time = atof(TIME);
 8001c08:	485e      	ldr	r0, [pc, #376]	; (8001d84 <main+0x84c>)
 8001c0a:	f006 fad4 	bl	80081b6 <atof>
 8001c0e:	ec54 3b10 	vmov	r3, r4, d0
 8001c12:	4618      	mov	r0, r3
 8001c14:	4621      	mov	r1, r4
 8001c16:	f7fe ff9f 	bl	8000b58 <__aeabi_d2iz>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	4b5c      	ldr	r3, [pc, #368]	; (8001d90 <main+0x858>)
 8001c1e:	601a      	str	r2, [r3, #0]
									ground_lat = calcoor(atof(LAT));
 8001c20:	4859      	ldr	r0, [pc, #356]	; (8001d88 <main+0x850>)
 8001c22:	f006 fac8 	bl	80081b6 <atof>
 8001c26:	ec54 3b10 	vmov	r3, r4, d0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	f7fe ffdb 	bl	8000be8 <__aeabi_d2f>
 8001c32:	4603      	mov	r3, r0
 8001c34:	ee00 3a10 	vmov	s0, r3
 8001c38:	f001 f97c 	bl	8002f34 <calcoor>
 8001c3c:	eef0 7a40 	vmov.f32	s15, s0
 8001c40:	4b54      	ldr	r3, [pc, #336]	; (8001d94 <main+0x85c>)
 8001c42:	edc3 7a00 	vstr	s15, [r3]
									ground_lng = calcoor(atof(LONG));
 8001c46:	4851      	ldr	r0, [pc, #324]	; (8001d8c <main+0x854>)
 8001c48:	f006 fab5 	bl	80081b6 <atof>
 8001c4c:	ec54 3b10 	vmov	r3, r4, d0
 8001c50:	4618      	mov	r0, r3
 8001c52:	4621      	mov	r1, r4
 8001c54:	f7fe ffc8 	bl	8000be8 <__aeabi_d2f>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	ee00 3a10 	vmov	s0, r3
 8001c5e:	f001 f969 	bl	8002f34 <calcoor>
 8001c62:	eef0 7a40 	vmov.f32	s15, s0
 8001c66:	4b4c      	ldr	r3, [pc, #304]	; (8001d98 <main+0x860>)
 8001c68:	edc3 7a00 	vstr	s15, [r3]
									if(ground_lat >= 10. && ground_lng >= 10.){
 8001c6c:	4b49      	ldr	r3, [pc, #292]	; (8001d94 <main+0x85c>)
 8001c6e:	edd3 7a00 	vldr	s15, [r3]
 8001c72:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7e:	db52      	blt.n	8001d26 <main+0x7ee>
 8001c80:	4b45      	ldr	r3, [pc, #276]	; (8001d98 <main+0x860>)
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	db48      	blt.n	8001d26 <main+0x7ee>
									sprintf(COOR, ":%2.7f:%2.7f\n", ground_lat,
 8001c94:	4b3f      	ldr	r3, [pc, #252]	; (8001d94 <main+0x85c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fc55 	bl	8000548 <__aeabi_f2d>
 8001c9e:	4605      	mov	r5, r0
 8001ca0:	460e      	mov	r6, r1
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <main+0x860>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fc4e 	bl	8000548 <__aeabi_f2d>
 8001cac:	4603      	mov	r3, r0
 8001cae:	460c      	mov	r4, r1
 8001cb0:	e9cd 3400 	strd	r3, r4, [sp]
 8001cb4:	462a      	mov	r2, r5
 8001cb6:	4633      	mov	r3, r6
 8001cb8:	4938      	ldr	r1, [pc, #224]	; (8001d9c <main+0x864>)
 8001cba:	4839      	ldr	r0, [pc, #228]	; (8001da0 <main+0x868>)
 8001cbc:	f006 ff0c 	bl	8008ad8 <siprintf>
											ground_lng);
									/*HAL_UART_Transmit(&huart3, (uint8_t*) COOR,
									 sizeof(COOR), 1000);*/
									uint32_t lat0next = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	607b      	str	r3, [r7, #4]
									uint32_t lng0next = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	603b      	str	r3, [r7, #0]
									lat0next = (uint32_t) (ground_lat
											* 10000000.0);
 8001cc8:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <main+0x85c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc3b 	bl	8000548 <__aeabi_f2d>
 8001cd2:	a329      	add	r3, pc, #164	; (adr r3, 8001d78 <main+0x840>)
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	f7fe fc8e 	bl	80005f8 <__aeabi_dmul>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	460c      	mov	r4, r1
									lat0next = (uint32_t) (ground_lat
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	f7fe ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	607b      	str	r3, [r7, #4]
									lng0next = (uint32_t) (ground_lng
											* 10000000.0);
 8001cec:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <main+0x860>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fc29 	bl	8000548 <__aeabi_f2d>
 8001cf6:	a320      	add	r3, pc, #128	; (adr r3, 8001d78 <main+0x840>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe fc7c 	bl	80005f8 <__aeabi_dmul>
 8001d00:	4603      	mov	r3, r0
 8001d02:	460c      	mov	r4, r1
									lng0next = (uint32_t) (ground_lng
 8001d04:	4618      	mov	r0, r3
 8001d06:	4621      	mov	r1, r4
 8001d08:	f7fe ff4e 	bl	8000ba8 <__aeabi_d2uiz>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	603b      	str	r3, [r7, #0]
									NXT_SEND_VAL("page1.x8.val", lat0next);
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4824      	ldr	r0, [pc, #144]	; (8001da4 <main+0x86c>)
 8001d14:	f001 f962 	bl	8002fdc <NXT_SEND_VAL>
									NXT_SEND_VAL("page1.x9.val", lng0next);
 8001d18:	6839      	ldr	r1, [r7, #0]
 8001d1a:	4823      	ldr	r0, [pc, #140]	; (8001da8 <main+0x870>)
 8001d1c:	f001 f95e 	bl	8002fdc <NXT_SEND_VAL>
									cal_dis = 1;
 8001d20:	4b22      	ldr	r3, [pc, #136]	; (8001dac <main+0x874>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
									}
									for (uint8_t c = 0; c < sizeof(RX1_BUF);
 8001d26:	2300      	movs	r3, #0
 8001d28:	733b      	strb	r3, [r7, #12]
 8001d2a:	e006      	b.n	8001d3a <main+0x802>
											c++)
										RX1_BUF[c] = '\0';
 8001d2c:	7b3b      	ldrb	r3, [r7, #12]
 8001d2e:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <main+0x848>)
 8001d30:	2100      	movs	r1, #0
 8001d32:	54d1      	strb	r1, [r2, r3]
											c++)
 8001d34:	7b3b      	ldrb	r3, [r7, #12]
 8001d36:	3301      	adds	r3, #1
 8001d38:	733b      	strb	r3, [r7, #12]
									for (uint8_t c = 0; c < sizeof(RX1_BUF);
 8001d3a:	7b3b      	ldrb	r3, [r7, #12]
 8001d3c:	2b63      	cmp	r3, #99	; 0x63
 8001d3e:	d9f5      	bls.n	8001d2c <main+0x7f4>
									break;
 8001d40:	e007      	b.n	8001d52 <main+0x81a>
							for (uint8_t n = 0; n < sizeof(RX1_BUF); n++) { //  ONEMLI
 8001d42:	7c3b      	ldrb	r3, [r7, #16]
 8001d44:	3301      	adds	r3, #1
 8001d46:	743b      	strb	r3, [r7, #16]
 8001d48:	7c3b      	ldrb	r3, [r7, #16]
 8001d4a:	2b63      	cmp	r3, #99	; 0x63
 8001d4c:	f67f aeb3 	bls.w	8001ab6 <main+0x57e>
								}
							}
							break;
 8001d50:	e009      	b.n	8001d66 <main+0x82e>
 8001d52:	e008      	b.n	8001d66 <main+0x82e>
			for (uint8_t i = 0; i < gps_size; i++) {
 8001d54:	7ebb      	ldrb	r3, [r7, #26]
 8001d56:	3301      	adds	r3, #1
 8001d58:	76bb      	strb	r3, [r7, #26]
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <main+0x878>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	7eba      	ldrb	r2, [r7, #26]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	f4ff ae45 	bcc.w	80019f0 <main+0x4b8>
						}
					}
				}
				gps_size = 0;
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <main+0x878>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
				gps = 0;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <main+0x87c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
		if (mgn == 1) {
 8001d72:	e430      	b.n	80015d6 <main+0x9e>
 8001d74:	f3af 8000 	nop.w
 8001d78:	00000000 	.word	0x00000000
 8001d7c:	416312d0 	.word	0x416312d0
 8001d80:	20000240 	.word	0x20000240
 8001d84:	200002d8 	.word	0x200002d8
 8001d88:	200002a4 	.word	0x200002a4
 8001d8c:	200002b0 	.word	0x200002b0
 8001d90:	200002ec 	.word	0x200002ec
 8001d94:	200002e4 	.word	0x200002e4
 8001d98:	200002e8 	.word	0x200002e8
 8001d9c:	0800d36c 	.word	0x0800d36c
 8001da0:	200002bc 	.word	0x200002bc
 8001da4:	0800d37c 	.word	0x0800d37c
 8001da8:	0800d38c 	.word	0x0800d38c
 8001dac:	20000376 	.word	0x20000376
 8001db0:	20000463 	.word	0x20000463
 8001db4:	20000464 	.word	0x20000464

08001db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b096      	sub	sp, #88	; 0x58
 8001dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dc2:	2228      	movs	r2, #40	; 0x28
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f006 fa22 	bl	8008210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ddc:	463b      	mov	r3, r7
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	611a      	str	r2, [r3, #16]
 8001dea:	615a      	str	r2, [r3, #20]
 8001dec:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001dee:	2303      	movs	r3, #3
 8001df0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001df6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e00:	2310      	movs	r3, #16
 8001e02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e04:	2302      	movs	r3, #2
 8001e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e0e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e12:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 f84d 	bl	8004eb8 <HAL_RCC_OscConfig>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001e24:	f001 f8d2 	bl	8002fcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e28:	230f      	movs	r3, #15
 8001e2a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001e34:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e3e:	f107 031c 	add.w	r3, r7, #28
 8001e42:	2102      	movs	r1, #2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f003 ff3f 	bl	8005cc8 <HAL_RCC_ClockConfig>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001e50:	f001 f8bc 	bl	8002fcc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001e54:	2321      	movs	r3, #33	; 0x21
 8001e56:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e60:	463b      	mov	r3, r7
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 f966 	bl	8006134 <HAL_RCCEx_PeriphCLKConfig>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001e6e:	f001 f8ad 	bl	8002fcc <Error_Handler>
  }
}
 8001e72:	bf00      	nop
 8001e74:	3758      	adds	r7, #88	; 0x58
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001e82:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <MX_I2C1_Init+0x78>)
 8001e84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001e88:	4a1b      	ldr	r2, [pc, #108]	; (8001ef8 <MX_I2C1_Init+0x7c>)
 8001e8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e8c:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e98:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001eb6:	480e      	ldr	r0, [pc, #56]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001eb8:	f002 f880 	bl	8003fbc <HAL_I2C_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ec2:	f001 f883 	bl	8002fcc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4809      	ldr	r0, [pc, #36]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001eca:	f002 ff5d 	bl	8004d88 <HAL_I2CEx_ConfigAnalogFilter>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ed4:	f001 f87a 	bl	8002fcc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001edc:	f002 ff9f 	bl	8004e1e <HAL_I2CEx_ConfigDigitalFilter>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ee6:	f001 f871 	bl	8002fcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000053c 	.word	0x2000053c
 8001ef4:	40005400 	.word	0x40005400
 8001ef8:	2000090e 	.word	0x2000090e

08001efc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f02:	f107 0310 	add.w	r3, r7, #16
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <MX_TIM2_Init+0x98>)
 8001f1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 8001f22:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <MX_TIM2_Init+0x98>)
 8001f24:	f242 3227 	movw	r2, #8999	; 0x2327
 8001f28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <MX_TIM2_Init+0x98>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 139;
 8001f30:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <MX_TIM2_Init+0x98>)
 8001f32:	228b      	movs	r2, #139	; 0x8b
 8001f34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <MX_TIM2_Init+0x98>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <MX_TIM2_Init+0x98>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f42:	4814      	ldr	r0, [pc, #80]	; (8001f94 <MX_TIM2_Init+0x98>)
 8001f44:	f004 fa2c 	bl	80063a0 <HAL_TIM_Base_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f4e:	f001 f83d 	bl	8002fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	480d      	ldr	r0, [pc, #52]	; (8001f94 <MX_TIM2_Init+0x98>)
 8001f60:	f004 fbf1 	bl	8006746 <HAL_TIM_ConfigClockSource>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f6a:	f001 f82f 	bl	8002fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4806      	ldr	r0, [pc, #24]	; (8001f94 <MX_TIM2_Init+0x98>)
 8001f7c:	f004 fde6 	bl	8006b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f86:	f001 f821 	bl	8002fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f8a:	bf00      	nop
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	2000060c 	.word	0x2000060c

08001f98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001f9e:	4a15      	ldr	r2, [pc, #84]	; (8001ff4 <MX_USART1_UART_Init+0x5c>)
 8001fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fa4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fdc:	f004 fe42 	bl	8006c64 <HAL_UART_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001fe6:	f000 fff1 	bl	8002fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000588 	.word	0x20000588
 8001ff4:	40013800 	.word	0x40013800

08001ff8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8001ffe:	4a15      	ldr	r2, [pc, #84]	; (8002054 <MX_USART2_UART_Init+0x5c>)
 8002000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002004:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <MX_USART2_UART_Init+0x58>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_USART2_UART_Init+0x58>)
 800201e:	220c      	movs	r2, #12
 8002020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <MX_USART2_UART_Init+0x58>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002030:	2200      	movs	r2, #0
 8002032:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002036:	2200      	movs	r2, #0
 8002038:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_USART2_UART_Init+0x58>)
 800203c:	f004 fe12 	bl	8006c64 <HAL_UART_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002046:	f000 ffc1 	bl	8002fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000658 	.word	0x20000658
 8002054:	40004400 	.word	0x40004400

08002058 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <MX_USART3_UART_Init+0x58>)
 800205e:	4a15      	ldr	r2, [pc, #84]	; (80020b4 <MX_USART3_UART_Init+0x5c>)
 8002060:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002062:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <MX_USART3_UART_Init+0x58>)
 8002064:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002068:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <MX_USART3_UART_Init+0x58>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <MX_USART3_UART_Init+0x58>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <MX_USART3_UART_Init+0x58>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <MX_USART3_UART_Init+0x58>)
 800207e:	220c      	movs	r2, #12
 8002080:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <MX_USART3_UART_Init+0x58>)
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <MX_USART3_UART_Init+0x58>)
 800208a:	2200      	movs	r2, #0
 800208c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <MX_USART3_UART_Init+0x58>)
 8002090:	2200      	movs	r2, #0
 8002092:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <MX_USART3_UART_Init+0x58>)
 8002096:	2200      	movs	r2, #0
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800209a:	4805      	ldr	r0, [pc, #20]	; (80020b0 <MX_USART3_UART_Init+0x58>)
 800209c:	f004 fde2 	bl	8006c64 <HAL_UART_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020a6:	f000 ff91 	bl	8002fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200004b8 	.word	0x200004b8
 80020b4:	40004800 	.word	0x40004800

080020b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	60da      	str	r2, [r3, #12]
 80020cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ce:	4b28      	ldr	r3, [pc, #160]	; (8002170 <MX_GPIO_Init+0xb8>)
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	4a27      	ldr	r2, [pc, #156]	; (8002170 <MX_GPIO_Init+0xb8>)
 80020d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020d8:	6153      	str	r3, [r2, #20]
 80020da:	4b25      	ldr	r3, [pc, #148]	; (8002170 <MX_GPIO_Init+0xb8>)
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e6:	4b22      	ldr	r3, [pc, #136]	; (8002170 <MX_GPIO_Init+0xb8>)
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	4a21      	ldr	r2, [pc, #132]	; (8002170 <MX_GPIO_Init+0xb8>)
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f0:	6153      	str	r3, [r2, #20]
 80020f2:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <MX_GPIO_Init+0xb8>)
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <MX_GPIO_Init+0xb8>)
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	4a1b      	ldr	r2, [pc, #108]	; (8002170 <MX_GPIO_Init+0xb8>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002108:	6153      	str	r3, [r2, #20]
 800210a:	4b19      	ldr	r3, [pc, #100]	; (8002170 <MX_GPIO_Init+0xb8>)
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M0_Pin|M1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002116:	2200      	movs	r2, #0
 8002118:	2183      	movs	r1, #131	; 0x83
 800211a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800211e:	f001 ff1b 	bl	8003f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8002122:	2200      	movs	r2, #0
 8002124:	2111      	movs	r1, #17
 8002126:	4813      	ldr	r0, [pc, #76]	; (8002174 <MX_GPIO_Init+0xbc>)
 8002128:	f001 ff16 	bl	8003f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M0_Pin M1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|LED2_Pin;
 800212c:	2383      	movs	r3, #131	; 0x83
 800212e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002130:	2301      	movs	r3, #1
 8002132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	4619      	mov	r1, r3
 8002142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002146:	f001 fd95 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BUZZER_Pin;
 800214a:	2311      	movs	r3, #17
 800214c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214e:	2301      	movs	r3, #1
 8002150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215a:	f107 030c 	add.w	r3, r7, #12
 800215e:	4619      	mov	r1, r3
 8002160:	4804      	ldr	r0, [pc, #16]	; (8002174 <MX_GPIO_Init+0xbc>)
 8002162:	f001 fd87 	bl	8003c74 <HAL_GPIO_Init>

}
 8002166:	bf00      	nop
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	48000400 	.word	0x48000400

08002178 <LORA_CONFG>:

/* USER CODE BEGIN 4 */
void LORA_CONFG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	4604      	mov	r4, r0
 8002180:	4608      	mov	r0, r1
 8002182:	4611      	mov	r1, r2
 8002184:	461a      	mov	r2, r3
 8002186:	4623      	mov	r3, r4
 8002188:	71fb      	strb	r3, [r7, #7]
 800218a:	4603      	mov	r3, r0
 800218c:	71bb      	strb	r3, [r7, #6]
 800218e:	460b      	mov	r3, r1
 8002190:	717b      	strb	r3, [r7, #5]
 8002192:	4613      	mov	r3, r2
 8002194:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 8002196:	2201      	movs	r2, #1
 8002198:	2101      	movs	r1, #1
 800219a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219e:	f001 fedb 	bl	8003f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 80021a2:	2201      	movs	r2, #1
 80021a4:	2102      	movs	r1, #2
 80021a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021aa:	f001 fed5 	bl	8003f58 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80021ae:	2032      	movs	r0, #50	; 0x32
 80021b0:	f001 fbb6 	bl	8003920 <HAL_Delay>

	char cfg_buff[6] = {0};
 80021b4:	f107 0308 	add.w	r3, r7, #8
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	809a      	strh	r2, [r3, #4]
	enum lora{Transparent, Fixed} mode;
	mode = MODE;
 80021be:	793b      	ldrb	r3, [r7, #4]
 80021c0:	73fb      	strb	r3, [r7, #15]

	cfg_buff[0] = 0xC0;  // header for saving paramater when power down C0
 80021c2:	23c0      	movs	r3, #192	; 0xc0
 80021c4:	723b      	strb	r3, [r7, #8]
	cfg_buff[1] = ADDH;  // high address
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	727b      	strb	r3, [r7, #9]
	cfg_buff[2] = ADDL;  // low address
 80021ca:	79bb      	ldrb	r3, [r7, #6]
 80021cc:	72bb      	strb	r3, [r7, #10]
	cfg_buff[3] = 0x19;  // SPED (parity, baud, data rate)
 80021ce:	2319      	movs	r3, #25
 80021d0:	72fb      	strb	r3, [r7, #11]
	cfg_buff[4] = CHN;   // channel
 80021d2:	797b      	ldrb	r3, [r7, #5]
 80021d4:	733b      	strb	r3, [r7, #12]

	switch(mode){
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <LORA_CONFG+0x6a>
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d003      	beq.n	80021e8 <LORA_CONFG+0x70>
 80021e0:	e005      	b.n	80021ee <LORA_CONFG+0x76>
	case Transparent:
		cfg_buff[5] = 0x44;  // option
 80021e2:	2344      	movs	r3, #68	; 0x44
 80021e4:	737b      	strb	r3, [r7, #13]
		break;
 80021e6:	e004      	b.n	80021f2 <LORA_CONFG+0x7a>
	case Fixed:
		cfg_buff[5] = 0xC4;  // option
 80021e8:	23c4      	movs	r3, #196	; 0xc4
 80021ea:	737b      	strb	r3, [r7, #13]
		break;
 80021ec:	e001      	b.n	80021f2 <LORA_CONFG+0x7a>
	default:
		cfg_buff[5] = 0x44;  // option
 80021ee:	2344      	movs	r3, #68	; 0x44
 80021f0:	737b      	strb	r3, [r7, #13]
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) cfg_buff, 6, 1000);
 80021f2:	f107 0108 	add.w	r1, r7, #8
 80021f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fa:	2206      	movs	r2, #6
 80021fc:	480c      	ldr	r0, [pc, #48]	; (8002230 <LORA_CONFG+0xb8>)
 80021fe:	f004 fd7f 	bl	8006d00 <HAL_UART_Transmit>

	HAL_Delay(25);
 8002202:	2019      	movs	r0, #25
 8002204:	f001 fb8c 	bl	8003920 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 8002208:	2200      	movs	r2, #0
 800220a:	2101      	movs	r1, #1
 800220c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002210:	f001 fea2 	bl	8003f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8002214:	2200      	movs	r2, #0
 8002216:	2102      	movs	r1, #2
 8002218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221c:	f001 fe9c 	bl	8003f58 <HAL_GPIO_WritePin>
	HAL_Delay(25);
 8002220:	2019      	movs	r0, #25
 8002222:	f001 fb7d 	bl	8003920 <HAL_Delay>
}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bd90      	pop	{r4, r7, pc}
 800222e:	bf00      	nop
 8002230:	20000658 	.word	0x20000658

08002234 <LORA_READ_PARAMETER>:

void LORA_READ_PARAMETER()
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 800223a:	2201      	movs	r2, #1
 800223c:	2101      	movs	r1, #1
 800223e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002242:	f001 fe89 	bl	8003f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8002246:	2201      	movs	r2, #1
 8002248:	2102      	movs	r1, #2
 800224a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224e:	f001 fe83 	bl	8003f58 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002252:	2032      	movs	r0, #50	; 0x32
 8002254:	f001 fb64 	bl	8003920 <HAL_Delay>

	char buff_read[6] = {0};
 8002258:	463b      	mov	r3, r7
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	809a      	strh	r2, [r3, #4]
	buff_read[0] = 0xC1;
 8002260:	23c1      	movs	r3, #193	; 0xc1
 8002262:	703b      	strb	r3, [r7, #0]
	buff_read[1] = 0xC1;
 8002264:	23c1      	movs	r3, #193	; 0xc1
 8002266:	707b      	strb	r3, [r7, #1]
	buff_read[2] = 0xC1;
 8002268:	23c1      	movs	r3, #193	; 0xc1
 800226a:	70bb      	strb	r3, [r7, #2]

	HAL_UART_Transmit(&huart2, (uint8_t*) buff_read, 3, 1000);
 800226c:	4639      	mov	r1, r7
 800226e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002272:	2203      	movs	r2, #3
 8002274:	480f      	ldr	r0, [pc, #60]	; (80022b4 <LORA_READ_PARAMETER+0x80>)
 8002276:	f004 fd43 	bl	8006d00 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*) buff_read, 6, 1000);
 800227a:	4639      	mov	r1, r7
 800227c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002280:	2206      	movs	r2, #6
 8002282:	480c      	ldr	r0, [pc, #48]	; (80022b4 <LORA_READ_PARAMETER+0x80>)
 8002284:	f004 fdd0 	bl	8006e28 <HAL_UART_Receive>

	HAL_Delay(25);
 8002288:	2019      	movs	r0, #25
 800228a:	f001 fb49 	bl	8003920 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	2101      	movs	r1, #1
 8002292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002296:	f001 fe5f 	bl	8003f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	2102      	movs	r1, #2
 800229e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a2:	f001 fe59 	bl	8003f58 <HAL_GPIO_WritePin>
	HAL_Delay(25);
 80022a6:	2019      	movs	r0, #25
 80022a8:	f001 fb3a 	bl	8003920 <HAL_Delay>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000658 	.word	0x20000658

080022b8 <Data_Parsing>:

void Data_Parsing(void) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
	uint8_t first = 0, second = 0, countstr = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	71fb      	strb	r3, [r7, #7]
 80022c2:	2300      	movs	r3, #0
 80022c4:	71bb      	strb	r3, [r7, #6]
 80022c6:	2300      	movs	r3, #0
 80022c8:	717b      	strb	r3, [r7, #5]
	for (uint8_t i = 0; i < sizeof(NEXT_BUFF); i++) {
 80022ca:	2300      	movs	r3, #0
 80022cc:	713b      	strb	r3, [r7, #4]
 80022ce:	e083      	b.n	80023d8 <Data_Parsing+0x120>
		if (NEXT_BUFF[i] == ':') {
 80022d0:	793b      	ldrb	r3, [r7, #4]
 80022d2:	4a4f      	ldr	r2, [pc, #316]	; (8002410 <Data_Parsing+0x158>)
 80022d4:	5cd3      	ldrb	r3, [r2, r3]
 80022d6:	2b3a      	cmp	r3, #58	; 0x3a
 80022d8:	d17b      	bne.n	80023d2 <Data_Parsing+0x11a>
			first = second;
 80022da:	79bb      	ldrb	r3, [r7, #6]
 80022dc:	71fb      	strb	r3, [r7, #7]
			second = i;
 80022de:	793b      	ldrb	r3, [r7, #4]
 80022e0:	71bb      	strb	r3, [r7, #6]
			countstr++;
 80022e2:	797b      	ldrb	r3, [r7, #5]
 80022e4:	3301      	adds	r3, #1
 80022e6:	717b      	strb	r3, [r7, #5]
			uint8_t countstr1 = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	70fb      	strb	r3, [r7, #3]
			for (first++; first < second; first++) {
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	3301      	adds	r3, #1
 80022f0:	71fb      	strb	r3, [r7, #7]
 80022f2:	e06a      	b.n	80023ca <Data_Parsing+0x112>
				switch (countstr) {
 80022f4:	797b      	ldrb	r3, [r7, #5]
 80022f6:	3b02      	subs	r3, #2
 80022f8:	2b07      	cmp	r3, #7
 80022fa:	d863      	bhi.n	80023c4 <Data_Parsing+0x10c>
 80022fc:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <Data_Parsing+0x4c>)
 80022fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002302:	bf00      	nop
 8002304:	08002325 	.word	0x08002325
 8002308:	08002339 	.word	0x08002339
 800230c:	0800234d 	.word	0x0800234d
 8002310:	08002361 	.word	0x08002361
 8002314:	08002375 	.word	0x08002375
 8002318:	08002389 	.word	0x08002389
 800231c:	0800239d 	.word	0x0800239d
 8002320:	080023b1 	.word	0x080023b1
				case 2:
					sn[countstr1] = NEXT_BUFF[first];
 8002324:	79fa      	ldrb	r2, [r7, #7]
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	4939      	ldr	r1, [pc, #228]	; (8002410 <Data_Parsing+0x158>)
 800232a:	5c89      	ldrb	r1, [r1, r2]
 800232c:	4a39      	ldr	r2, [pc, #228]	; (8002414 <Data_Parsing+0x15c>)
 800232e:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	3301      	adds	r3, #1
 8002334:	70fb      	strb	r3, [r7, #3]
					break;
 8002336:	e045      	b.n	80023c4 <Data_Parsing+0x10c>
				case 3:
					lat1[countstr1] = NEXT_BUFF[first];
 8002338:	79fa      	ldrb	r2, [r7, #7]
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	4934      	ldr	r1, [pc, #208]	; (8002410 <Data_Parsing+0x158>)
 800233e:	5c89      	ldrb	r1, [r1, r2]
 8002340:	4a35      	ldr	r2, [pc, #212]	; (8002418 <Data_Parsing+0x160>)
 8002342:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	3301      	adds	r3, #1
 8002348:	70fb      	strb	r3, [r7, #3]
					break;
 800234a:	e03b      	b.n	80023c4 <Data_Parsing+0x10c>
				case 4:
					lng1[countstr1] = NEXT_BUFF[first];
 800234c:	79fa      	ldrb	r2, [r7, #7]
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	492f      	ldr	r1, [pc, #188]	; (8002410 <Data_Parsing+0x158>)
 8002352:	5c89      	ldrb	r1, [r1, r2]
 8002354:	4a31      	ldr	r2, [pc, #196]	; (800241c <Data_Parsing+0x164>)
 8002356:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	3301      	adds	r3, #1
 800235c:	70fb      	strb	r3, [r7, #3]
					break;
 800235e:	e031      	b.n	80023c4 <Data_Parsing+0x10c>
				case 5:
					alt[countstr1] = NEXT_BUFF[first];
 8002360:	79fa      	ldrb	r2, [r7, #7]
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	492a      	ldr	r1, [pc, #168]	; (8002410 <Data_Parsing+0x158>)
 8002366:	5c89      	ldrb	r1, [r1, r2]
 8002368:	4a2d      	ldr	r2, [pc, #180]	; (8002420 <Data_Parsing+0x168>)
 800236a:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	3301      	adds	r3, #1
 8002370:	70fb      	strb	r3, [r7, #3]
					break;
 8002372:	e027      	b.n	80023c4 <Data_Parsing+0x10c>
				case 6:
					vlc[countstr1] = NEXT_BUFF[first];
 8002374:	79fa      	ldrb	r2, [r7, #7]
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	4925      	ldr	r1, [pc, #148]	; (8002410 <Data_Parsing+0x158>)
 800237a:	5c89      	ldrb	r1, [r1, r2]
 800237c:	4a29      	ldr	r2, [pc, #164]	; (8002424 <Data_Parsing+0x16c>)
 800237e:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	3301      	adds	r3, #1
 8002384:	70fb      	strb	r3, [r7, #3]
					break;
 8002386:	e01d      	b.n	80023c4 <Data_Parsing+0x10c>
				case 7:
					rollpitch[countstr1] = NEXT_BUFF[first];
 8002388:	79fa      	ldrb	r2, [r7, #7]
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	4920      	ldr	r1, [pc, #128]	; (8002410 <Data_Parsing+0x158>)
 800238e:	5c89      	ldrb	r1, [r1, r2]
 8002390:	4a25      	ldr	r2, [pc, #148]	; (8002428 <Data_Parsing+0x170>)
 8002392:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	3301      	adds	r3, #1
 8002398:	70fb      	strb	r3, [r7, #3]
					break;
 800239a:	e013      	b.n	80023c4 <Data_Parsing+0x10c>
				case 8:
					apg[countstr1] = NEXT_BUFF[first];
 800239c:	79fa      	ldrb	r2, [r7, #7]
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	491b      	ldr	r1, [pc, #108]	; (8002410 <Data_Parsing+0x158>)
 80023a2:	5c89      	ldrb	r1, [r1, r2]
 80023a4:	4a21      	ldr	r2, [pc, #132]	; (800242c <Data_Parsing+0x174>)
 80023a6:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	3301      	adds	r3, #1
 80023ac:	70fb      	strb	r3, [r7, #3]
					break;
 80023ae:	e009      	b.n	80023c4 <Data_Parsing+0x10c>
				case 9:
					mn[countstr1] = NEXT_BUFF[first];
 80023b0:	79fa      	ldrb	r2, [r7, #7]
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	4916      	ldr	r1, [pc, #88]	; (8002410 <Data_Parsing+0x158>)
 80023b6:	5c89      	ldrb	r1, [r1, r2]
 80023b8:	4a1d      	ldr	r2, [pc, #116]	; (8002430 <Data_Parsing+0x178>)
 80023ba:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	3301      	adds	r3, #1
 80023c0:	70fb      	strb	r3, [r7, #3]
					break;
 80023c2:	bf00      	nop
			for (first++; first < second; first++) {
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	3301      	adds	r3, #1
 80023c8:	71fb      	strb	r3, [r7, #7]
 80023ca:	79fa      	ldrb	r2, [r7, #7]
 80023cc:	79bb      	ldrb	r3, [r7, #6]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d390      	bcc.n	80022f4 <Data_Parsing+0x3c>
	for (uint8_t i = 0; i < sizeof(NEXT_BUFF); i++) {
 80023d2:	793b      	ldrb	r3, [r7, #4]
 80023d4:	3301      	adds	r3, #1
 80023d6:	713b      	strb	r3, [r7, #4]
 80023d8:	793b      	ldrb	r3, [r7, #4]
 80023da:	2b63      	cmp	r3, #99	; 0x63
 80023dc:	f67f af78 	bls.w	80022d0 <Data_Parsing+0x18>
				}
			}
		}
	}

	ID = NEXT_BUFF[0];
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <Data_Parsing+0x158>)
 80023e2:	781a      	ldrb	r2, [r3, #0]
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <Data_Parsing+0x17c>)
 80023e6:	701a      	strb	r2, [r3, #0]

	Data_Convert();
 80023e8:	f000 f826 	bl	8002438 <Data_Convert>
	for (uint8_t i = 0; i < sizeof(NEXT_BUFF); i++)
 80023ec:	2300      	movs	r3, #0
 80023ee:	70bb      	strb	r3, [r7, #2]
 80023f0:	e006      	b.n	8002400 <Data_Parsing+0x148>
		NEXT_BUFF[i] = '\0';
 80023f2:	78bb      	ldrb	r3, [r7, #2]
 80023f4:	4a06      	ldr	r2, [pc, #24]	; (8002410 <Data_Parsing+0x158>)
 80023f6:	2100      	movs	r1, #0
 80023f8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < sizeof(NEXT_BUFF); i++)
 80023fa:	78bb      	ldrb	r3, [r7, #2]
 80023fc:	3301      	adds	r3, #1
 80023fe:	70bb      	strb	r3, [r7, #2]
 8002400:	78bb      	ldrb	r3, [r7, #2]
 8002402:	2b63      	cmp	r3, #99	; 0x63
 8002404:	d9f5      	bls.n	80023f2 <Data_Parsing+0x13a>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200003f4 	.word	0x200003f4
 8002414:	20000334 	.word	0x20000334
 8002418:	20000338 	.word	0x20000338
 800241c:	20000344 	.word	0x20000344
 8002420:	20000350 	.word	0x20000350
 8002424:	20000358 	.word	0x20000358
 8002428:	20000360 	.word	0x20000360
 800242c:	20000370 	.word	0x20000370
 8002430:	20000374 	.word	0x20000374
 8002434:	20000331 	.word	0x20000331

08002438 <Data_Convert>:

void Data_Convert(void) {
 8002438:	b598      	push	{r3, r4, r7, lr}
 800243a:	af00      	add	r7, sp, #0
	finding_maxmin();
 800243c:	f000 f9e6 	bl	800280c <finding_maxmin>

	if (ID == '0') {
 8002440:	4b47      	ldr	r3, [pc, #284]	; (8002560 <Data_Convert+0x128>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b30      	cmp	r3, #48	; 0x30
 8002446:	d118      	bne.n	800247a <Data_Convert+0x42>
		strcpy(lat1, lat1);
		strcpy(lng1, lng1);
		EPH_lat = atof(lat1);
 8002448:	4846      	ldr	r0, [pc, #280]	; (8002564 <Data_Convert+0x12c>)
 800244a:	f005 feb4 	bl	80081b6 <atof>
 800244e:	ec54 3b10 	vmov	r3, r4, d0
 8002452:	4618      	mov	r0, r3
 8002454:	4621      	mov	r1, r4
 8002456:	f7fe fbc7 	bl	8000be8 <__aeabi_d2f>
 800245a:	4602      	mov	r2, r0
 800245c:	4b42      	ldr	r3, [pc, #264]	; (8002568 <Data_Convert+0x130>)
 800245e:	601a      	str	r2, [r3, #0]
		EPH_lng = atof(lng1);
 8002460:	4842      	ldr	r0, [pc, #264]	; (800256c <Data_Convert+0x134>)
 8002462:	f005 fea8 	bl	80081b6 <atof>
 8002466:	ec54 3b10 	vmov	r3, r4, d0
 800246a:	4618      	mov	r0, r3
 800246c:	4621      	mov	r1, r4
 800246e:	f7fe fbbb 	bl	8000be8 <__aeabi_d2f>
 8002472:	4602      	mov	r2, r0
 8002474:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <Data_Convert+0x138>)
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e01b      	b.n	80024b2 <Data_Convert+0x7a>
	} else if (ID == '1') {
 800247a:	4b39      	ldr	r3, [pc, #228]	; (8002560 <Data_Convert+0x128>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b31      	cmp	r3, #49	; 0x31
 8002480:	d117      	bne.n	80024b2 <Data_Convert+0x7a>
		strcpy(lat1, lat1);
		strcpy(lng1, lng1);
		PL_lat = atof(lat1);
 8002482:	4838      	ldr	r0, [pc, #224]	; (8002564 <Data_Convert+0x12c>)
 8002484:	f005 fe97 	bl	80081b6 <atof>
 8002488:	ec54 3b10 	vmov	r3, r4, d0
 800248c:	4618      	mov	r0, r3
 800248e:	4621      	mov	r1, r4
 8002490:	f7fe fbaa 	bl	8000be8 <__aeabi_d2f>
 8002494:	4602      	mov	r2, r0
 8002496:	4b37      	ldr	r3, [pc, #220]	; (8002574 <Data_Convert+0x13c>)
 8002498:	601a      	str	r2, [r3, #0]
		PL_lng = atof(lng1);
 800249a:	4834      	ldr	r0, [pc, #208]	; (800256c <Data_Convert+0x134>)
 800249c:	f005 fe8b 	bl	80081b6 <atof>
 80024a0:	ec54 3b10 	vmov	r3, r4, d0
 80024a4:	4618      	mov	r0, r3
 80024a6:	4621      	mov	r1, r4
 80024a8:	f7fe fb9e 	bl	8000be8 <__aeabi_d2f>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b32      	ldr	r3, [pc, #200]	; (8002578 <Data_Convert+0x140>)
 80024b0:	601a      	str	r2, [r3, #0]
	}

	if(vlcf < 0){
 80024b2:	4b32      	ldr	r3, [pc, #200]	; (800257c <Data_Convert+0x144>)
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c0:	d50b      	bpl.n	80024da <Data_Convert+0xa2>
		vlcf *= -1;
 80024c2:	4b2e      	ldr	r3, [pc, #184]	; (800257c <Data_Convert+0x144>)
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	eef1 7a67 	vneg.f32	s15, s15
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <Data_Convert+0x144>)
 80024ce:	edc3 7a00 	vstr	s15, [r3]
		fall = 1;
 80024d2:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <Data_Convert+0x148>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	e002      	b.n	80024e0 <Data_Convert+0xa8>
	}else fall = 0;
 80024da:	4b29      	ldr	r3, [pc, #164]	; (8002580 <Data_Convert+0x148>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]

	speedometer = 336 + (int16_t)((vlcf / 300.0) * 225);
 80024e0:	4b26      	ldr	r3, [pc, #152]	; (800257c <Data_Convert+0x144>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe f82f 	bl	8000548 <__aeabi_f2d>
 80024ea:	a319      	add	r3, pc, #100	; (adr r3, 8002550 <Data_Convert+0x118>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fe f9ac 	bl	800084c <__aeabi_ddiv>
 80024f4:	4603      	mov	r3, r0
 80024f6:	460c      	mov	r4, r1
 80024f8:	4618      	mov	r0, r3
 80024fa:	4621      	mov	r1, r4
 80024fc:	a316      	add	r3, pc, #88	; (adr r3, 8002558 <Data_Convert+0x120>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f7fe f879 	bl	80005f8 <__aeabi_dmul>
 8002506:	4603      	mov	r3, r0
 8002508:	460c      	mov	r4, r1
 800250a:	4618      	mov	r0, r3
 800250c:	4621      	mov	r1, r4
 800250e:	f7fe fb23 	bl	8000b58 <__aeabi_d2iz>
 8002512:	4603      	mov	r3, r0
 8002514:	b21b      	sxth	r3, r3
 8002516:	b29b      	uxth	r3, r3
 8002518:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800251c:	b29b      	uxth	r3, r3
 800251e:	b21a      	sxth	r2, r3
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <Data_Convert+0x14c>)
 8002522:	801a      	strh	r2, [r3, #0]
	if(speedometer > 360) speedometer -= 360;
 8002524:	4b17      	ldr	r3, [pc, #92]	; (8002584 <Data_Convert+0x14c>)
 8002526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800252a:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800252e:	dd09      	ble.n	8002544 <Data_Convert+0x10c>
 8002530:	4b14      	ldr	r3, [pc, #80]	; (8002584 <Data_Convert+0x14c>)
 8002532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002536:	b29b      	uxth	r3, r3
 8002538:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800253c:	b29b      	uxth	r3, r3
 800253e:	b21a      	sxth	r2, r3
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <Data_Convert+0x14c>)
 8002542:	801a      	strh	r2, [r3, #0]

	Data_ToNextion();
 8002544:	f000 f820 	bl	8002588 <Data_ToNextion>
}
 8002548:	bf00      	nop
 800254a:	bd98      	pop	{r3, r4, r7, pc}
 800254c:	f3af 8000 	nop.w
 8002550:	00000000 	.word	0x00000000
 8002554:	4072c000 	.word	0x4072c000
 8002558:	00000000 	.word	0x00000000
 800255c:	406c2000 	.word	0x406c2000
 8002560:	20000331 	.word	0x20000331
 8002564:	20000338 	.word	0x20000338
 8002568:	200002f4 	.word	0x200002f4
 800256c:	20000344 	.word	0x20000344
 8002570:	200002f8 	.word	0x200002f8
 8002574:	200002fc 	.word	0x200002fc
 8002578:	20000300 	.word	0x20000300
 800257c:	20000378 	.word	0x20000378
 8002580:	20000375 	.word	0x20000375
 8002584:	200003a0 	.word	0x200003a0

08002588 <Data_ToNextion>:

void Data_ToNextion(void) {
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0

	if (EPH_lat != .0 && EPH_lng != .0) {	// EPHEMERISH son enlem, boylam verileri
 800258c:	4b6e      	ldr	r3, [pc, #440]	; (8002748 <Data_ToNextion+0x1c0>)
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259a:	d00f      	beq.n	80025bc <Data_ToNextion+0x34>
 800259c:	4b6b      	ldr	r3, [pc, #428]	; (800274c <Data_ToNextion+0x1c4>)
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025aa:	d007      	beq.n	80025bc <Data_ToNextion+0x34>
		NXT_SEND_TXTBX("page3.t34.txt", lat1);
 80025ac:	4968      	ldr	r1, [pc, #416]	; (8002750 <Data_ToNextion+0x1c8>)
 80025ae:	4869      	ldr	r0, [pc, #420]	; (8002754 <Data_ToNextion+0x1cc>)
 80025b0:	f000 fdf0 	bl	8003194 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page3.t35.txt", lng1);
 80025b4:	4968      	ldr	r1, [pc, #416]	; (8002758 <Data_ToNextion+0x1d0>)
 80025b6:	4869      	ldr	r0, [pc, #420]	; (800275c <Data_ToNextion+0x1d4>)
 80025b8:	f000 fdec 	bl	8003194 <NXT_SEND_TXTBX>
	}
	if (PL_lat != .0 && PL_lng != .0) {		// PAYLOAD son enlem, boylam verileri
 80025bc:	4b68      	ldr	r3, [pc, #416]	; (8002760 <Data_ToNextion+0x1d8>)
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ca:	d00f      	beq.n	80025ec <Data_ToNextion+0x64>
 80025cc:	4b65      	ldr	r3, [pc, #404]	; (8002764 <Data_ToNextion+0x1dc>)
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	d007      	beq.n	80025ec <Data_ToNextion+0x64>
		NXT_SEND_TXTBX("page3.t36.txt", lat1);
 80025dc:	495c      	ldr	r1, [pc, #368]	; (8002750 <Data_ToNextion+0x1c8>)
 80025de:	4862      	ldr	r0, [pc, #392]	; (8002768 <Data_ToNextion+0x1e0>)
 80025e0:	f000 fdd8 	bl	8003194 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page3.t37.txt", lng1);
 80025e4:	495c      	ldr	r1, [pc, #368]	; (8002758 <Data_ToNextion+0x1d0>)
 80025e6:	4861      	ldr	r0, [pc, #388]	; (800276c <Data_ToNextion+0x1e4>)
 80025e8:	f000 fdd4 	bl	8003194 <NXT_SEND_TXTBX>
	}

	if (ID == '1') {
 80025ec:	4b60      	ldr	r3, [pc, #384]	; (8002770 <Data_ToNextion+0x1e8>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b31      	cmp	r3, #49	; 0x31
 80025f2:	d147      	bne.n	8002684 <Data_ToNextion+0xfc>
		NXT_SEND_TXTBX("page1.t14.txt", lat1);
 80025f4:	4956      	ldr	r1, [pc, #344]	; (8002750 <Data_ToNextion+0x1c8>)
 80025f6:	485f      	ldr	r0, [pc, #380]	; (8002774 <Data_ToNextion+0x1ec>)
 80025f8:	f000 fdcc 	bl	8003194 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page1.t15.txt", lng1);
 80025fc:	4956      	ldr	r1, [pc, #344]	; (8002758 <Data_ToNextion+0x1d0>)
 80025fe:	485e      	ldr	r0, [pc, #376]	; (8002778 <Data_ToNextion+0x1f0>)
 8002600:	f000 fdc8 	bl	8003194 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page1.t16.txt", alt);
 8002604:	495d      	ldr	r1, [pc, #372]	; (800277c <Data_ToNextion+0x1f4>)
 8002606:	485e      	ldr	r0, [pc, #376]	; (8002780 <Data_ToNextion+0x1f8>)
 8002608:	f000 fdc4 	bl	8003194 <NXT_SEND_TXTBX>

		NXT_SEND_SVAL("page3.x6.val", PLmax_vlci);
 800260c:	4b5d      	ldr	r3, [pc, #372]	; (8002784 <Data_ToNextion+0x1fc>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4619      	mov	r1, r3
 8002612:	485d      	ldr	r0, [pc, #372]	; (8002788 <Data_ToNextion+0x200>)
 8002614:	f000 fd0e 	bl	8003034 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x7.val", PLmin_vlci);
 8002618:	4b5c      	ldr	r3, [pc, #368]	; (800278c <Data_ToNextion+0x204>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4619      	mov	r1, r3
 800261e:	485c      	ldr	r0, [pc, #368]	; (8002790 <Data_ToNextion+0x208>)
 8002620:	f000 fd08 	bl	8003034 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x5.val", PLmax_alti);
 8002624:	4b5b      	ldr	r3, [pc, #364]	; (8002794 <Data_ToNextion+0x20c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	485b      	ldr	r0, [pc, #364]	; (8002798 <Data_ToNextion+0x210>)
 800262c:	f000 fd02 	bl	8003034 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x11.val", PLmin_alti);
 8002630:	4b5a      	ldr	r3, [pc, #360]	; (800279c <Data_ToNextion+0x214>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4619      	mov	r1, r3
 8002636:	485a      	ldr	r0, [pc, #360]	; (80027a0 <Data_ToNextion+0x218>)
 8002638:	f000 fcfc 	bl	8003034 <NXT_SEND_SVAL>

		NXT_SEND_SVAL("page1.c1.val", 1);
 800263c:	2101      	movs	r1, #1
 800263e:	4859      	ldr	r0, [pc, #356]	; (80027a4 <Data_ToNextion+0x21c>)
 8002640:	f000 fcf8 	bl	8003034 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page1.c0.val", 0);
 8002644:	2100      	movs	r1, #0
 8002646:	4858      	ldr	r0, [pc, #352]	; (80027a8 <Data_ToNextion+0x220>)
 8002648:	f000 fcf4 	bl	8003034 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page1.z3.val", speedometer);
 800264c:	4b57      	ldr	r3, [pc, #348]	; (80027ac <Data_ToNextion+0x224>)
 800264e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002652:	4619      	mov	r1, r3
 8002654:	4856      	ldr	r0, [pc, #344]	; (80027b0 <Data_ToNextion+0x228>)
 8002656:	f000 fced 	bl	8003034 <NXT_SEND_SVAL>
		if (fall == 1) {
 800265a:	4b56      	ldr	r3, [pc, #344]	; (80027b4 <Data_ToNextion+0x22c>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d104      	bne.n	800266c <Data_ToNextion+0xe4>
			NXT_SEND_SVAL("page1.z3.pco", 31);
 8002662:	211f      	movs	r1, #31
 8002664:	4854      	ldr	r0, [pc, #336]	; (80027b8 <Data_ToNextion+0x230>)
 8002666:	f000 fce5 	bl	8003034 <NXT_SEND_SVAL>
 800266a:	e004      	b.n	8002676 <Data_ToNextion+0xee>
		} else {
			NXT_SEND_SVAL("page1.z3.pco", 63488);
 800266c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002670:	4851      	ldr	r0, [pc, #324]	; (80027b8 <Data_ToNextion+0x230>)
 8002672:	f000 fcdf 	bl	8003034 <NXT_SEND_SVAL>
		}

		NXT_SEND_SVAL("page1.x1.val", vlci);
 8002676:	4b51      	ldr	r3, [pc, #324]	; (80027bc <Data_ToNextion+0x234>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4619      	mov	r1, r3
 800267c:	4850      	ldr	r0, [pc, #320]	; (80027c0 <Data_ToNextion+0x238>)
 800267e:	f000 fcd9 	bl	8003034 <NXT_SEND_SVAL>
 8002682:	e05c      	b.n	800273e <Data_ToNextion+0x1b6>

	} else if (ID == '0') {
 8002684:	4b3a      	ldr	r3, [pc, #232]	; (8002770 <Data_ToNextion+0x1e8>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b30      	cmp	r3, #48	; 0x30
 800268a:	d158      	bne.n	800273e <Data_ToNextion+0x1b6>
		NXT_SEND_TXTBX("page1.t8.txt", lat1);
 800268c:	4930      	ldr	r1, [pc, #192]	; (8002750 <Data_ToNextion+0x1c8>)
 800268e:	484d      	ldr	r0, [pc, #308]	; (80027c4 <Data_ToNextion+0x23c>)
 8002690:	f000 fd80 	bl	8003194 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page1.t9.txt", lng1);
 8002694:	4930      	ldr	r1, [pc, #192]	; (8002758 <Data_ToNextion+0x1d0>)
 8002696:	484c      	ldr	r0, [pc, #304]	; (80027c8 <Data_ToNextion+0x240>)
 8002698:	f000 fd7c 	bl	8003194 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page1.t13.txt", alt);
 800269c:	4937      	ldr	r1, [pc, #220]	; (800277c <Data_ToNextion+0x1f4>)
 800269e:	484b      	ldr	r0, [pc, #300]	; (80027cc <Data_ToNextion+0x244>)
 80026a0:	f000 fd78 	bl	8003194 <NXT_SEND_TXTBX>

		NXT_SEND_SVAL("page3.x3.val", EPHmax_vlci);
 80026a4:	4b4a      	ldr	r3, [pc, #296]	; (80027d0 <Data_ToNextion+0x248>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	484a      	ldr	r0, [pc, #296]	; (80027d4 <Data_ToNextion+0x24c>)
 80026ac:	f000 fcc2 	bl	8003034 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x4.val", EPHmin_vlci);
 80026b0:	4b49      	ldr	r3, [pc, #292]	; (80027d8 <Data_ToNextion+0x250>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	4849      	ldr	r0, [pc, #292]	; (80027dc <Data_ToNextion+0x254>)
 80026b8:	f000 fcbc 	bl	8003034 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x2.val", EPHmax_alti);
 80026bc:	4b48      	ldr	r3, [pc, #288]	; (80027e0 <Data_ToNextion+0x258>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4619      	mov	r1, r3
 80026c2:	4848      	ldr	r0, [pc, #288]	; (80027e4 <Data_ToNextion+0x25c>)
 80026c4:	f000 fcb6 	bl	8003034 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x10.val", EPHmin_alti);  // PLmin_alti  EPHmin_alti
 80026c8:	4b47      	ldr	r3, [pc, #284]	; (80027e8 <Data_ToNextion+0x260>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	4847      	ldr	r0, [pc, #284]	; (80027ec <Data_ToNextion+0x264>)
 80026d0:	f000 fcb0 	bl	8003034 <NXT_SEND_SVAL>

		NXT_SEND_SVAL("page1.c1.val", 0);
 80026d4:	2100      	movs	r1, #0
 80026d6:	4833      	ldr	r0, [pc, #204]	; (80027a4 <Data_ToNextion+0x21c>)
 80026d8:	f000 fcac 	bl	8003034 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page1.c0.val", 1);
 80026dc:	2101      	movs	r1, #1
 80026de:	4832      	ldr	r0, [pc, #200]	; (80027a8 <Data_ToNextion+0x220>)
 80026e0:	f000 fca8 	bl	8003034 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page1.z4.val", speedometer);
 80026e4:	4b31      	ldr	r3, [pc, #196]	; (80027ac <Data_ToNextion+0x224>)
 80026e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ea:	4619      	mov	r1, r3
 80026ec:	4840      	ldr	r0, [pc, #256]	; (80027f0 <Data_ToNextion+0x268>)
 80026ee:	f000 fca1 	bl	8003034 <NXT_SEND_SVAL>
		if (fall == 1) {
 80026f2:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <Data_ToNextion+0x22c>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d104      	bne.n	8002704 <Data_ToNextion+0x17c>
			NXT_SEND_SVAL("page1.z4.pco", 31);
 80026fa:	211f      	movs	r1, #31
 80026fc:	483d      	ldr	r0, [pc, #244]	; (80027f4 <Data_ToNextion+0x26c>)
 80026fe:	f000 fc99 	bl	8003034 <NXT_SEND_SVAL>
 8002702:	e004      	b.n	800270e <Data_ToNextion+0x186>
		} else {
			NXT_SEND_SVAL("page1.z4.pco", 63488);
 8002704:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002708:	483a      	ldr	r0, [pc, #232]	; (80027f4 <Data_ToNextion+0x26c>)
 800270a:	f000 fc93 	bl	8003034 <NXT_SEND_SVAL>
		}

		NXT_SEND_SVAL("page1.x0.val", vlci);
 800270e:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <Data_ToNextion+0x234>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4619      	mov	r1, r3
 8002714:	4838      	ldr	r0, [pc, #224]	; (80027f8 <Data_ToNextion+0x270>)
 8002716:	f000 fc8d 	bl	8003034 <NXT_SEND_SVAL>

		if (*apg == '1') {
 800271a:	4b38      	ldr	r3, [pc, #224]	; (80027fc <Data_ToNextion+0x274>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b31      	cmp	r3, #49	; 0x31
 8002720:	d104      	bne.n	800272c <Data_ToNextion+0x1a4>
			NXT_SEND_SVAL("page1.t10.bco", 63488);
 8002722:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002726:	4836      	ldr	r0, [pc, #216]	; (8002800 <Data_ToNextion+0x278>)
 8002728:	f000 fc84 	bl	8003034 <NXT_SEND_SVAL>
		}
		if (*mn == '1') {
 800272c:	4b35      	ldr	r3, [pc, #212]	; (8002804 <Data_ToNextion+0x27c>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b31      	cmp	r3, #49	; 0x31
 8002732:	d104      	bne.n	800273e <Data_ToNextion+0x1b6>
			NXT_SEND_SVAL("page1.t11.bco", 63488);
 8002734:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002738:	4833      	ldr	r0, [pc, #204]	; (8002808 <Data_ToNextion+0x280>)
 800273a:	f000 fc7b 	bl	8003034 <NXT_SEND_SVAL>
		}

	}

	ID = '\0';
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <Data_ToNextion+0x1e8>)
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]

}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}
 8002748:	200002f4 	.word	0x200002f4
 800274c:	200002f8 	.word	0x200002f8
 8002750:	20000338 	.word	0x20000338
 8002754:	0800d39c 	.word	0x0800d39c
 8002758:	20000344 	.word	0x20000344
 800275c:	0800d3ac 	.word	0x0800d3ac
 8002760:	200002fc 	.word	0x200002fc
 8002764:	20000300 	.word	0x20000300
 8002768:	0800d3bc 	.word	0x0800d3bc
 800276c:	0800d3cc 	.word	0x0800d3cc
 8002770:	20000331 	.word	0x20000331
 8002774:	0800d3dc 	.word	0x0800d3dc
 8002778:	0800d3ec 	.word	0x0800d3ec
 800277c:	20000350 	.word	0x20000350
 8002780:	0800d3fc 	.word	0x0800d3fc
 8002784:	20000398 	.word	0x20000398
 8002788:	0800d40c 	.word	0x0800d40c
 800278c:	2000039c 	.word	0x2000039c
 8002790:	0800d41c 	.word	0x0800d41c
 8002794:	20000394 	.word	0x20000394
 8002798:	0800d42c 	.word	0x0800d42c
 800279c:	20000010 	.word	0x20000010
 80027a0:	0800d43c 	.word	0x0800d43c
 80027a4:	0800d44c 	.word	0x0800d44c
 80027a8:	0800d45c 	.word	0x0800d45c
 80027ac:	200003a0 	.word	0x200003a0
 80027b0:	0800d46c 	.word	0x0800d46c
 80027b4:	20000375 	.word	0x20000375
 80027b8:	0800d47c 	.word	0x0800d47c
 80027bc:	20000384 	.word	0x20000384
 80027c0:	0800d48c 	.word	0x0800d48c
 80027c4:	0800d49c 	.word	0x0800d49c
 80027c8:	0800d4ac 	.word	0x0800d4ac
 80027cc:	0800d4bc 	.word	0x0800d4bc
 80027d0:	2000038c 	.word	0x2000038c
 80027d4:	0800d4cc 	.word	0x0800d4cc
 80027d8:	20000390 	.word	0x20000390
 80027dc:	0800d4dc 	.word	0x0800d4dc
 80027e0:	20000388 	.word	0x20000388
 80027e4:	0800d4ec 	.word	0x0800d4ec
 80027e8:	20000014 	.word	0x20000014
 80027ec:	0800d4fc 	.word	0x0800d4fc
 80027f0:	0800d50c 	.word	0x0800d50c
 80027f4:	0800d51c 	.word	0x0800d51c
 80027f8:	0800d52c 	.word	0x0800d52c
 80027fc:	20000370 	.word	0x20000370
 8002800:	0800d53c 	.word	0x0800d53c
 8002804:	20000374 	.word	0x20000374
 8002808:	0800d54c 	.word	0x0800d54c

0800280c <finding_maxmin>:

void finding_maxmin(void) {
 800280c:	b598      	push	{r3, r4, r7, lr}
 800280e:	af00      	add	r7, sp, #0
	strcpy(vlc, vlc);
	vlcf = atof(vlc);
 8002810:	484c      	ldr	r0, [pc, #304]	; (8002944 <finding_maxmin+0x138>)
 8002812:	f005 fcd0 	bl	80081b6 <atof>
 8002816:	ec54 3b10 	vmov	r3, r4, d0
 800281a:	4618      	mov	r0, r3
 800281c:	4621      	mov	r1, r4
 800281e:	f7fe f9e3 	bl	8000be8 <__aeabi_d2f>
 8002822:	4602      	mov	r2, r0
 8002824:	4b48      	ldr	r3, [pc, #288]	; (8002948 <finding_maxmin+0x13c>)
 8002826:	601a      	str	r2, [r3, #0]
	vlci = (int) (vlcf * 100.0);
 8002828:	4b47      	ldr	r3, [pc, #284]	; (8002948 <finding_maxmin+0x13c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd fe8b 	bl	8000548 <__aeabi_f2d>
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	4b45      	ldr	r3, [pc, #276]	; (800294c <finding_maxmin+0x140>)
 8002838:	f7fd fede 	bl	80005f8 <__aeabi_dmul>
 800283c:	4603      	mov	r3, r0
 800283e:	460c      	mov	r4, r1
 8002840:	4618      	mov	r0, r3
 8002842:	4621      	mov	r1, r4
 8002844:	f7fe f988 	bl	8000b58 <__aeabi_d2iz>
 8002848:	4602      	mov	r2, r0
 800284a:	4b41      	ldr	r3, [pc, #260]	; (8002950 <finding_maxmin+0x144>)
 800284c:	601a      	str	r2, [r3, #0]
	strcpy(alt, alt);
	altf = atof(alt);
 800284e:	4841      	ldr	r0, [pc, #260]	; (8002954 <finding_maxmin+0x148>)
 8002850:	f005 fcb1 	bl	80081b6 <atof>
 8002854:	ec54 3b10 	vmov	r3, r4, d0
 8002858:	4618      	mov	r0, r3
 800285a:	4621      	mov	r1, r4
 800285c:	f7fe f9c4 	bl	8000be8 <__aeabi_d2f>
 8002860:	4602      	mov	r2, r0
 8002862:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <finding_maxmin+0x14c>)
 8002864:	601a      	str	r2, [r3, #0]
	alti = (int) (altf * 100.0);
 8002866:	4b3c      	ldr	r3, [pc, #240]	; (8002958 <finding_maxmin+0x14c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fd fe6c 	bl	8000548 <__aeabi_f2d>
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	4b35      	ldr	r3, [pc, #212]	; (800294c <finding_maxmin+0x140>)
 8002876:	f7fd febf 	bl	80005f8 <__aeabi_dmul>
 800287a:	4603      	mov	r3, r0
 800287c:	460c      	mov	r4, r1
 800287e:	4618      	mov	r0, r3
 8002880:	4621      	mov	r1, r4
 8002882:	f7fe f969 	bl	8000b58 <__aeabi_d2iz>
 8002886:	4602      	mov	r2, r0
 8002888:	4b34      	ldr	r3, [pc, #208]	; (800295c <finding_maxmin+0x150>)
 800288a:	601a      	str	r2, [r3, #0]
	if (ID == '0') {
 800288c:	4b34      	ldr	r3, [pc, #208]	; (8002960 <finding_maxmin+0x154>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b30      	cmp	r3, #48	; 0x30
 8002892:	d128      	bne.n	80028e6 <finding_maxmin+0xda>
		if (vlci > EPHmax_vlci)
 8002894:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <finding_maxmin+0x144>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b32      	ldr	r3, [pc, #200]	; (8002964 <finding_maxmin+0x158>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	dd03      	ble.n	80028a8 <finding_maxmin+0x9c>
			EPHmax_vlci = vlci;
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <finding_maxmin+0x144>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a2f      	ldr	r2, [pc, #188]	; (8002964 <finding_maxmin+0x158>)
 80028a6:	6013      	str	r3, [r2, #0]
		if (vlci < EPHmin_vlci)
 80028a8:	4b29      	ldr	r3, [pc, #164]	; (8002950 <finding_maxmin+0x144>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <finding_maxmin+0x15c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	da03      	bge.n	80028bc <finding_maxmin+0xb0>
			EPHmin_vlci = vlci;
 80028b4:	4b26      	ldr	r3, [pc, #152]	; (8002950 <finding_maxmin+0x144>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a2b      	ldr	r2, [pc, #172]	; (8002968 <finding_maxmin+0x15c>)
 80028ba:	6013      	str	r3, [r2, #0]
		if (alti > EPHmax_alti)
 80028bc:	4b27      	ldr	r3, [pc, #156]	; (800295c <finding_maxmin+0x150>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b2a      	ldr	r3, [pc, #168]	; (800296c <finding_maxmin+0x160>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	dd03      	ble.n	80028d0 <finding_maxmin+0xc4>
			EPHmax_alti = alti;
 80028c8:	4b24      	ldr	r3, [pc, #144]	; (800295c <finding_maxmin+0x150>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a27      	ldr	r2, [pc, #156]	; (800296c <finding_maxmin+0x160>)
 80028ce:	6013      	str	r3, [r2, #0]
		if (alti < EPHmin_alti)
 80028d0:	4b22      	ldr	r3, [pc, #136]	; (800295c <finding_maxmin+0x150>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b26      	ldr	r3, [pc, #152]	; (8002970 <finding_maxmin+0x164>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	da30      	bge.n	800293e <finding_maxmin+0x132>
			EPHmin_alti = alti;
 80028dc:	4b1f      	ldr	r3, [pc, #124]	; (800295c <finding_maxmin+0x150>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a23      	ldr	r2, [pc, #140]	; (8002970 <finding_maxmin+0x164>)
 80028e2:	6013      	str	r3, [r2, #0]
		if (alti > PLmax_alti)
			PLmax_alti = alti;
		if (alti < PLmin_alti)
			PLmin_alti = alti;
	}
}
 80028e4:	e02b      	b.n	800293e <finding_maxmin+0x132>
	else if (ID == '1') {
 80028e6:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <finding_maxmin+0x154>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b31      	cmp	r3, #49	; 0x31
 80028ec:	d127      	bne.n	800293e <finding_maxmin+0x132>
		if (vlci > PLmax_vlci)
 80028ee:	4b18      	ldr	r3, [pc, #96]	; (8002950 <finding_maxmin+0x144>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4b20      	ldr	r3, [pc, #128]	; (8002974 <finding_maxmin+0x168>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	dd03      	ble.n	8002902 <finding_maxmin+0xf6>
			PLmax_vlci = vlci;
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <finding_maxmin+0x144>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1d      	ldr	r2, [pc, #116]	; (8002974 <finding_maxmin+0x168>)
 8002900:	6013      	str	r3, [r2, #0]
		if (vlci < PLmin_vlci)
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <finding_maxmin+0x144>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <finding_maxmin+0x16c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	da03      	bge.n	8002916 <finding_maxmin+0x10a>
			PLmin_vlci = vlci;
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <finding_maxmin+0x144>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a19      	ldr	r2, [pc, #100]	; (8002978 <finding_maxmin+0x16c>)
 8002914:	6013      	str	r3, [r2, #0]
		if (alti > PLmax_alti)
 8002916:	4b11      	ldr	r3, [pc, #68]	; (800295c <finding_maxmin+0x150>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4b18      	ldr	r3, [pc, #96]	; (800297c <finding_maxmin+0x170>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	dd03      	ble.n	800292a <finding_maxmin+0x11e>
			PLmax_alti = alti;
 8002922:	4b0e      	ldr	r3, [pc, #56]	; (800295c <finding_maxmin+0x150>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a15      	ldr	r2, [pc, #84]	; (800297c <finding_maxmin+0x170>)
 8002928:	6013      	str	r3, [r2, #0]
		if (alti < PLmin_alti)
 800292a:	4b0c      	ldr	r3, [pc, #48]	; (800295c <finding_maxmin+0x150>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	4b14      	ldr	r3, [pc, #80]	; (8002980 <finding_maxmin+0x174>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	da03      	bge.n	800293e <finding_maxmin+0x132>
			PLmin_alti = alti;
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <finding_maxmin+0x150>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a11      	ldr	r2, [pc, #68]	; (8002980 <finding_maxmin+0x174>)
 800293c:	6013      	str	r3, [r2, #0]
}
 800293e:	bf00      	nop
 8002940:	bd98      	pop	{r3, r4, r7, pc}
 8002942:	bf00      	nop
 8002944:	20000358 	.word	0x20000358
 8002948:	20000378 	.word	0x20000378
 800294c:	40590000 	.word	0x40590000
 8002950:	20000384 	.word	0x20000384
 8002954:	20000350 	.word	0x20000350
 8002958:	2000037c 	.word	0x2000037c
 800295c:	20000380 	.word	0x20000380
 8002960:	20000331 	.word	0x20000331
 8002964:	2000038c 	.word	0x2000038c
 8002968:	20000390 	.word	0x20000390
 800296c:	20000388 	.word	0x20000388
 8002970:	20000014 	.word	0x20000014
 8002974:	20000398 	.word	0x20000398
 8002978:	2000039c 	.word	0x2000039c
 800297c:	20000394 	.word	0x20000394
 8002980:	20000010 	.word	0x20000010
 8002984:	00000000 	.word	0x00000000

08002988 <deg2rad>:

double deg2rad(float deg) {
 8002988:	b5b0      	push	{r4, r5, r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	ed87 0a01 	vstr	s0, [r7, #4]
	double pi = 2 * acos(0.0);
 8002992:	a412      	add	r4, pc, #72	; (adr r4, 80029dc <deg2rad+0x54>)
 8002994:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002998:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return deg * (pi / 180);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7fd fdd3 	bl	8000548 <__aeabi_f2d>
 80029a2:	4604      	mov	r4, r0
 80029a4:	460d      	mov	r5, r1
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <deg2rad+0x50>)
 80029ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029b0:	f7fd ff4c 	bl	800084c <__aeabi_ddiv>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4620      	mov	r0, r4
 80029ba:	4629      	mov	r1, r5
 80029bc:	f7fd fe1c 	bl	80005f8 <__aeabi_dmul>
 80029c0:	4603      	mov	r3, r0
 80029c2:	460c      	mov	r4, r1
 80029c4:	ec44 3b17 	vmov	d7, r3, r4
}
 80029c8:	eeb0 0a47 	vmov.f32	s0, s14
 80029cc:	eef0 0a67 	vmov.f32	s1, s15
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bdb0      	pop	{r4, r5, r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40668000 	.word	0x40668000
 80029dc:	54442d18 	.word	0x54442d18
 80029e0:	400921fb 	.word	0x400921fb
 80029e4:	00000000 	.word	0x00000000

080029e8 <rad2deg>:

double rad2deg(float rad)
{
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	ed87 0a01 	vstr	s0, [r7, #4]
    double pi = 2 * acos(0.0);
 80029f2:	a410      	add	r4, pc, #64	; (adr r4, 8002a34 <rad2deg+0x4c>)
 80029f4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80029f8:	e9c7 3402 	strd	r3, r4, [r7, #8]
    return (rad * 180 / pi);
 80029fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a00:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002a30 <rad2deg+0x48>
 8002a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a08:	ee17 0a90 	vmov	r0, s15
 8002a0c:	f7fd fd9c 	bl	8000548 <__aeabi_f2d>
 8002a10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a14:	f7fd ff1a 	bl	800084c <__aeabi_ddiv>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	460c      	mov	r4, r1
 8002a1c:	ec44 3b17 	vmov	d7, r3, r4
}
 8002a20:	eeb0 0a47 	vmov.f32	s0, s14
 8002a24:	eef0 0a67 	vmov.f32	s1, s15
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd90      	pop	{r4, r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	43340000 	.word	0x43340000
 8002a34:	54442d18 	.word	0x54442d18
 8002a38:	400921fb 	.word	0x400921fb

08002a3c <Cal_distGPS>:

float Cal_distGPS(float lat, float lng, float ground_latt, float ground_lngg) {
 8002a3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a40:	ed2d 8b02 	vpush	{d8}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	ed87 0a03 	vstr	s0, [r7, #12]
 8002a4c:	edc7 0a02 	vstr	s1, [r7, #8]
 8002a50:	ed87 1a01 	vstr	s2, [r7, #4]
 8002a54:	edc7 1a00 	vstr	s3, [r7]
	dLat = deg2rad(lat - ground_latt); // deg2rad below
 8002a58:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a64:	eeb0 0a67 	vmov.f32	s0, s15
 8002a68:	f7ff ff8e 	bl	8002988 <deg2rad>
 8002a6c:	ec54 3b10 	vmov	r3, r4, d0
 8002a70:	4618      	mov	r0, r3
 8002a72:	4621      	mov	r1, r4
 8002a74:	f7fe f8b8 	bl	8000be8 <__aeabi_d2f>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b85      	ldr	r3, [pc, #532]	; (8002c90 <Cal_distGPS+0x254>)
 8002a7c:	601a      	str	r2, [r3, #0]
	dLon = deg2rad(lng - ground_lngg);
 8002a7e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002a82:	edd7 7a00 	vldr	s15, [r7]
 8002a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a8e:	f7ff ff7b 	bl	8002988 <deg2rad>
 8002a92:	ec54 3b10 	vmov	r3, r4, d0
 8002a96:	4618      	mov	r0, r3
 8002a98:	4621      	mov	r1, r4
 8002a9a:	f7fe f8a5 	bl	8000be8 <__aeabi_d2f>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b7c      	ldr	r3, [pc, #496]	; (8002c94 <Cal_distGPS+0x258>)
 8002aa2:	601a      	str	r2, [r3, #0]
	a = sin(dLat / 2) * sin(dLat / 2)
 8002aa4:	4b7a      	ldr	r3, [pc, #488]	; (8002c90 <Cal_distGPS+0x254>)
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002aae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ab2:	ee16 0a90 	vmov	r0, s13
 8002ab6:	f7fd fd47 	bl	8000548 <__aeabi_f2d>
 8002aba:	4603      	mov	r3, r0
 8002abc:	460c      	mov	r4, r1
 8002abe:	ec44 3b10 	vmov	d0, r3, r4
 8002ac2:	f008 feb1 	bl	800b828 <sin>
 8002ac6:	ec55 4b10 	vmov	r4, r5, d0
 8002aca:	4b71      	ldr	r3, [pc, #452]	; (8002c90 <Cal_distGPS+0x254>)
 8002acc:	edd3 7a00 	vldr	s15, [r3]
 8002ad0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002ad4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ad8:	ee16 0a90 	vmov	r0, s13
 8002adc:	f7fd fd34 	bl	8000548 <__aeabi_f2d>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	ec43 2b10 	vmov	d0, r2, r3
 8002ae8:	f008 fe9e 	bl	800b828 <sin>
 8002aec:	ec53 2b10 	vmov	r2, r3, d0
 8002af0:	4620      	mov	r0, r4
 8002af2:	4629      	mov	r1, r5
 8002af4:	f7fd fd80 	bl	80005f8 <__aeabi_dmul>
 8002af8:	4603      	mov	r3, r0
 8002afa:	460c      	mov	r4, r1
 8002afc:	4625      	mov	r5, r4
 8002afe:	461c      	mov	r4, r3
			+ cos(deg2rad(lat)) * cos(deg2rad(ground_latt)) * sin(dLon / 2)
 8002b00:	ed97 0a03 	vldr	s0, [r7, #12]
 8002b04:	f7ff ff40 	bl	8002988 <deg2rad>
 8002b08:	eeb0 7a40 	vmov.f32	s14, s0
 8002b0c:	eef0 7a60 	vmov.f32	s15, s1
 8002b10:	eeb0 0a47 	vmov.f32	s0, s14
 8002b14:	eef0 0a67 	vmov.f32	s1, s15
 8002b18:	f008 fe42 	bl	800b7a0 <cos>
 8002b1c:	ec59 8b10 	vmov	r8, r9, d0
 8002b20:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b24:	f7ff ff30 	bl	8002988 <deg2rad>
 8002b28:	eeb0 7a40 	vmov.f32	s14, s0
 8002b2c:	eef0 7a60 	vmov.f32	s15, s1
 8002b30:	eeb0 0a47 	vmov.f32	s0, s14
 8002b34:	eef0 0a67 	vmov.f32	s1, s15
 8002b38:	f008 fe32 	bl	800b7a0 <cos>
 8002b3c:	ec53 2b10 	vmov	r2, r3, d0
 8002b40:	4640      	mov	r0, r8
 8002b42:	4649      	mov	r1, r9
 8002b44:	f7fd fd58 	bl	80005f8 <__aeabi_dmul>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4690      	mov	r8, r2
 8002b4e:	4699      	mov	r9, r3
 8002b50:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <Cal_distGPS+0x258>)
 8002b52:	edd3 7a00 	vldr	s15, [r3]
 8002b56:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002b5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b5e:	ee16 0a90 	vmov	r0, s13
 8002b62:	f7fd fcf1 	bl	8000548 <__aeabi_f2d>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	ec43 2b10 	vmov	d0, r2, r3
 8002b6e:	f008 fe5b 	bl	800b828 <sin>
 8002b72:	ec53 2b10 	vmov	r2, r3, d0
 8002b76:	4640      	mov	r0, r8
 8002b78:	4649      	mov	r1, r9
 8002b7a:	f7fd fd3d 	bl	80005f8 <__aeabi_dmul>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4690      	mov	r8, r2
 8002b84:	4699      	mov	r9, r3
					* sin(dLon / 2);
 8002b86:	4b43      	ldr	r3, [pc, #268]	; (8002c94 <Cal_distGPS+0x258>)
 8002b88:	edd3 7a00 	vldr	s15, [r3]
 8002b8c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002b90:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b94:	ee16 0a90 	vmov	r0, s13
 8002b98:	f7fd fcd6 	bl	8000548 <__aeabi_f2d>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	ec43 2b10 	vmov	d0, r2, r3
 8002ba4:	f008 fe40 	bl	800b828 <sin>
 8002ba8:	ec53 2b10 	vmov	r2, r3, d0
 8002bac:	4640      	mov	r0, r8
 8002bae:	4649      	mov	r1, r9
 8002bb0:	f7fd fd22 	bl	80005f8 <__aeabi_dmul>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
			+ cos(deg2rad(lat)) * cos(deg2rad(ground_latt)) * sin(dLon / 2)
 8002bb8:	4620      	mov	r0, r4
 8002bba:	4629      	mov	r1, r5
 8002bbc:	f7fd fb66 	bl	800028c <__adddf3>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	460c      	mov	r4, r1
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	f7fe f80e 	bl	8000be8 <__aeabi_d2f>
 8002bcc:	4602      	mov	r2, r0
	a = sin(dLat / 2) * sin(dLat / 2)
 8002bce:	4b32      	ldr	r3, [pc, #200]	; (8002c98 <Cal_distGPS+0x25c>)
 8002bd0:	601a      	str	r2, [r3, #0]
	c = 2 * atan2(sqrt(a), sqrt(1 - a));
 8002bd2:	4b31      	ldr	r3, [pc, #196]	; (8002c98 <Cal_distGPS+0x25c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fd fcb6 	bl	8000548 <__aeabi_f2d>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	460c      	mov	r4, r1
 8002be0:	ec44 3b10 	vmov	d0, r3, r4
 8002be4:	f008 fe6a 	bl	800b8bc <sqrt>
 8002be8:	eeb0 8a40 	vmov.f32	s16, s0
 8002bec:	eef0 8a60 	vmov.f32	s17, s1
 8002bf0:	4b29      	ldr	r3, [pc, #164]	; (8002c98 <Cal_distGPS+0x25c>)
 8002bf2:	edd3 7a00 	vldr	s15, [r3]
 8002bf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfe:	ee17 0a90 	vmov	r0, s15
 8002c02:	f7fd fca1 	bl	8000548 <__aeabi_f2d>
 8002c06:	4603      	mov	r3, r0
 8002c08:	460c      	mov	r4, r1
 8002c0a:	ec44 3b10 	vmov	d0, r3, r4
 8002c0e:	f008 fe55 	bl	800b8bc <sqrt>
 8002c12:	eeb0 7a40 	vmov.f32	s14, s0
 8002c16:	eef0 7a60 	vmov.f32	s15, s1
 8002c1a:	eeb0 1a47 	vmov.f32	s2, s14
 8002c1e:	eef0 1a67 	vmov.f32	s3, s15
 8002c22:	eeb0 0a48 	vmov.f32	s0, s16
 8002c26:	eef0 0a68 	vmov.f32	s1, s17
 8002c2a:	f008 fe45 	bl	800b8b8 <atan2>
 8002c2e:	ec51 0b10 	vmov	r0, r1, d0
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	f7fd fb29 	bl	800028c <__adddf3>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	460c      	mov	r4, r1
 8002c3e:	4618      	mov	r0, r3
 8002c40:	4621      	mov	r1, r4
 8002c42:	f7fd ffd1 	bl	8000be8 <__aeabi_d2f>
 8002c46:	4602      	mov	r2, r0
 8002c48:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <Cal_distGPS+0x260>)
 8002c4a:	601a      	str	r2, [r3, #0]
	d = R * c; // Distance in km
 8002c4c:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <Cal_distGPS+0x264>)
 8002c4e:	ed93 7a00 	vldr	s14, [r3]
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <Cal_distGPS+0x260>)
 8002c54:	edd3 7a00 	vldr	s15, [r3]
 8002c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <Cal_distGPS+0x268>)
 8002c5e:	edc3 7a00 	vstr	s15, [r3]
	distance = d * 1000;
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <Cal_distGPS+0x268>)
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002ca8 <Cal_distGPS+0x26c>
 8002c6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c70:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <Cal_distGPS+0x270>)
 8002c72:	edc3 7a00 	vstr	s15, [r3]
	return distance;
 8002c76:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <Cal_distGPS+0x270>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	ee07 3a90 	vmov	s15, r3
}
 8002c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	ecbd 8b02 	vpop	{d8}
 8002c8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000304 	.word	0x20000304
 8002c94:	20000308 	.word	0x20000308
 8002c98:	2000030c 	.word	0x2000030c
 8002c9c:	20000310 	.word	0x20000310
 8002ca0:	2000000c 	.word	0x2000000c
 8002ca4:	20000314 	.word	0x20000314
 8002ca8:	447a0000 	.word	0x447a0000
 8002cac:	20000318 	.word	0x20000318

08002cb0 <GetAngle>:

float GetAngle(float lat, float lng, float ground_latt, float ground_lngg) {
 8002cb0:	b5b0      	push	{r4, r5, r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	ed87 0a03 	vstr	s0, [r7, #12]
 8002cba:	edc7 0a02 	vstr	s1, [r7, #8]
 8002cbe:	ed87 1a01 	vstr	s2, [r7, #4]
 8002cc2:	edc7 1a00 	vstr	s3, [r7]
	float Org_Enlem = lat;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	623b      	str	r3, [r7, #32]
	float Org_Lng = ground_lngg;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	61fb      	str	r3, [r7, #28]

	float distance1 = Cal_distGPS(Org_Enlem, Org_Lng, lat, lng);
 8002cce:	edd7 1a02 	vldr	s3, [r7, #8]
 8002cd2:	ed97 1a03 	vldr	s2, [r7, #12]
 8002cd6:	edd7 0a07 	vldr	s1, [r7, #28]
 8002cda:	ed97 0a08 	vldr	s0, [r7, #32]
 8002cde:	f7ff fead 	bl	8002a3c <Cal_distGPS>
 8002ce2:	ed87 0a06 	vstr	s0, [r7, #24]
	float distance2 = Cal_distGPS(ground_latt, ground_lngg, Org_Enlem, Org_Lng);
 8002ce6:	edd7 1a07 	vldr	s3, [r7, #28]
 8002cea:	ed97 1a08 	vldr	s2, [r7, #32]
 8002cee:	edd7 0a00 	vldr	s1, [r7]
 8002cf2:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cf6:	f7ff fea1 	bl	8002a3c <Cal_distGPS>
 8002cfa:	ed87 0a05 	vstr	s0, [r7, #20]

	float alfa = rad2deg(atan2(distance1, distance2));
 8002cfe:	69b8      	ldr	r0, [r7, #24]
 8002d00:	f7fd fc22 	bl	8000548 <__aeabi_f2d>
 8002d04:	4604      	mov	r4, r0
 8002d06:	460d      	mov	r5, r1
 8002d08:	6978      	ldr	r0, [r7, #20]
 8002d0a:	f7fd fc1d 	bl	8000548 <__aeabi_f2d>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	ec43 2b11 	vmov	d1, r2, r3
 8002d16:	ec45 4b10 	vmov	d0, r4, r5
 8002d1a:	f008 fdcd 	bl	800b8b8 <atan2>
 8002d1e:	ec54 3b10 	vmov	r3, r4, d0
 8002d22:	4618      	mov	r0, r3
 8002d24:	4621      	mov	r1, r4
 8002d26:	f7fd ff5f 	bl	8000be8 <__aeabi_d2f>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	ee00 3a10 	vmov	s0, r3
 8002d30:	f7ff fe5a 	bl	80029e8 <rad2deg>
 8002d34:	ec54 3b10 	vmov	r3, r4, d0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	4621      	mov	r1, r4
 8002d3c:	f7fd ff54 	bl	8000be8 <__aeabi_d2f>
 8002d40:	4603      	mov	r3, r0
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
	if (lat == ground_latt && lng == ground_lngg) {
 8002d44:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d48:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d4c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d54:	d10c      	bne.n	8002d70 <GetAngle+0xc0>
 8002d56:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d5a:	edd7 7a00 	vldr	s15, [r7]
 8002d5e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d66:	d103      	bne.n	8002d70 <GetAngle+0xc0>
		alfa = 0;
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6e:	e0b6      	b.n	8002ede <GetAngle+0x22e>
	} else if (lat == ground_latt && lng > ground_lngg) {
 8002d70:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d74:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d78:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d80:	d10c      	bne.n	8002d9c <GetAngle+0xec>
 8002d82:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d86:	edd7 7a00 	vldr	s15, [r7]
 8002d8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d92:	dd03      	ble.n	8002d9c <GetAngle+0xec>
		alfa = 0;
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9a:	e0a0      	b.n	8002ede <GetAngle+0x22e>
	} else if (lat == ground_latt && lng < ground_lngg) {
 8002d9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002da0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002da4:	eeb4 7a67 	vcmp.f32	s14, s15
 8002da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dac:	d10b      	bne.n	8002dc6 <GetAngle+0x116>
 8002dae:	ed97 7a02 	vldr	s14, [r7, #8]
 8002db2:	edd7 7a00 	vldr	s15, [r7]
 8002db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dbe:	d502      	bpl.n	8002dc6 <GetAngle+0x116>
		alfa = 180;
 8002dc0:	4b56      	ldr	r3, [pc, #344]	; (8002f1c <GetAngle+0x26c>)
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc4:	e08b      	b.n	8002ede <GetAngle+0x22e>
	} else if (lat > ground_latt && lng == ground_lngg) {
 8002dc6:	ed97 7a03 	vldr	s14, [r7, #12]
 8002dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	dd0b      	ble.n	8002df0 <GetAngle+0x140>
 8002dd8:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ddc:	edd7 7a00 	vldr	s15, [r7]
 8002de0:	eeb4 7a67 	vcmp.f32	s14, s15
 8002de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de8:	d102      	bne.n	8002df0 <GetAngle+0x140>
		alfa = 90;
 8002dea:	4b4d      	ldr	r3, [pc, #308]	; (8002f20 <GetAngle+0x270>)
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
 8002dee:	e076      	b.n	8002ede <GetAngle+0x22e>
	} else if (lat > ground_latt && lng == ground_lngg) {
 8002df0:	ed97 7a03 	vldr	s14, [r7, #12]
 8002df4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002df8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e00:	dd0b      	ble.n	8002e1a <GetAngle+0x16a>
 8002e02:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e06:	edd7 7a00 	vldr	s15, [r7]
 8002e0a:	eeb4 7a67 	vcmp.f32	s14, s15
 8002e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e12:	d102      	bne.n	8002e1a <GetAngle+0x16a>
		alfa = 270;
 8002e14:	4b43      	ldr	r3, [pc, #268]	; (8002f24 <GetAngle+0x274>)
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
 8002e18:	e061      	b.n	8002ede <GetAngle+0x22e>
	} else if (lat > ground_latt && lng > ground_lngg) {
 8002e1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2a:	dd08      	ble.n	8002e3e <GetAngle+0x18e>
 8002e2c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e30:	edd7 7a00 	vldr	s15, [r7]
 8002e34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e3c:	dc4f      	bgt.n	8002ede <GetAngle+0x22e>
		//cout << "degree: " << alfa << endl;
	} else if (lat < ground_latt && lng > ground_lngg) {
 8002e3e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e42:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4e:	d511      	bpl.n	8002e74 <GetAngle+0x1c4>
 8002e50:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e54:	edd7 7a00 	vldr	s15, [r7]
 8002e58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e60:	dd08      	ble.n	8002e74 <GetAngle+0x1c4>
		alfa = 180 - alfa;
 8002e62:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002f28 <GetAngle+0x278>
 8002e66:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e6e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8002e72:	e034      	b.n	8002ede <GetAngle+0x22e>
	} else if (lat > ground_latt && lng < ground_lngg) {
 8002e74:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e78:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e84:	dd11      	ble.n	8002eaa <GetAngle+0x1fa>
 8002e86:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e8a:	edd7 7a00 	vldr	s15, [r7]
 8002e8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e96:	d508      	bpl.n	8002eaa <GetAngle+0x1fa>
		alfa = 360 - alfa;
 8002e98:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002f2c <GetAngle+0x27c>
 8002e9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8002ea8:	e019      	b.n	8002ede <GetAngle+0x22e>
	} else if (lat < ground_latt && lng < ground_lngg) {
 8002eaa:	ed97 7a03 	vldr	s14, [r7, #12]
 8002eae:	edd7 7a01 	vldr	s15, [r7, #4]
 8002eb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eba:	d510      	bpl.n	8002ede <GetAngle+0x22e>
 8002ebc:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ec0:	edd7 7a00 	vldr	s15, [r7]
 8002ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ecc:	d507      	bpl.n	8002ede <GetAngle+0x22e>
		alfa = 180 + alfa;
 8002ece:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ed2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002f28 <GetAngle+0x278>
 8002ed6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002eda:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}

	alfa -= 90.0;
 8002ede:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ee2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002f30 <GetAngle+0x280>
 8002ee6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002eea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if (alfa < 0)
 8002eee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ef2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efa:	d507      	bpl.n	8002f0c <GetAngle+0x25c>
		alfa += 360;
 8002efc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f00:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002f2c <GetAngle+0x27c>
 8002f04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	return alfa;
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	ee07 3a90 	vmov	s15, r3
}
 8002f12:	eeb0 0a67 	vmov.f32	s0, s15
 8002f16:	3728      	adds	r7, #40	; 0x28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f1c:	43340000 	.word	0x43340000
 8002f20:	42b40000 	.word	0x42b40000
 8002f24:	43870000 	.word	0x43870000
 8002f28:	43340000 	.word	0x43340000
 8002f2c:	43b40000 	.word	0x43b40000
 8002f30:	42b40000 	.word	0x42b40000

08002f34 <calcoor>:

float calcoor(float x)
{
 8002f34:	b5b0      	push	{r4, r5, r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	ed87 0a01 	vstr	s0, [r7, #4]
	float a = (int)x / 100;
 8002f3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f46:	ee17 1a90 	vmov	r1, s15
 8002f4a:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <calcoor+0x8c>)
 8002f4c:	fb83 2301 	smull	r2, r3, r3, r1
 8002f50:	115a      	asrs	r2, r3, #5
 8002f52:	17cb      	asrs	r3, r1, #31
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f5e:	edc7 7a03 	vstr	s15, [r7, #12]
	float b = (x - (a * 100.0)) / 60.0;
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fd faf0 	bl	8000548 <__aeabi_f2d>
 8002f68:	4604      	mov	r4, r0
 8002f6a:	460d      	mov	r5, r1
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f7fd faeb 	bl	8000548 <__aeabi_f2d>
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <calcoor+0x90>)
 8002f78:	f7fd fb3e 	bl	80005f8 <__aeabi_dmul>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4620      	mov	r0, r4
 8002f82:	4629      	mov	r1, r5
 8002f84:	f7fd f980 	bl	8000288 <__aeabi_dsub>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	460c      	mov	r4, r1
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	4621      	mov	r1, r4
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <calcoor+0x94>)
 8002f96:	f7fd fc59 	bl	800084c <__aeabi_ddiv>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	460c      	mov	r4, r1
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	f7fd fe21 	bl	8000be8 <__aeabi_d2f>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	60bb      	str	r3, [r7, #8]
	return a+b;
 8002faa:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fae:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc0:	51eb851f 	.word	0x51eb851f
 8002fc4:	40590000 	.word	0x40590000
 8002fc8:	404e0000 	.word	0x404e0000

08002fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <NXT_SEND_VAL>:

uint8_t cmd_nxt[3] = {0xFF, 0xFF, 0xFF};
int len = 0;

void NXT_SEND_VAL(char* ID, uint32_t val)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08a      	sub	sp, #40	; 0x28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
	char buff[30];
	len = sprintf(buff, "%s=%lu", ID, val);  // %lu did used for long unsign integer values instead of %d
 8002fe6:	f107 0008 	add.w	r0, r7, #8
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	490d      	ldr	r1, [pc, #52]	; (8003024 <NXT_SEND_VAL+0x48>)
 8002ff0:	f005 fd72 	bl	8008ad8 <siprintf>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <NXT_SEND_VAL+0x4c>)
 8002ff8:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)buff, len, 1000);
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <NXT_SEND_VAL+0x4c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	f107 0108 	add.w	r1, r7, #8
 8003004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003008:	4808      	ldr	r0, [pc, #32]	; (800302c <NXT_SEND_VAL+0x50>)
 800300a:	f003 fe79 	bl	8006d00 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 800300e:	2364      	movs	r3, #100	; 0x64
 8003010:	2203      	movs	r2, #3
 8003012:	4907      	ldr	r1, [pc, #28]	; (8003030 <NXT_SEND_VAL+0x54>)
 8003014:	4805      	ldr	r0, [pc, #20]	; (800302c <NXT_SEND_VAL+0x50>)
 8003016:	f003 fe73 	bl	8006d00 <HAL_UART_Transmit>
}
 800301a:	bf00      	nop
 800301c:	3728      	adds	r7, #40	; 0x28
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	0800d55c 	.word	0x0800d55c
 8003028:	2000045c 	.word	0x2000045c
 800302c:	200004b8 	.word	0x200004b8
 8003030:	2000001c 	.word	0x2000001c

08003034 <NXT_SEND_SVAL>:

void NXT_SEND_SVAL(char* ID, int val)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
	char buff[30];
	len = sprintf(buff, "%s=%d", ID, val);
 800303e:	f107 0008 	add.w	r0, r7, #8
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	490d      	ldr	r1, [pc, #52]	; (800307c <NXT_SEND_SVAL+0x48>)
 8003048:	f005 fd46 	bl	8008ad8 <siprintf>
 800304c:	4602      	mov	r2, r0
 800304e:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <NXT_SEND_SVAL+0x4c>)
 8003050:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)buff, len, 1000);
 8003052:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <NXT_SEND_SVAL+0x4c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	b29a      	uxth	r2, r3
 8003058:	f107 0108 	add.w	r1, r7, #8
 800305c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003060:	4808      	ldr	r0, [pc, #32]	; (8003084 <NXT_SEND_SVAL+0x50>)
 8003062:	f003 fe4d 	bl	8006d00 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 8003066:	2364      	movs	r3, #100	; 0x64
 8003068:	2203      	movs	r2, #3
 800306a:	4907      	ldr	r1, [pc, #28]	; (8003088 <NXT_SEND_SVAL+0x54>)
 800306c:	4805      	ldr	r0, [pc, #20]	; (8003084 <NXT_SEND_SVAL+0x50>)
 800306e:	f003 fe47 	bl	8006d00 <HAL_UART_Transmit>
}
 8003072:	bf00      	nop
 8003074:	3728      	adds	r7, #40	; 0x28
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	0800d564 	.word	0x0800d564
 8003080:	2000045c 	.word	0x2000045c
 8003084:	200004b8 	.word	0x200004b8
 8003088:	2000001c 	.word	0x2000001c

0800308c <NXT_SEND_VALFLOAT>:

void NXT_SEND_VALFLOAT(char* ID, float val)
{
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b08d      	sub	sp, #52	; 0x34
 8003090:	af02      	add	r7, sp, #8
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	ed87 0a00 	vstr	s0, [r7]
	char buff[30];
	len = sprintf(buff, "%s=\"%.2f\"", ID, val);
 8003098:	6838      	ldr	r0, [r7, #0]
 800309a:	f7fd fa55 	bl	8000548 <__aeabi_f2d>
 800309e:	4603      	mov	r3, r0
 80030a0:	460c      	mov	r4, r1
 80030a2:	f107 0008 	add.w	r0, r7, #8
 80030a6:	e9cd 3400 	strd	r3, r4, [sp]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	490c      	ldr	r1, [pc, #48]	; (80030e0 <NXT_SEND_VALFLOAT+0x54>)
 80030ae:	f005 fd13 	bl	8008ad8 <siprintf>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <NXT_SEND_VALFLOAT+0x58>)
 80030b6:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)buff, len, 1000);
 80030b8:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <NXT_SEND_VALFLOAT+0x58>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	b29a      	uxth	r2, r3
 80030be:	f107 0108 	add.w	r1, r7, #8
 80030c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030c6:	4808      	ldr	r0, [pc, #32]	; (80030e8 <NXT_SEND_VALFLOAT+0x5c>)
 80030c8:	f003 fe1a 	bl	8006d00 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 80030cc:	2364      	movs	r3, #100	; 0x64
 80030ce:	2203      	movs	r2, #3
 80030d0:	4906      	ldr	r1, [pc, #24]	; (80030ec <NXT_SEND_VALFLOAT+0x60>)
 80030d2:	4805      	ldr	r0, [pc, #20]	; (80030e8 <NXT_SEND_VALFLOAT+0x5c>)
 80030d4:	f003 fe14 	bl	8006d00 <HAL_UART_Transmit>
}
 80030d8:	bf00      	nop
 80030da:	372c      	adds	r7, #44	; 0x2c
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd90      	pop	{r4, r7, pc}
 80030e0:	0800d56c 	.word	0x0800d56c
 80030e4:	2000045c 	.word	0x2000045c
 80030e8:	200004b8 	.word	0x200004b8
 80030ec:	2000001c 	.word	0x2000001c

080030f0 <NXT_SEND_STR>:

void NXT_SEND_STR(char* ID)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08c      	sub	sp, #48	; 0x30
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	char buff[30];
	int len = sprintf(buff, "%s", ID);
 80030f8:	f107 030c 	add.w	r3, r7, #12
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	490c      	ldr	r1, [pc, #48]	; (8003130 <NXT_SEND_STR+0x40>)
 8003100:	4618      	mov	r0, r3
 8003102:	f005 fce9 	bl	8008ad8 <siprintf>
 8003106:	62f8      	str	r0, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart3, (uint8_t*) buff, len, 1000);
 8003108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310a:	b29a      	uxth	r2, r3
 800310c:	f107 010c 	add.w	r1, r7, #12
 8003110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003114:	4807      	ldr	r0, [pc, #28]	; (8003134 <NXT_SEND_STR+0x44>)
 8003116:	f003 fdf3 	bl	8006d00 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 800311a:	2364      	movs	r3, #100	; 0x64
 800311c:	2203      	movs	r2, #3
 800311e:	4906      	ldr	r1, [pc, #24]	; (8003138 <NXT_SEND_STR+0x48>)
 8003120:	4804      	ldr	r0, [pc, #16]	; (8003134 <NXT_SEND_STR+0x44>)
 8003122:	f003 fded 	bl	8006d00 <HAL_UART_Transmit>
}
 8003126:	bf00      	nop
 8003128:	3730      	adds	r7, #48	; 0x30
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	0800d578 	.word	0x0800d578
 8003134:	200004b8 	.word	0x200004b8
 8003138:	2000001c 	.word	0x2000001c

0800313c <NXT_SEND_TXT>:
void NXT_SEND_TXT(char* ID, uint16_t val)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	; 0x28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	807b      	strh	r3, [r7, #2]
	char buff[30];
	len = sprintf(buff, "%s=\"%d\"", ID, val);
 8003148:	887b      	ldrh	r3, [r7, #2]
 800314a:	f107 0008 	add.w	r0, r7, #8
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	490c      	ldr	r1, [pc, #48]	; (8003184 <NXT_SEND_TXT+0x48>)
 8003152:	f005 fcc1 	bl	8008ad8 <siprintf>
 8003156:	4602      	mov	r2, r0
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <NXT_SEND_TXT+0x4c>)
 800315a:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)buff, len, 1000);
 800315c:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <NXT_SEND_TXT+0x4c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	b29a      	uxth	r2, r3
 8003162:	f107 0108 	add.w	r1, r7, #8
 8003166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800316a:	4808      	ldr	r0, [pc, #32]	; (800318c <NXT_SEND_TXT+0x50>)
 800316c:	f003 fdc8 	bl	8006d00 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 8003170:	2364      	movs	r3, #100	; 0x64
 8003172:	2203      	movs	r2, #3
 8003174:	4906      	ldr	r1, [pc, #24]	; (8003190 <NXT_SEND_TXT+0x54>)
 8003176:	4805      	ldr	r0, [pc, #20]	; (800318c <NXT_SEND_TXT+0x50>)
 8003178:	f003 fdc2 	bl	8006d00 <HAL_UART_Transmit>
}
 800317c:	bf00      	nop
 800317e:	3728      	adds	r7, #40	; 0x28
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	0800d57c 	.word	0x0800d57c
 8003188:	2000045c 	.word	0x2000045c
 800318c:	200004b8 	.word	0x200004b8
 8003190:	2000001c 	.word	0x2000001c

08003194 <NXT_SEND_TXTBX>:

void NXT_SEND_TXTBX(char* ID, char* txt)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b09c      	sub	sp, #112	; 0x70
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
	char buff[100];
	len = sprintf(buff, "%s=\"%s\"", ID, txt);
 800319e:	f107 000c 	add.w	r0, r7, #12
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	490d      	ldr	r1, [pc, #52]	; (80031dc <NXT_SEND_TXTBX+0x48>)
 80031a8:	f005 fc96 	bl	8008ad8 <siprintf>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <NXT_SEND_TXTBX+0x4c>)
 80031b0:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)buff, len, 1000);
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <NXT_SEND_TXTBX+0x4c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	f107 010c 	add.w	r1, r7, #12
 80031bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031c0:	4808      	ldr	r0, [pc, #32]	; (80031e4 <NXT_SEND_TXTBX+0x50>)
 80031c2:	f003 fd9d 	bl	8006d00 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 80031c6:	2364      	movs	r3, #100	; 0x64
 80031c8:	2203      	movs	r2, #3
 80031ca:	4907      	ldr	r1, [pc, #28]	; (80031e8 <NXT_SEND_TXTBX+0x54>)
 80031cc:	4805      	ldr	r0, [pc, #20]	; (80031e4 <NXT_SEND_TXTBX+0x50>)
 80031ce:	f003 fd97 	bl	8006d00 <HAL_UART_Transmit>
}
 80031d2:	bf00      	nop
 80031d4:	3770      	adds	r7, #112	; 0x70
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	0800d584 	.word	0x0800d584
 80031e0:	2000045c 	.word	0x2000045c
 80031e4:	200004b8 	.word	0x200004b8
 80031e8:	2000001c 	.word	0x2000001c

080031ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f2:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <HAL_MspInit+0x44>)
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	4a0e      	ldr	r2, [pc, #56]	; (8003230 <HAL_MspInit+0x44>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6193      	str	r3, [r2, #24]
 80031fe:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <HAL_MspInit+0x44>)
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <HAL_MspInit+0x44>)
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	4a08      	ldr	r2, [pc, #32]	; (8003230 <HAL_MspInit+0x44>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003214:	61d3      	str	r3, [r2, #28]
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_MspInit+0x44>)
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000

08003234 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	; 0x28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323c:	f107 0314 	add.w	r3, r7, #20
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a17      	ldr	r2, [pc, #92]	; (80032b0 <HAL_I2C_MspInit+0x7c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d127      	bne.n	80032a6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003256:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <HAL_I2C_MspInit+0x80>)
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <HAL_I2C_MspInit+0x80>)
 800325c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003260:	6153      	str	r3, [r2, #20]
 8003262:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <HAL_I2C_MspInit+0x80>)
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800326e:	23c0      	movs	r3, #192	; 0xc0
 8003270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003272:	2312      	movs	r3, #18
 8003274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003276:	2301      	movs	r3, #1
 8003278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800327a:	2303      	movs	r3, #3
 800327c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800327e:	2304      	movs	r3, #4
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003282:	f107 0314 	add.w	r3, r7, #20
 8003286:	4619      	mov	r1, r3
 8003288:	480b      	ldr	r0, [pc, #44]	; (80032b8 <HAL_I2C_MspInit+0x84>)
 800328a:	f000 fcf3 	bl	8003c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_I2C_MspInit+0x80>)
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	4a08      	ldr	r2, [pc, #32]	; (80032b4 <HAL_I2C_MspInit+0x80>)
 8003294:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003298:	61d3      	str	r3, [r2, #28]
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_I2C_MspInit+0x80>)
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032a6:	bf00      	nop
 80032a8:	3728      	adds	r7, #40	; 0x28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40005400 	.word	0x40005400
 80032b4:	40021000 	.word	0x40021000
 80032b8:	48000400 	.word	0x48000400

080032bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032cc:	d113      	bne.n	80032f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032ce:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_TIM_Base_MspInit+0x44>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4a0b      	ldr	r2, [pc, #44]	; (8003300 <HAL_TIM_Base_MspInit+0x44>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	61d3      	str	r3, [r2, #28]
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_TIM_Base_MspInit+0x44>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80032e6:	2200      	movs	r2, #0
 80032e8:	2103      	movs	r1, #3
 80032ea:	201c      	movs	r0, #28
 80032ec:	f000 fc15 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032f0:	201c      	movs	r0, #28
 80032f2:	f000 fc2e 	bl	8003b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000

08003304 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08e      	sub	sp, #56	; 0x38
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a53      	ldr	r2, [pc, #332]	; (8003470 <HAL_UART_MspInit+0x16c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d132      	bne.n	800338c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003326:	4b53      	ldr	r3, [pc, #332]	; (8003474 <HAL_UART_MspInit+0x170>)
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	4a52      	ldr	r2, [pc, #328]	; (8003474 <HAL_UART_MspInit+0x170>)
 800332c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003330:	6193      	str	r3, [r2, #24]
 8003332:	4b50      	ldr	r3, [pc, #320]	; (8003474 <HAL_UART_MspInit+0x170>)
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333a:	623b      	str	r3, [r7, #32]
 800333c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333e:	4b4d      	ldr	r3, [pc, #308]	; (8003474 <HAL_UART_MspInit+0x170>)
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	4a4c      	ldr	r2, [pc, #304]	; (8003474 <HAL_UART_MspInit+0x170>)
 8003344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003348:	6153      	str	r3, [r2, #20]
 800334a:	4b4a      	ldr	r3, [pc, #296]	; (8003474 <HAL_UART_MspInit+0x170>)
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003356:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335c:	2302      	movs	r3, #2
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003364:	2303      	movs	r3, #3
 8003366:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003368:	2307      	movs	r3, #7
 800336a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003370:	4619      	mov	r1, r3
 8003372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003376:	f000 fc7d 	bl	8003c74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800337a:	2200      	movs	r2, #0
 800337c:	2102      	movs	r1, #2
 800337e:	2025      	movs	r0, #37	; 0x25
 8003380:	f000 fbcb 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003384:	2025      	movs	r0, #37	; 0x25
 8003386:	f000 fbe4 	bl	8003b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800338a:	e06c      	b.n	8003466 <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a39      	ldr	r2, [pc, #228]	; (8003478 <HAL_UART_MspInit+0x174>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d131      	bne.n	80033fa <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003396:	4b37      	ldr	r3, [pc, #220]	; (8003474 <HAL_UART_MspInit+0x170>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	4a36      	ldr	r2, [pc, #216]	; (8003474 <HAL_UART_MspInit+0x170>)
 800339c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a0:	61d3      	str	r3, [r2, #28]
 80033a2:	4b34      	ldr	r3, [pc, #208]	; (8003474 <HAL_UART_MspInit+0x170>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	61bb      	str	r3, [r7, #24]
 80033ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ae:	4b31      	ldr	r3, [pc, #196]	; (8003474 <HAL_UART_MspInit+0x170>)
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	4a30      	ldr	r2, [pc, #192]	; (8003474 <HAL_UART_MspInit+0x170>)
 80033b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b8:	6153      	str	r3, [r2, #20]
 80033ba:	4b2e      	ldr	r3, [pc, #184]	; (8003474 <HAL_UART_MspInit+0x170>)
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033c6:	230c      	movs	r3, #12
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ca:	2302      	movs	r3, #2
 80033cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033d2:	2303      	movs	r3, #3
 80033d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033d6:	2307      	movs	r3, #7
 80033d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033de:	4619      	mov	r1, r3
 80033e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033e4:	f000 fc46 	bl	8003c74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80033e8:	2200      	movs	r2, #0
 80033ea:	2101      	movs	r1, #1
 80033ec:	2026      	movs	r0, #38	; 0x26
 80033ee:	f000 fb94 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033f2:	2026      	movs	r0, #38	; 0x26
 80033f4:	f000 fbad 	bl	8003b52 <HAL_NVIC_EnableIRQ>
}
 80033f8:	e035      	b.n	8003466 <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART3)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1f      	ldr	r2, [pc, #124]	; (800347c <HAL_UART_MspInit+0x178>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d130      	bne.n	8003466 <HAL_UART_MspInit+0x162>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003404:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <HAL_UART_MspInit+0x170>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	4a1a      	ldr	r2, [pc, #104]	; (8003474 <HAL_UART_MspInit+0x170>)
 800340a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800340e:	61d3      	str	r3, [r2, #28]
 8003410:	4b18      	ldr	r3, [pc, #96]	; (8003474 <HAL_UART_MspInit+0x170>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800341c:	4b15      	ldr	r3, [pc, #84]	; (8003474 <HAL_UART_MspInit+0x170>)
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	4a14      	ldr	r2, [pc, #80]	; (8003474 <HAL_UART_MspInit+0x170>)
 8003422:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003426:	6153      	str	r3, [r2, #20]
 8003428:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_UART_MspInit+0x170>)
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003434:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343a:	2302      	movs	r3, #2
 800343c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003442:	2303      	movs	r3, #3
 8003444:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003446:	2307      	movs	r3, #7
 8003448:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800344a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800344e:	4619      	mov	r1, r3
 8003450:	480b      	ldr	r0, [pc, #44]	; (8003480 <HAL_UART_MspInit+0x17c>)
 8003452:	f000 fc0f 	bl	8003c74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 4, 0);
 8003456:	2200      	movs	r2, #0
 8003458:	2104      	movs	r1, #4
 800345a:	2027      	movs	r0, #39	; 0x27
 800345c:	f000 fb5d 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003460:	2027      	movs	r0, #39	; 0x27
 8003462:	f000 fb76 	bl	8003b52 <HAL_NVIC_EnableIRQ>
}
 8003466:	bf00      	nop
 8003468:	3738      	adds	r7, #56	; 0x38
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40013800 	.word	0x40013800
 8003474:	40021000 	.word	0x40021000
 8003478:	40004400 	.word	0x40004400
 800347c:	40004800 	.word	0x40004800
 8003480:	48000400 	.word	0x48000400

08003484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003496:	e7fe      	b.n	8003496 <HardFault_Handler+0x4>

08003498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800349c:	e7fe      	b.n	800349c <MemManage_Handler+0x4>

0800349e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034a2:	e7fe      	b.n	80034a2 <BusFault_Handler+0x4>

080034a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034a8:	e7fe      	b.n	80034a8 <UsageFault_Handler+0x4>

080034aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034aa:	b480      	push	{r7}
 80034ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034c6:	b480      	push	{r7}
 80034c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034d8:	f000 fa02 	bl	80038e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034dc:	bf00      	nop
 80034de:	bd80      	pop	{r7, pc}

080034e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034e4:	4808      	ldr	r0, [pc, #32]	; (8003508 <TIM2_IRQHandler+0x28>)
 80034e6:	f003 f80f 	bl	8006508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  mgn = 1;
 80034ea:	4b08      	ldr	r3, [pc, #32]	; (800350c <TIM2_IRQHandler+0x2c>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	701a      	strb	r2, [r3, #0]
     HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80034f0:	2101      	movs	r1, #1
 80034f2:	4807      	ldr	r0, [pc, #28]	; (8003510 <TIM2_IRQHandler+0x30>)
 80034f4:	f000 fd48 	bl	8003f88 <HAL_GPIO_TogglePin>
     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80034f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034fc:	4805      	ldr	r0, [pc, #20]	; (8003514 <TIM2_IRQHandler+0x34>)
 80034fe:	f000 fd43 	bl	8003f88 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	2000060c 	.word	0x2000060c
 800350c:	2000032c 	.word	0x2000032c
 8003510:	48000400 	.word	0x48000400
 8003514:	48000800 	.word	0x48000800

08003518 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800351c:	4813      	ldr	r0, [pc, #76]	; (800356c <USART1_IRQHandler+0x54>)
 800351e:	f003 fda3 	bl	8007068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*) &buff1, 1);
 8003522:	2201      	movs	r2, #1
 8003524:	4912      	ldr	r1, [pc, #72]	; (8003570 <USART1_IRQHandler+0x58>)
 8003526:	4811      	ldr	r0, [pc, #68]	; (800356c <USART1_IRQHandler+0x54>)
 8003528:	f003 fd4f 	bl	8006fca <HAL_UART_Receive_IT>
    	RX1_BUF[c1] = buff1;
 800352c:	4b11      	ldr	r3, [pc, #68]	; (8003574 <USART1_IRQHandler+0x5c>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <USART1_IRQHandler+0x58>)
 8003534:	7819      	ldrb	r1, [r3, #0]
 8003536:	4b10      	ldr	r3, [pc, #64]	; (8003578 <USART1_IRQHandler+0x60>)
 8003538:	5499      	strb	r1, [r3, r2]
    	if (RX1_BUF[c1] == '\n') {
 800353a:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <USART1_IRQHandler+0x5c>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <USART1_IRQHandler+0x60>)
 8003542:	5c9b      	ldrb	r3, [r3, r2]
 8003544:	2b0a      	cmp	r3, #10
 8003546:	d109      	bne.n	800355c <USART1_IRQHandler+0x44>
    		gps = 1;
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <USART1_IRQHandler+0x64>)
 800354a:	2201      	movs	r2, #1
 800354c:	701a      	strb	r2, [r3, #0]
    		gps_size = c1;
 800354e:	4b09      	ldr	r3, [pc, #36]	; (8003574 <USART1_IRQHandler+0x5c>)
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <USART1_IRQHandler+0x68>)
 8003554:	701a      	strb	r2, [r3, #0]
    		c1 = 0;
 8003556:	4b07      	ldr	r3, [pc, #28]	; (8003574 <USART1_IRQHandler+0x5c>)
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
    	}
    	c1++;
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <USART1_IRQHandler+0x5c>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	3301      	adds	r3, #1
 8003562:	b2da      	uxtb	r2, r3
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <USART1_IRQHandler+0x5c>)
 8003566:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 1 */
}
 8003568:	bf00      	nop
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000588 	.word	0x20000588
 8003570:	20000460 	.word	0x20000460
 8003574:	20000462 	.word	0x20000462
 8003578:	20000240 	.word	0x20000240
 800357c:	20000464 	.word	0x20000464
 8003580:	20000463 	.word	0x20000463

08003584 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800358a:	482b      	ldr	r0, [pc, #172]	; (8003638 <USART2_IRQHandler+0xb4>)
 800358c:	f003 fd6c 	bl	8007068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*) &buff2, 1);
 8003590:	2201      	movs	r2, #1
 8003592:	492a      	ldr	r1, [pc, #168]	; (800363c <USART2_IRQHandler+0xb8>)
 8003594:	4828      	ldr	r0, [pc, #160]	; (8003638 <USART2_IRQHandler+0xb4>)
 8003596:	f003 fd18 	bl	8006fca <HAL_UART_Receive_IT>
    	if (buff2 != '\n' && buff2 != '\0' ) {
 800359a:	4b28      	ldr	r3, [pc, #160]	; (800363c <USART2_IRQHandler+0xb8>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b0a      	cmp	r3, #10
 80035a0:	d017      	beq.n	80035d2 <USART2_IRQHandler+0x4e>
 80035a2:	4b26      	ldr	r3, [pc, #152]	; (800363c <USART2_IRQHandler+0xb8>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d013      	beq.n	80035d2 <USART2_IRQHandler+0x4e>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80035aa:	2201      	movs	r2, #1
 80035ac:	2180      	movs	r1, #128	; 0x80
 80035ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035b2:	f000 fcd1 	bl	8003f58 <HAL_GPIO_WritePin>
    		RX2_BUF[n] = buff2;
 80035b6:	4b22      	ldr	r3, [pc, #136]	; (8003640 <USART2_IRQHandler+0xbc>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	4b1f      	ldr	r3, [pc, #124]	; (800363c <USART2_IRQHandler+0xb8>)
 80035be:	7819      	ldrb	r1, [r3, #0]
 80035c0:	4b20      	ldr	r3, [pc, #128]	; (8003644 <USART2_IRQHandler+0xc0>)
 80035c2:	5499      	strb	r1, [r3, r2]
    		n++;
 80035c4:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <USART2_IRQHandler+0xbc>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	4b1c      	ldr	r3, [pc, #112]	; (8003640 <USART2_IRQHandler+0xbc>)
 80035ce:	701a      	strb	r2, [r3, #0]
    		n = 0;
    		//HAL_UART_Transmit(&huart3, (uint8_t*) RX2_BUF, sizeof(RX2_BUF), 1000);  // For hard fault interrupt, you have to assign priority UART ports
    		RX2 = 1;
      	}
  /* USER CODE END USART2_IRQn 1 */
}
 80035d0:	e02e      	b.n	8003630 <USART2_IRQHandler+0xac>
    	} else if(buff2 == '\n') {
 80035d2:	4b1a      	ldr	r3, [pc, #104]	; (800363c <USART2_IRQHandler+0xb8>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b0a      	cmp	r3, #10
 80035d8:	d12a      	bne.n	8003630 <USART2_IRQHandler+0xac>
    		uint8_t A = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	71fb      	strb	r3, [r7, #7]
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80035de:	2200      	movs	r2, #0
 80035e0:	2180      	movs	r1, #128	; 0x80
 80035e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035e6:	f000 fcb7 	bl	8003f58 <HAL_GPIO_WritePin>
    		for (; n < sizeof(RX2_BUF); n++) {  //  REMEMBER : n value was deleted
 80035ea:	e015      	b.n	8003618 <USART2_IRQHandler+0x94>
    			RX2_BUF[n] = COOR[A];
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	4a14      	ldr	r2, [pc, #80]	; (8003640 <USART2_IRQHandler+0xbc>)
 80035f0:	7812      	ldrb	r2, [r2, #0]
 80035f2:	4611      	mov	r1, r2
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <USART2_IRQHandler+0xc4>)
 80035f6:	5cd2      	ldrb	r2, [r2, r3]
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <USART2_IRQHandler+0xc0>)
 80035fa:	545a      	strb	r2, [r3, r1]
    			if (COOR[A] == '\0') {
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	4a12      	ldr	r2, [pc, #72]	; (8003648 <USART2_IRQHandler+0xc4>)
 8003600:	5cd3      	ldrb	r3, [r2, r3]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00d      	beq.n	8003622 <USART2_IRQHandler+0x9e>
    			A++;
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	3301      	adds	r3, #1
 800360a:	71fb      	strb	r3, [r7, #7]
    		for (; n < sizeof(RX2_BUF); n++) {  //  REMEMBER : n value was deleted
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <USART2_IRQHandler+0xbc>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	3301      	adds	r3, #1
 8003612:	b2da      	uxtb	r2, r3
 8003614:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <USART2_IRQHandler+0xbc>)
 8003616:	701a      	strb	r2, [r3, #0]
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <USART2_IRQHandler+0xbc>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b4f      	cmp	r3, #79	; 0x4f
 800361e:	d9e5      	bls.n	80035ec <USART2_IRQHandler+0x68>
 8003620:	e000      	b.n	8003624 <USART2_IRQHandler+0xa0>
    				break;
 8003622:	bf00      	nop
    		n = 0;
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <USART2_IRQHandler+0xbc>)
 8003626:	2200      	movs	r2, #0
 8003628:	701a      	strb	r2, [r3, #0]
    		RX2 = 1;
 800362a:	4b08      	ldr	r3, [pc, #32]	; (800364c <USART2_IRQHandler+0xc8>)
 800362c:	2201      	movs	r2, #1
 800362e:	701a      	strb	r2, [r3, #0]
}
 8003630:	bf00      	nop
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20000658 	.word	0x20000658
 800363c:	20000461 	.word	0x20000461
 8003640:	20000465 	.word	0x20000465
 8003644:	200003a4 	.word	0x200003a4
 8003648:	200002bc 	.word	0x200002bc
 800364c:	20000458 	.word	0x20000458

08003650 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXT line 28.
  */
void USART3_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003656:	483d      	ldr	r0, [pc, #244]	; (800374c <USART3_IRQHandler+0xfc>)
 8003658:	f003 fd06 	bl	8007068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*) &buff, 1);
 800365c:	2201      	movs	r2, #1
 800365e:	493c      	ldr	r1, [pc, #240]	; (8003750 <USART3_IRQHandler+0x100>)
 8003660:	483a      	ldr	r0, [pc, #232]	; (800374c <USART3_IRQHandler+0xfc>)
 8003662:	f003 fcb2 	bl	8006fca <HAL_UART_Receive_IT>

      	if (buff == '$')
 8003666:	4b3a      	ldr	r3, [pc, #232]	; (8003750 <USART3_IRQHandler+0x100>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b24      	cmp	r3, #36	; 0x24
 800366c:	d103      	bne.n	8003676 <USART3_IRQHandler+0x26>
      		run = 1;
 800366e:	4b39      	ldr	r3, [pc, #228]	; (8003754 <USART3_IRQHandler+0x104>)
 8003670:	2201      	movs	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
 8003674:	e002      	b.n	800367c <USART3_IRQHandler+0x2c>
      	else if(buff == 0x00){
 8003676:	4b36      	ldr	r3, [pc, #216]	; (8003750 <USART3_IRQHandler+0x100>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
      		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
      	}
      	else if(buff == 0x1A){
      	  		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
      	  	}
      	if (run == 1) {
 800367c:	4b35      	ldr	r3, [pc, #212]	; (8003754 <USART3_IRQHandler+0x104>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d15e      	bne.n	8003742 <USART3_IRQHandler+0xf2>
      		RX3_buff[count1] = buff;
 8003684:	4b34      	ldr	r3, [pc, #208]	; (8003758 <USART3_IRQHandler+0x108>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	4b31      	ldr	r3, [pc, #196]	; (8003750 <USART3_IRQHandler+0x100>)
 800368c:	7819      	ldrb	r1, [r3, #0]
 800368e:	4b33      	ldr	r3, [pc, #204]	; (800375c <USART3_IRQHandler+0x10c>)
 8003690:	5499      	strb	r1, [r3, r2]
      		count1++;
 8003692:	4b31      	ldr	r3, [pc, #196]	; (8003758 <USART3_IRQHandler+0x108>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4b2f      	ldr	r3, [pc, #188]	; (8003758 <USART3_IRQHandler+0x108>)
 800369c:	701a      	strb	r2, [r3, #0]
      		if (buff == '&') {
 800369e:	4b2c      	ldr	r3, [pc, #176]	; (8003750 <USART3_IRQHandler+0x100>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b26      	cmp	r3, #38	; 0x26
 80036a4:	d146      	bne.n	8003734 <USART3_IRQHandler+0xe4>
      			count1 = 0;
 80036a6:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <USART3_IRQHandler+0x108>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	701a      	strb	r2, [r3, #0]
      			if (RX3_buff[1] == '0' && RX3_buff[2] == 0x02)
 80036ac:	4b2b      	ldr	r3, [pc, #172]	; (800375c <USART3_IRQHandler+0x10c>)
 80036ae:	785b      	ldrb	r3, [r3, #1]
 80036b0:	2b30      	cmp	r3, #48	; 0x30
 80036b2:	d107      	bne.n	80036c4 <USART3_IRQHandler+0x74>
 80036b4:	4b29      	ldr	r3, [pc, #164]	; (800375c <USART3_IRQHandler+0x10c>)
 80036b6:	789b      	ldrb	r3, [r3, #2]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d103      	bne.n	80036c4 <USART3_IRQHandler+0x74>
      				recal = 1;
 80036bc:	4b28      	ldr	r3, [pc, #160]	; (8003760 <USART3_IRQHandler+0x110>)
 80036be:	2201      	movs	r2, #1
 80036c0:	701a      	strb	r2, [r3, #0]
 80036c2:	e02a      	b.n	800371a <USART3_IRQHandler+0xca>
      			else if (RX3_buff[1] == '0' && RX3_buff[2] == 0x05)
 80036c4:	4b25      	ldr	r3, [pc, #148]	; (800375c <USART3_IRQHandler+0x10c>)
 80036c6:	785b      	ldrb	r3, [r3, #1]
 80036c8:	2b30      	cmp	r3, #48	; 0x30
 80036ca:	d107      	bne.n	80036dc <USART3_IRQHandler+0x8c>
 80036cc:	4b23      	ldr	r3, [pc, #140]	; (800375c <USART3_IRQHandler+0x10c>)
 80036ce:	789b      	ldrb	r3, [r3, #2]
 80036d0:	2b05      	cmp	r3, #5
 80036d2:	d103      	bne.n	80036dc <USART3_IRQHandler+0x8c>
      				newrecord = 1;
 80036d4:	4b23      	ldr	r3, [pc, #140]	; (8003764 <USART3_IRQHandler+0x114>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	e01e      	b.n	800371a <USART3_IRQHandler+0xca>
      			else if (RX3_buff[1] == '0' && RX3_buff[2] == 0x03){
 80036dc:	4b1f      	ldr	r3, [pc, #124]	; (800375c <USART3_IRQHandler+0x10c>)
 80036de:	785b      	ldrb	r3, [r3, #1]
 80036e0:	2b30      	cmp	r3, #48	; 0x30
 80036e2:	d10f      	bne.n	8003704 <USART3_IRQHandler+0xb4>
 80036e4:	4b1d      	ldr	r3, [pc, #116]	; (800375c <USART3_IRQHandler+0x10c>)
 80036e6:	789b      	ldrb	r3, [r3, #2]
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d10b      	bne.n	8003704 <USART3_IRQHandler+0xb4>
      				if(pause == 0)
 80036ec:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <USART3_IRQHandler+0x118>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d103      	bne.n	80036fc <USART3_IRQHandler+0xac>
      					pause = 1;
 80036f4:	4b1c      	ldr	r3, [pc, #112]	; (8003768 <USART3_IRQHandler+0x118>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
      				if(pause == 0)
 80036fa:	e00e      	b.n	800371a <USART3_IRQHandler+0xca>
      				else
      					pause = 0;
 80036fc:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <USART3_IRQHandler+0x118>)
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]
      				if(pause == 0)
 8003702:	e00a      	b.n	800371a <USART3_IRQHandler+0xca>
      			}
      			else if (RX3_buff[1] == '0' && RX3_buff[2] == 0x04)
 8003704:	4b15      	ldr	r3, [pc, #84]	; (800375c <USART3_IRQHandler+0x10c>)
 8003706:	785b      	ldrb	r3, [r3, #1]
 8003708:	2b30      	cmp	r3, #48	; 0x30
 800370a:	d106      	bne.n	800371a <USART3_IRQHandler+0xca>
 800370c:	4b13      	ldr	r3, [pc, #76]	; (800375c <USART3_IRQHandler+0x10c>)
 800370e:	789b      	ldrb	r3, [r3, #2]
 8003710:	2b04      	cmp	r3, #4
 8003712:	d102      	bne.n	800371a <USART3_IRQHandler+0xca>
      				stop = 1;
 8003714:	4b15      	ldr	r3, [pc, #84]	; (800376c <USART3_IRQHandler+0x11c>)
 8003716:	2201      	movs	r2, #1
 8003718:	701a      	strb	r2, [r3, #0]
      			for (uint8_t i = 0; i < sizeof(RX3_buff); i++)
 800371a:	2300      	movs	r3, #0
 800371c:	71fb      	strb	r3, [r7, #7]
 800371e:	e006      	b.n	800372e <USART3_IRQHandler+0xde>
      				RX3_buff[i] = '\0';
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	4a0e      	ldr	r2, [pc, #56]	; (800375c <USART3_IRQHandler+0x10c>)
 8003724:	2100      	movs	r1, #0
 8003726:	54d1      	strb	r1, [r2, r3]
      			for (uint8_t i = 0; i < sizeof(RX3_buff); i++)
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	3301      	adds	r3, #1
 800372c:	71fb      	strb	r3, [r7, #7]
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	2b03      	cmp	r3, #3
 8003732:	d9f5      	bls.n	8003720 <USART3_IRQHandler+0xd0>
      		}
      		if (buff == '&')
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <USART3_IRQHandler+0x100>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b26      	cmp	r3, #38	; 0x26
 800373a:	d102      	bne.n	8003742 <USART3_IRQHandler+0xf2>
      			run = 0;
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <USART3_IRQHandler+0x104>)
 800373e:	2200      	movs	r2, #0
 8003740:	701a      	strb	r2, [r3, #0]
      	}
  /* USER CODE END USART3_IRQn 1 */
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	200004b8 	.word	0x200004b8
 8003750:	2000046c 	.word	0x2000046c
 8003754:	2000046e 	.word	0x2000046e
 8003758:	2000046d 	.word	0x2000046d
 800375c:	20000468 	.word	0x20000468
 8003760:	2000032d 	.word	0x2000032d
 8003764:	2000032f 	.word	0x2000032f
 8003768:	20000330 	.word	0x20000330
 800376c:	2000032e 	.word	0x2000032e

08003770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003778:	4a14      	ldr	r2, [pc, #80]	; (80037cc <_sbrk+0x5c>)
 800377a:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <_sbrk+0x60>)
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003784:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <_sbrk+0x64>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <_sbrk+0x64>)
 800378e:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <_sbrk+0x68>)
 8003790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <_sbrk+0x64>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	429a      	cmp	r2, r3
 800379e:	d207      	bcs.n	80037b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037a0:	f004 fd0c 	bl	80081bc <__errno>
 80037a4:	4602      	mov	r2, r0
 80037a6:	230c      	movs	r3, #12
 80037a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
 80037ae:	e009      	b.n	80037c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037b0:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <_sbrk+0x64>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <_sbrk+0x64>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4413      	add	r3, r2
 80037be:	4a05      	ldr	r2, [pc, #20]	; (80037d4 <_sbrk+0x64>)
 80037c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037c2:	68fb      	ldr	r3, [r7, #12]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20003000 	.word	0x20003000
 80037d0:	00000400 	.word	0x00000400
 80037d4:	20000470 	.word	0x20000470
 80037d8:	200006e8 	.word	0x200006e8

080037dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <SystemInit+0x20>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	4a05      	ldr	r2, [pc, #20]	; (80037fc <SystemInit+0x20>)
 80037e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003838 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003804:	480d      	ldr	r0, [pc, #52]	; (800383c <LoopForever+0x6>)
  ldr r1, =_edata
 8003806:	490e      	ldr	r1, [pc, #56]	; (8003840 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003808:	4a0e      	ldr	r2, [pc, #56]	; (8003844 <LoopForever+0xe>)
  movs r3, #0
 800380a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800380c:	e002      	b.n	8003814 <LoopCopyDataInit>

0800380e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800380e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003812:	3304      	adds	r3, #4

08003814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003818:	d3f9      	bcc.n	800380e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800381a:	4a0b      	ldr	r2, [pc, #44]	; (8003848 <LoopForever+0x12>)
  ldr r4, =_ebss
 800381c:	4c0b      	ldr	r4, [pc, #44]	; (800384c <LoopForever+0x16>)
  movs r3, #0
 800381e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003820:	e001      	b.n	8003826 <LoopFillZerobss>

08003822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003824:	3204      	adds	r2, #4

08003826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003828:	d3fb      	bcc.n	8003822 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800382a:	f7ff ffd7 	bl	80037dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800382e:	f004 fccb 	bl	80081c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003832:	f7fd fe81 	bl	8001538 <main>

08003836 <LoopForever>:

LoopForever:
    b LoopForever
 8003836:	e7fe      	b.n	8003836 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003838:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800383c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003840:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003844:	0800dab8 	.word	0x0800dab8
  ldr r2, =_sbss
 8003848:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800384c:	200006e4 	.word	0x200006e4

08003850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003850:	e7fe      	b.n	8003850 <ADC1_2_IRQHandler>
	...

08003854 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003858:	4b08      	ldr	r3, [pc, #32]	; (800387c <HAL_Init+0x28>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a07      	ldr	r2, [pc, #28]	; (800387c <HAL_Init+0x28>)
 800385e:	f043 0310 	orr.w	r3, r3, #16
 8003862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003864:	2003      	movs	r0, #3
 8003866:	f000 f94d 	bl	8003b04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800386a:	2000      	movs	r0, #0
 800386c:	f000 f808 	bl	8003880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003870:	f7ff fcbc 	bl	80031ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40022000 	.word	0x40022000

08003880 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003888:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <HAL_InitTick+0x54>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_InitTick+0x58>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	4619      	mov	r1, r3
 8003892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003896:	fbb3 f3f1 	udiv	r3, r3, r1
 800389a:	fbb2 f3f3 	udiv	r3, r2, r3
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 f965 	bl	8003b6e <HAL_SYSTICK_Config>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e00e      	b.n	80038cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b0f      	cmp	r3, #15
 80038b2:	d80a      	bhi.n	80038ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038b4:	2200      	movs	r2, #0
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	f04f 30ff 	mov.w	r0, #4294967295
 80038bc:	f000 f92d 	bl	8003b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038c0:	4a06      	ldr	r2, [pc, #24]	; (80038dc <HAL_InitTick+0x5c>)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e000      	b.n	80038cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20000020 	.word	0x20000020
 80038d8:	20000028 	.word	0x20000028
 80038dc:	20000024 	.word	0x20000024

080038e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038e4:	4b06      	ldr	r3, [pc, #24]	; (8003900 <HAL_IncTick+0x20>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	461a      	mov	r2, r3
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <HAL_IncTick+0x24>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4413      	add	r3, r2
 80038f0:	4a04      	ldr	r2, [pc, #16]	; (8003904 <HAL_IncTick+0x24>)
 80038f2:	6013      	str	r3, [r2, #0]
}
 80038f4:	bf00      	nop
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000028 	.word	0x20000028
 8003904:	200006dc 	.word	0x200006dc

08003908 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  return uwTick;  
 800390c:	4b03      	ldr	r3, [pc, #12]	; (800391c <HAL_GetTick+0x14>)
 800390e:	681b      	ldr	r3, [r3, #0]
}
 8003910:	4618      	mov	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	200006dc 	.word	0x200006dc

08003920 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003928:	f7ff ffee 	bl	8003908 <HAL_GetTick>
 800392c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d005      	beq.n	8003946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800393a:	4b09      	ldr	r3, [pc, #36]	; (8003960 <HAL_Delay+0x40>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4413      	add	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003946:	bf00      	nop
 8003948:	f7ff ffde 	bl	8003908 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	429a      	cmp	r2, r3
 8003956:	d8f7      	bhi.n	8003948 <HAL_Delay+0x28>
  {
  }
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000028 	.word	0x20000028

08003964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003980:	4013      	ands	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800398c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003996:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	60d3      	str	r3, [r2, #12]
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <__NVIC_GetPriorityGrouping+0x18>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	f003 0307 	and.w	r3, r3, #7
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	db0b      	blt.n	80039f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	f003 021f 	and.w	r2, r3, #31
 80039e0:	4907      	ldr	r1, [pc, #28]	; (8003a00 <__NVIC_EnableIRQ+0x38>)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2001      	movs	r0, #1
 80039ea:	fa00 f202 	lsl.w	r2, r0, r2
 80039ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	e000e100 	.word	0xe000e100

08003a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	6039      	str	r1, [r7, #0]
 8003a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	db0a      	blt.n	8003a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	490c      	ldr	r1, [pc, #48]	; (8003a50 <__NVIC_SetPriority+0x4c>)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	0112      	lsls	r2, r2, #4
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	440b      	add	r3, r1
 8003a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a2c:	e00a      	b.n	8003a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4908      	ldr	r1, [pc, #32]	; (8003a54 <__NVIC_SetPriority+0x50>)
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	3b04      	subs	r3, #4
 8003a3c:	0112      	lsls	r2, r2, #4
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	440b      	add	r3, r1
 8003a42:	761a      	strb	r2, [r3, #24]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	e000e100 	.word	0xe000e100
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	; 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f1c3 0307 	rsb	r3, r3, #7
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	bf28      	it	cs
 8003a76:	2304      	movcs	r3, #4
 8003a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	d902      	bls.n	8003a88 <NVIC_EncodePriority+0x30>
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3b03      	subs	r3, #3
 8003a86:	e000      	b.n	8003a8a <NVIC_EncodePriority+0x32>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43da      	mvns	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aaa:	43d9      	mvns	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab0:	4313      	orrs	r3, r2
         );
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3724      	adds	r7, #36	; 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ad0:	d301      	bcc.n	8003ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e00f      	b.n	8003af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	; (8003b00 <SysTick_Config+0x40>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ade:	210f      	movs	r1, #15
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae4:	f7ff ff8e 	bl	8003a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <SysTick_Config+0x40>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aee:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <SysTick_Config+0x40>)
 8003af0:	2207      	movs	r2, #7
 8003af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	e000e010 	.word	0xe000e010

08003b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff ff29 	bl	8003964 <__NVIC_SetPriorityGrouping>
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b086      	sub	sp, #24
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	4603      	mov	r3, r0
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b2c:	f7ff ff3e 	bl	80039ac <__NVIC_GetPriorityGrouping>
 8003b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	6978      	ldr	r0, [r7, #20]
 8003b38:	f7ff ff8e 	bl	8003a58 <NVIC_EncodePriority>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff5d 	bl	8003a04 <__NVIC_SetPriority>
}
 8003b4a:	bf00      	nop
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	4603      	mov	r3, r0
 8003b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff31 	bl	80039c8 <__NVIC_EnableIRQ>
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff ffa2 	bl	8003ac0 <SysTick_Config>
 8003b7c:	4603      	mov	r3, r0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d008      	beq.n	8003baa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e020      	b.n	8003bec <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 020e 	bic.w	r2, r2, #14
 8003bb8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0201 	bic.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d005      	beq.n	8003c1a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2204      	movs	r2, #4
 8003c12:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
 8003c18:	e027      	b.n	8003c6a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 020e 	bic.w	r2, r2, #14
 8003c28:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	2101      	movs	r1, #1
 8003c44:	fa01 f202 	lsl.w	r2, r1, r2
 8003c48:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	4798      	blx	r3
    } 
  }
  return status;
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c82:	e14e      	b.n	8003f22 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	2101      	movs	r1, #1
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c90:	4013      	ands	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8140 	beq.w	8003f1c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d005      	beq.n	8003cb4 <HAL_GPIO_Init+0x40>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d130      	bne.n	8003d16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cea:	2201      	movs	r2, #1
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	f003 0201 	and.w	r2, r3, #1
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d017      	beq.n	8003d52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43db      	mvns	r3, r3
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4013      	ands	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d123      	bne.n	8003da6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	08da      	lsrs	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3208      	adds	r2, #8
 8003d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	220f      	movs	r2, #15
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	08da      	lsrs	r2, r3, #3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3208      	adds	r2, #8
 8003da0:	6939      	ldr	r1, [r7, #16]
 8003da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	2203      	movs	r2, #3
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 0203 	and.w	r2, r3, #3
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 809a 	beq.w	8003f1c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003de8:	4b55      	ldr	r3, [pc, #340]	; (8003f40 <HAL_GPIO_Init+0x2cc>)
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	4a54      	ldr	r2, [pc, #336]	; (8003f40 <HAL_GPIO_Init+0x2cc>)
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	6193      	str	r3, [r2, #24]
 8003df4:	4b52      	ldr	r3, [pc, #328]	; (8003f40 <HAL_GPIO_Init+0x2cc>)
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e00:	4a50      	ldr	r2, [pc, #320]	; (8003f44 <HAL_GPIO_Init+0x2d0>)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	089b      	lsrs	r3, r3, #2
 8003e06:	3302      	adds	r3, #2
 8003e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	220f      	movs	r2, #15
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4013      	ands	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e2a:	d013      	beq.n	8003e54 <HAL_GPIO_Init+0x1e0>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a46      	ldr	r2, [pc, #280]	; (8003f48 <HAL_GPIO_Init+0x2d4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00d      	beq.n	8003e50 <HAL_GPIO_Init+0x1dc>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a45      	ldr	r2, [pc, #276]	; (8003f4c <HAL_GPIO_Init+0x2d8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d007      	beq.n	8003e4c <HAL_GPIO_Init+0x1d8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a44      	ldr	r2, [pc, #272]	; (8003f50 <HAL_GPIO_Init+0x2dc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d101      	bne.n	8003e48 <HAL_GPIO_Init+0x1d4>
 8003e44:	2303      	movs	r3, #3
 8003e46:	e006      	b.n	8003e56 <HAL_GPIO_Init+0x1e2>
 8003e48:	2305      	movs	r3, #5
 8003e4a:	e004      	b.n	8003e56 <HAL_GPIO_Init+0x1e2>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e002      	b.n	8003e56 <HAL_GPIO_Init+0x1e2>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <HAL_GPIO_Init+0x1e2>
 8003e54:	2300      	movs	r3, #0
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	f002 0203 	and.w	r2, r2, #3
 8003e5c:	0092      	lsls	r2, r2, #2
 8003e5e:	4093      	lsls	r3, r2
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e66:	4937      	ldr	r1, [pc, #220]	; (8003f44 <HAL_GPIO_Init+0x2d0>)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	089b      	lsrs	r3, r3, #2
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e74:	4b37      	ldr	r3, [pc, #220]	; (8003f54 <HAL_GPIO_Init+0x2e0>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4013      	ands	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e98:	4a2e      	ldr	r2, [pc, #184]	; (8003f54 <HAL_GPIO_Init+0x2e0>)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e9e:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <HAL_GPIO_Init+0x2e0>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ec2:	4a24      	ldr	r2, [pc, #144]	; (8003f54 <HAL_GPIO_Init+0x2e0>)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ec8:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <HAL_GPIO_Init+0x2e0>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003eec:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <HAL_GPIO_Init+0x2e0>)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ef2:	4b18      	ldr	r3, [pc, #96]	; (8003f54 <HAL_GPIO_Init+0x2e0>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4013      	ands	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f16:	4a0f      	ldr	r2, [pc, #60]	; (8003f54 <HAL_GPIO_Init+0x2e0>)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f47f aea9 	bne.w	8003c84 <HAL_GPIO_Init+0x10>
  }
}
 8003f32:	bf00      	nop
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40010000 	.word	0x40010000
 8003f48:	48000400 	.word	0x48000400
 8003f4c:	48000800 	.word	0x48000800
 8003f50:	48000c00 	.word	0x48000c00
 8003f54:	40010400 	.word	0x40010400

08003f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	807b      	strh	r3, [r7, #2]
 8003f64:	4613      	mov	r3, r2
 8003f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f68:	787b      	ldrb	r3, [r7, #1]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f6e:	887a      	ldrh	r2, [r7, #2]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f74:	e002      	b.n	8003f7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f9a:	887a      	ldrh	r2, [r7, #2]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	041a      	lsls	r2, r3, #16
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	43d9      	mvns	r1, r3
 8003fa6:	887b      	ldrh	r3, [r7, #2]
 8003fa8:	400b      	ands	r3, r1
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	619a      	str	r2, [r3, #24]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e081      	b.n	80040d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d106      	bne.n	8003fe8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff f926 	bl	8003234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2224      	movs	r2, #36	; 0x24
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800400c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800401c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d107      	bne.n	8004036 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	e006      	b.n	8004044 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004042:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d104      	bne.n	8004056 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004054:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004068:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004078:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	69d9      	ldr	r1, [r3, #28]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1a      	ldr	r2, [r3, #32]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	607a      	str	r2, [r7, #4]
 80040e6:	461a      	mov	r2, r3
 80040e8:	460b      	mov	r3, r1
 80040ea:	817b      	strh	r3, [r7, #10]
 80040ec:	4613      	mov	r3, r2
 80040ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	f040 80da 	bne.w	80042b2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_I2C_Master_Transmit+0x30>
 8004108:	2302      	movs	r3, #2
 800410a:	e0d3      	b.n	80042b4 <HAL_I2C_Master_Transmit+0x1d8>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004114:	f7ff fbf8 	bl	8003908 <HAL_GetTick>
 8004118:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	2319      	movs	r3, #25
 8004120:	2201      	movs	r2, #1
 8004122:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fcce 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e0be      	b.n	80042b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2221      	movs	r2, #33	; 0x21
 800413a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2210      	movs	r2, #16
 8004142:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	893a      	ldrh	r2, [r7, #8]
 8004156:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	2bff      	cmp	r3, #255	; 0xff
 8004166:	d90e      	bls.n	8004186 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	22ff      	movs	r2, #255	; 0xff
 800416c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	b2da      	uxtb	r2, r3
 8004174:	8979      	ldrh	r1, [r7, #10]
 8004176:	4b51      	ldr	r3, [pc, #324]	; (80042bc <HAL_I2C_Master_Transmit+0x1e0>)
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 fdd4 	bl	8004d2c <I2C_TransferConfig>
 8004184:	e06c      	b.n	8004260 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004194:	b2da      	uxtb	r2, r3
 8004196:	8979      	ldrh	r1, [r7, #10]
 8004198:	4b48      	ldr	r3, [pc, #288]	; (80042bc <HAL_I2C_Master_Transmit+0x1e0>)
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 fdc3 	bl	8004d2c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80041a6:	e05b      	b.n	8004260 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	6a39      	ldr	r1, [r7, #32]
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 fccb 	bl	8004b48 <I2C_WaitOnTXISFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e07b      	b.n	80042b4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	781a      	ldrb	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d034      	beq.n	8004260 <HAL_I2C_Master_Transmit+0x184>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d130      	bne.n	8004260 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	2200      	movs	r2, #0
 8004206:	2180      	movs	r1, #128	; 0x80
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fc5d 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e04d      	b.n	80042b4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	2bff      	cmp	r3, #255	; 0xff
 8004220:	d90e      	bls.n	8004240 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	22ff      	movs	r2, #255	; 0xff
 8004226:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	b2da      	uxtb	r2, r3
 800422e:	8979      	ldrh	r1, [r7, #10]
 8004230:	2300      	movs	r3, #0
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 fd77 	bl	8004d2c <I2C_TransferConfig>
 800423e:	e00f      	b.n	8004260 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424e:	b2da      	uxtb	r2, r3
 8004250:	8979      	ldrh	r1, [r7, #10]
 8004252:	2300      	movs	r3, #0
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fd66 	bl	8004d2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d19e      	bne.n	80041a8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	6a39      	ldr	r1, [r7, #32]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 fcaa 	bl	8004bc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e01a      	b.n	80042b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2220      	movs	r2, #32
 8004284:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6859      	ldr	r1, [r3, #4]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_I2C_Master_Transmit+0x1e4>)
 8004292:	400b      	ands	r3, r1
 8004294:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e000      	b.n	80042b4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
  }
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	80002000 	.word	0x80002000
 80042c0:	fe00e800 	.word	0xfe00e800

080042c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	4608      	mov	r0, r1
 80042ce:	4611      	mov	r1, r2
 80042d0:	461a      	mov	r2, r3
 80042d2:	4603      	mov	r3, r0
 80042d4:	817b      	strh	r3, [r7, #10]
 80042d6:	460b      	mov	r3, r1
 80042d8:	813b      	strh	r3, [r7, #8]
 80042da:	4613      	mov	r3, r2
 80042dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	f040 80f9 	bne.w	80044de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <HAL_I2C_Mem_Write+0x34>
 80042f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0ed      	b.n	80044e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_I2C_Mem_Write+0x4e>
 800430e:	2302      	movs	r3, #2
 8004310:	e0e6      	b.n	80044e0 <HAL_I2C_Mem_Write+0x21c>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800431a:	f7ff faf5 	bl	8003908 <HAL_GetTick>
 800431e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	2319      	movs	r3, #25
 8004326:	2201      	movs	r2, #1
 8004328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 fbcb 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0d1      	b.n	80044e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2221      	movs	r2, #33	; 0x21
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2240      	movs	r2, #64	; 0x40
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a3a      	ldr	r2, [r7, #32]
 8004356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800435c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004364:	88f8      	ldrh	r0, [r7, #6]
 8004366:	893a      	ldrh	r2, [r7, #8]
 8004368:	8979      	ldrh	r1, [r7, #10]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	4603      	mov	r3, r0
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fadb 	bl	8004930 <I2C_RequestMemoryWrite>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0a9      	b.n	80044e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004390:	b29b      	uxth	r3, r3
 8004392:	2bff      	cmp	r3, #255	; 0xff
 8004394:	d90e      	bls.n	80043b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	22ff      	movs	r2, #255	; 0xff
 800439a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	8979      	ldrh	r1, [r7, #10]
 80043a4:	2300      	movs	r3, #0
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 fcbd 	bl	8004d2c <I2C_TransferConfig>
 80043b2:	e00f      	b.n	80043d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	8979      	ldrh	r1, [r7, #10]
 80043c6:	2300      	movs	r3, #0
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 fcac 	bl	8004d2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 fbb5 	bl	8004b48 <I2C_WaitOnTXISFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e07b      	b.n	80044e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	781a      	ldrb	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d034      	beq.n	800448c <HAL_I2C_Mem_Write+0x1c8>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004426:	2b00      	cmp	r3, #0
 8004428:	d130      	bne.n	800448c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004430:	2200      	movs	r2, #0
 8004432:	2180      	movs	r1, #128	; 0x80
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fb47 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e04d      	b.n	80044e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	2bff      	cmp	r3, #255	; 0xff
 800444c:	d90e      	bls.n	800446c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	22ff      	movs	r2, #255	; 0xff
 8004452:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004458:	b2da      	uxtb	r2, r3
 800445a:	8979      	ldrh	r1, [r7, #10]
 800445c:	2300      	movs	r3, #0
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 fc61 	bl	8004d2c <I2C_TransferConfig>
 800446a:	e00f      	b.n	800448c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447a:	b2da      	uxtb	r2, r3
 800447c:	8979      	ldrh	r1, [r7, #10]
 800447e:	2300      	movs	r3, #0
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fc50 	bl	8004d2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d19e      	bne.n	80043d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 fb94 	bl	8004bc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e01a      	b.n	80044e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2220      	movs	r2, #32
 80044b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6859      	ldr	r1, [r3, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <HAL_I2C_Mem_Write+0x224>)
 80044be:	400b      	ands	r3, r1
 80044c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	e000      	b.n	80044e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80044de:	2302      	movs	r3, #2
  }
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	fe00e800 	.word	0xfe00e800

080044ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	4608      	mov	r0, r1
 80044f6:	4611      	mov	r1, r2
 80044f8:	461a      	mov	r2, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	817b      	strh	r3, [r7, #10]
 80044fe:	460b      	mov	r3, r1
 8004500:	813b      	strh	r3, [r7, #8]
 8004502:	4613      	mov	r3, r2
 8004504:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b20      	cmp	r3, #32
 8004510:	f040 80fd 	bne.w	800470e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_I2C_Mem_Read+0x34>
 800451a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800451c:	2b00      	cmp	r3, #0
 800451e:	d105      	bne.n	800452c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004526:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0f1      	b.n	8004710 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_I2C_Mem_Read+0x4e>
 8004536:	2302      	movs	r3, #2
 8004538:	e0ea      	b.n	8004710 <HAL_I2C_Mem_Read+0x224>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004542:	f7ff f9e1 	bl	8003908 <HAL_GetTick>
 8004546:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	2319      	movs	r3, #25
 800454e:	2201      	movs	r2, #1
 8004550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 fab7 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0d5      	b.n	8004710 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2222      	movs	r2, #34	; 0x22
 8004568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2240      	movs	r2, #64	; 0x40
 8004570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a3a      	ldr	r2, [r7, #32]
 800457e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004584:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800458c:	88f8      	ldrh	r0, [r7, #6]
 800458e:	893a      	ldrh	r2, [r7, #8]
 8004590:	8979      	ldrh	r1, [r7, #10]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	4603      	mov	r3, r0
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fa1b 	bl	80049d8 <I2C_RequestMemoryRead>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0ad      	b.n	8004710 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2bff      	cmp	r3, #255	; 0xff
 80045bc:	d90e      	bls.n	80045dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	22ff      	movs	r2, #255	; 0xff
 80045c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	8979      	ldrh	r1, [r7, #10]
 80045cc:	4b52      	ldr	r3, [pc, #328]	; (8004718 <HAL_I2C_Mem_Read+0x22c>)
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 fba9 	bl	8004d2c <I2C_TransferConfig>
 80045da:	e00f      	b.n	80045fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	8979      	ldrh	r1, [r7, #10]
 80045ee:	4b4a      	ldr	r3, [pc, #296]	; (8004718 <HAL_I2C_Mem_Read+0x22c>)
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 fb98 	bl	8004d2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	2200      	movs	r2, #0
 8004604:	2104      	movs	r1, #4
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fa5e 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e07c      	b.n	8004710 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d034      	beq.n	80046bc <HAL_I2C_Mem_Read+0x1d0>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004656:	2b00      	cmp	r3, #0
 8004658:	d130      	bne.n	80046bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004660:	2200      	movs	r2, #0
 8004662:	2180      	movs	r1, #128	; 0x80
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fa2f 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e04d      	b.n	8004710 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	2bff      	cmp	r3, #255	; 0xff
 800467c:	d90e      	bls.n	800469c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	22ff      	movs	r2, #255	; 0xff
 8004682:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004688:	b2da      	uxtb	r2, r3
 800468a:	8979      	ldrh	r1, [r7, #10]
 800468c:	2300      	movs	r3, #0
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 fb49 	bl	8004d2c <I2C_TransferConfig>
 800469a:	e00f      	b.n	80046bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	8979      	ldrh	r1, [r7, #10]
 80046ae:	2300      	movs	r3, #0
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fb38 	bl	8004d2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d19a      	bne.n	80045fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 fa7c 	bl	8004bc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e01a      	b.n	8004710 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2220      	movs	r2, #32
 80046e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6859      	ldr	r1, [r3, #4]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_I2C_Mem_Read+0x230>)
 80046ee:	400b      	ands	r3, r1
 80046f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	e000      	b.n	8004710 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800470e:	2302      	movs	r3, #2
  }
}
 8004710:	4618      	mov	r0, r3
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	80002400 	.word	0x80002400
 800471c:	fe00e800 	.word	0xfe00e800

08004720 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08a      	sub	sp, #40	; 0x28
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	460b      	mov	r3, r1
 800472e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b20      	cmp	r3, #32
 800473e:	f040 80f1 	bne.w	8004924 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800474c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004750:	d101      	bne.n	8004756 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004752:	2302      	movs	r3, #2
 8004754:	e0e7      	b.n	8004926 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_I2C_IsDeviceReady+0x44>
 8004760:	2302      	movs	r3, #2
 8004762:	e0e0      	b.n	8004926 <HAL_I2C_IsDeviceReady+0x206>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2224      	movs	r2, #36	; 0x24
 8004770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d107      	bne.n	8004792 <HAL_I2C_IsDeviceReady+0x72>
 8004782:	897b      	ldrh	r3, [r7, #10]
 8004784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004788:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800478c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004790:	e004      	b.n	800479c <HAL_I2C_IsDeviceReady+0x7c>
 8004792:	897b      	ldrh	r3, [r7, #10]
 8004794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004798:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80047a2:	f7ff f8b1 	bl	8003908 <HAL_GetTick>
 80047a6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	bf0c      	ite	eq
 80047b6:	2301      	moveq	r3, #1
 80047b8:	2300      	movne	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	bf0c      	ite	eq
 80047cc:	2301      	moveq	r3, #1
 80047ce:	2300      	movne	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80047d4:	e034      	b.n	8004840 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d01a      	beq.n	8004814 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047de:	f7ff f893 	bl	8003908 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d302      	bcc.n	80047f4 <HAL_I2C_IsDeviceReady+0xd4>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10f      	bne.n	8004814 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004800:	f043 0220 	orr.w	r2, r3, #32
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e088      	b.n	8004926 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b20      	cmp	r3, #32
 8004820:	bf0c      	ite	eq
 8004822:	2301      	moveq	r3, #1
 8004824:	2300      	movne	r3, #0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b10      	cmp	r3, #16
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004840:	7ffb      	ldrb	r3, [r7, #31]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d102      	bne.n	800484c <HAL_I2C_IsDeviceReady+0x12c>
 8004846:	7fbb      	ldrb	r3, [r7, #30]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0c4      	beq.n	80047d6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	2b10      	cmp	r3, #16
 8004858:	d01a      	beq.n	8004890 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2200      	movs	r2, #0
 8004862:	2120      	movs	r1, #32
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 f92f 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e058      	b.n	8004926 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2220      	movs	r2, #32
 800487a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	e04a      	b.n	8004926 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2200      	movs	r2, #0
 8004898:	2120      	movs	r1, #32
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f914 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e03d      	b.n	8004926 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2210      	movs	r2, #16
 80048b0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2220      	movs	r2, #32
 80048b8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d118      	bne.n	80048f4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048d0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2200      	movs	r2, #0
 80048da:	2120      	movs	r1, #32
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f8f3 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e01c      	b.n	8004926 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2220      	movs	r2, #32
 80048f2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	3301      	adds	r3, #1
 80048f8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	429a      	cmp	r2, r3
 8004900:	f63f af3b 	bhi.w	800477a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004910:	f043 0220 	orr.w	r2, r3, #32
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004924:	2302      	movs	r3, #2
  }
}
 8004926:	4618      	mov	r0, r3
 8004928:	3720      	adds	r7, #32
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	4608      	mov	r0, r1
 800493a:	4611      	mov	r1, r2
 800493c:	461a      	mov	r2, r3
 800493e:	4603      	mov	r3, r0
 8004940:	817b      	strh	r3, [r7, #10]
 8004942:	460b      	mov	r3, r1
 8004944:	813b      	strh	r3, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800494a:	88fb      	ldrh	r3, [r7, #6]
 800494c:	b2da      	uxtb	r2, r3
 800494e:	8979      	ldrh	r1, [r7, #10]
 8004950:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <I2C_RequestMemoryWrite+0xa4>)
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f9e7 	bl	8004d2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	69b9      	ldr	r1, [r7, #24]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 f8f0 	bl	8004b48 <I2C_WaitOnTXISFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e02c      	b.n	80049cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d105      	bne.n	8004984 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004978:	893b      	ldrh	r3, [r7, #8]
 800497a:	b2da      	uxtb	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	629a      	str	r2, [r3, #40]	; 0x28
 8004982:	e015      	b.n	80049b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004984:	893b      	ldrh	r3, [r7, #8]
 8004986:	0a1b      	lsrs	r3, r3, #8
 8004988:	b29b      	uxth	r3, r3
 800498a:	b2da      	uxtb	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	69b9      	ldr	r1, [r7, #24]
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f8d6 	bl	8004b48 <I2C_WaitOnTXISFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e012      	b.n	80049cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049a6:	893b      	ldrh	r3, [r7, #8]
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2200      	movs	r2, #0
 80049b8:	2180      	movs	r1, #128	; 0x80
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 f884 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	80002000 	.word	0x80002000

080049d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	4608      	mov	r0, r1
 80049e2:	4611      	mov	r1, r2
 80049e4:	461a      	mov	r2, r3
 80049e6:	4603      	mov	r3, r0
 80049e8:	817b      	strh	r3, [r7, #10]
 80049ea:	460b      	mov	r3, r1
 80049ec:	813b      	strh	r3, [r7, #8]
 80049ee:	4613      	mov	r3, r2
 80049f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	8979      	ldrh	r1, [r7, #10]
 80049f8:	4b20      	ldr	r3, [pc, #128]	; (8004a7c <I2C_RequestMemoryRead+0xa4>)
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	2300      	movs	r3, #0
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f994 	bl	8004d2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	69b9      	ldr	r1, [r7, #24]
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 f89d 	bl	8004b48 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e02c      	b.n	8004a72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a18:	88fb      	ldrh	r3, [r7, #6]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d105      	bne.n	8004a2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a1e:	893b      	ldrh	r3, [r7, #8]
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	629a      	str	r2, [r3, #40]	; 0x28
 8004a28:	e015      	b.n	8004a56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a2a:	893b      	ldrh	r3, [r7, #8]
 8004a2c:	0a1b      	lsrs	r3, r3, #8
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	69b9      	ldr	r1, [r7, #24]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f883 	bl	8004b48 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e012      	b.n	8004a72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a4c:	893b      	ldrh	r3, [r7, #8]
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2140      	movs	r1, #64	; 0x40
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f831 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	80002000 	.word	0x80002000

08004a80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d103      	bne.n	8004a9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d007      	beq.n	8004abc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	619a      	str	r2, [r3, #24]
  }
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ad8:	e022      	b.n	8004b20 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d01e      	beq.n	8004b20 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae2:	f7fe ff11 	bl	8003908 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d302      	bcc.n	8004af8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d113      	bne.n	8004b20 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afc:	f043 0220 	orr.w	r2, r3, #32
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e00f      	b.n	8004b40 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	bf0c      	ite	eq
 8004b30:	2301      	moveq	r3, #1
 8004b32:	2300      	movne	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	461a      	mov	r2, r3
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d0cd      	beq.n	8004ada <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b54:	e02c      	b.n	8004bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f870 	bl	8004c40 <I2C_IsAcknowledgeFailed>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e02a      	b.n	8004bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b70:	d01e      	beq.n	8004bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b72:	f7fe fec9 	bl	8003908 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d302      	bcc.n	8004b88 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d113      	bne.n	8004bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8c:	f043 0220 	orr.w	r2, r3, #32
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e007      	b.n	8004bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d1cb      	bne.n	8004b56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bd4:	e028      	b.n	8004c28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 f830 	bl	8004c40 <I2C_IsAcknowledgeFailed>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e026      	b.n	8004c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bea:	f7fe fe8d 	bl	8003908 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d302      	bcc.n	8004c00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d113      	bne.n	8004c28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c04:	f043 0220 	orr.w	r2, r3, #32
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e007      	b.n	8004c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d1cf      	bne.n	8004bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b10      	cmp	r3, #16
 8004c58:	d161      	bne.n	8004d1e <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c68:	d02b      	beq.n	8004cc2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c78:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c7a:	e022      	b.n	8004cc2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d01e      	beq.n	8004cc2 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c84:	f7fe fe40 	bl	8003908 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d302      	bcc.n	8004c9a <I2C_IsAcknowledgeFailed+0x5a>
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d113      	bne.n	8004cc2 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9e:	f043 0220 	orr.w	r2, r3, #32
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e02e      	b.n	8004d20 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d1d5      	bne.n	8004c7c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2210      	movs	r2, #16
 8004cd6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7ff fecd 	bl	8004a80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6859      	ldr	r1, [r3, #4]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4b0d      	ldr	r3, [pc, #52]	; (8004d28 <I2C_IsAcknowledgeFailed+0xe8>)
 8004cf2:	400b      	ands	r3, r1
 8004cf4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	f043 0204 	orr.w	r2, r3, #4
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	fe00e800 	.word	0xfe00e800

08004d2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	607b      	str	r3, [r7, #4]
 8004d36:	460b      	mov	r3, r1
 8004d38:	817b      	strh	r3, [r7, #10]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	0d5b      	lsrs	r3, r3, #21
 8004d48:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004d4c:	4b0d      	ldr	r3, [pc, #52]	; (8004d84 <I2C_TransferConfig+0x58>)
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	43db      	mvns	r3, r3
 8004d52:	ea02 0103 	and.w	r1, r2, r3
 8004d56:	897b      	ldrh	r3, [r7, #10]
 8004d58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d5c:	7a7b      	ldrb	r3, [r7, #9]
 8004d5e:	041b      	lsls	r3, r3, #16
 8004d60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004d76:	bf00      	nop
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	03ff63ff 	.word	0x03ff63ff

08004d88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d138      	bne.n	8004e10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004da8:	2302      	movs	r3, #2
 8004daa:	e032      	b.n	8004e12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2224      	movs	r2, #36	; 0x24
 8004db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0201 	bic.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6819      	ldr	r1, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	e000      	b.n	8004e12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e10:	2302      	movs	r3, #2
  }
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b085      	sub	sp, #20
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d139      	bne.n	8004ea8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e033      	b.n	8004eaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2224      	movs	r2, #36	; 0x24
 8004e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	e000      	b.n	8004eaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ea8:	2302      	movs	r3, #2
  }
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
	...

08004eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	1d3b      	adds	r3, r7, #4
 8004ec2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ec4:	1d3b      	adds	r3, r7, #4
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d102      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f000 bef4 	b.w	8005cba <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ed2:	1d3b      	adds	r3, r7, #4
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 816a 	beq.w	80051b6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004ee2:	4bb3      	ldr	r3, [pc, #716]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f003 030c 	and.w	r3, r3, #12
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d00c      	beq.n	8004f08 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004eee:	4bb0      	ldr	r3, [pc, #704]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f003 030c 	and.w	r3, r3, #12
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d159      	bne.n	8004fae <HAL_RCC_OscConfig+0xf6>
 8004efa:	4bad      	ldr	r3, [pc, #692]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f06:	d152      	bne.n	8004fae <HAL_RCC_OscConfig+0xf6>
 8004f08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f0c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f10:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004f14:	fa93 f3a3 	rbit	r3, r3
 8004f18:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f1c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f20:	fab3 f383 	clz	r3, r3
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	f043 0301 	orr.w	r3, r3, #1
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d102      	bne.n	8004f3a <HAL_RCC_OscConfig+0x82>
 8004f34:	4b9e      	ldr	r3, [pc, #632]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	e015      	b.n	8004f66 <HAL_RCC_OscConfig+0xae>
 8004f3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f3e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f42:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004f46:	fa93 f3a3 	rbit	r3, r3
 8004f4a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004f4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f52:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004f56:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004f5a:	fa93 f3a3 	rbit	r3, r3
 8004f5e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004f62:	4b93      	ldr	r3, [pc, #588]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f6a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004f6e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004f72:	fa92 f2a2 	rbit	r2, r2
 8004f76:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004f7a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004f7e:	fab2 f282 	clz	r2, r2
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	f042 0220 	orr.w	r2, r2, #32
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	f002 021f 	and.w	r2, r2, #31
 8004f8e:	2101      	movs	r1, #1
 8004f90:	fa01 f202 	lsl.w	r2, r1, r2
 8004f94:	4013      	ands	r3, r2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 810c 	beq.w	80051b4 <HAL_RCC_OscConfig+0x2fc>
 8004f9c:	1d3b      	adds	r3, r7, #4
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f040 8106 	bne.w	80051b4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f000 be86 	b.w	8005cba <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fae:	1d3b      	adds	r3, r7, #4
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb8:	d106      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x110>
 8004fba:	4b7d      	ldr	r3, [pc, #500]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a7c      	ldr	r2, [pc, #496]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8004fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	e030      	b.n	800502a <HAL_RCC_OscConfig+0x172>
 8004fc8:	1d3b      	adds	r3, r7, #4
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10c      	bne.n	8004fec <HAL_RCC_OscConfig+0x134>
 8004fd2:	4b77      	ldr	r3, [pc, #476]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a76      	ldr	r2, [pc, #472]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8004fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	4b74      	ldr	r3, [pc, #464]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a73      	ldr	r2, [pc, #460]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8004fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e01e      	b.n	800502a <HAL_RCC_OscConfig+0x172>
 8004fec:	1d3b      	adds	r3, r7, #4
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ff6:	d10c      	bne.n	8005012 <HAL_RCC_OscConfig+0x15a>
 8004ff8:	4b6d      	ldr	r3, [pc, #436]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a6c      	ldr	r2, [pc, #432]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8004ffe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	4b6a      	ldr	r3, [pc, #424]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a69      	ldr	r2, [pc, #420]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 800500a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	e00b      	b.n	800502a <HAL_RCC_OscConfig+0x172>
 8005012:	4b67      	ldr	r3, [pc, #412]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a66      	ldr	r2, [pc, #408]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8005018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	4b64      	ldr	r3, [pc, #400]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a63      	ldr	r2, [pc, #396]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8005024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005028:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800502a:	4b61      	ldr	r3, [pc, #388]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	f023 020f 	bic.w	r2, r3, #15
 8005032:	1d3b      	adds	r3, r7, #4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	495d      	ldr	r1, [pc, #372]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 800503a:	4313      	orrs	r3, r2
 800503c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800503e:	1d3b      	adds	r3, r7, #4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d059      	beq.n	80050fc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005048:	f7fe fc5e 	bl	8003908 <HAL_GetTick>
 800504c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005050:	e00a      	b.n	8005068 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005052:	f7fe fc59 	bl	8003908 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b64      	cmp	r3, #100	; 0x64
 8005060:	d902      	bls.n	8005068 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	f000 be29 	b.w	8005cba <HAL_RCC_OscConfig+0xe02>
 8005068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800506c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005070:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005074:	fa93 f3a3 	rbit	r3, r3
 8005078:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800507c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005080:	fab3 f383 	clz	r3, r3
 8005084:	b2db      	uxtb	r3, r3
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	b2db      	uxtb	r3, r3
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b01      	cmp	r3, #1
 8005092:	d102      	bne.n	800509a <HAL_RCC_OscConfig+0x1e2>
 8005094:	4b46      	ldr	r3, [pc, #280]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	e015      	b.n	80050c6 <HAL_RCC_OscConfig+0x20e>
 800509a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800509e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80050a6:	fa93 f3a3 	rbit	r3, r3
 80050aa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80050ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050b2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80050b6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80050ba:	fa93 f3a3 	rbit	r3, r3
 80050be:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80050c2:	4b3b      	ldr	r3, [pc, #236]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050ca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80050ce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80050d2:	fa92 f2a2 	rbit	r2, r2
 80050d6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80050da:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80050de:	fab2 f282 	clz	r2, r2
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	f042 0220 	orr.w	r2, r2, #32
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	f002 021f 	and.w	r2, r2, #31
 80050ee:	2101      	movs	r1, #1
 80050f0:	fa01 f202 	lsl.w	r2, r1, r2
 80050f4:	4013      	ands	r3, r2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0ab      	beq.n	8005052 <HAL_RCC_OscConfig+0x19a>
 80050fa:	e05c      	b.n	80051b6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fc:	f7fe fc04 	bl	8003908 <HAL_GetTick>
 8005100:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005104:	e00a      	b.n	800511c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005106:	f7fe fbff 	bl	8003908 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b64      	cmp	r3, #100	; 0x64
 8005114:	d902      	bls.n	800511c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	f000 bdcf 	b.w	8005cba <HAL_RCC_OscConfig+0xe02>
 800511c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005120:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005124:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005128:	fa93 f3a3 	rbit	r3, r3
 800512c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005130:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005134:	fab3 f383 	clz	r3, r3
 8005138:	b2db      	uxtb	r3, r3
 800513a:	095b      	lsrs	r3, r3, #5
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	d102      	bne.n	800514e <HAL_RCC_OscConfig+0x296>
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	e015      	b.n	800517a <HAL_RCC_OscConfig+0x2c2>
 800514e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005152:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005156:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800515a:	fa93 f3a3 	rbit	r3, r3
 800515e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005162:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005166:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800516a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800516e:	fa93 f3a3 	rbit	r3, r3
 8005172:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005176:	4b0e      	ldr	r3, [pc, #56]	; (80051b0 <HAL_RCC_OscConfig+0x2f8>)
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800517e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005182:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005186:	fa92 f2a2 	rbit	r2, r2
 800518a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800518e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005192:	fab2 f282 	clz	r2, r2
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	f042 0220 	orr.w	r2, r2, #32
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	f002 021f 	and.w	r2, r2, #31
 80051a2:	2101      	movs	r1, #1
 80051a4:	fa01 f202 	lsl.w	r2, r1, r2
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1ab      	bne.n	8005106 <HAL_RCC_OscConfig+0x24e>
 80051ae:	e002      	b.n	80051b6 <HAL_RCC_OscConfig+0x2fe>
 80051b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051b6:	1d3b      	adds	r3, r7, #4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 816f 	beq.w	80054a4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80051c6:	4bd0      	ldr	r3, [pc, #832]	; (8005508 <HAL_RCC_OscConfig+0x650>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f003 030c 	and.w	r3, r3, #12
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00b      	beq.n	80051ea <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80051d2:	4bcd      	ldr	r3, [pc, #820]	; (8005508 <HAL_RCC_OscConfig+0x650>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d16c      	bne.n	80052b8 <HAL_RCC_OscConfig+0x400>
 80051de:	4bca      	ldr	r3, [pc, #808]	; (8005508 <HAL_RCC_OscConfig+0x650>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d166      	bne.n	80052b8 <HAL_RCC_OscConfig+0x400>
 80051ea:	2302      	movs	r3, #2
 80051ec:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80051f4:	fa93 f3a3 	rbit	r3, r3
 80051f8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80051fc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005200:	fab3 f383 	clz	r3, r3
 8005204:	b2db      	uxtb	r3, r3
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	b2db      	uxtb	r3, r3
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b01      	cmp	r3, #1
 8005212:	d102      	bne.n	800521a <HAL_RCC_OscConfig+0x362>
 8005214:	4bbc      	ldr	r3, [pc, #752]	; (8005508 <HAL_RCC_OscConfig+0x650>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	e013      	b.n	8005242 <HAL_RCC_OscConfig+0x38a>
 800521a:	2302      	movs	r3, #2
 800521c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005220:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005224:	fa93 f3a3 	rbit	r3, r3
 8005228:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800522c:	2302      	movs	r3, #2
 800522e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005232:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005236:	fa93 f3a3 	rbit	r3, r3
 800523a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800523e:	4bb2      	ldr	r3, [pc, #712]	; (8005508 <HAL_RCC_OscConfig+0x650>)
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2202      	movs	r2, #2
 8005244:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005248:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800524c:	fa92 f2a2 	rbit	r2, r2
 8005250:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005254:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005258:	fab2 f282 	clz	r2, r2
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	f042 0220 	orr.w	r2, r2, #32
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	f002 021f 	and.w	r2, r2, #31
 8005268:	2101      	movs	r1, #1
 800526a:	fa01 f202 	lsl.w	r2, r1, r2
 800526e:	4013      	ands	r3, r2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d007      	beq.n	8005284 <HAL_RCC_OscConfig+0x3cc>
 8005274:	1d3b      	adds	r3, r7, #4
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d002      	beq.n	8005284 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	f000 bd1b 	b.w	8005cba <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005284:	4ba0      	ldr	r3, [pc, #640]	; (8005508 <HAL_RCC_OscConfig+0x650>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800528c:	1d3b      	adds	r3, r7, #4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	21f8      	movs	r1, #248	; 0xf8
 8005294:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005298:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800529c:	fa91 f1a1 	rbit	r1, r1
 80052a0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80052a4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80052a8:	fab1 f181 	clz	r1, r1
 80052ac:	b2c9      	uxtb	r1, r1
 80052ae:	408b      	lsls	r3, r1
 80052b0:	4995      	ldr	r1, [pc, #596]	; (8005508 <HAL_RCC_OscConfig+0x650>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052b6:	e0f5      	b.n	80054a4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052b8:	1d3b      	adds	r3, r7, #4
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 8085 	beq.w	80053ce <HAL_RCC_OscConfig+0x516>
 80052c4:	2301      	movs	r3, #1
 80052c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80052ce:	fa93 f3a3 	rbit	r3, r3
 80052d2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80052d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052da:	fab3 f383 	clz	r3, r3
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80052e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	461a      	mov	r2, r3
 80052ec:	2301      	movs	r3, #1
 80052ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f0:	f7fe fb0a 	bl	8003908 <HAL_GetTick>
 80052f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f8:	e00a      	b.n	8005310 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052fa:	f7fe fb05 	bl	8003908 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d902      	bls.n	8005310 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	f000 bcd5 	b.w	8005cba <HAL_RCC_OscConfig+0xe02>
 8005310:	2302      	movs	r3, #2
 8005312:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800531a:	fa93 f3a3 	rbit	r3, r3
 800531e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005322:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005326:	fab3 f383 	clz	r3, r3
 800532a:	b2db      	uxtb	r3, r3
 800532c:	095b      	lsrs	r3, r3, #5
 800532e:	b2db      	uxtb	r3, r3
 8005330:	f043 0301 	orr.w	r3, r3, #1
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b01      	cmp	r3, #1
 8005338:	d102      	bne.n	8005340 <HAL_RCC_OscConfig+0x488>
 800533a:	4b73      	ldr	r3, [pc, #460]	; (8005508 <HAL_RCC_OscConfig+0x650>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	e013      	b.n	8005368 <HAL_RCC_OscConfig+0x4b0>
 8005340:	2302      	movs	r3, #2
 8005342:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005346:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800534a:	fa93 f3a3 	rbit	r3, r3
 800534e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005352:	2302      	movs	r3, #2
 8005354:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005358:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800535c:	fa93 f3a3 	rbit	r3, r3
 8005360:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005364:	4b68      	ldr	r3, [pc, #416]	; (8005508 <HAL_RCC_OscConfig+0x650>)
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	2202      	movs	r2, #2
 800536a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800536e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005372:	fa92 f2a2 	rbit	r2, r2
 8005376:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800537a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800537e:	fab2 f282 	clz	r2, r2
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	f042 0220 	orr.w	r2, r2, #32
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	f002 021f 	and.w	r2, r2, #31
 800538e:	2101      	movs	r1, #1
 8005390:	fa01 f202 	lsl.w	r2, r1, r2
 8005394:	4013      	ands	r3, r2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0af      	beq.n	80052fa <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800539a:	4b5b      	ldr	r3, [pc, #364]	; (8005508 <HAL_RCC_OscConfig+0x650>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053a2:	1d3b      	adds	r3, r7, #4
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	21f8      	movs	r1, #248	; 0xf8
 80053aa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ae:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80053b2:	fa91 f1a1 	rbit	r1, r1
 80053b6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80053ba:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80053be:	fab1 f181 	clz	r1, r1
 80053c2:	b2c9      	uxtb	r1, r1
 80053c4:	408b      	lsls	r3, r1
 80053c6:	4950      	ldr	r1, [pc, #320]	; (8005508 <HAL_RCC_OscConfig+0x650>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	600b      	str	r3, [r1, #0]
 80053cc:	e06a      	b.n	80054a4 <HAL_RCC_OscConfig+0x5ec>
 80053ce:	2301      	movs	r3, #1
 80053d0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80053d8:	fa93 f3a3 	rbit	r3, r3
 80053dc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80053e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053e4:	fab3 f383 	clz	r3, r3
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	461a      	mov	r2, r3
 80053f6:	2300      	movs	r3, #0
 80053f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fa:	f7fe fa85 	bl	8003908 <HAL_GetTick>
 80053fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005402:	e00a      	b.n	800541a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005404:	f7fe fa80 	bl	8003908 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d902      	bls.n	800541a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	f000 bc50 	b.w	8005cba <HAL_RCC_OscConfig+0xe02>
 800541a:	2302      	movs	r3, #2
 800541c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005420:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005424:	fa93 f3a3 	rbit	r3, r3
 8005428:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800542c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005430:	fab3 f383 	clz	r3, r3
 8005434:	b2db      	uxtb	r3, r3
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	b2db      	uxtb	r3, r3
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d102      	bne.n	800544a <HAL_RCC_OscConfig+0x592>
 8005444:	4b30      	ldr	r3, [pc, #192]	; (8005508 <HAL_RCC_OscConfig+0x650>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	e013      	b.n	8005472 <HAL_RCC_OscConfig+0x5ba>
 800544a:	2302      	movs	r3, #2
 800544c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005450:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005454:	fa93 f3a3 	rbit	r3, r3
 8005458:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800545c:	2302      	movs	r3, #2
 800545e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005462:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005466:	fa93 f3a3 	rbit	r3, r3
 800546a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800546e:	4b26      	ldr	r3, [pc, #152]	; (8005508 <HAL_RCC_OscConfig+0x650>)
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	2202      	movs	r2, #2
 8005474:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005478:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800547c:	fa92 f2a2 	rbit	r2, r2
 8005480:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005484:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005488:	fab2 f282 	clz	r2, r2
 800548c:	b2d2      	uxtb	r2, r2
 800548e:	f042 0220 	orr.w	r2, r2, #32
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	f002 021f 	and.w	r2, r2, #31
 8005498:	2101      	movs	r1, #1
 800549a:	fa01 f202 	lsl.w	r2, r1, r2
 800549e:	4013      	ands	r3, r2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1af      	bne.n	8005404 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054a4:	1d3b      	adds	r3, r7, #4
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f000 80da 	beq.w	8005668 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054b4:	1d3b      	adds	r3, r7, #4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d069      	beq.n	8005592 <HAL_RCC_OscConfig+0x6da>
 80054be:	2301      	movs	r3, #1
 80054c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80054c8:	fa93 f3a3 	rbit	r3, r3
 80054cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80054d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054d4:	fab3 f383 	clz	r3, r3
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	4b0b      	ldr	r3, [pc, #44]	; (800550c <HAL_RCC_OscConfig+0x654>)
 80054de:	4413      	add	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	461a      	mov	r2, r3
 80054e4:	2301      	movs	r3, #1
 80054e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054e8:	f7fe fa0e 	bl	8003908 <HAL_GetTick>
 80054ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054f0:	e00e      	b.n	8005510 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054f2:	f7fe fa09 	bl	8003908 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d906      	bls.n	8005510 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e3d9      	b.n	8005cba <HAL_RCC_OscConfig+0xe02>
 8005506:	bf00      	nop
 8005508:	40021000 	.word	0x40021000
 800550c:	10908120 	.word	0x10908120
 8005510:	2302      	movs	r3, #2
 8005512:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005516:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800551a:	fa93 f3a3 	rbit	r3, r3
 800551e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005522:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005526:	2202      	movs	r2, #2
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	fa93 f2a3 	rbit	r2, r3
 8005534:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800553e:	2202      	movs	r2, #2
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	fa93 f2a3 	rbit	r2, r3
 800554c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005550:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005552:	4ba5      	ldr	r3, [pc, #660]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 8005554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005556:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800555a:	2102      	movs	r1, #2
 800555c:	6019      	str	r1, [r3, #0]
 800555e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	fa93 f1a3 	rbit	r1, r3
 8005568:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800556c:	6019      	str	r1, [r3, #0]
  return result;
 800556e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	fab3 f383 	clz	r3, r3
 8005578:	b2db      	uxtb	r3, r3
 800557a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800557e:	b2db      	uxtb	r3, r3
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	2101      	movs	r1, #1
 8005586:	fa01 f303 	lsl.w	r3, r1, r3
 800558a:	4013      	ands	r3, r2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0b0      	beq.n	80054f2 <HAL_RCC_OscConfig+0x63a>
 8005590:	e06a      	b.n	8005668 <HAL_RCC_OscConfig+0x7b0>
 8005592:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005596:	2201      	movs	r2, #1
 8005598:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	fa93 f2a3 	rbit	r2, r3
 80055a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80055a8:	601a      	str	r2, [r3, #0]
  return result;
 80055aa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80055ae:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055b0:	fab3 f383 	clz	r3, r3
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	461a      	mov	r2, r3
 80055b8:	4b8c      	ldr	r3, [pc, #560]	; (80057ec <HAL_RCC_OscConfig+0x934>)
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	461a      	mov	r2, r3
 80055c0:	2300      	movs	r3, #0
 80055c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c4:	f7fe f9a0 	bl	8003908 <HAL_GetTick>
 80055c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055cc:	e009      	b.n	80055e2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ce:	f7fe f99b 	bl	8003908 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e36b      	b.n	8005cba <HAL_RCC_OscConfig+0xe02>
 80055e2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80055e6:	2202      	movs	r2, #2
 80055e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	fa93 f2a3 	rbit	r2, r3
 80055f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80055fe:	2202      	movs	r2, #2
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	fa93 f2a3 	rbit	r2, r3
 800560c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005616:	2202      	movs	r2, #2
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	fa93 f2a3 	rbit	r2, r3
 8005624:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005628:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800562a:	4b6f      	ldr	r3, [pc, #444]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 800562c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800562e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005632:	2102      	movs	r1, #2
 8005634:	6019      	str	r1, [r3, #0]
 8005636:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	fa93 f1a3 	rbit	r1, r3
 8005640:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005644:	6019      	str	r1, [r3, #0]
  return result;
 8005646:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	fab3 f383 	clz	r3, r3
 8005650:	b2db      	uxtb	r3, r3
 8005652:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	2101      	movs	r1, #1
 800565e:	fa01 f303 	lsl.w	r3, r1, r3
 8005662:	4013      	ands	r3, r2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1b2      	bne.n	80055ce <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005668:	1d3b      	adds	r3, r7, #4
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 8158 	beq.w	8005928 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005678:	2300      	movs	r3, #0
 800567a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800567e:	4b5a      	ldr	r3, [pc, #360]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d112      	bne.n	80056b0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800568a:	4b57      	ldr	r3, [pc, #348]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	4a56      	ldr	r2, [pc, #344]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 8005690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005694:	61d3      	str	r3, [r2, #28]
 8005696:	4b54      	ldr	r3, [pc, #336]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800569e:	f107 0308 	add.w	r3, r7, #8
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	f107 0308 	add.w	r3, r7, #8
 80056a8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80056aa:	2301      	movs	r3, #1
 80056ac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b0:	4b4f      	ldr	r3, [pc, #316]	; (80057f0 <HAL_RCC_OscConfig+0x938>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d11a      	bne.n	80056f2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056bc:	4b4c      	ldr	r3, [pc, #304]	; (80057f0 <HAL_RCC_OscConfig+0x938>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a4b      	ldr	r2, [pc, #300]	; (80057f0 <HAL_RCC_OscConfig+0x938>)
 80056c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c8:	f7fe f91e 	bl	8003908 <HAL_GetTick>
 80056cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d0:	e009      	b.n	80056e6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d2:	f7fe f919 	bl	8003908 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b64      	cmp	r3, #100	; 0x64
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e2e9      	b.n	8005cba <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e6:	4b42      	ldr	r3, [pc, #264]	; (80057f0 <HAL_RCC_OscConfig+0x938>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0ef      	beq.n	80056d2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056f2:	1d3b      	adds	r3, r7, #4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d106      	bne.n	800570a <HAL_RCC_OscConfig+0x852>
 80056fc:	4b3a      	ldr	r3, [pc, #232]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	4a39      	ldr	r2, [pc, #228]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 8005702:	f043 0301 	orr.w	r3, r3, #1
 8005706:	6213      	str	r3, [r2, #32]
 8005708:	e02f      	b.n	800576a <HAL_RCC_OscConfig+0x8b2>
 800570a:	1d3b      	adds	r3, r7, #4
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10c      	bne.n	800572e <HAL_RCC_OscConfig+0x876>
 8005714:	4b34      	ldr	r3, [pc, #208]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	4a33      	ldr	r2, [pc, #204]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 800571a:	f023 0301 	bic.w	r3, r3, #1
 800571e:	6213      	str	r3, [r2, #32]
 8005720:	4b31      	ldr	r3, [pc, #196]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	4a30      	ldr	r2, [pc, #192]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 8005726:	f023 0304 	bic.w	r3, r3, #4
 800572a:	6213      	str	r3, [r2, #32]
 800572c:	e01d      	b.n	800576a <HAL_RCC_OscConfig+0x8b2>
 800572e:	1d3b      	adds	r3, r7, #4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	2b05      	cmp	r3, #5
 8005736:	d10c      	bne.n	8005752 <HAL_RCC_OscConfig+0x89a>
 8005738:	4b2b      	ldr	r3, [pc, #172]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	4a2a      	ldr	r2, [pc, #168]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 800573e:	f043 0304 	orr.w	r3, r3, #4
 8005742:	6213      	str	r3, [r2, #32]
 8005744:	4b28      	ldr	r3, [pc, #160]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	4a27      	ldr	r2, [pc, #156]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 800574a:	f043 0301 	orr.w	r3, r3, #1
 800574e:	6213      	str	r3, [r2, #32]
 8005750:	e00b      	b.n	800576a <HAL_RCC_OscConfig+0x8b2>
 8005752:	4b25      	ldr	r3, [pc, #148]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	4a24      	ldr	r2, [pc, #144]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 8005758:	f023 0301 	bic.w	r3, r3, #1
 800575c:	6213      	str	r3, [r2, #32]
 800575e:	4b22      	ldr	r3, [pc, #136]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	4a21      	ldr	r2, [pc, #132]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 8005764:	f023 0304 	bic.w	r3, r3, #4
 8005768:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800576a:	1d3b      	adds	r3, r7, #4
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d06b      	beq.n	800584c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005774:	f7fe f8c8 	bl	8003908 <HAL_GetTick>
 8005778:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800577c:	e00b      	b.n	8005796 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800577e:	f7fe f8c3 	bl	8003908 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	f241 3288 	movw	r2, #5000	; 0x1388
 800578e:	4293      	cmp	r3, r2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e291      	b.n	8005cba <HAL_RCC_OscConfig+0xe02>
 8005796:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800579a:	2202      	movs	r2, #2
 800579c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	fa93 f2a3 	rbit	r2, r3
 80057a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80057b2:	2202      	movs	r2, #2
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	fa93 f2a3 	rbit	r2, r3
 80057c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80057c4:	601a      	str	r2, [r3, #0]
  return result;
 80057c6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80057ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057cc:	fab3 f383 	clz	r3, r3
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	f043 0302 	orr.w	r3, r3, #2
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d109      	bne.n	80057f4 <HAL_RCC_OscConfig+0x93c>
 80057e0:	4b01      	ldr	r3, [pc, #4]	; (80057e8 <HAL_RCC_OscConfig+0x930>)
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	e014      	b.n	8005810 <HAL_RCC_OscConfig+0x958>
 80057e6:	bf00      	nop
 80057e8:	40021000 	.word	0x40021000
 80057ec:	10908120 	.word	0x10908120
 80057f0:	40007000 	.word	0x40007000
 80057f4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80057f8:	2202      	movs	r2, #2
 80057fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	fa93 f2a3 	rbit	r2, r3
 8005806:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	4bbb      	ldr	r3, [pc, #748]	; (8005afc <HAL_RCC_OscConfig+0xc44>)
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005814:	2102      	movs	r1, #2
 8005816:	6011      	str	r1, [r2, #0]
 8005818:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800581c:	6812      	ldr	r2, [r2, #0]
 800581e:	fa92 f1a2 	rbit	r1, r2
 8005822:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005826:	6011      	str	r1, [r2, #0]
  return result;
 8005828:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800582c:	6812      	ldr	r2, [r2, #0]
 800582e:	fab2 f282 	clz	r2, r2
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	f002 021f 	and.w	r2, r2, #31
 800583e:	2101      	movs	r1, #1
 8005840:	fa01 f202 	lsl.w	r2, r1, r2
 8005844:	4013      	ands	r3, r2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d099      	beq.n	800577e <HAL_RCC_OscConfig+0x8c6>
 800584a:	e063      	b.n	8005914 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800584c:	f7fe f85c 	bl	8003908 <HAL_GetTick>
 8005850:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005854:	e00b      	b.n	800586e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005856:	f7fe f857 	bl	8003908 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f241 3288 	movw	r2, #5000	; 0x1388
 8005866:	4293      	cmp	r3, r2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e225      	b.n	8005cba <HAL_RCC_OscConfig+0xe02>
 800586e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005872:	2202      	movs	r2, #2
 8005874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005876:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	fa93 f2a3 	rbit	r2, r3
 8005880:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800588a:	2202      	movs	r2, #2
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	fa93 f2a3 	rbit	r2, r3
 8005898:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800589c:	601a      	str	r2, [r3, #0]
  return result;
 800589e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80058a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a4:	fab3 f383 	clz	r3, r3
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	095b      	lsrs	r3, r3, #5
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f043 0302 	orr.w	r3, r3, #2
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d102      	bne.n	80058be <HAL_RCC_OscConfig+0xa06>
 80058b8:	4b90      	ldr	r3, [pc, #576]	; (8005afc <HAL_RCC_OscConfig+0xc44>)
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	e00d      	b.n	80058da <HAL_RCC_OscConfig+0xa22>
 80058be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80058c2:	2202      	movs	r2, #2
 80058c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	fa93 f2a3 	rbit	r2, r3
 80058d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	4b89      	ldr	r3, [pc, #548]	; (8005afc <HAL_RCC_OscConfig+0xc44>)
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80058de:	2102      	movs	r1, #2
 80058e0:	6011      	str	r1, [r2, #0]
 80058e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80058e6:	6812      	ldr	r2, [r2, #0]
 80058e8:	fa92 f1a2 	rbit	r1, r2
 80058ec:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80058f0:	6011      	str	r1, [r2, #0]
  return result;
 80058f2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	fab2 f282 	clz	r2, r2
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	f002 021f 	and.w	r2, r2, #31
 8005908:	2101      	movs	r1, #1
 800590a:	fa01 f202 	lsl.w	r2, r1, r2
 800590e:	4013      	ands	r3, r2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1a0      	bne.n	8005856 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005914:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005918:	2b01      	cmp	r3, #1
 800591a:	d105      	bne.n	8005928 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800591c:	4b77      	ldr	r3, [pc, #476]	; (8005afc <HAL_RCC_OscConfig+0xc44>)
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	4a76      	ldr	r2, [pc, #472]	; (8005afc <HAL_RCC_OscConfig+0xc44>)
 8005922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005926:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005928:	1d3b      	adds	r3, r7, #4
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 81c2 	beq.w	8005cb8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005934:	4b71      	ldr	r3, [pc, #452]	; (8005afc <HAL_RCC_OscConfig+0xc44>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 030c 	and.w	r3, r3, #12
 800593c:	2b08      	cmp	r3, #8
 800593e:	f000 819c 	beq.w	8005c7a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005942:	1d3b      	adds	r3, r7, #4
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	2b02      	cmp	r3, #2
 800594a:	f040 8114 	bne.w	8005b76 <HAL_RCC_OscConfig+0xcbe>
 800594e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005952:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005958:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	fa93 f2a3 	rbit	r2, r3
 8005962:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005966:	601a      	str	r2, [r3, #0]
  return result;
 8005968:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800596c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800596e:	fab3 f383 	clz	r3, r3
 8005972:	b2db      	uxtb	r3, r3
 8005974:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005978:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	461a      	mov	r2, r3
 8005980:	2300      	movs	r3, #0
 8005982:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005984:	f7fd ffc0 	bl	8003908 <HAL_GetTick>
 8005988:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800598c:	e009      	b.n	80059a2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800598e:	f7fd ffbb 	bl	8003908 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e18b      	b.n	8005cba <HAL_RCC_OscConfig+0xe02>
 80059a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80059a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	fa93 f2a3 	rbit	r2, r3
 80059b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80059ba:	601a      	str	r2, [r3, #0]
  return result;
 80059bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80059c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059c2:	fab3 f383 	clz	r3, r3
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	095b      	lsrs	r3, r3, #5
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	f043 0301 	orr.w	r3, r3, #1
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d102      	bne.n	80059dc <HAL_RCC_OscConfig+0xb24>
 80059d6:	4b49      	ldr	r3, [pc, #292]	; (8005afc <HAL_RCC_OscConfig+0xc44>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	e01b      	b.n	8005a14 <HAL_RCC_OscConfig+0xb5c>
 80059dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80059e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	fa93 f2a3 	rbit	r2, r3
 80059f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80059fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	fa93 f2a3 	rbit	r2, r3
 8005a0a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	4b3a      	ldr	r3, [pc, #232]	; (8005afc <HAL_RCC_OscConfig+0xc44>)
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005a18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a1c:	6011      	str	r1, [r2, #0]
 8005a1e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005a22:	6812      	ldr	r2, [r2, #0]
 8005a24:	fa92 f1a2 	rbit	r1, r2
 8005a28:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005a2c:	6011      	str	r1, [r2, #0]
  return result;
 8005a2e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005a32:	6812      	ldr	r2, [r2, #0]
 8005a34:	fab2 f282 	clz	r2, r2
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	f042 0220 	orr.w	r2, r2, #32
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	f002 021f 	and.w	r2, r2, #31
 8005a44:	2101      	movs	r1, #1
 8005a46:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d19e      	bne.n	800598e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a50:	4b2a      	ldr	r3, [pc, #168]	; (8005afc <HAL_RCC_OscConfig+0xc44>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005a58:	1d3b      	adds	r3, r7, #4
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005a5e:	1d3b      	adds	r3, r7, #4
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	430b      	orrs	r3, r1
 8005a66:	4925      	ldr	r1, [pc, #148]	; (8005afc <HAL_RCC_OscConfig+0xc44>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	604b      	str	r3, [r1, #4]
 8005a6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005a70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	fa93 f2a3 	rbit	r2, r3
 8005a80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005a84:	601a      	str	r2, [r3, #0]
  return result;
 8005a86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005a8a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a8c:	fab3 f383 	clz	r3, r3
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa2:	f7fd ff31 	bl	8003908 <HAL_GetTick>
 8005aa6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005aaa:	e009      	b.n	8005ac0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aac:	f7fd ff2c 	bl	8003908 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e0fc      	b.n	8005cba <HAL_RCC_OscConfig+0xe02>
 8005ac0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005ac4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	fa93 f2a3 	rbit	r2, r3
 8005ad4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005ad8:	601a      	str	r2, [r3, #0]
  return result;
 8005ada:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005ade:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ae0:	fab3 f383 	clz	r3, r3
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	f043 0301 	orr.w	r3, r3, #1
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d105      	bne.n	8005b00 <HAL_RCC_OscConfig+0xc48>
 8005af4:	4b01      	ldr	r3, [pc, #4]	; (8005afc <HAL_RCC_OscConfig+0xc44>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	e01e      	b.n	8005b38 <HAL_RCC_OscConfig+0xc80>
 8005afa:	bf00      	nop
 8005afc:	40021000 	.word	0x40021000
 8005b00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	fa93 f2a3 	rbit	r2, r3
 8005b14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	fa93 f2a3 	rbit	r2, r3
 8005b2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	4b63      	ldr	r3, [pc, #396]	; (8005cc4 <HAL_RCC_OscConfig+0xe0c>)
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005b3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005b40:	6011      	str	r1, [r2, #0]
 8005b42:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005b46:	6812      	ldr	r2, [r2, #0]
 8005b48:	fa92 f1a2 	rbit	r1, r2
 8005b4c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005b50:	6011      	str	r1, [r2, #0]
  return result;
 8005b52:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	fab2 f282 	clz	r2, r2
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	f042 0220 	orr.w	r2, r2, #32
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	f002 021f 	and.w	r2, r2, #31
 8005b68:	2101      	movs	r1, #1
 8005b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d09b      	beq.n	8005aac <HAL_RCC_OscConfig+0xbf4>
 8005b74:	e0a0      	b.n	8005cb8 <HAL_RCC_OscConfig+0xe00>
 8005b76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	fa93 f2a3 	rbit	r2, r3
 8005b8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b8e:	601a      	str	r2, [r3, #0]
  return result;
 8005b90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b94:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b96:	fab3 f383 	clz	r3, r3
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005ba0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	2300      	movs	r3, #0
 8005baa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bac:	f7fd feac 	bl	8003908 <HAL_GetTick>
 8005bb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bb4:	e009      	b.n	8005bca <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bb6:	f7fd fea7 	bl	8003908 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e077      	b.n	8005cba <HAL_RCC_OscConfig+0xe02>
 8005bca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	fa93 f2a3 	rbit	r2, r3
 8005bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005be2:	601a      	str	r2, [r3, #0]
  return result;
 8005be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005be8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bea:	fab3 f383 	clz	r3, r3
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	095b      	lsrs	r3, r3, #5
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	f043 0301 	orr.w	r3, r3, #1
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d102      	bne.n	8005c04 <HAL_RCC_OscConfig+0xd4c>
 8005bfe:	4b31      	ldr	r3, [pc, #196]	; (8005cc4 <HAL_RCC_OscConfig+0xe0c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	e01b      	b.n	8005c3c <HAL_RCC_OscConfig+0xd84>
 8005c04:	f107 0320 	add.w	r3, r7, #32
 8005c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0e:	f107 0320 	add.w	r3, r7, #32
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	fa93 f2a3 	rbit	r2, r3
 8005c18:	f107 031c 	add.w	r3, r7, #28
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	f107 0318 	add.w	r3, r7, #24
 8005c22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	f107 0318 	add.w	r3, r7, #24
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	fa93 f2a3 	rbit	r2, r3
 8005c32:	f107 0314 	add.w	r3, r7, #20
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	4b22      	ldr	r3, [pc, #136]	; (8005cc4 <HAL_RCC_OscConfig+0xe0c>)
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	f107 0210 	add.w	r2, r7, #16
 8005c40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c44:	6011      	str	r1, [r2, #0]
 8005c46:	f107 0210 	add.w	r2, r7, #16
 8005c4a:	6812      	ldr	r2, [r2, #0]
 8005c4c:	fa92 f1a2 	rbit	r1, r2
 8005c50:	f107 020c 	add.w	r2, r7, #12
 8005c54:	6011      	str	r1, [r2, #0]
  return result;
 8005c56:	f107 020c 	add.w	r2, r7, #12
 8005c5a:	6812      	ldr	r2, [r2, #0]
 8005c5c:	fab2 f282 	clz	r2, r2
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	f042 0220 	orr.w	r2, r2, #32
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	f002 021f 	and.w	r2, r2, #31
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c72:	4013      	ands	r3, r2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d19e      	bne.n	8005bb6 <HAL_RCC_OscConfig+0xcfe>
 8005c78:	e01e      	b.n	8005cb8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c7a:	1d3b      	adds	r3, r7, #4
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e018      	b.n	8005cba <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c88:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <HAL_RCC_OscConfig+0xe0c>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c90:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005c94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c98:	1d3b      	adds	r3, r7, #4
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d108      	bne.n	8005cb4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005ca2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005ca6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005caa:	1d3b      	adds	r3, r7, #4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d001      	beq.n	8005cb8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40021000 	.word	0x40021000

08005cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b09e      	sub	sp, #120	; 0x78
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e162      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ce0:	4b90      	ldr	r3, [pc, #576]	; (8005f24 <HAL_RCC_ClockConfig+0x25c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d910      	bls.n	8005d10 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cee:	4b8d      	ldr	r3, [pc, #564]	; (8005f24 <HAL_RCC_ClockConfig+0x25c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f023 0207 	bic.w	r2, r3, #7
 8005cf6:	498b      	ldr	r1, [pc, #556]	; (8005f24 <HAL_RCC_ClockConfig+0x25c>)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfe:	4b89      	ldr	r3, [pc, #548]	; (8005f24 <HAL_RCC_ClockConfig+0x25c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d001      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e14a      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d1c:	4b82      	ldr	r3, [pc, #520]	; (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	497f      	ldr	r1, [pc, #508]	; (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 80dc 	beq.w	8005ef4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d13c      	bne.n	8005dbe <HAL_RCC_ClockConfig+0xf6>
 8005d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d48:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d4c:	fa93 f3a3 	rbit	r3, r3
 8005d50:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d54:	fab3 f383 	clz	r3, r3
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d102      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xa6>
 8005d68:	4b6f      	ldr	r3, [pc, #444]	; (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	e00f      	b.n	8005d8e <HAL_RCC_ClockConfig+0xc6>
 8005d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d76:	fa93 f3a3 	rbit	r3, r3
 8005d7a:	667b      	str	r3, [r7, #100]	; 0x64
 8005d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d80:	663b      	str	r3, [r7, #96]	; 0x60
 8005d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d84:	fa93 f3a3 	rbit	r3, r3
 8005d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d8a:	4b67      	ldr	r3, [pc, #412]	; (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d92:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d96:	fa92 f2a2 	rbit	r2, r2
 8005d9a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005d9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d9e:	fab2 f282 	clz	r2, r2
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	f042 0220 	orr.w	r2, r2, #32
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	f002 021f 	and.w	r2, r2, #31
 8005dae:	2101      	movs	r1, #1
 8005db0:	fa01 f202 	lsl.w	r2, r1, r2
 8005db4:	4013      	ands	r3, r2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d17b      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e0f3      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d13c      	bne.n	8005e40 <HAL_RCC_ClockConfig+0x178>
 8005dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dce:	fa93 f3a3 	rbit	r3, r3
 8005dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dd6:	fab3 f383 	clz	r3, r3
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f043 0301 	orr.w	r3, r3, #1
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d102      	bne.n	8005df0 <HAL_RCC_ClockConfig+0x128>
 8005dea:	4b4f      	ldr	r3, [pc, #316]	; (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	e00f      	b.n	8005e10 <HAL_RCC_ClockConfig+0x148>
 8005df0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005df4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005df8:	fa93 f3a3 	rbit	r3, r3
 8005dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8005dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e02:	643b      	str	r3, [r7, #64]	; 0x40
 8005e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e06:	fa93 f3a3 	rbit	r3, r3
 8005e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e0c:	4b46      	ldr	r3, [pc, #280]	; (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e14:	63ba      	str	r2, [r7, #56]	; 0x38
 8005e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e18:	fa92 f2a2 	rbit	r2, r2
 8005e1c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005e1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e20:	fab2 f282 	clz	r2, r2
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	f042 0220 	orr.w	r2, r2, #32
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	f002 021f 	and.w	r2, r2, #31
 8005e30:	2101      	movs	r1, #1
 8005e32:	fa01 f202 	lsl.w	r2, r1, r2
 8005e36:	4013      	ands	r3, r2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d13a      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e0b2      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x2de>
 8005e40:	2302      	movs	r3, #2
 8005e42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	fa93 f3a3 	rbit	r3, r3
 8005e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e4e:	fab3 f383 	clz	r3, r3
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f043 0301 	orr.w	r3, r3, #1
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d102      	bne.n	8005e68 <HAL_RCC_ClockConfig+0x1a0>
 8005e62:	4b31      	ldr	r3, [pc, #196]	; (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	e00d      	b.n	8005e84 <HAL_RCC_ClockConfig+0x1bc>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6e:	fa93 f3a3 	rbit	r3, r3
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
 8005e74:	2302      	movs	r3, #2
 8005e76:	623b      	str	r3, [r7, #32]
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	fa93 f3a3 	rbit	r3, r3
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	4b29      	ldr	r3, [pc, #164]	; (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	2202      	movs	r2, #2
 8005e86:	61ba      	str	r2, [r7, #24]
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	fa92 f2a2 	rbit	r2, r2
 8005e8e:	617a      	str	r2, [r7, #20]
  return result;
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	fab2 f282 	clz	r2, r2
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	f042 0220 	orr.w	r2, r2, #32
 8005e9c:	b2d2      	uxtb	r2, r2
 8005e9e:	f002 021f 	and.w	r2, r2, #31
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e079      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eb2:	4b1d      	ldr	r3, [pc, #116]	; (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f023 0203 	bic.w	r2, r3, #3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	491a      	ldr	r1, [pc, #104]	; (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ec4:	f7fd fd20 	bl	8003908 <HAL_GetTick>
 8005ec8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eca:	e00a      	b.n	8005ee2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ecc:	f7fd fd1c 	bl	8003908 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e061      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ee2:	4b11      	ldr	r3, [pc, #68]	; (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f003 020c 	and.w	r2, r3, #12
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d1eb      	bne.n	8005ecc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ef4:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <HAL_RCC_ClockConfig+0x25c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d214      	bcs.n	8005f2c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f02:	4b08      	ldr	r3, [pc, #32]	; (8005f24 <HAL_RCC_ClockConfig+0x25c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f023 0207 	bic.w	r2, r3, #7
 8005f0a:	4906      	ldr	r1, [pc, #24]	; (8005f24 <HAL_RCC_ClockConfig+0x25c>)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f12:	4b04      	ldr	r3, [pc, #16]	; (8005f24 <HAL_RCC_ClockConfig+0x25c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d005      	beq.n	8005f2c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e040      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x2de>
 8005f24:	40022000 	.word	0x40022000
 8005f28:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d008      	beq.n	8005f4a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f38:	4b1d      	ldr	r3, [pc, #116]	; (8005fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	491a      	ldr	r1, [pc, #104]	; (8005fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f56:	4b16      	ldr	r3, [pc, #88]	; (8005fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	4912      	ldr	r1, [pc, #72]	; (8005fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005f6a:	f000 f829 	bl	8005fc0 <HAL_RCC_GetSysClockFreq>
 8005f6e:	4601      	mov	r1, r0
 8005f70:	4b0f      	ldr	r3, [pc, #60]	; (8005fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f78:	22f0      	movs	r2, #240	; 0xf0
 8005f7a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	fa92 f2a2 	rbit	r2, r2
 8005f82:	60fa      	str	r2, [r7, #12]
  return result;
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	fab2 f282 	clz	r2, r2
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	40d3      	lsrs	r3, r2
 8005f8e:	4a09      	ldr	r2, [pc, #36]	; (8005fb4 <HAL_RCC_ClockConfig+0x2ec>)
 8005f90:	5cd3      	ldrb	r3, [r2, r3]
 8005f92:	fa21 f303 	lsr.w	r3, r1, r3
 8005f96:	4a08      	ldr	r2, [pc, #32]	; (8005fb8 <HAL_RCC_ClockConfig+0x2f0>)
 8005f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005f9a:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <HAL_RCC_ClockConfig+0x2f4>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fd fc6e 	bl	8003880 <HAL_InitTick>
  
  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3778      	adds	r7, #120	; 0x78
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	0800d58c 	.word	0x0800d58c
 8005fb8:	20000020 	.word	0x20000020
 8005fbc:	20000024 	.word	0x20000024

08005fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b08b      	sub	sp, #44	; 0x2c
 8005fc4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61fb      	str	r3, [r7, #28]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005fda:	4b29      	ldr	r3, [pc, #164]	; (8006080 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f003 030c 	and.w	r3, r3, #12
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d002      	beq.n	8005ff0 <HAL_RCC_GetSysClockFreq+0x30>
 8005fea:	2b08      	cmp	r3, #8
 8005fec:	d003      	beq.n	8005ff6 <HAL_RCC_GetSysClockFreq+0x36>
 8005fee:	e03c      	b.n	800606a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ff0:	4b24      	ldr	r3, [pc, #144]	; (8006084 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ff2:	623b      	str	r3, [r7, #32]
      break;
 8005ff4:	e03c      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005ffc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006000:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	fa92 f2a2 	rbit	r2, r2
 8006008:	607a      	str	r2, [r7, #4]
  return result;
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	fab2 f282 	clz	r2, r2
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	40d3      	lsrs	r3, r2
 8006014:	4a1c      	ldr	r2, [pc, #112]	; (8006088 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006016:	5cd3      	ldrb	r3, [r2, r3]
 8006018:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800601a:	4b19      	ldr	r3, [pc, #100]	; (8006080 <HAL_RCC_GetSysClockFreq+0xc0>)
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	220f      	movs	r2, #15
 8006024:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	fa92 f2a2 	rbit	r2, r2
 800602c:	60fa      	str	r2, [r7, #12]
  return result;
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	fab2 f282 	clz	r2, r2
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	40d3      	lsrs	r3, r2
 8006038:	4a14      	ldr	r2, [pc, #80]	; (800608c <HAL_RCC_GetSysClockFreq+0xcc>)
 800603a:	5cd3      	ldrb	r3, [r2, r3]
 800603c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006048:	4a0e      	ldr	r2, [pc, #56]	; (8006084 <HAL_RCC_GetSysClockFreq+0xc4>)
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	fb02 f303 	mul.w	r3, r2, r3
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
 8006058:	e004      	b.n	8006064 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	4a0c      	ldr	r2, [pc, #48]	; (8006090 <HAL_RCC_GetSysClockFreq+0xd0>)
 800605e:	fb02 f303 	mul.w	r3, r2, r3
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	623b      	str	r3, [r7, #32]
      break;
 8006068:	e002      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800606a:	4b06      	ldr	r3, [pc, #24]	; (8006084 <HAL_RCC_GetSysClockFreq+0xc4>)
 800606c:	623b      	str	r3, [r7, #32]
      break;
 800606e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006070:	6a3b      	ldr	r3, [r7, #32]
}
 8006072:	4618      	mov	r0, r3
 8006074:	372c      	adds	r7, #44	; 0x2c
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40021000 	.word	0x40021000
 8006084:	007a1200 	.word	0x007a1200
 8006088:	0800d5a4 	.word	0x0800d5a4
 800608c:	0800d5b4 	.word	0x0800d5b4
 8006090:	003d0900 	.word	0x003d0900

08006094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006098:	4b03      	ldr	r3, [pc, #12]	; (80060a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800609a:	681b      	ldr	r3, [r3, #0]
}
 800609c:	4618      	mov	r0, r3
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	20000020 	.word	0x20000020

080060ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80060b2:	f7ff ffef 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 80060b6:	4601      	mov	r1, r0
 80060b8:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80060c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	fa92 f2a2 	rbit	r2, r2
 80060cc:	603a      	str	r2, [r7, #0]
  return result;
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	fab2 f282 	clz	r2, r2
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	40d3      	lsrs	r3, r2
 80060d8:	4a04      	ldr	r2, [pc, #16]	; (80060ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80060da:	5cd3      	ldrb	r3, [r2, r3]
 80060dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80060e0:	4618      	mov	r0, r3
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40021000 	.word	0x40021000
 80060ec:	0800d59c 	.word	0x0800d59c

080060f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80060f6:	f7ff ffcd 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 80060fa:	4601      	mov	r1, r0
 80060fc:	4b0b      	ldr	r3, [pc, #44]	; (800612c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006104:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006108:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	fa92 f2a2 	rbit	r2, r2
 8006110:	603a      	str	r2, [r7, #0]
  return result;
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	fab2 f282 	clz	r2, r2
 8006118:	b2d2      	uxtb	r2, r2
 800611a:	40d3      	lsrs	r3, r2
 800611c:	4a04      	ldr	r2, [pc, #16]	; (8006130 <HAL_RCC_GetPCLK2Freq+0x40>)
 800611e:	5cd3      	ldrb	r3, [r2, r3]
 8006120:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006124:	4618      	mov	r0, r3
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40021000 	.word	0x40021000
 8006130:	0800d59c 	.word	0x0800d59c

08006134 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b092      	sub	sp, #72	; 0x48
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006144:	2300      	movs	r3, #0
 8006146:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 80cd 	beq.w	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006158:	4b8e      	ldr	r3, [pc, #568]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10e      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006164:	4b8b      	ldr	r3, [pc, #556]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	4a8a      	ldr	r2, [pc, #552]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800616a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800616e:	61d3      	str	r3, [r2, #28]
 8006170:	4b88      	ldr	r3, [pc, #544]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006178:	60bb      	str	r3, [r7, #8]
 800617a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800617c:	2301      	movs	r3, #1
 800617e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006182:	4b85      	ldr	r3, [pc, #532]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618a:	2b00      	cmp	r3, #0
 800618c:	d118      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800618e:	4b82      	ldr	r3, [pc, #520]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a81      	ldr	r2, [pc, #516]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006198:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800619a:	f7fd fbb5 	bl	8003908 <HAL_GetTick>
 800619e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061a0:	e008      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a2:	f7fd fbb1 	bl	8003908 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b64      	cmp	r3, #100	; 0x64
 80061ae:	d901      	bls.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e0ea      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b4:	4b78      	ldr	r3, [pc, #480]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0f0      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061c0:	4b74      	ldr	r3, [pc, #464]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d07d      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061da:	429a      	cmp	r2, r3
 80061dc:	d076      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061de:	4b6d      	ldr	r3, [pc, #436]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061ec:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	fa93 f3a3 	rbit	r3, r3
 80061f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061f8:	fab3 f383 	clz	r3, r3
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	4b66      	ldr	r3, [pc, #408]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006202:	4413      	add	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	461a      	mov	r2, r3
 8006208:	2301      	movs	r3, #1
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006210:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006214:	fa93 f3a3 	rbit	r3, r3
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800621a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800621c:	fab3 f383 	clz	r3, r3
 8006220:	b2db      	uxtb	r3, r3
 8006222:	461a      	mov	r2, r3
 8006224:	4b5d      	ldr	r3, [pc, #372]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	461a      	mov	r2, r3
 800622c:	2300      	movs	r3, #0
 800622e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006230:	4a58      	ldr	r2, [pc, #352]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006234:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d045      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006240:	f7fd fb62 	bl	8003908 <HAL_GetTick>
 8006244:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006246:	e00a      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006248:	f7fd fb5e 	bl	8003908 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	f241 3288 	movw	r2, #5000	; 0x1388
 8006256:	4293      	cmp	r3, r2
 8006258:	d901      	bls.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e095      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x256>
 800625e:	2302      	movs	r3, #2
 8006260:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	fa93 f3a3 	rbit	r3, r3
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
 800626a:	2302      	movs	r3, #2
 800626c:	623b      	str	r3, [r7, #32]
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	fa93 f3a3 	rbit	r3, r3
 8006274:	61fb      	str	r3, [r7, #28]
  return result;
 8006276:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006278:	fab3 f383 	clz	r3, r3
 800627c:	b2db      	uxtb	r3, r3
 800627e:	095b      	lsrs	r3, r3, #5
 8006280:	b2db      	uxtb	r3, r3
 8006282:	f043 0302 	orr.w	r3, r3, #2
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d102      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800628c:	4b41      	ldr	r3, [pc, #260]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	e007      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006292:	2302      	movs	r3, #2
 8006294:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	fa93 f3a3 	rbit	r3, r3
 800629c:	617b      	str	r3, [r7, #20]
 800629e:	4b3d      	ldr	r3, [pc, #244]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	2202      	movs	r2, #2
 80062a4:	613a      	str	r2, [r7, #16]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	fa92 f2a2 	rbit	r2, r2
 80062ac:	60fa      	str	r2, [r7, #12]
  return result;
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	fab2 f282 	clz	r2, r2
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	f002 021f 	and.w	r2, r2, #31
 80062c0:	2101      	movs	r1, #1
 80062c2:	fa01 f202 	lsl.w	r2, r1, r2
 80062c6:	4013      	ands	r3, r2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d0bd      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80062cc:	4b31      	ldr	r3, [pc, #196]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	492e      	ldr	r1, [pc, #184]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80062de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d105      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062e6:	4b2b      	ldr	r3, [pc, #172]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	4a2a      	ldr	r2, [pc, #168]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062f0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d008      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062fe:	4b25      	ldr	r3, [pc, #148]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	f023 0203 	bic.w	r2, r3, #3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	4922      	ldr	r1, [pc, #136]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800630c:	4313      	orrs	r3, r2
 800630e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0320 	and.w	r3, r3, #32
 8006318:	2b00      	cmp	r3, #0
 800631a:	d008      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800631c:	4b1d      	ldr	r3, [pc, #116]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800631e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006320:	f023 0210 	bic.w	r2, r3, #16
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	491a      	ldr	r1, [pc, #104]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800632a:	4313      	orrs	r3, r2
 800632c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006336:	2b00      	cmp	r3, #0
 8006338:	d008      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800633a:	4b16      	ldr	r3, [pc, #88]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	4913      	ldr	r1, [pc, #76]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006348:	4313      	orrs	r3, r2
 800634a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d008      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006358:	4b0e      	ldr	r3, [pc, #56]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	490b      	ldr	r1, [pc, #44]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006366:	4313      	orrs	r3, r2
 8006368:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d008      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006376:	4b07      	ldr	r3, [pc, #28]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	4904      	ldr	r1, [pc, #16]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006384:	4313      	orrs	r3, r2
 8006386:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3748      	adds	r7, #72	; 0x48
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	40021000 	.word	0x40021000
 8006398:	40007000 	.word	0x40007000
 800639c:	10908100 	.word	0x10908100

080063a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e049      	b.n	8006446 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fc ff78 	bl	80032bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3304      	adds	r3, #4
 80063dc:	4619      	mov	r1, r3
 80063de:	4610      	mov	r0, r2
 80063e0:	f000 faa2 	bl	8006928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b01      	cmp	r3, #1
 8006462:	d001      	beq.n	8006468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e040      	b.n	80064ea <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0201 	orr.w	r2, r2, #1
 800647e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a1c      	ldr	r2, [pc, #112]	; (80064f8 <HAL_TIM_Base_Start_IT+0xa8>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d00e      	beq.n	80064a8 <HAL_TIM_Base_Start_IT+0x58>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006492:	d009      	beq.n	80064a8 <HAL_TIM_Base_Start_IT+0x58>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a18      	ldr	r2, [pc, #96]	; (80064fc <HAL_TIM_Base_Start_IT+0xac>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d004      	beq.n	80064a8 <HAL_TIM_Base_Start_IT+0x58>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a17      	ldr	r2, [pc, #92]	; (8006500 <HAL_TIM_Base_Start_IT+0xb0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d115      	bne.n	80064d4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	4b15      	ldr	r3, [pc, #84]	; (8006504 <HAL_TIM_Base_Start_IT+0xb4>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b06      	cmp	r3, #6
 80064b8:	d015      	beq.n	80064e6 <HAL_TIM_Base_Start_IT+0x96>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c0:	d011      	beq.n	80064e6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0201 	orr.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d2:	e008      	b.n	80064e6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0201 	orr.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	e000      	b.n	80064e8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	40012c00 	.word	0x40012c00
 80064fc:	40000400 	.word	0x40000400
 8006500:	40014000 	.word	0x40014000
 8006504:	00010007 	.word	0x00010007

08006508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b02      	cmp	r3, #2
 800651c:	d122      	bne.n	8006564 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b02      	cmp	r3, #2
 800652a:	d11b      	bne.n	8006564 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0202 	mvn.w	r2, #2
 8006534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	f003 0303 	and.w	r3, r3, #3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f9cd 	bl	80068ea <HAL_TIM_IC_CaptureCallback>
 8006550:	e005      	b.n	800655e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f9bf 	bl	80068d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f9d0 	bl	80068fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0304 	and.w	r3, r3, #4
 800656e:	2b04      	cmp	r3, #4
 8006570:	d122      	bne.n	80065b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b04      	cmp	r3, #4
 800657e:	d11b      	bne.n	80065b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0204 	mvn.w	r2, #4
 8006588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2202      	movs	r2, #2
 800658e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f9a3 	bl	80068ea <HAL_TIM_IC_CaptureCallback>
 80065a4:	e005      	b.n	80065b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f995 	bl	80068d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f9a6 	bl	80068fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d122      	bne.n	800660c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f003 0308 	and.w	r3, r3, #8
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d11b      	bne.n	800660c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0208 	mvn.w	r2, #8
 80065dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2204      	movs	r2, #4
 80065e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f979 	bl	80068ea <HAL_TIM_IC_CaptureCallback>
 80065f8:	e005      	b.n	8006606 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f96b 	bl	80068d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f97c 	bl	80068fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f003 0310 	and.w	r3, r3, #16
 8006616:	2b10      	cmp	r3, #16
 8006618:	d122      	bne.n	8006660 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f003 0310 	and.w	r3, r3, #16
 8006624:	2b10      	cmp	r3, #16
 8006626:	d11b      	bne.n	8006660 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0210 	mvn.w	r2, #16
 8006630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2208      	movs	r2, #8
 8006636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f94f 	bl	80068ea <HAL_TIM_IC_CaptureCallback>
 800664c:	e005      	b.n	800665a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f941 	bl	80068d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f952 	bl	80068fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b01      	cmp	r3, #1
 800666c:	d10e      	bne.n	800668c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b01      	cmp	r3, #1
 800667a:	d107      	bne.n	800668c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f06f 0201 	mvn.w	r2, #1
 8006684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f91b 	bl	80068c2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006696:	2b80      	cmp	r3, #128	; 0x80
 8006698:	d10e      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a4:	2b80      	cmp	r3, #128	; 0x80
 80066a6:	d107      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fac2 	bl	8006c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c6:	d10e      	bne.n	80066e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d2:	2b80      	cmp	r3, #128	; 0x80
 80066d4:	d107      	bne.n	80066e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fab5 	bl	8006c50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f0:	2b40      	cmp	r3, #64	; 0x40
 80066f2:	d10e      	bne.n	8006712 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fe:	2b40      	cmp	r3, #64	; 0x40
 8006700:	d107      	bne.n	8006712 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800670a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f900 	bl	8006912 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	f003 0320 	and.w	r3, r3, #32
 800671c:	2b20      	cmp	r3, #32
 800671e:	d10e      	bne.n	800673e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b20      	cmp	r3, #32
 800672c:	d107      	bne.n	800673e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f06f 0220 	mvn.w	r2, #32
 8006736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fa75 	bl	8006c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800673e:	bf00      	nop
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <HAL_TIM_ConfigClockSource+0x1c>
 800675e:	2302      	movs	r3, #2
 8006760:	e0ab      	b.n	80068ba <HAL_TIM_ConfigClockSource+0x174>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2202      	movs	r2, #2
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006780:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006784:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800678c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b40      	cmp	r3, #64	; 0x40
 800679c:	d067      	beq.n	800686e <HAL_TIM_ConfigClockSource+0x128>
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d80b      	bhi.n	80067ba <HAL_TIM_ConfigClockSource+0x74>
 80067a2:	2b10      	cmp	r3, #16
 80067a4:	d073      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x148>
 80067a6:	2b10      	cmp	r3, #16
 80067a8:	d802      	bhi.n	80067b0 <HAL_TIM_ConfigClockSource+0x6a>
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d06f      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x148>
 80067ae:	e077      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x15a>
 80067b0:	2b20      	cmp	r3, #32
 80067b2:	d06c      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x148>
 80067b4:	2b30      	cmp	r3, #48	; 0x30
 80067b6:	d06a      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x148>
 80067b8:	e072      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x15a>
 80067ba:	2b70      	cmp	r3, #112	; 0x70
 80067bc:	d00d      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x94>
 80067be:	2b70      	cmp	r3, #112	; 0x70
 80067c0:	d804      	bhi.n	80067cc <HAL_TIM_ConfigClockSource+0x86>
 80067c2:	2b50      	cmp	r3, #80	; 0x50
 80067c4:	d033      	beq.n	800682e <HAL_TIM_ConfigClockSource+0xe8>
 80067c6:	2b60      	cmp	r3, #96	; 0x60
 80067c8:	d041      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x108>
 80067ca:	e069      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x15a>
 80067cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d0:	d069      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0x160>
 80067d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d6:	d017      	beq.n	8006808 <HAL_TIM_ConfigClockSource+0xc2>
 80067d8:	e062      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	6899      	ldr	r1, [r3, #8]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f000 f98f 	bl	8006b0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	609a      	str	r2, [r3, #8]
      break;
 8006806:	e04f      	b.n	80068a8 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	6899      	ldr	r1, [r3, #8]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f000 f978 	bl	8006b0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800682a:	609a      	str	r2, [r3, #8]
      break;
 800682c:	e03c      	b.n	80068a8 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	6859      	ldr	r1, [r3, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	461a      	mov	r2, r3
 800683c:	f000 f8ec 	bl	8006a18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2150      	movs	r1, #80	; 0x50
 8006846:	4618      	mov	r0, r3
 8006848:	f000 f945 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 800684c:	e02c      	b.n	80068a8 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6859      	ldr	r1, [r3, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	461a      	mov	r2, r3
 800685c:	f000 f90b 	bl	8006a76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2160      	movs	r1, #96	; 0x60
 8006866:	4618      	mov	r0, r3
 8006868:	f000 f935 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 800686c:	e01c      	b.n	80068a8 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	6859      	ldr	r1, [r3, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	461a      	mov	r2, r3
 800687c:	f000 f8cc 	bl	8006a18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2140      	movs	r1, #64	; 0x40
 8006886:	4618      	mov	r0, r3
 8006888:	f000 f925 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 800688c:	e00c      	b.n	80068a8 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4619      	mov	r1, r3
 8006898:	4610      	mov	r0, r2
 800689a:	f000 f91c 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 800689e:	e003      	b.n	80068a8 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	73fb      	strb	r3, [r7, #15]
      break;
 80068a4:	e000      	b.n	80068a8 <HAL_TIM_ConfigClockSource+0x162>
      break;
 80068a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80068ca:	bf00      	nop
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a32      	ldr	r2, [pc, #200]	; (8006a04 <TIM_Base_SetConfig+0xdc>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d007      	beq.n	8006950 <TIM_Base_SetConfig+0x28>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006946:	d003      	beq.n	8006950 <TIM_Base_SetConfig+0x28>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a2f      	ldr	r2, [pc, #188]	; (8006a08 <TIM_Base_SetConfig+0xe0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d108      	bne.n	8006962 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a27      	ldr	r2, [pc, #156]	; (8006a04 <TIM_Base_SetConfig+0xdc>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d013      	beq.n	8006992 <TIM_Base_SetConfig+0x6a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006970:	d00f      	beq.n	8006992 <TIM_Base_SetConfig+0x6a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a24      	ldr	r2, [pc, #144]	; (8006a08 <TIM_Base_SetConfig+0xe0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00b      	beq.n	8006992 <TIM_Base_SetConfig+0x6a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a23      	ldr	r2, [pc, #140]	; (8006a0c <TIM_Base_SetConfig+0xe4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d007      	beq.n	8006992 <TIM_Base_SetConfig+0x6a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a22      	ldr	r2, [pc, #136]	; (8006a10 <TIM_Base_SetConfig+0xe8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d003      	beq.n	8006992 <TIM_Base_SetConfig+0x6a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a21      	ldr	r2, [pc, #132]	; (8006a14 <TIM_Base_SetConfig+0xec>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d108      	bne.n	80069a4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a0e      	ldr	r2, [pc, #56]	; (8006a04 <TIM_Base_SetConfig+0xdc>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00b      	beq.n	80069e8 <TIM_Base_SetConfig+0xc0>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a0e      	ldr	r2, [pc, #56]	; (8006a0c <TIM_Base_SetConfig+0xe4>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d007      	beq.n	80069e8 <TIM_Base_SetConfig+0xc0>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a0d      	ldr	r2, [pc, #52]	; (8006a10 <TIM_Base_SetConfig+0xe8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d003      	beq.n	80069e8 <TIM_Base_SetConfig+0xc0>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a0c      	ldr	r2, [pc, #48]	; (8006a14 <TIM_Base_SetConfig+0xec>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d103      	bne.n	80069f0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	691a      	ldr	r2, [r3, #16]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	615a      	str	r2, [r3, #20]
}
 80069f6:	bf00      	nop
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40012c00 	.word	0x40012c00
 8006a08:	40000400 	.word	0x40000400
 8006a0c:	40014000 	.word	0x40014000
 8006a10:	40014400 	.word	0x40014400
 8006a14:	40014800 	.word	0x40014800

08006a18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f023 0201 	bic.w	r2, r3, #1
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f023 030a 	bic.w	r3, r3, #10
 8006a54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	621a      	str	r2, [r3, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b087      	sub	sp, #28
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	f023 0210 	bic.w	r2, r3, #16
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	031b      	lsls	r3, r3, #12
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ab2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b085      	sub	sp, #20
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f043 0307 	orr.w	r3, r3, #7
 8006af8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	609a      	str	r2, [r3, #8]
}
 8006b00:	bf00      	nop
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	021a      	lsls	r2, r3, #8
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	609a      	str	r2, [r3, #8]
}
 8006b40:	bf00      	nop
 8006b42:	371c      	adds	r7, #28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e054      	b.n	8006c0e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a24      	ldr	r2, [pc, #144]	; (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d108      	bne.n	8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a17      	ldr	r2, [pc, #92]	; (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00e      	beq.n	8006be2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bcc:	d009      	beq.n	8006be2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a13      	ldr	r2, [pc, #76]	; (8006c20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d004      	beq.n	8006be2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a11      	ldr	r2, [pc, #68]	; (8006c24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d10c      	bne.n	8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006be8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	40012c00 	.word	0x40012c00
 8006c20:	40000400 	.word	0x40000400
 8006c24:	40014000 	.word	0x40014000

08006c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e040      	b.n	8006cf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d106      	bne.n	8006c8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7fc fb3c 	bl	8003304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2224      	movs	r2, #36	; 0x24
 8006c90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0201 	bic.w	r2, r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fcea 	bl	800767c <UART_SetConfig>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d101      	bne.n	8006cb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e022      	b.n	8006cf8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fe16 	bl	80078ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0201 	orr.w	r2, r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fe9d 	bl	8007a30 <UART_CheckIdleState>
 8006cf6:	4603      	mov	r3, r0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08a      	sub	sp, #40	; 0x28
 8006d04:	af02      	add	r7, sp, #8
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	603b      	str	r3, [r7, #0]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d14:	2b20      	cmp	r3, #32
 8006d16:	f040 8082 	bne.w	8006e1e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <HAL_UART_Transmit+0x26>
 8006d20:	88fb      	ldrh	r3, [r7, #6]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e07a      	b.n	8006e20 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d101      	bne.n	8006d38 <HAL_UART_Transmit+0x38>
 8006d34:	2302      	movs	r3, #2
 8006d36:	e073      	b.n	8006e20 <HAL_UART_Transmit+0x120>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2221      	movs	r2, #33	; 0x21
 8006d4c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d4e:	f7fc fddb 	bl	8003908 <HAL_GetTick>
 8006d52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	88fa      	ldrh	r2, [r7, #6]
 8006d58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	88fa      	ldrh	r2, [r7, #6]
 8006d60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d6c:	d108      	bne.n	8006d80 <HAL_UART_Transmit+0x80>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d104      	bne.n	8006d80 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	61bb      	str	r3, [r7, #24]
 8006d7e:	e003      	b.n	8006d88 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d84:	2300      	movs	r3, #0
 8006d86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006d90:	e02d      	b.n	8006dee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2180      	movs	r1, #128	; 0x80
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 fe90 	bl	8007ac2 <UART_WaitOnFlagUntilTimeout>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e039      	b.n	8006e20 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10b      	bne.n	8006dca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	881a      	ldrh	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dbe:	b292      	uxth	r2, r2
 8006dc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	3302      	adds	r3, #2
 8006dc6:	61bb      	str	r3, [r7, #24]
 8006dc8:	e008      	b.n	8006ddc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	781a      	ldrb	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	b292      	uxth	r2, r2
 8006dd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1cb      	bne.n	8006d92 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2200      	movs	r2, #0
 8006e02:	2140      	movs	r1, #64	; 0x40
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f000 fe5c 	bl	8007ac2 <UART_WaitOnFlagUntilTimeout>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e005      	b.n	8006e20 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2220      	movs	r2, #32
 8006e18:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e000      	b.n	8006e20 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006e1e:	2302      	movs	r3, #2
  }
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3720      	adds	r7, #32
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08a      	sub	sp, #40	; 0x28
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	603b      	str	r3, [r7, #0]
 8006e34:	4613      	mov	r3, r2
 8006e36:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e3c:	2b20      	cmp	r3, #32
 8006e3e:	f040 80bf 	bne.w	8006fc0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <HAL_UART_Receive+0x26>
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e0b7      	b.n	8006fc2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_UART_Receive+0x38>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e0b0      	b.n	8006fc2 <HAL_UART_Receive+0x19a>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2222      	movs	r2, #34	; 0x22
 8006e74:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e7c:	f7fc fd44 	bl	8003908 <HAL_GetTick>
 8006e80:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	88fa      	ldrh	r2, [r7, #6]
 8006e86:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	88fa      	ldrh	r2, [r7, #6]
 8006e8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e9a:	d10e      	bne.n	8006eba <HAL_UART_Receive+0x92>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d105      	bne.n	8006eb0 <HAL_UART_Receive+0x88>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006eaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006eae:	e02d      	b.n	8006f0c <HAL_UART_Receive+0xe4>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	22ff      	movs	r2, #255	; 0xff
 8006eb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006eb8:	e028      	b.n	8006f0c <HAL_UART_Receive+0xe4>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10d      	bne.n	8006ede <HAL_UART_Receive+0xb6>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <HAL_UART_Receive+0xac>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	22ff      	movs	r2, #255	; 0xff
 8006ece:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ed2:	e01b      	b.n	8006f0c <HAL_UART_Receive+0xe4>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	227f      	movs	r2, #127	; 0x7f
 8006ed8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006edc:	e016      	b.n	8006f0c <HAL_UART_Receive+0xe4>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ee6:	d10d      	bne.n	8006f04 <HAL_UART_Receive+0xdc>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d104      	bne.n	8006efa <HAL_UART_Receive+0xd2>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	227f      	movs	r2, #127	; 0x7f
 8006ef4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ef8:	e008      	b.n	8006f0c <HAL_UART_Receive+0xe4>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	223f      	movs	r2, #63	; 0x3f
 8006efe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f02:	e003      	b.n	8006f0c <HAL_UART_Receive+0xe4>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f12:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1c:	d108      	bne.n	8006f30 <HAL_UART_Receive+0x108>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d104      	bne.n	8006f30 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	61bb      	str	r3, [r7, #24]
 8006f2e:	e003      	b.n	8006f38 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f34:	2300      	movs	r3, #0
 8006f36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006f40:	e033      	b.n	8006faa <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2120      	movs	r1, #32
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 fdb8 	bl	8007ac2 <UART_WaitOnFlagUntilTimeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e032      	b.n	8006fc2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10c      	bne.n	8006f7c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	8a7b      	ldrh	r3, [r7, #18]
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	3302      	adds	r3, #2
 8006f78:	61bb      	str	r3, [r7, #24]
 8006f7a:	e00d      	b.n	8006f98 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	8a7b      	ldrh	r3, [r7, #18]
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	3301      	adds	r3, #1
 8006f96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1c5      	bne.n	8006f42 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	e000      	b.n	8006fc2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006fc0:	2302      	movs	r3, #2
  }
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3720      	adds	r7, #32
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b08a      	sub	sp, #40	; 0x28
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fdc:	2b20      	cmp	r3, #32
 8006fde:	d13d      	bne.n	800705c <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <HAL_UART_Receive_IT+0x22>
 8006fe6:	88fb      	ldrh	r3, [r7, #6]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e036      	b.n	800705e <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d101      	bne.n	8006ffe <HAL_UART_Receive_IT+0x34>
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	e02f      	b.n	800705e <HAL_UART_Receive_IT+0x94>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d018      	beq.n	800704c <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	613b      	str	r3, [r7, #16]
   return(result);
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	461a      	mov	r2, r3
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	623b      	str	r3, [r7, #32]
 800703a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	69f9      	ldr	r1, [r7, #28]
 800703e:	6a3a      	ldr	r2, [r7, #32]
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	61bb      	str	r3, [r7, #24]
   return(result);
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e6      	bne.n	800701a <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800704c:	88fb      	ldrh	r3, [r7, #6]
 800704e:	461a      	mov	r2, r3
 8007050:	68b9      	ldr	r1, [r7, #8]
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 fdfa 	bl	8007c4c <UART_Start_Receive_IT>
 8007058:	4603      	mov	r3, r0
 800705a:	e000      	b.n	800705e <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800705c:	2302      	movs	r3, #2
  }
}
 800705e:	4618      	mov	r0, r3
 8007060:	3728      	adds	r7, #40	; 0x28
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
	...

08007068 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b0ba      	sub	sp, #232	; 0xe8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800708e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007092:	f640 030f 	movw	r3, #2063	; 0x80f
 8007096:	4013      	ands	r3, r2
 8007098:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800709c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d115      	bne.n	80070d0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80070a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a8:	f003 0320 	and.w	r3, r3, #32
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00f      	beq.n	80070d0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d009      	beq.n	80070d0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 82a4 	beq.w	800760e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
      }
      return;
 80070ce:	e29e      	b.n	800760e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 8117 	beq.w	8007308 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80070da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d106      	bne.n	80070f4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80070e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80070ea:	4b85      	ldr	r3, [pc, #532]	; (8007300 <HAL_UART_IRQHandler+0x298>)
 80070ec:	4013      	ands	r3, r2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 810a 	beq.w	8007308 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d011      	beq.n	8007124 <HAL_UART_IRQHandler+0xbc>
 8007100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00b      	beq.n	8007124 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2201      	movs	r2, #1
 8007112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800711a:	f043 0201 	orr.w	r2, r3, #1
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d011      	beq.n	8007154 <HAL_UART_IRQHandler+0xec>
 8007130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00b      	beq.n	8007154 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2202      	movs	r2, #2
 8007142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800714a:	f043 0204 	orr.w	r2, r3, #4
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d011      	beq.n	8007184 <HAL_UART_IRQHandler+0x11c>
 8007160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00b      	beq.n	8007184 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2204      	movs	r2, #4
 8007172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800717a:	f043 0202 	orr.w	r2, r3, #2
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007188:	f003 0308 	and.w	r3, r3, #8
 800718c:	2b00      	cmp	r3, #0
 800718e:	d017      	beq.n	80071c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007194:	f003 0320 	and.w	r3, r3, #32
 8007198:	2b00      	cmp	r3, #0
 800719a:	d105      	bne.n	80071a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800719c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00b      	beq.n	80071c0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2208      	movs	r2, #8
 80071ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071b6:	f043 0208 	orr.w	r2, r3, #8
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d012      	beq.n	80071f2 <HAL_UART_IRQHandler+0x18a>
 80071cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00c      	beq.n	80071f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e8:	f043 0220 	orr.w	r2, r3, #32
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 820a 	beq.w	8007612 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80071fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007202:	f003 0320 	and.w	r3, r3, #32
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00d      	beq.n	8007226 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800720a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b00      	cmp	r3, #0
 8007214:	d007      	beq.n	8007226 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800722c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723a:	2b40      	cmp	r3, #64	; 0x40
 800723c:	d005      	beq.n	800724a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800723e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007242:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007246:	2b00      	cmp	r3, #0
 8007248:	d04f      	beq.n	80072ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fdaa 	bl	8007da4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725a:	2b40      	cmp	r3, #64	; 0x40
 800725c:	d141      	bne.n	80072e2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3308      	adds	r3, #8
 8007264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007274:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800727c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3308      	adds	r3, #8
 8007286:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800728a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800728e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007292:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007296:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1d9      	bne.n	800725e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d013      	beq.n	80072da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b6:	4a13      	ldr	r2, [pc, #76]	; (8007304 <HAL_UART_IRQHandler+0x29c>)
 80072b8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fc fc9a 	bl	8003bf8 <HAL_DMA_Abort_IT>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d017      	beq.n	80072fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80072d4:	4610      	mov	r0, r2
 80072d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d8:	e00f      	b.n	80072fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f9b8 	bl	8007650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e0:	e00b      	b.n	80072fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f9b4 	bl	8007650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e8:	e007      	b.n	80072fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f9b0 	bl	8007650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80072f8:	e18b      	b.n	8007612 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072fa:	bf00      	nop
    return;
 80072fc:	e189      	b.n	8007612 <HAL_UART_IRQHandler+0x5aa>
 80072fe:	bf00      	nop
 8007300:	04000120 	.word	0x04000120
 8007304:	08007e6b 	.word	0x08007e6b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800730c:	2b01      	cmp	r3, #1
 800730e:	f040 8143 	bne.w	8007598 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007316:	f003 0310 	and.w	r3, r3, #16
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 813c 	beq.w	8007598 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007324:	f003 0310 	and.w	r3, r3, #16
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 8135 	beq.w	8007598 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2210      	movs	r2, #16
 8007334:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007340:	2b40      	cmp	r3, #64	; 0x40
 8007342:	f040 80b1 	bne.w	80074a8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007352:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 815d 	beq.w	8007616 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007362:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007366:	429a      	cmp	r2, r3
 8007368:	f080 8155 	bcs.w	8007616 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007372:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	2b20      	cmp	r3, #32
 800737e:	f000 8085 	beq.w	800748c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800738e:	e853 3f00 	ldrex	r3, [r3]
 8007392:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007396:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800739a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800739e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073b0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073bc:	e841 2300 	strex	r3, r2, [r1]
 80073c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1da      	bne.n	8007382 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3308      	adds	r3, #8
 80073d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073d6:	e853 3f00 	ldrex	r3, [r3]
 80073da:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073de:	f023 0301 	bic.w	r3, r3, #1
 80073e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3308      	adds	r3, #8
 80073ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073fc:	e841 2300 	strex	r3, r2, [r1]
 8007400:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e1      	bne.n	80073cc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3308      	adds	r3, #8
 800740e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800741a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800741e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3308      	adds	r3, #8
 8007428:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800742c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800742e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007430:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007432:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007434:	e841 2300 	strex	r3, r2, [r1]
 8007438:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800743a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1e3      	bne.n	8007408 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2220      	movs	r2, #32
 8007444:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800745a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800745c:	f023 0310 	bic.w	r3, r3, #16
 8007460:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800746e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007470:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007472:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007474:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007476:	e841 2300 	strex	r3, r2, [r1]
 800747a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800747c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1e4      	bne.n	800744c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007486:	4618      	mov	r0, r3
 8007488:	f7fc fb7d 	bl	8003b86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007498:	b29b      	uxth	r3, r3
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	b29b      	uxth	r3, r3
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f8df 	bl	8007664 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074a6:	e0b6      	b.n	8007616 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 80a8 	beq.w	800761a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80074ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 80a3 	beq.w	800761a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	461a      	mov	r2, r3
 80074f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074f6:	647b      	str	r3, [r7, #68]	; 0x44
 80074f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e4      	bne.n	80074d4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3308      	adds	r3, #8
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	623b      	str	r3, [r7, #32]
   return(result);
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	f023 0301 	bic.w	r3, r3, #1
 8007520:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3308      	adds	r3, #8
 800752a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800752e:	633a      	str	r2, [r7, #48]	; 0x30
 8007530:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800753c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e3      	bne.n	800750a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	e853 3f00 	ldrex	r3, [r3]
 8007560:	60fb      	str	r3, [r7, #12]
   return(result);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f023 0310 	bic.w	r3, r3, #16
 8007568:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	461a      	mov	r2, r3
 8007572:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007576:	61fb      	str	r3, [r7, #28]
 8007578:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	69b9      	ldr	r1, [r7, #24]
 800757c:	69fa      	ldr	r2, [r7, #28]
 800757e:	e841 2300 	strex	r3, r2, [r1]
 8007582:	617b      	str	r3, [r7, #20]
   return(result);
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1e4      	bne.n	8007554 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800758a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f867 	bl	8007664 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007596:	e040      	b.n	800761a <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800759c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00e      	beq.n	80075c2 <HAL_UART_IRQHandler+0x55a>
 80075a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d008      	beq.n	80075c2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80075b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fdf1 	bl	80081a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075c0:	e02e      	b.n	8007620 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80075c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00e      	beq.n	80075ec <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80075ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d008      	beq.n	80075ec <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d01d      	beq.n	800761e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	4798      	blx	r3
    }
    return;
 80075ea:	e018      	b.n	800761e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d013      	beq.n	8007620 <HAL_UART_IRQHandler+0x5b8>
 80075f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00d      	beq.n	8007620 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fc46 	bl	8007e96 <UART_EndTransmit_IT>
    return;
 800760a:	bf00      	nop
 800760c:	e008      	b.n	8007620 <HAL_UART_IRQHandler+0x5b8>
      return;
 800760e:	bf00      	nop
 8007610:	e006      	b.n	8007620 <HAL_UART_IRQHandler+0x5b8>
    return;
 8007612:	bf00      	nop
 8007614:	e004      	b.n	8007620 <HAL_UART_IRQHandler+0x5b8>
      return;
 8007616:	bf00      	nop
 8007618:	e002      	b.n	8007620 <HAL_UART_IRQHandler+0x5b8>
      return;
 800761a:	bf00      	nop
 800761c:	e000      	b.n	8007620 <HAL_UART_IRQHandler+0x5b8>
    return;
 800761e:	bf00      	nop
  }

}
 8007620:	37e8      	adds	r7, #232	; 0xe8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop

08007628 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b088      	sub	sp, #32
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007684:	2300      	movs	r3, #0
 8007686:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689a      	ldr	r2, [r3, #8]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	431a      	orrs	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	69db      	ldr	r3, [r3, #28]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	4b8b      	ldr	r3, [pc, #556]	; (80078d4 <UART_SetConfig+0x258>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6812      	ldr	r2, [r2, #0]
 80076ae:	6979      	ldr	r1, [r7, #20]
 80076b0:	430b      	orrs	r3, r1
 80076b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a79      	ldr	r2, [pc, #484]	; (80078d8 <UART_SetConfig+0x25c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d121      	bne.n	800773c <UART_SetConfig+0xc0>
 80076f8:	4b78      	ldr	r3, [pc, #480]	; (80078dc <UART_SetConfig+0x260>)
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fc:	f003 0303 	and.w	r3, r3, #3
 8007700:	2b03      	cmp	r3, #3
 8007702:	d817      	bhi.n	8007734 <UART_SetConfig+0xb8>
 8007704:	a201      	add	r2, pc, #4	; (adr r2, 800770c <UART_SetConfig+0x90>)
 8007706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770a:	bf00      	nop
 800770c:	0800771d 	.word	0x0800771d
 8007710:	08007729 	.word	0x08007729
 8007714:	0800772f 	.word	0x0800772f
 8007718:	08007723 	.word	0x08007723
 800771c:	2300      	movs	r3, #0
 800771e:	77fb      	strb	r3, [r7, #31]
 8007720:	e01e      	b.n	8007760 <UART_SetConfig+0xe4>
 8007722:	2302      	movs	r3, #2
 8007724:	77fb      	strb	r3, [r7, #31]
 8007726:	e01b      	b.n	8007760 <UART_SetConfig+0xe4>
 8007728:	2304      	movs	r3, #4
 800772a:	77fb      	strb	r3, [r7, #31]
 800772c:	e018      	b.n	8007760 <UART_SetConfig+0xe4>
 800772e:	2308      	movs	r3, #8
 8007730:	77fb      	strb	r3, [r7, #31]
 8007732:	e015      	b.n	8007760 <UART_SetConfig+0xe4>
 8007734:	2310      	movs	r3, #16
 8007736:	77fb      	strb	r3, [r7, #31]
 8007738:	bf00      	nop
 800773a:	e011      	b.n	8007760 <UART_SetConfig+0xe4>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a67      	ldr	r2, [pc, #412]	; (80078e0 <UART_SetConfig+0x264>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d102      	bne.n	800774c <UART_SetConfig+0xd0>
 8007746:	2300      	movs	r3, #0
 8007748:	77fb      	strb	r3, [r7, #31]
 800774a:	e009      	b.n	8007760 <UART_SetConfig+0xe4>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a64      	ldr	r2, [pc, #400]	; (80078e4 <UART_SetConfig+0x268>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d102      	bne.n	800775c <UART_SetConfig+0xe0>
 8007756:	2300      	movs	r3, #0
 8007758:	77fb      	strb	r3, [r7, #31]
 800775a:	e001      	b.n	8007760 <UART_SetConfig+0xe4>
 800775c:	2310      	movs	r3, #16
 800775e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007768:	d15c      	bne.n	8007824 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 800776a:	7ffb      	ldrb	r3, [r7, #31]
 800776c:	2b08      	cmp	r3, #8
 800776e:	d828      	bhi.n	80077c2 <UART_SetConfig+0x146>
 8007770:	a201      	add	r2, pc, #4	; (adr r2, 8007778 <UART_SetConfig+0xfc>)
 8007772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007776:	bf00      	nop
 8007778:	0800779d 	.word	0x0800779d
 800777c:	080077a5 	.word	0x080077a5
 8007780:	080077ad 	.word	0x080077ad
 8007784:	080077c3 	.word	0x080077c3
 8007788:	080077b3 	.word	0x080077b3
 800778c:	080077c3 	.word	0x080077c3
 8007790:	080077c3 	.word	0x080077c3
 8007794:	080077c3 	.word	0x080077c3
 8007798:	080077bb 	.word	0x080077bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800779c:	f7fe fc86 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 80077a0:	61b8      	str	r0, [r7, #24]
        break;
 80077a2:	e013      	b.n	80077cc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077a4:	f7fe fca4 	bl	80060f0 <HAL_RCC_GetPCLK2Freq>
 80077a8:	61b8      	str	r0, [r7, #24]
        break;
 80077aa:	e00f      	b.n	80077cc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077ac:	4b4e      	ldr	r3, [pc, #312]	; (80078e8 <UART_SetConfig+0x26c>)
 80077ae:	61bb      	str	r3, [r7, #24]
        break;
 80077b0:	e00c      	b.n	80077cc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077b2:	f7fe fc05 	bl	8005fc0 <HAL_RCC_GetSysClockFreq>
 80077b6:	61b8      	str	r0, [r7, #24]
        break;
 80077b8:	e008      	b.n	80077cc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077be:	61bb      	str	r3, [r7, #24]
        break;
 80077c0:	e004      	b.n	80077cc <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	77bb      	strb	r3, [r7, #30]
        break;
 80077ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d074      	beq.n	80078bc <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	005a      	lsls	r2, r3, #1
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	085b      	lsrs	r3, r3, #1
 80077dc:	441a      	add	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	2b0f      	cmp	r3, #15
 80077ee:	d916      	bls.n	800781e <UART_SetConfig+0x1a2>
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077f6:	d212      	bcs.n	800781e <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	f023 030f 	bic.w	r3, r3, #15
 8007800:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	085b      	lsrs	r3, r3, #1
 8007806:	b29b      	uxth	r3, r3
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	b29a      	uxth	r2, r3
 800780e:	89fb      	ldrh	r3, [r7, #14]
 8007810:	4313      	orrs	r3, r2
 8007812:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	89fa      	ldrh	r2, [r7, #14]
 800781a:	60da      	str	r2, [r3, #12]
 800781c:	e04e      	b.n	80078bc <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	77bb      	strb	r3, [r7, #30]
 8007822:	e04b      	b.n	80078bc <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007824:	7ffb      	ldrb	r3, [r7, #31]
 8007826:	2b08      	cmp	r3, #8
 8007828:	d827      	bhi.n	800787a <UART_SetConfig+0x1fe>
 800782a:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <UART_SetConfig+0x1b4>)
 800782c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007830:	08007855 	.word	0x08007855
 8007834:	0800785d 	.word	0x0800785d
 8007838:	08007865 	.word	0x08007865
 800783c:	0800787b 	.word	0x0800787b
 8007840:	0800786b 	.word	0x0800786b
 8007844:	0800787b 	.word	0x0800787b
 8007848:	0800787b 	.word	0x0800787b
 800784c:	0800787b 	.word	0x0800787b
 8007850:	08007873 	.word	0x08007873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007854:	f7fe fc2a 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 8007858:	61b8      	str	r0, [r7, #24]
        break;
 800785a:	e013      	b.n	8007884 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800785c:	f7fe fc48 	bl	80060f0 <HAL_RCC_GetPCLK2Freq>
 8007860:	61b8      	str	r0, [r7, #24]
        break;
 8007862:	e00f      	b.n	8007884 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007864:	4b20      	ldr	r3, [pc, #128]	; (80078e8 <UART_SetConfig+0x26c>)
 8007866:	61bb      	str	r3, [r7, #24]
        break;
 8007868:	e00c      	b.n	8007884 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800786a:	f7fe fba9 	bl	8005fc0 <HAL_RCC_GetSysClockFreq>
 800786e:	61b8      	str	r0, [r7, #24]
        break;
 8007870:	e008      	b.n	8007884 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007876:	61bb      	str	r3, [r7, #24]
        break;
 8007878:	e004      	b.n	8007884 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	77bb      	strb	r3, [r7, #30]
        break;
 8007882:	bf00      	nop
    }

    if (pclk != 0U)
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d018      	beq.n	80078bc <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	085a      	lsrs	r2, r3, #1
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	441a      	add	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	fbb2 f3f3 	udiv	r3, r2, r3
 800789c:	b29b      	uxth	r3, r3
 800789e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	2b0f      	cmp	r3, #15
 80078a4:	d908      	bls.n	80078b8 <UART_SetConfig+0x23c>
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ac:	d204      	bcs.n	80078b8 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	60da      	str	r2, [r3, #12]
 80078b6:	e001      	b.n	80078bc <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80078c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3720      	adds	r7, #32
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	efff69f3 	.word	0xefff69f3
 80078d8:	40013800 	.word	0x40013800
 80078dc:	40021000 	.word	0x40021000
 80078e0:	40004400 	.word	0x40004400
 80078e4:	40004800 	.word	0x40004800
 80078e8:	007a1200 	.word	0x007a1200

080078ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00a      	beq.n	8007916 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	f003 0304 	and.w	r3, r3, #4
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00a      	beq.n	800795a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	f003 0308 	and.w	r3, r3, #8
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	f003 0310 	and.w	r3, r3, #16
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00a      	beq.n	800799e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	f003 0320 	and.w	r3, r3, #32
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01a      	beq.n	8007a02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ea:	d10a      	bne.n	8007a02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00a      	beq.n	8007a24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	605a      	str	r2, [r3, #4]
  }
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af02      	add	r7, sp, #8
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a40:	f7fb ff62 	bl	8003908 <HAL_GetTick>
 8007a44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0308 	and.w	r3, r3, #8
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d10e      	bne.n	8007a72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f82d 	bl	8007ac2 <UART_WaitOnFlagUntilTimeout>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e023      	b.n	8007aba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b04      	cmp	r3, #4
 8007a7e:	d10e      	bne.n	8007a9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f817 	bl	8007ac2 <UART_WaitOnFlagUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e00d      	b.n	8007aba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b09c      	sub	sp, #112	; 0x70
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	60f8      	str	r0, [r7, #12]
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	603b      	str	r3, [r7, #0]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ad2:	e0a5      	b.n	8007c20 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ada:	f000 80a1 	beq.w	8007c20 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ade:	f7fb ff13 	bl	8003908 <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d302      	bcc.n	8007af4 <UART_WaitOnFlagUntilTimeout+0x32>
 8007aee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d13e      	bne.n	8007b72 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007afc:	e853 3f00 	ldrex	r3, [r3]
 8007b00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b08:	667b      	str	r3, [r7, #100]	; 0x64
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b14:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e6      	bne.n	8007af4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b30:	e853 3f00 	ldrex	r3, [r3]
 8007b34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b38:	f023 0301 	bic.w	r3, r3, #1
 8007b3c:	663b      	str	r3, [r7, #96]	; 0x60
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3308      	adds	r3, #8
 8007b44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b46:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b4e:	e841 2300 	strex	r3, r2, [r1]
 8007b52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1e5      	bne.n	8007b26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2220      	movs	r2, #32
 8007b64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e067      	b.n	8007c42 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0304 	and.w	r3, r3, #4
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d04f      	beq.n	8007c20 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b8e:	d147      	bne.n	8007c20 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	e853 3f00 	ldrex	r3, [r3]
 8007ba6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007baa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007bba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bc0:	e841 2300 	strex	r3, r2, [r1]
 8007bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e6      	bne.n	8007b9a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	e853 3f00 	ldrex	r3, [r3]
 8007bda:	613b      	str	r3, [r7, #16]
   return(result);
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	f023 0301 	bic.w	r3, r3, #1
 8007be2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3308      	adds	r3, #8
 8007bea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bec:	623a      	str	r2, [r7, #32]
 8007bee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	69f9      	ldr	r1, [r7, #28]
 8007bf2:	6a3a      	ldr	r2, [r7, #32]
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e5      	bne.n	8007bcc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2220      	movs	r2, #32
 8007c04:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e010      	b.n	8007c42 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	69da      	ldr	r2, [r3, #28]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	4013      	ands	r3, r2
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	bf0c      	ite	eq
 8007c30:	2301      	moveq	r3, #1
 8007c32:	2300      	movne	r3, #0
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	461a      	mov	r2, r3
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	f43f af4a 	beq.w	8007ad4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3770      	adds	r7, #112	; 0x70
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
	...

08007c4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b091      	sub	sp, #68	; 0x44
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	4613      	mov	r3, r2
 8007c58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	88fa      	ldrh	r2, [r7, #6]
 8007c64:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	88fa      	ldrh	r2, [r7, #6]
 8007c6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c7e:	d10e      	bne.n	8007c9e <UART_Start_Receive_IT+0x52>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d105      	bne.n	8007c94 <UART_Start_Receive_IT+0x48>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c92:	e02d      	b.n	8007cf0 <UART_Start_Receive_IT+0xa4>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	22ff      	movs	r2, #255	; 0xff
 8007c98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c9c:	e028      	b.n	8007cf0 <UART_Start_Receive_IT+0xa4>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10d      	bne.n	8007cc2 <UART_Start_Receive_IT+0x76>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d104      	bne.n	8007cb8 <UART_Start_Receive_IT+0x6c>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	22ff      	movs	r2, #255	; 0xff
 8007cb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cb6:	e01b      	b.n	8007cf0 <UART_Start_Receive_IT+0xa4>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	227f      	movs	r2, #127	; 0x7f
 8007cbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cc0:	e016      	b.n	8007cf0 <UART_Start_Receive_IT+0xa4>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cca:	d10d      	bne.n	8007ce8 <UART_Start_Receive_IT+0x9c>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d104      	bne.n	8007cde <UART_Start_Receive_IT+0x92>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	227f      	movs	r2, #127	; 0x7f
 8007cd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cdc:	e008      	b.n	8007cf0 <UART_Start_Receive_IT+0xa4>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	223f      	movs	r2, #63	; 0x3f
 8007ce2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ce6:	e003      	b.n	8007cf0 <UART_Start_Receive_IT+0xa4>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2222      	movs	r2, #34	; 0x22
 8007cfc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3308      	adds	r3, #8
 8007d04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	f043 0301 	orr.w	r3, r3, #1
 8007d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d1e:	637a      	str	r2, [r7, #52]	; 0x34
 8007d20:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d26:	e841 2300 	strex	r3, r2, [r1]
 8007d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e5      	bne.n	8007cfe <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d3a:	d107      	bne.n	8007d4c <UART_Start_Receive_IT+0x100>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d103      	bne.n	8007d4c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	4a15      	ldr	r2, [pc, #84]	; (8007d9c <UART_Start_Receive_IT+0x150>)
 8007d48:	665a      	str	r2, [r3, #100]	; 0x64
 8007d4a:	e002      	b.n	8007d52 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4a14      	ldr	r2, [pc, #80]	; (8007da0 <UART_Start_Receive_IT+0x154>)
 8007d50:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	e853 3f00 	ldrex	r3, [r3]
 8007d66:	613b      	str	r3, [r7, #16]
   return(result);
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	623b      	str	r3, [r7, #32]
 8007d7a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7c:	69f9      	ldr	r1, [r7, #28]
 8007d7e:	6a3a      	ldr	r2, [r7, #32]
 8007d80:	e841 2300 	strex	r3, r2, [r1]
 8007d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1e6      	bne.n	8007d5a <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3744      	adds	r7, #68	; 0x44
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	08008047 	.word	0x08008047
 8007da0:	08007eeb 	.word	0x08007eeb

08007da4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b095      	sub	sp, #84	; 0x54
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db4:	e853 3f00 	ldrex	r3, [r3]
 8007db8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dca:	643b      	str	r3, [r7, #64]	; 0x40
 8007dcc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dd2:	e841 2300 	strex	r3, r2, [r1]
 8007dd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e6      	bne.n	8007dac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3308      	adds	r3, #8
 8007de4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	f023 0301 	bic.w	r3, r3, #1
 8007df4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e5      	bne.n	8007dde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d118      	bne.n	8007e4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	e853 3f00 	ldrex	r3, [r3]
 8007e26:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f023 0310 	bic.w	r3, r3, #16
 8007e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
 8007e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e38:	61bb      	str	r3, [r7, #24]
 8007e3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6979      	ldr	r1, [r7, #20]
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	613b      	str	r3, [r7, #16]
   return(result);
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e6      	bne.n	8007e1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007e5e:	bf00      	nop
 8007e60:	3754      	adds	r7, #84	; 0x54
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f7ff fbe1 	bl	8007650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e8e:	bf00      	nop
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b088      	sub	sp, #32
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	e853 3f00 	ldrex	r3, [r3]
 8007eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb2:	61fb      	str	r3, [r7, #28]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	61bb      	str	r3, [r7, #24]
 8007ebe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec0:	6979      	ldr	r1, [r7, #20]
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	e841 2300 	strex	r3, r2, [r1]
 8007ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e6      	bne.n	8007e9e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff fba3 	bl	8007628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ee2:	bf00      	nop
 8007ee4:	3720      	adds	r7, #32
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b096      	sub	sp, #88	; 0x58
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ef8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f00:	2b22      	cmp	r3, #34	; 0x22
 8007f02:	f040 8094 	bne.w	800802e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007f0c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f10:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007f14:	b2d9      	uxtb	r1, r3
 8007f16:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f20:	400a      	ands	r2, r1
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2a:	1c5a      	adds	r2, r3, #1
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d177      	bne.n	800803e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f56:	e853 3f00 	ldrex	r3, [r3]
 8007f5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f62:	653b      	str	r3, [r7, #80]	; 0x50
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f74:	e841 2300 	strex	r3, r2, [r1]
 8007f78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e6      	bne.n	8007f4e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3308      	adds	r3, #8
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	623b      	str	r3, [r7, #32]
   return(result);
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	f023 0301 	bic.w	r3, r3, #1
 8007f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3308      	adds	r3, #8
 8007f9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fa0:	633a      	str	r2, [r7, #48]	; 0x30
 8007fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa8:	e841 2300 	strex	r3, r2, [r1]
 8007fac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1e5      	bne.n	8007f80 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d12e      	bne.n	8008026 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	e853 3f00 	ldrex	r3, [r3]
 8007fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f023 0310 	bic.w	r3, r3, #16
 8007fe2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fec:	61fb      	str	r3, [r7, #28]
 8007fee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff0:	69b9      	ldr	r1, [r7, #24]
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	e841 2300 	strex	r3, r2, [r1]
 8007ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e6      	bne.n	8007fce <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	f003 0310 	and.w	r3, r3, #16
 800800a:	2b10      	cmp	r3, #16
 800800c:	d103      	bne.n	8008016 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2210      	movs	r2, #16
 8008014:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff fb20 	bl	8007664 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008024:	e00b      	b.n	800803e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff fb08 	bl	800763c <HAL_UART_RxCpltCallback>
}
 800802c:	e007      	b.n	800803e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	699a      	ldr	r2, [r3, #24]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f042 0208 	orr.w	r2, r2, #8
 800803c:	619a      	str	r2, [r3, #24]
}
 800803e:	bf00      	nop
 8008040:	3758      	adds	r7, #88	; 0x58
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b096      	sub	sp, #88	; 0x58
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008054:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800805c:	2b22      	cmp	r3, #34	; 0x22
 800805e:	f040 8094 	bne.w	800818a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008068:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008070:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008072:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008076:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800807a:	4013      	ands	r3, r2
 800807c:	b29a      	uxth	r2, r3
 800807e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008080:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008086:	1c9a      	adds	r2, r3, #2
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008092:	b29b      	uxth	r3, r3
 8008094:	3b01      	subs	r3, #1
 8008096:	b29a      	uxth	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d177      	bne.n	800819a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b2:	e853 3f00 	ldrex	r3, [r3]
 80080b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	461a      	mov	r2, r3
 80080c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080c8:	643b      	str	r3, [r7, #64]	; 0x40
 80080ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080d0:	e841 2300 	strex	r3, r2, [r1]
 80080d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1e6      	bne.n	80080aa <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	3308      	adds	r3, #8
 80080e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	e853 3f00 	ldrex	r3, [r3]
 80080ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	f023 0301 	bic.w	r3, r3, #1
 80080f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3308      	adds	r3, #8
 80080fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008104:	e841 2300 	strex	r3, r2, [r1]
 8008108:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e5      	bne.n	80080dc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2220      	movs	r2, #32
 8008114:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008120:	2b01      	cmp	r3, #1
 8008122:	d12e      	bne.n	8008182 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	e853 3f00 	ldrex	r3, [r3]
 8008136:	60bb      	str	r3, [r7, #8]
   return(result);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	f023 0310 	bic.w	r3, r3, #16
 800813e:	647b      	str	r3, [r7, #68]	; 0x44
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	461a      	mov	r2, r3
 8008146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008148:	61bb      	str	r3, [r7, #24]
 800814a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814c:	6979      	ldr	r1, [r7, #20]
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	e841 2300 	strex	r3, r2, [r1]
 8008154:	613b      	str	r3, [r7, #16]
   return(result);
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e6      	bne.n	800812a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	f003 0310 	and.w	r3, r3, #16
 8008166:	2b10      	cmp	r3, #16
 8008168:	d103      	bne.n	8008172 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2210      	movs	r2, #16
 8008170:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7ff fa72 	bl	8007664 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008180:	e00b      	b.n	800819a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7ff fa5a 	bl	800763c <HAL_UART_RxCpltCallback>
}
 8008188:	e007      	b.n	800819a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	699a      	ldr	r2, [r3, #24]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f042 0208 	orr.w	r2, r2, #8
 8008198:	619a      	str	r2, [r3, #24]
}
 800819a:	bf00      	nop
 800819c:	3758      	adds	r7, #88	; 0x58
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b083      	sub	sp, #12
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80081aa:	bf00      	nop
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <atof>:
 80081b6:	2100      	movs	r1, #0
 80081b8:	f001 babe 	b.w	8009738 <strtod>

080081bc <__errno>:
 80081bc:	4b01      	ldr	r3, [pc, #4]	; (80081c4 <__errno+0x8>)
 80081be:	6818      	ldr	r0, [r3, #0]
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	2000002c 	.word	0x2000002c

080081c8 <__libc_init_array>:
 80081c8:	b570      	push	{r4, r5, r6, lr}
 80081ca:	4e0d      	ldr	r6, [pc, #52]	; (8008200 <__libc_init_array+0x38>)
 80081cc:	4c0d      	ldr	r4, [pc, #52]	; (8008204 <__libc_init_array+0x3c>)
 80081ce:	1ba4      	subs	r4, r4, r6
 80081d0:	10a4      	asrs	r4, r4, #2
 80081d2:	2500      	movs	r5, #0
 80081d4:	42a5      	cmp	r5, r4
 80081d6:	d109      	bne.n	80081ec <__libc_init_array+0x24>
 80081d8:	4e0b      	ldr	r6, [pc, #44]	; (8008208 <__libc_init_array+0x40>)
 80081da:	4c0c      	ldr	r4, [pc, #48]	; (800820c <__libc_init_array+0x44>)
 80081dc:	f005 f854 	bl	800d288 <_init>
 80081e0:	1ba4      	subs	r4, r4, r6
 80081e2:	10a4      	asrs	r4, r4, #2
 80081e4:	2500      	movs	r5, #0
 80081e6:	42a5      	cmp	r5, r4
 80081e8:	d105      	bne.n	80081f6 <__libc_init_array+0x2e>
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
 80081ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081f0:	4798      	blx	r3
 80081f2:	3501      	adds	r5, #1
 80081f4:	e7ee      	b.n	80081d4 <__libc_init_array+0xc>
 80081f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081fa:	4798      	blx	r3
 80081fc:	3501      	adds	r5, #1
 80081fe:	e7f2      	b.n	80081e6 <__libc_init_array+0x1e>
 8008200:	0800dab0 	.word	0x0800dab0
 8008204:	0800dab0 	.word	0x0800dab0
 8008208:	0800dab0 	.word	0x0800dab0
 800820c:	0800dab4 	.word	0x0800dab4

08008210 <memset>:
 8008210:	4402      	add	r2, r0
 8008212:	4603      	mov	r3, r0
 8008214:	4293      	cmp	r3, r2
 8008216:	d100      	bne.n	800821a <memset+0xa>
 8008218:	4770      	bx	lr
 800821a:	f803 1b01 	strb.w	r1, [r3], #1
 800821e:	e7f9      	b.n	8008214 <memset+0x4>

08008220 <__cvt>:
 8008220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008224:	ec55 4b10 	vmov	r4, r5, d0
 8008228:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800822a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800822e:	2d00      	cmp	r5, #0
 8008230:	460e      	mov	r6, r1
 8008232:	4691      	mov	r9, r2
 8008234:	4619      	mov	r1, r3
 8008236:	bfb8      	it	lt
 8008238:	4622      	movlt	r2, r4
 800823a:	462b      	mov	r3, r5
 800823c:	f027 0720 	bic.w	r7, r7, #32
 8008240:	bfbb      	ittet	lt
 8008242:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008246:	461d      	movlt	r5, r3
 8008248:	2300      	movge	r3, #0
 800824a:	232d      	movlt	r3, #45	; 0x2d
 800824c:	bfb8      	it	lt
 800824e:	4614      	movlt	r4, r2
 8008250:	2f46      	cmp	r7, #70	; 0x46
 8008252:	700b      	strb	r3, [r1, #0]
 8008254:	d004      	beq.n	8008260 <__cvt+0x40>
 8008256:	2f45      	cmp	r7, #69	; 0x45
 8008258:	d100      	bne.n	800825c <__cvt+0x3c>
 800825a:	3601      	adds	r6, #1
 800825c:	2102      	movs	r1, #2
 800825e:	e000      	b.n	8008262 <__cvt+0x42>
 8008260:	2103      	movs	r1, #3
 8008262:	ab03      	add	r3, sp, #12
 8008264:	9301      	str	r3, [sp, #4]
 8008266:	ab02      	add	r3, sp, #8
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	4632      	mov	r2, r6
 800826c:	4653      	mov	r3, sl
 800826e:	ec45 4b10 	vmov	d0, r4, r5
 8008272:	f001 fb01 	bl	8009878 <_dtoa_r>
 8008276:	2f47      	cmp	r7, #71	; 0x47
 8008278:	4680      	mov	r8, r0
 800827a:	d102      	bne.n	8008282 <__cvt+0x62>
 800827c:	f019 0f01 	tst.w	r9, #1
 8008280:	d026      	beq.n	80082d0 <__cvt+0xb0>
 8008282:	2f46      	cmp	r7, #70	; 0x46
 8008284:	eb08 0906 	add.w	r9, r8, r6
 8008288:	d111      	bne.n	80082ae <__cvt+0x8e>
 800828a:	f898 3000 	ldrb.w	r3, [r8]
 800828e:	2b30      	cmp	r3, #48	; 0x30
 8008290:	d10a      	bne.n	80082a8 <__cvt+0x88>
 8008292:	2200      	movs	r2, #0
 8008294:	2300      	movs	r3, #0
 8008296:	4620      	mov	r0, r4
 8008298:	4629      	mov	r1, r5
 800829a:	f7f8 fc15 	bl	8000ac8 <__aeabi_dcmpeq>
 800829e:	b918      	cbnz	r0, 80082a8 <__cvt+0x88>
 80082a0:	f1c6 0601 	rsb	r6, r6, #1
 80082a4:	f8ca 6000 	str.w	r6, [sl]
 80082a8:	f8da 3000 	ldr.w	r3, [sl]
 80082ac:	4499      	add	r9, r3
 80082ae:	2200      	movs	r2, #0
 80082b0:	2300      	movs	r3, #0
 80082b2:	4620      	mov	r0, r4
 80082b4:	4629      	mov	r1, r5
 80082b6:	f7f8 fc07 	bl	8000ac8 <__aeabi_dcmpeq>
 80082ba:	b938      	cbnz	r0, 80082cc <__cvt+0xac>
 80082bc:	2230      	movs	r2, #48	; 0x30
 80082be:	9b03      	ldr	r3, [sp, #12]
 80082c0:	454b      	cmp	r3, r9
 80082c2:	d205      	bcs.n	80082d0 <__cvt+0xb0>
 80082c4:	1c59      	adds	r1, r3, #1
 80082c6:	9103      	str	r1, [sp, #12]
 80082c8:	701a      	strb	r2, [r3, #0]
 80082ca:	e7f8      	b.n	80082be <__cvt+0x9e>
 80082cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80082d0:	9b03      	ldr	r3, [sp, #12]
 80082d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082d4:	eba3 0308 	sub.w	r3, r3, r8
 80082d8:	4640      	mov	r0, r8
 80082da:	6013      	str	r3, [r2, #0]
 80082dc:	b004      	add	sp, #16
 80082de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080082e2 <__exponent>:
 80082e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082e4:	2900      	cmp	r1, #0
 80082e6:	4604      	mov	r4, r0
 80082e8:	bfba      	itte	lt
 80082ea:	4249      	neglt	r1, r1
 80082ec:	232d      	movlt	r3, #45	; 0x2d
 80082ee:	232b      	movge	r3, #43	; 0x2b
 80082f0:	2909      	cmp	r1, #9
 80082f2:	f804 2b02 	strb.w	r2, [r4], #2
 80082f6:	7043      	strb	r3, [r0, #1]
 80082f8:	dd20      	ble.n	800833c <__exponent+0x5a>
 80082fa:	f10d 0307 	add.w	r3, sp, #7
 80082fe:	461f      	mov	r7, r3
 8008300:	260a      	movs	r6, #10
 8008302:	fb91 f5f6 	sdiv	r5, r1, r6
 8008306:	fb06 1115 	mls	r1, r6, r5, r1
 800830a:	3130      	adds	r1, #48	; 0x30
 800830c:	2d09      	cmp	r5, #9
 800830e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008312:	f103 32ff 	add.w	r2, r3, #4294967295
 8008316:	4629      	mov	r1, r5
 8008318:	dc09      	bgt.n	800832e <__exponent+0x4c>
 800831a:	3130      	adds	r1, #48	; 0x30
 800831c:	3b02      	subs	r3, #2
 800831e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008322:	42bb      	cmp	r3, r7
 8008324:	4622      	mov	r2, r4
 8008326:	d304      	bcc.n	8008332 <__exponent+0x50>
 8008328:	1a10      	subs	r0, r2, r0
 800832a:	b003      	add	sp, #12
 800832c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800832e:	4613      	mov	r3, r2
 8008330:	e7e7      	b.n	8008302 <__exponent+0x20>
 8008332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008336:	f804 2b01 	strb.w	r2, [r4], #1
 800833a:	e7f2      	b.n	8008322 <__exponent+0x40>
 800833c:	2330      	movs	r3, #48	; 0x30
 800833e:	4419      	add	r1, r3
 8008340:	7083      	strb	r3, [r0, #2]
 8008342:	1d02      	adds	r2, r0, #4
 8008344:	70c1      	strb	r1, [r0, #3]
 8008346:	e7ef      	b.n	8008328 <__exponent+0x46>

08008348 <_printf_float>:
 8008348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834c:	b08d      	sub	sp, #52	; 0x34
 800834e:	460c      	mov	r4, r1
 8008350:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008354:	4616      	mov	r6, r2
 8008356:	461f      	mov	r7, r3
 8008358:	4605      	mov	r5, r0
 800835a:	f002 fb6d 	bl	800aa38 <_localeconv_r>
 800835e:	6803      	ldr	r3, [r0, #0]
 8008360:	9304      	str	r3, [sp, #16]
 8008362:	4618      	mov	r0, r3
 8008364:	f7f7 ff34 	bl	80001d0 <strlen>
 8008368:	2300      	movs	r3, #0
 800836a:	930a      	str	r3, [sp, #40]	; 0x28
 800836c:	f8d8 3000 	ldr.w	r3, [r8]
 8008370:	9005      	str	r0, [sp, #20]
 8008372:	3307      	adds	r3, #7
 8008374:	f023 0307 	bic.w	r3, r3, #7
 8008378:	f103 0208 	add.w	r2, r3, #8
 800837c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008380:	f8d4 b000 	ldr.w	fp, [r4]
 8008384:	f8c8 2000 	str.w	r2, [r8]
 8008388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008390:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008394:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008398:	9307      	str	r3, [sp, #28]
 800839a:	f8cd 8018 	str.w	r8, [sp, #24]
 800839e:	f04f 32ff 	mov.w	r2, #4294967295
 80083a2:	4ba7      	ldr	r3, [pc, #668]	; (8008640 <_printf_float+0x2f8>)
 80083a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083a8:	f7f8 fbc0 	bl	8000b2c <__aeabi_dcmpun>
 80083ac:	bb70      	cbnz	r0, 800840c <_printf_float+0xc4>
 80083ae:	f04f 32ff 	mov.w	r2, #4294967295
 80083b2:	4ba3      	ldr	r3, [pc, #652]	; (8008640 <_printf_float+0x2f8>)
 80083b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083b8:	f7f8 fb9a 	bl	8000af0 <__aeabi_dcmple>
 80083bc:	bb30      	cbnz	r0, 800840c <_printf_float+0xc4>
 80083be:	2200      	movs	r2, #0
 80083c0:	2300      	movs	r3, #0
 80083c2:	4640      	mov	r0, r8
 80083c4:	4649      	mov	r1, r9
 80083c6:	f7f8 fb89 	bl	8000adc <__aeabi_dcmplt>
 80083ca:	b110      	cbz	r0, 80083d2 <_printf_float+0x8a>
 80083cc:	232d      	movs	r3, #45	; 0x2d
 80083ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083d2:	4a9c      	ldr	r2, [pc, #624]	; (8008644 <_printf_float+0x2fc>)
 80083d4:	4b9c      	ldr	r3, [pc, #624]	; (8008648 <_printf_float+0x300>)
 80083d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80083da:	bf8c      	ite	hi
 80083dc:	4690      	movhi	r8, r2
 80083de:	4698      	movls	r8, r3
 80083e0:	2303      	movs	r3, #3
 80083e2:	f02b 0204 	bic.w	r2, fp, #4
 80083e6:	6123      	str	r3, [r4, #16]
 80083e8:	6022      	str	r2, [r4, #0]
 80083ea:	f04f 0900 	mov.w	r9, #0
 80083ee:	9700      	str	r7, [sp, #0]
 80083f0:	4633      	mov	r3, r6
 80083f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80083f4:	4621      	mov	r1, r4
 80083f6:	4628      	mov	r0, r5
 80083f8:	f000 f9e6 	bl	80087c8 <_printf_common>
 80083fc:	3001      	adds	r0, #1
 80083fe:	f040 808d 	bne.w	800851c <_printf_float+0x1d4>
 8008402:	f04f 30ff 	mov.w	r0, #4294967295
 8008406:	b00d      	add	sp, #52	; 0x34
 8008408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840c:	4642      	mov	r2, r8
 800840e:	464b      	mov	r3, r9
 8008410:	4640      	mov	r0, r8
 8008412:	4649      	mov	r1, r9
 8008414:	f7f8 fb8a 	bl	8000b2c <__aeabi_dcmpun>
 8008418:	b110      	cbz	r0, 8008420 <_printf_float+0xd8>
 800841a:	4a8c      	ldr	r2, [pc, #560]	; (800864c <_printf_float+0x304>)
 800841c:	4b8c      	ldr	r3, [pc, #560]	; (8008650 <_printf_float+0x308>)
 800841e:	e7da      	b.n	80083d6 <_printf_float+0x8e>
 8008420:	6861      	ldr	r1, [r4, #4]
 8008422:	1c4b      	adds	r3, r1, #1
 8008424:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008428:	a80a      	add	r0, sp, #40	; 0x28
 800842a:	d13e      	bne.n	80084aa <_printf_float+0x162>
 800842c:	2306      	movs	r3, #6
 800842e:	6063      	str	r3, [r4, #4]
 8008430:	2300      	movs	r3, #0
 8008432:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008436:	ab09      	add	r3, sp, #36	; 0x24
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	ec49 8b10 	vmov	d0, r8, r9
 800843e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008442:	6022      	str	r2, [r4, #0]
 8008444:	f8cd a004 	str.w	sl, [sp, #4]
 8008448:	6861      	ldr	r1, [r4, #4]
 800844a:	4628      	mov	r0, r5
 800844c:	f7ff fee8 	bl	8008220 <__cvt>
 8008450:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008454:	2b47      	cmp	r3, #71	; 0x47
 8008456:	4680      	mov	r8, r0
 8008458:	d109      	bne.n	800846e <_printf_float+0x126>
 800845a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800845c:	1cd8      	adds	r0, r3, #3
 800845e:	db02      	blt.n	8008466 <_printf_float+0x11e>
 8008460:	6862      	ldr	r2, [r4, #4]
 8008462:	4293      	cmp	r3, r2
 8008464:	dd47      	ble.n	80084f6 <_printf_float+0x1ae>
 8008466:	f1aa 0a02 	sub.w	sl, sl, #2
 800846a:	fa5f fa8a 	uxtb.w	sl, sl
 800846e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008472:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008474:	d824      	bhi.n	80084c0 <_printf_float+0x178>
 8008476:	3901      	subs	r1, #1
 8008478:	4652      	mov	r2, sl
 800847a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800847e:	9109      	str	r1, [sp, #36]	; 0x24
 8008480:	f7ff ff2f 	bl	80082e2 <__exponent>
 8008484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008486:	1813      	adds	r3, r2, r0
 8008488:	2a01      	cmp	r2, #1
 800848a:	4681      	mov	r9, r0
 800848c:	6123      	str	r3, [r4, #16]
 800848e:	dc02      	bgt.n	8008496 <_printf_float+0x14e>
 8008490:	6822      	ldr	r2, [r4, #0]
 8008492:	07d1      	lsls	r1, r2, #31
 8008494:	d501      	bpl.n	800849a <_printf_float+0x152>
 8008496:	3301      	adds	r3, #1
 8008498:	6123      	str	r3, [r4, #16]
 800849a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0a5      	beq.n	80083ee <_printf_float+0xa6>
 80084a2:	232d      	movs	r3, #45	; 0x2d
 80084a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084a8:	e7a1      	b.n	80083ee <_printf_float+0xa6>
 80084aa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80084ae:	f000 8177 	beq.w	80087a0 <_printf_float+0x458>
 80084b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80084b6:	d1bb      	bne.n	8008430 <_printf_float+0xe8>
 80084b8:	2900      	cmp	r1, #0
 80084ba:	d1b9      	bne.n	8008430 <_printf_float+0xe8>
 80084bc:	2301      	movs	r3, #1
 80084be:	e7b6      	b.n	800842e <_printf_float+0xe6>
 80084c0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80084c4:	d119      	bne.n	80084fa <_printf_float+0x1b2>
 80084c6:	2900      	cmp	r1, #0
 80084c8:	6863      	ldr	r3, [r4, #4]
 80084ca:	dd0c      	ble.n	80084e6 <_printf_float+0x19e>
 80084cc:	6121      	str	r1, [r4, #16]
 80084ce:	b913      	cbnz	r3, 80084d6 <_printf_float+0x18e>
 80084d0:	6822      	ldr	r2, [r4, #0]
 80084d2:	07d2      	lsls	r2, r2, #31
 80084d4:	d502      	bpl.n	80084dc <_printf_float+0x194>
 80084d6:	3301      	adds	r3, #1
 80084d8:	440b      	add	r3, r1
 80084da:	6123      	str	r3, [r4, #16]
 80084dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084de:	65a3      	str	r3, [r4, #88]	; 0x58
 80084e0:	f04f 0900 	mov.w	r9, #0
 80084e4:	e7d9      	b.n	800849a <_printf_float+0x152>
 80084e6:	b913      	cbnz	r3, 80084ee <_printf_float+0x1a6>
 80084e8:	6822      	ldr	r2, [r4, #0]
 80084ea:	07d0      	lsls	r0, r2, #31
 80084ec:	d501      	bpl.n	80084f2 <_printf_float+0x1aa>
 80084ee:	3302      	adds	r3, #2
 80084f0:	e7f3      	b.n	80084da <_printf_float+0x192>
 80084f2:	2301      	movs	r3, #1
 80084f4:	e7f1      	b.n	80084da <_printf_float+0x192>
 80084f6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80084fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80084fe:	4293      	cmp	r3, r2
 8008500:	db05      	blt.n	800850e <_printf_float+0x1c6>
 8008502:	6822      	ldr	r2, [r4, #0]
 8008504:	6123      	str	r3, [r4, #16]
 8008506:	07d1      	lsls	r1, r2, #31
 8008508:	d5e8      	bpl.n	80084dc <_printf_float+0x194>
 800850a:	3301      	adds	r3, #1
 800850c:	e7e5      	b.n	80084da <_printf_float+0x192>
 800850e:	2b00      	cmp	r3, #0
 8008510:	bfd4      	ite	le
 8008512:	f1c3 0302 	rsble	r3, r3, #2
 8008516:	2301      	movgt	r3, #1
 8008518:	4413      	add	r3, r2
 800851a:	e7de      	b.n	80084da <_printf_float+0x192>
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	055a      	lsls	r2, r3, #21
 8008520:	d407      	bmi.n	8008532 <_printf_float+0x1ea>
 8008522:	6923      	ldr	r3, [r4, #16]
 8008524:	4642      	mov	r2, r8
 8008526:	4631      	mov	r1, r6
 8008528:	4628      	mov	r0, r5
 800852a:	47b8      	blx	r7
 800852c:	3001      	adds	r0, #1
 800852e:	d12b      	bne.n	8008588 <_printf_float+0x240>
 8008530:	e767      	b.n	8008402 <_printf_float+0xba>
 8008532:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008536:	f240 80dc 	bls.w	80086f2 <_printf_float+0x3aa>
 800853a:	2200      	movs	r2, #0
 800853c:	2300      	movs	r3, #0
 800853e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008542:	f7f8 fac1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008546:	2800      	cmp	r0, #0
 8008548:	d033      	beq.n	80085b2 <_printf_float+0x26a>
 800854a:	2301      	movs	r3, #1
 800854c:	4a41      	ldr	r2, [pc, #260]	; (8008654 <_printf_float+0x30c>)
 800854e:	4631      	mov	r1, r6
 8008550:	4628      	mov	r0, r5
 8008552:	47b8      	blx	r7
 8008554:	3001      	adds	r0, #1
 8008556:	f43f af54 	beq.w	8008402 <_printf_float+0xba>
 800855a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800855e:	429a      	cmp	r2, r3
 8008560:	db02      	blt.n	8008568 <_printf_float+0x220>
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	07d8      	lsls	r0, r3, #31
 8008566:	d50f      	bpl.n	8008588 <_printf_float+0x240>
 8008568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800856c:	4631      	mov	r1, r6
 800856e:	4628      	mov	r0, r5
 8008570:	47b8      	blx	r7
 8008572:	3001      	adds	r0, #1
 8008574:	f43f af45 	beq.w	8008402 <_printf_float+0xba>
 8008578:	f04f 0800 	mov.w	r8, #0
 800857c:	f104 091a 	add.w	r9, r4, #26
 8008580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008582:	3b01      	subs	r3, #1
 8008584:	4543      	cmp	r3, r8
 8008586:	dc09      	bgt.n	800859c <_printf_float+0x254>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	079b      	lsls	r3, r3, #30
 800858c:	f100 8103 	bmi.w	8008796 <_printf_float+0x44e>
 8008590:	68e0      	ldr	r0, [r4, #12]
 8008592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008594:	4298      	cmp	r0, r3
 8008596:	bfb8      	it	lt
 8008598:	4618      	movlt	r0, r3
 800859a:	e734      	b.n	8008406 <_printf_float+0xbe>
 800859c:	2301      	movs	r3, #1
 800859e:	464a      	mov	r2, r9
 80085a0:	4631      	mov	r1, r6
 80085a2:	4628      	mov	r0, r5
 80085a4:	47b8      	blx	r7
 80085a6:	3001      	adds	r0, #1
 80085a8:	f43f af2b 	beq.w	8008402 <_printf_float+0xba>
 80085ac:	f108 0801 	add.w	r8, r8, #1
 80085b0:	e7e6      	b.n	8008580 <_printf_float+0x238>
 80085b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	dc2b      	bgt.n	8008610 <_printf_float+0x2c8>
 80085b8:	2301      	movs	r3, #1
 80085ba:	4a26      	ldr	r2, [pc, #152]	; (8008654 <_printf_float+0x30c>)
 80085bc:	4631      	mov	r1, r6
 80085be:	4628      	mov	r0, r5
 80085c0:	47b8      	blx	r7
 80085c2:	3001      	adds	r0, #1
 80085c4:	f43f af1d 	beq.w	8008402 <_printf_float+0xba>
 80085c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ca:	b923      	cbnz	r3, 80085d6 <_printf_float+0x28e>
 80085cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ce:	b913      	cbnz	r3, 80085d6 <_printf_float+0x28e>
 80085d0:	6823      	ldr	r3, [r4, #0]
 80085d2:	07d9      	lsls	r1, r3, #31
 80085d4:	d5d8      	bpl.n	8008588 <_printf_float+0x240>
 80085d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085da:	4631      	mov	r1, r6
 80085dc:	4628      	mov	r0, r5
 80085de:	47b8      	blx	r7
 80085e0:	3001      	adds	r0, #1
 80085e2:	f43f af0e 	beq.w	8008402 <_printf_float+0xba>
 80085e6:	f04f 0900 	mov.w	r9, #0
 80085ea:	f104 0a1a 	add.w	sl, r4, #26
 80085ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f0:	425b      	negs	r3, r3
 80085f2:	454b      	cmp	r3, r9
 80085f4:	dc01      	bgt.n	80085fa <_printf_float+0x2b2>
 80085f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f8:	e794      	b.n	8008524 <_printf_float+0x1dc>
 80085fa:	2301      	movs	r3, #1
 80085fc:	4652      	mov	r2, sl
 80085fe:	4631      	mov	r1, r6
 8008600:	4628      	mov	r0, r5
 8008602:	47b8      	blx	r7
 8008604:	3001      	adds	r0, #1
 8008606:	f43f aefc 	beq.w	8008402 <_printf_float+0xba>
 800860a:	f109 0901 	add.w	r9, r9, #1
 800860e:	e7ee      	b.n	80085ee <_printf_float+0x2a6>
 8008610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008612:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008614:	429a      	cmp	r2, r3
 8008616:	bfa8      	it	ge
 8008618:	461a      	movge	r2, r3
 800861a:	2a00      	cmp	r2, #0
 800861c:	4691      	mov	r9, r2
 800861e:	dd07      	ble.n	8008630 <_printf_float+0x2e8>
 8008620:	4613      	mov	r3, r2
 8008622:	4631      	mov	r1, r6
 8008624:	4642      	mov	r2, r8
 8008626:	4628      	mov	r0, r5
 8008628:	47b8      	blx	r7
 800862a:	3001      	adds	r0, #1
 800862c:	f43f aee9 	beq.w	8008402 <_printf_float+0xba>
 8008630:	f104 031a 	add.w	r3, r4, #26
 8008634:	f04f 0b00 	mov.w	fp, #0
 8008638:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800863c:	9306      	str	r3, [sp, #24]
 800863e:	e015      	b.n	800866c <_printf_float+0x324>
 8008640:	7fefffff 	.word	0x7fefffff
 8008644:	0800d5c8 	.word	0x0800d5c8
 8008648:	0800d5c4 	.word	0x0800d5c4
 800864c:	0800d5d0 	.word	0x0800d5d0
 8008650:	0800d5cc 	.word	0x0800d5cc
 8008654:	0800d5d4 	.word	0x0800d5d4
 8008658:	2301      	movs	r3, #1
 800865a:	9a06      	ldr	r2, [sp, #24]
 800865c:	4631      	mov	r1, r6
 800865e:	4628      	mov	r0, r5
 8008660:	47b8      	blx	r7
 8008662:	3001      	adds	r0, #1
 8008664:	f43f aecd 	beq.w	8008402 <_printf_float+0xba>
 8008668:	f10b 0b01 	add.w	fp, fp, #1
 800866c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008670:	ebaa 0309 	sub.w	r3, sl, r9
 8008674:	455b      	cmp	r3, fp
 8008676:	dcef      	bgt.n	8008658 <_printf_float+0x310>
 8008678:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800867c:	429a      	cmp	r2, r3
 800867e:	44d0      	add	r8, sl
 8008680:	db15      	blt.n	80086ae <_printf_float+0x366>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	07da      	lsls	r2, r3, #31
 8008686:	d412      	bmi.n	80086ae <_printf_float+0x366>
 8008688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800868a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800868c:	eba3 020a 	sub.w	r2, r3, sl
 8008690:	eba3 0a01 	sub.w	sl, r3, r1
 8008694:	4592      	cmp	sl, r2
 8008696:	bfa8      	it	ge
 8008698:	4692      	movge	sl, r2
 800869a:	f1ba 0f00 	cmp.w	sl, #0
 800869e:	dc0e      	bgt.n	80086be <_printf_float+0x376>
 80086a0:	f04f 0800 	mov.w	r8, #0
 80086a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086a8:	f104 091a 	add.w	r9, r4, #26
 80086ac:	e019      	b.n	80086e2 <_printf_float+0x39a>
 80086ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086b2:	4631      	mov	r1, r6
 80086b4:	4628      	mov	r0, r5
 80086b6:	47b8      	blx	r7
 80086b8:	3001      	adds	r0, #1
 80086ba:	d1e5      	bne.n	8008688 <_printf_float+0x340>
 80086bc:	e6a1      	b.n	8008402 <_printf_float+0xba>
 80086be:	4653      	mov	r3, sl
 80086c0:	4642      	mov	r2, r8
 80086c2:	4631      	mov	r1, r6
 80086c4:	4628      	mov	r0, r5
 80086c6:	47b8      	blx	r7
 80086c8:	3001      	adds	r0, #1
 80086ca:	d1e9      	bne.n	80086a0 <_printf_float+0x358>
 80086cc:	e699      	b.n	8008402 <_printf_float+0xba>
 80086ce:	2301      	movs	r3, #1
 80086d0:	464a      	mov	r2, r9
 80086d2:	4631      	mov	r1, r6
 80086d4:	4628      	mov	r0, r5
 80086d6:	47b8      	blx	r7
 80086d8:	3001      	adds	r0, #1
 80086da:	f43f ae92 	beq.w	8008402 <_printf_float+0xba>
 80086de:	f108 0801 	add.w	r8, r8, #1
 80086e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086e6:	1a9b      	subs	r3, r3, r2
 80086e8:	eba3 030a 	sub.w	r3, r3, sl
 80086ec:	4543      	cmp	r3, r8
 80086ee:	dcee      	bgt.n	80086ce <_printf_float+0x386>
 80086f0:	e74a      	b.n	8008588 <_printf_float+0x240>
 80086f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086f4:	2a01      	cmp	r2, #1
 80086f6:	dc01      	bgt.n	80086fc <_printf_float+0x3b4>
 80086f8:	07db      	lsls	r3, r3, #31
 80086fa:	d53a      	bpl.n	8008772 <_printf_float+0x42a>
 80086fc:	2301      	movs	r3, #1
 80086fe:	4642      	mov	r2, r8
 8008700:	4631      	mov	r1, r6
 8008702:	4628      	mov	r0, r5
 8008704:	47b8      	blx	r7
 8008706:	3001      	adds	r0, #1
 8008708:	f43f ae7b 	beq.w	8008402 <_printf_float+0xba>
 800870c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008710:	4631      	mov	r1, r6
 8008712:	4628      	mov	r0, r5
 8008714:	47b8      	blx	r7
 8008716:	3001      	adds	r0, #1
 8008718:	f108 0801 	add.w	r8, r8, #1
 800871c:	f43f ae71 	beq.w	8008402 <_printf_float+0xba>
 8008720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008722:	2200      	movs	r2, #0
 8008724:	f103 3aff 	add.w	sl, r3, #4294967295
 8008728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800872c:	2300      	movs	r3, #0
 800872e:	f7f8 f9cb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008732:	b9c8      	cbnz	r0, 8008768 <_printf_float+0x420>
 8008734:	4653      	mov	r3, sl
 8008736:	4642      	mov	r2, r8
 8008738:	4631      	mov	r1, r6
 800873a:	4628      	mov	r0, r5
 800873c:	47b8      	blx	r7
 800873e:	3001      	adds	r0, #1
 8008740:	d10e      	bne.n	8008760 <_printf_float+0x418>
 8008742:	e65e      	b.n	8008402 <_printf_float+0xba>
 8008744:	2301      	movs	r3, #1
 8008746:	4652      	mov	r2, sl
 8008748:	4631      	mov	r1, r6
 800874a:	4628      	mov	r0, r5
 800874c:	47b8      	blx	r7
 800874e:	3001      	adds	r0, #1
 8008750:	f43f ae57 	beq.w	8008402 <_printf_float+0xba>
 8008754:	f108 0801 	add.w	r8, r8, #1
 8008758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800875a:	3b01      	subs	r3, #1
 800875c:	4543      	cmp	r3, r8
 800875e:	dcf1      	bgt.n	8008744 <_printf_float+0x3fc>
 8008760:	464b      	mov	r3, r9
 8008762:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008766:	e6de      	b.n	8008526 <_printf_float+0x1de>
 8008768:	f04f 0800 	mov.w	r8, #0
 800876c:	f104 0a1a 	add.w	sl, r4, #26
 8008770:	e7f2      	b.n	8008758 <_printf_float+0x410>
 8008772:	2301      	movs	r3, #1
 8008774:	e7df      	b.n	8008736 <_printf_float+0x3ee>
 8008776:	2301      	movs	r3, #1
 8008778:	464a      	mov	r2, r9
 800877a:	4631      	mov	r1, r6
 800877c:	4628      	mov	r0, r5
 800877e:	47b8      	blx	r7
 8008780:	3001      	adds	r0, #1
 8008782:	f43f ae3e 	beq.w	8008402 <_printf_float+0xba>
 8008786:	f108 0801 	add.w	r8, r8, #1
 800878a:	68e3      	ldr	r3, [r4, #12]
 800878c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800878e:	1a9b      	subs	r3, r3, r2
 8008790:	4543      	cmp	r3, r8
 8008792:	dcf0      	bgt.n	8008776 <_printf_float+0x42e>
 8008794:	e6fc      	b.n	8008590 <_printf_float+0x248>
 8008796:	f04f 0800 	mov.w	r8, #0
 800879a:	f104 0919 	add.w	r9, r4, #25
 800879e:	e7f4      	b.n	800878a <_printf_float+0x442>
 80087a0:	2900      	cmp	r1, #0
 80087a2:	f43f ae8b 	beq.w	80084bc <_printf_float+0x174>
 80087a6:	2300      	movs	r3, #0
 80087a8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80087ac:	ab09      	add	r3, sp, #36	; 0x24
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	ec49 8b10 	vmov	d0, r8, r9
 80087b4:	6022      	str	r2, [r4, #0]
 80087b6:	f8cd a004 	str.w	sl, [sp, #4]
 80087ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087be:	4628      	mov	r0, r5
 80087c0:	f7ff fd2e 	bl	8008220 <__cvt>
 80087c4:	4680      	mov	r8, r0
 80087c6:	e648      	b.n	800845a <_printf_float+0x112>

080087c8 <_printf_common>:
 80087c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087cc:	4691      	mov	r9, r2
 80087ce:	461f      	mov	r7, r3
 80087d0:	688a      	ldr	r2, [r1, #8]
 80087d2:	690b      	ldr	r3, [r1, #16]
 80087d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087d8:	4293      	cmp	r3, r2
 80087da:	bfb8      	it	lt
 80087dc:	4613      	movlt	r3, r2
 80087de:	f8c9 3000 	str.w	r3, [r9]
 80087e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087e6:	4606      	mov	r6, r0
 80087e8:	460c      	mov	r4, r1
 80087ea:	b112      	cbz	r2, 80087f2 <_printf_common+0x2a>
 80087ec:	3301      	adds	r3, #1
 80087ee:	f8c9 3000 	str.w	r3, [r9]
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	0699      	lsls	r1, r3, #26
 80087f6:	bf42      	ittt	mi
 80087f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80087fc:	3302      	addmi	r3, #2
 80087fe:	f8c9 3000 	strmi.w	r3, [r9]
 8008802:	6825      	ldr	r5, [r4, #0]
 8008804:	f015 0506 	ands.w	r5, r5, #6
 8008808:	d107      	bne.n	800881a <_printf_common+0x52>
 800880a:	f104 0a19 	add.w	sl, r4, #25
 800880e:	68e3      	ldr	r3, [r4, #12]
 8008810:	f8d9 2000 	ldr.w	r2, [r9]
 8008814:	1a9b      	subs	r3, r3, r2
 8008816:	42ab      	cmp	r3, r5
 8008818:	dc28      	bgt.n	800886c <_printf_common+0xa4>
 800881a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800881e:	6822      	ldr	r2, [r4, #0]
 8008820:	3300      	adds	r3, #0
 8008822:	bf18      	it	ne
 8008824:	2301      	movne	r3, #1
 8008826:	0692      	lsls	r2, r2, #26
 8008828:	d42d      	bmi.n	8008886 <_printf_common+0xbe>
 800882a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800882e:	4639      	mov	r1, r7
 8008830:	4630      	mov	r0, r6
 8008832:	47c0      	blx	r8
 8008834:	3001      	adds	r0, #1
 8008836:	d020      	beq.n	800887a <_printf_common+0xb2>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	68e5      	ldr	r5, [r4, #12]
 800883c:	f8d9 2000 	ldr.w	r2, [r9]
 8008840:	f003 0306 	and.w	r3, r3, #6
 8008844:	2b04      	cmp	r3, #4
 8008846:	bf08      	it	eq
 8008848:	1aad      	subeq	r5, r5, r2
 800884a:	68a3      	ldr	r3, [r4, #8]
 800884c:	6922      	ldr	r2, [r4, #16]
 800884e:	bf0c      	ite	eq
 8008850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008854:	2500      	movne	r5, #0
 8008856:	4293      	cmp	r3, r2
 8008858:	bfc4      	itt	gt
 800885a:	1a9b      	subgt	r3, r3, r2
 800885c:	18ed      	addgt	r5, r5, r3
 800885e:	f04f 0900 	mov.w	r9, #0
 8008862:	341a      	adds	r4, #26
 8008864:	454d      	cmp	r5, r9
 8008866:	d11a      	bne.n	800889e <_printf_common+0xd6>
 8008868:	2000      	movs	r0, #0
 800886a:	e008      	b.n	800887e <_printf_common+0xb6>
 800886c:	2301      	movs	r3, #1
 800886e:	4652      	mov	r2, sl
 8008870:	4639      	mov	r1, r7
 8008872:	4630      	mov	r0, r6
 8008874:	47c0      	blx	r8
 8008876:	3001      	adds	r0, #1
 8008878:	d103      	bne.n	8008882 <_printf_common+0xba>
 800887a:	f04f 30ff 	mov.w	r0, #4294967295
 800887e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008882:	3501      	adds	r5, #1
 8008884:	e7c3      	b.n	800880e <_printf_common+0x46>
 8008886:	18e1      	adds	r1, r4, r3
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	2030      	movs	r0, #48	; 0x30
 800888c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008890:	4422      	add	r2, r4
 8008892:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008896:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800889a:	3302      	adds	r3, #2
 800889c:	e7c5      	b.n	800882a <_printf_common+0x62>
 800889e:	2301      	movs	r3, #1
 80088a0:	4622      	mov	r2, r4
 80088a2:	4639      	mov	r1, r7
 80088a4:	4630      	mov	r0, r6
 80088a6:	47c0      	blx	r8
 80088a8:	3001      	adds	r0, #1
 80088aa:	d0e6      	beq.n	800887a <_printf_common+0xb2>
 80088ac:	f109 0901 	add.w	r9, r9, #1
 80088b0:	e7d8      	b.n	8008864 <_printf_common+0x9c>
	...

080088b4 <_printf_i>:
 80088b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80088bc:	460c      	mov	r4, r1
 80088be:	7e09      	ldrb	r1, [r1, #24]
 80088c0:	b085      	sub	sp, #20
 80088c2:	296e      	cmp	r1, #110	; 0x6e
 80088c4:	4617      	mov	r7, r2
 80088c6:	4606      	mov	r6, r0
 80088c8:	4698      	mov	r8, r3
 80088ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088cc:	f000 80b3 	beq.w	8008a36 <_printf_i+0x182>
 80088d0:	d822      	bhi.n	8008918 <_printf_i+0x64>
 80088d2:	2963      	cmp	r1, #99	; 0x63
 80088d4:	d036      	beq.n	8008944 <_printf_i+0x90>
 80088d6:	d80a      	bhi.n	80088ee <_printf_i+0x3a>
 80088d8:	2900      	cmp	r1, #0
 80088da:	f000 80b9 	beq.w	8008a50 <_printf_i+0x19c>
 80088de:	2958      	cmp	r1, #88	; 0x58
 80088e0:	f000 8083 	beq.w	80089ea <_printf_i+0x136>
 80088e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80088ec:	e032      	b.n	8008954 <_printf_i+0xa0>
 80088ee:	2964      	cmp	r1, #100	; 0x64
 80088f0:	d001      	beq.n	80088f6 <_printf_i+0x42>
 80088f2:	2969      	cmp	r1, #105	; 0x69
 80088f4:	d1f6      	bne.n	80088e4 <_printf_i+0x30>
 80088f6:	6820      	ldr	r0, [r4, #0]
 80088f8:	6813      	ldr	r3, [r2, #0]
 80088fa:	0605      	lsls	r5, r0, #24
 80088fc:	f103 0104 	add.w	r1, r3, #4
 8008900:	d52a      	bpl.n	8008958 <_printf_i+0xa4>
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6011      	str	r1, [r2, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	da03      	bge.n	8008912 <_printf_i+0x5e>
 800890a:	222d      	movs	r2, #45	; 0x2d
 800890c:	425b      	negs	r3, r3
 800890e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008912:	486f      	ldr	r0, [pc, #444]	; (8008ad0 <_printf_i+0x21c>)
 8008914:	220a      	movs	r2, #10
 8008916:	e039      	b.n	800898c <_printf_i+0xd8>
 8008918:	2973      	cmp	r1, #115	; 0x73
 800891a:	f000 809d 	beq.w	8008a58 <_printf_i+0x1a4>
 800891e:	d808      	bhi.n	8008932 <_printf_i+0x7e>
 8008920:	296f      	cmp	r1, #111	; 0x6f
 8008922:	d020      	beq.n	8008966 <_printf_i+0xb2>
 8008924:	2970      	cmp	r1, #112	; 0x70
 8008926:	d1dd      	bne.n	80088e4 <_printf_i+0x30>
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	f043 0320 	orr.w	r3, r3, #32
 800892e:	6023      	str	r3, [r4, #0]
 8008930:	e003      	b.n	800893a <_printf_i+0x86>
 8008932:	2975      	cmp	r1, #117	; 0x75
 8008934:	d017      	beq.n	8008966 <_printf_i+0xb2>
 8008936:	2978      	cmp	r1, #120	; 0x78
 8008938:	d1d4      	bne.n	80088e4 <_printf_i+0x30>
 800893a:	2378      	movs	r3, #120	; 0x78
 800893c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008940:	4864      	ldr	r0, [pc, #400]	; (8008ad4 <_printf_i+0x220>)
 8008942:	e055      	b.n	80089f0 <_printf_i+0x13c>
 8008944:	6813      	ldr	r3, [r2, #0]
 8008946:	1d19      	adds	r1, r3, #4
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	6011      	str	r1, [r2, #0]
 800894c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008954:	2301      	movs	r3, #1
 8008956:	e08c      	b.n	8008a72 <_printf_i+0x1be>
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	6011      	str	r1, [r2, #0]
 800895c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008960:	bf18      	it	ne
 8008962:	b21b      	sxthne	r3, r3
 8008964:	e7cf      	b.n	8008906 <_printf_i+0x52>
 8008966:	6813      	ldr	r3, [r2, #0]
 8008968:	6825      	ldr	r5, [r4, #0]
 800896a:	1d18      	adds	r0, r3, #4
 800896c:	6010      	str	r0, [r2, #0]
 800896e:	0628      	lsls	r0, r5, #24
 8008970:	d501      	bpl.n	8008976 <_printf_i+0xc2>
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	e002      	b.n	800897c <_printf_i+0xc8>
 8008976:	0668      	lsls	r0, r5, #25
 8008978:	d5fb      	bpl.n	8008972 <_printf_i+0xbe>
 800897a:	881b      	ldrh	r3, [r3, #0]
 800897c:	4854      	ldr	r0, [pc, #336]	; (8008ad0 <_printf_i+0x21c>)
 800897e:	296f      	cmp	r1, #111	; 0x6f
 8008980:	bf14      	ite	ne
 8008982:	220a      	movne	r2, #10
 8008984:	2208      	moveq	r2, #8
 8008986:	2100      	movs	r1, #0
 8008988:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800898c:	6865      	ldr	r5, [r4, #4]
 800898e:	60a5      	str	r5, [r4, #8]
 8008990:	2d00      	cmp	r5, #0
 8008992:	f2c0 8095 	blt.w	8008ac0 <_printf_i+0x20c>
 8008996:	6821      	ldr	r1, [r4, #0]
 8008998:	f021 0104 	bic.w	r1, r1, #4
 800899c:	6021      	str	r1, [r4, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d13d      	bne.n	8008a1e <_printf_i+0x16a>
 80089a2:	2d00      	cmp	r5, #0
 80089a4:	f040 808e 	bne.w	8008ac4 <_printf_i+0x210>
 80089a8:	4665      	mov	r5, ip
 80089aa:	2a08      	cmp	r2, #8
 80089ac:	d10b      	bne.n	80089c6 <_printf_i+0x112>
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	07db      	lsls	r3, r3, #31
 80089b2:	d508      	bpl.n	80089c6 <_printf_i+0x112>
 80089b4:	6923      	ldr	r3, [r4, #16]
 80089b6:	6862      	ldr	r2, [r4, #4]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	bfde      	ittt	le
 80089bc:	2330      	movle	r3, #48	; 0x30
 80089be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089c6:	ebac 0305 	sub.w	r3, ip, r5
 80089ca:	6123      	str	r3, [r4, #16]
 80089cc:	f8cd 8000 	str.w	r8, [sp]
 80089d0:	463b      	mov	r3, r7
 80089d2:	aa03      	add	r2, sp, #12
 80089d4:	4621      	mov	r1, r4
 80089d6:	4630      	mov	r0, r6
 80089d8:	f7ff fef6 	bl	80087c8 <_printf_common>
 80089dc:	3001      	adds	r0, #1
 80089de:	d14d      	bne.n	8008a7c <_printf_i+0x1c8>
 80089e0:	f04f 30ff 	mov.w	r0, #4294967295
 80089e4:	b005      	add	sp, #20
 80089e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089ea:	4839      	ldr	r0, [pc, #228]	; (8008ad0 <_printf_i+0x21c>)
 80089ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80089f0:	6813      	ldr	r3, [r2, #0]
 80089f2:	6821      	ldr	r1, [r4, #0]
 80089f4:	1d1d      	adds	r5, r3, #4
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6015      	str	r5, [r2, #0]
 80089fa:	060a      	lsls	r2, r1, #24
 80089fc:	d50b      	bpl.n	8008a16 <_printf_i+0x162>
 80089fe:	07ca      	lsls	r2, r1, #31
 8008a00:	bf44      	itt	mi
 8008a02:	f041 0120 	orrmi.w	r1, r1, #32
 8008a06:	6021      	strmi	r1, [r4, #0]
 8008a08:	b91b      	cbnz	r3, 8008a12 <_printf_i+0x15e>
 8008a0a:	6822      	ldr	r2, [r4, #0]
 8008a0c:	f022 0220 	bic.w	r2, r2, #32
 8008a10:	6022      	str	r2, [r4, #0]
 8008a12:	2210      	movs	r2, #16
 8008a14:	e7b7      	b.n	8008986 <_printf_i+0xd2>
 8008a16:	064d      	lsls	r5, r1, #25
 8008a18:	bf48      	it	mi
 8008a1a:	b29b      	uxthmi	r3, r3
 8008a1c:	e7ef      	b.n	80089fe <_printf_i+0x14a>
 8008a1e:	4665      	mov	r5, ip
 8008a20:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a24:	fb02 3311 	mls	r3, r2, r1, r3
 8008a28:	5cc3      	ldrb	r3, [r0, r3]
 8008a2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008a2e:	460b      	mov	r3, r1
 8008a30:	2900      	cmp	r1, #0
 8008a32:	d1f5      	bne.n	8008a20 <_printf_i+0x16c>
 8008a34:	e7b9      	b.n	80089aa <_printf_i+0xf6>
 8008a36:	6813      	ldr	r3, [r2, #0]
 8008a38:	6825      	ldr	r5, [r4, #0]
 8008a3a:	6961      	ldr	r1, [r4, #20]
 8008a3c:	1d18      	adds	r0, r3, #4
 8008a3e:	6010      	str	r0, [r2, #0]
 8008a40:	0628      	lsls	r0, r5, #24
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	d501      	bpl.n	8008a4a <_printf_i+0x196>
 8008a46:	6019      	str	r1, [r3, #0]
 8008a48:	e002      	b.n	8008a50 <_printf_i+0x19c>
 8008a4a:	066a      	lsls	r2, r5, #25
 8008a4c:	d5fb      	bpl.n	8008a46 <_printf_i+0x192>
 8008a4e:	8019      	strh	r1, [r3, #0]
 8008a50:	2300      	movs	r3, #0
 8008a52:	6123      	str	r3, [r4, #16]
 8008a54:	4665      	mov	r5, ip
 8008a56:	e7b9      	b.n	80089cc <_printf_i+0x118>
 8008a58:	6813      	ldr	r3, [r2, #0]
 8008a5a:	1d19      	adds	r1, r3, #4
 8008a5c:	6011      	str	r1, [r2, #0]
 8008a5e:	681d      	ldr	r5, [r3, #0]
 8008a60:	6862      	ldr	r2, [r4, #4]
 8008a62:	2100      	movs	r1, #0
 8008a64:	4628      	mov	r0, r5
 8008a66:	f7f7 fbbb 	bl	80001e0 <memchr>
 8008a6a:	b108      	cbz	r0, 8008a70 <_printf_i+0x1bc>
 8008a6c:	1b40      	subs	r0, r0, r5
 8008a6e:	6060      	str	r0, [r4, #4]
 8008a70:	6863      	ldr	r3, [r4, #4]
 8008a72:	6123      	str	r3, [r4, #16]
 8008a74:	2300      	movs	r3, #0
 8008a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a7a:	e7a7      	b.n	80089cc <_printf_i+0x118>
 8008a7c:	6923      	ldr	r3, [r4, #16]
 8008a7e:	462a      	mov	r2, r5
 8008a80:	4639      	mov	r1, r7
 8008a82:	4630      	mov	r0, r6
 8008a84:	47c0      	blx	r8
 8008a86:	3001      	adds	r0, #1
 8008a88:	d0aa      	beq.n	80089e0 <_printf_i+0x12c>
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	079b      	lsls	r3, r3, #30
 8008a8e:	d413      	bmi.n	8008ab8 <_printf_i+0x204>
 8008a90:	68e0      	ldr	r0, [r4, #12]
 8008a92:	9b03      	ldr	r3, [sp, #12]
 8008a94:	4298      	cmp	r0, r3
 8008a96:	bfb8      	it	lt
 8008a98:	4618      	movlt	r0, r3
 8008a9a:	e7a3      	b.n	80089e4 <_printf_i+0x130>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	464a      	mov	r2, r9
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	47c0      	blx	r8
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	d09a      	beq.n	80089e0 <_printf_i+0x12c>
 8008aaa:	3501      	adds	r5, #1
 8008aac:	68e3      	ldr	r3, [r4, #12]
 8008aae:	9a03      	ldr	r2, [sp, #12]
 8008ab0:	1a9b      	subs	r3, r3, r2
 8008ab2:	42ab      	cmp	r3, r5
 8008ab4:	dcf2      	bgt.n	8008a9c <_printf_i+0x1e8>
 8008ab6:	e7eb      	b.n	8008a90 <_printf_i+0x1dc>
 8008ab8:	2500      	movs	r5, #0
 8008aba:	f104 0919 	add.w	r9, r4, #25
 8008abe:	e7f5      	b.n	8008aac <_printf_i+0x1f8>
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1ac      	bne.n	8008a1e <_printf_i+0x16a>
 8008ac4:	7803      	ldrb	r3, [r0, #0]
 8008ac6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008aca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ace:	e76c      	b.n	80089aa <_printf_i+0xf6>
 8008ad0:	0800d5d6 	.word	0x0800d5d6
 8008ad4:	0800d5e7 	.word	0x0800d5e7

08008ad8 <siprintf>:
 8008ad8:	b40e      	push	{r1, r2, r3}
 8008ada:	b500      	push	{lr}
 8008adc:	b09c      	sub	sp, #112	; 0x70
 8008ade:	ab1d      	add	r3, sp, #116	; 0x74
 8008ae0:	9002      	str	r0, [sp, #8]
 8008ae2:	9006      	str	r0, [sp, #24]
 8008ae4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ae8:	4809      	ldr	r0, [pc, #36]	; (8008b10 <siprintf+0x38>)
 8008aea:	9107      	str	r1, [sp, #28]
 8008aec:	9104      	str	r1, [sp, #16]
 8008aee:	4909      	ldr	r1, [pc, #36]	; (8008b14 <siprintf+0x3c>)
 8008af0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008af4:	9105      	str	r1, [sp, #20]
 8008af6:	6800      	ldr	r0, [r0, #0]
 8008af8:	9301      	str	r3, [sp, #4]
 8008afa:	a902      	add	r1, sp, #8
 8008afc:	f002 fcde 	bl	800b4bc <_svfiprintf_r>
 8008b00:	9b02      	ldr	r3, [sp, #8]
 8008b02:	2200      	movs	r2, #0
 8008b04:	701a      	strb	r2, [r3, #0]
 8008b06:	b01c      	add	sp, #112	; 0x70
 8008b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b0c:	b003      	add	sp, #12
 8008b0e:	4770      	bx	lr
 8008b10:	2000002c 	.word	0x2000002c
 8008b14:	ffff0208 	.word	0xffff0208

08008b18 <sulp>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	460d      	mov	r5, r1
 8008b1e:	ec45 4b10 	vmov	d0, r4, r5
 8008b22:	4616      	mov	r6, r2
 8008b24:	f002 fa86 	bl	800b034 <__ulp>
 8008b28:	ec51 0b10 	vmov	r0, r1, d0
 8008b2c:	b17e      	cbz	r6, 8008b4e <sulp+0x36>
 8008b2e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008b32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	dd09      	ble.n	8008b4e <sulp+0x36>
 8008b3a:	051b      	lsls	r3, r3, #20
 8008b3c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008b40:	2400      	movs	r4, #0
 8008b42:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008b46:	4622      	mov	r2, r4
 8008b48:	462b      	mov	r3, r5
 8008b4a:	f7f7 fd55 	bl	80005f8 <__aeabi_dmul>
 8008b4e:	bd70      	pop	{r4, r5, r6, pc}

08008b50 <_strtod_l>:
 8008b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	461f      	mov	r7, r3
 8008b56:	b0a1      	sub	sp, #132	; 0x84
 8008b58:	2300      	movs	r3, #0
 8008b5a:	4681      	mov	r9, r0
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	460e      	mov	r6, r1
 8008b60:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b62:	931c      	str	r3, [sp, #112]	; 0x70
 8008b64:	f001 ff66 	bl	800aa34 <__localeconv_l>
 8008b68:	4680      	mov	r8, r0
 8008b6a:	6800      	ldr	r0, [r0, #0]
 8008b6c:	f7f7 fb30 	bl	80001d0 <strlen>
 8008b70:	f04f 0a00 	mov.w	sl, #0
 8008b74:	4604      	mov	r4, r0
 8008b76:	f04f 0b00 	mov.w	fp, #0
 8008b7a:	961b      	str	r6, [sp, #108]	; 0x6c
 8008b7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b7e:	781a      	ldrb	r2, [r3, #0]
 8008b80:	2a0d      	cmp	r2, #13
 8008b82:	d832      	bhi.n	8008bea <_strtod_l+0x9a>
 8008b84:	2a09      	cmp	r2, #9
 8008b86:	d236      	bcs.n	8008bf6 <_strtod_l+0xa6>
 8008b88:	2a00      	cmp	r2, #0
 8008b8a:	d03e      	beq.n	8008c0a <_strtod_l+0xba>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	930d      	str	r3, [sp, #52]	; 0x34
 8008b90:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008b92:	782b      	ldrb	r3, [r5, #0]
 8008b94:	2b30      	cmp	r3, #48	; 0x30
 8008b96:	f040 80ac 	bne.w	8008cf2 <_strtod_l+0x1a2>
 8008b9a:	786b      	ldrb	r3, [r5, #1]
 8008b9c:	2b58      	cmp	r3, #88	; 0x58
 8008b9e:	d001      	beq.n	8008ba4 <_strtod_l+0x54>
 8008ba0:	2b78      	cmp	r3, #120	; 0x78
 8008ba2:	d167      	bne.n	8008c74 <_strtod_l+0x124>
 8008ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ba6:	9301      	str	r3, [sp, #4]
 8008ba8:	ab1c      	add	r3, sp, #112	; 0x70
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	9702      	str	r7, [sp, #8]
 8008bae:	ab1d      	add	r3, sp, #116	; 0x74
 8008bb0:	4a88      	ldr	r2, [pc, #544]	; (8008dd4 <_strtod_l+0x284>)
 8008bb2:	a91b      	add	r1, sp, #108	; 0x6c
 8008bb4:	4648      	mov	r0, r9
 8008bb6:	f001 fc66 	bl	800a486 <__gethex>
 8008bba:	f010 0407 	ands.w	r4, r0, #7
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	d005      	beq.n	8008bce <_strtod_l+0x7e>
 8008bc2:	2c06      	cmp	r4, #6
 8008bc4:	d12b      	bne.n	8008c1e <_strtod_l+0xce>
 8008bc6:	3501      	adds	r5, #1
 8008bc8:	2300      	movs	r3, #0
 8008bca:	951b      	str	r5, [sp, #108]	; 0x6c
 8008bcc:	930d      	str	r3, [sp, #52]	; 0x34
 8008bce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f040 859a 	bne.w	800970a <_strtod_l+0xbba>
 8008bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bd8:	b1e3      	cbz	r3, 8008c14 <_strtod_l+0xc4>
 8008bda:	4652      	mov	r2, sl
 8008bdc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008be0:	ec43 2b10 	vmov	d0, r2, r3
 8008be4:	b021      	add	sp, #132	; 0x84
 8008be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bea:	2a2b      	cmp	r2, #43	; 0x2b
 8008bec:	d015      	beq.n	8008c1a <_strtod_l+0xca>
 8008bee:	2a2d      	cmp	r2, #45	; 0x2d
 8008bf0:	d004      	beq.n	8008bfc <_strtod_l+0xac>
 8008bf2:	2a20      	cmp	r2, #32
 8008bf4:	d1ca      	bne.n	8008b8c <_strtod_l+0x3c>
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	931b      	str	r3, [sp, #108]	; 0x6c
 8008bfa:	e7bf      	b.n	8008b7c <_strtod_l+0x2c>
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	920d      	str	r2, [sp, #52]	; 0x34
 8008c00:	1c5a      	adds	r2, r3, #1
 8008c02:	921b      	str	r2, [sp, #108]	; 0x6c
 8008c04:	785b      	ldrb	r3, [r3, #1]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1c2      	bne.n	8008b90 <_strtod_l+0x40>
 8008c0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c0c:	961b      	str	r6, [sp, #108]	; 0x6c
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f040 8579 	bne.w	8009706 <_strtod_l+0xbb6>
 8008c14:	4652      	mov	r2, sl
 8008c16:	465b      	mov	r3, fp
 8008c18:	e7e2      	b.n	8008be0 <_strtod_l+0x90>
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	e7ef      	b.n	8008bfe <_strtod_l+0xae>
 8008c1e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008c20:	b13a      	cbz	r2, 8008c32 <_strtod_l+0xe2>
 8008c22:	2135      	movs	r1, #53	; 0x35
 8008c24:	a81e      	add	r0, sp, #120	; 0x78
 8008c26:	f002 fafd 	bl	800b224 <__copybits>
 8008c2a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008c2c:	4648      	mov	r0, r9
 8008c2e:	f001 ff6a 	bl	800ab06 <_Bfree>
 8008c32:	3c01      	subs	r4, #1
 8008c34:	2c04      	cmp	r4, #4
 8008c36:	d806      	bhi.n	8008c46 <_strtod_l+0xf6>
 8008c38:	e8df f004 	tbb	[pc, r4]
 8008c3c:	1714030a 	.word	0x1714030a
 8008c40:	0a          	.byte	0x0a
 8008c41:	00          	.byte	0x00
 8008c42:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008c46:	0730      	lsls	r0, r6, #28
 8008c48:	d5c1      	bpl.n	8008bce <_strtod_l+0x7e>
 8008c4a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008c4e:	e7be      	b.n	8008bce <_strtod_l+0x7e>
 8008c50:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008c54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008c56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008c5a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008c5e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008c62:	e7f0      	b.n	8008c46 <_strtod_l+0xf6>
 8008c64:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008dd8 <_strtod_l+0x288>
 8008c68:	e7ed      	b.n	8008c46 <_strtod_l+0xf6>
 8008c6a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008c6e:	f04f 3aff 	mov.w	sl, #4294967295
 8008c72:	e7e8      	b.n	8008c46 <_strtod_l+0xf6>
 8008c74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c76:	1c5a      	adds	r2, r3, #1
 8008c78:	921b      	str	r2, [sp, #108]	; 0x6c
 8008c7a:	785b      	ldrb	r3, [r3, #1]
 8008c7c:	2b30      	cmp	r3, #48	; 0x30
 8008c7e:	d0f9      	beq.n	8008c74 <_strtod_l+0x124>
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d0a4      	beq.n	8008bce <_strtod_l+0x7e>
 8008c84:	2301      	movs	r3, #1
 8008c86:	2500      	movs	r5, #0
 8008c88:	9306      	str	r3, [sp, #24]
 8008c8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c8c:	9308      	str	r3, [sp, #32]
 8008c8e:	9507      	str	r5, [sp, #28]
 8008c90:	9505      	str	r5, [sp, #20]
 8008c92:	220a      	movs	r2, #10
 8008c94:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008c96:	7807      	ldrb	r7, [r0, #0]
 8008c98:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008c9c:	b2d9      	uxtb	r1, r3
 8008c9e:	2909      	cmp	r1, #9
 8008ca0:	d929      	bls.n	8008cf6 <_strtod_l+0x1a6>
 8008ca2:	4622      	mov	r2, r4
 8008ca4:	f8d8 1000 	ldr.w	r1, [r8]
 8008ca8:	f002 fd10 	bl	800b6cc <strncmp>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d031      	beq.n	8008d14 <_strtod_l+0x1c4>
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	9c05      	ldr	r4, [sp, #20]
 8008cb4:	9004      	str	r0, [sp, #16]
 8008cb6:	463b      	mov	r3, r7
 8008cb8:	4602      	mov	r2, r0
 8008cba:	2b65      	cmp	r3, #101	; 0x65
 8008cbc:	d001      	beq.n	8008cc2 <_strtod_l+0x172>
 8008cbe:	2b45      	cmp	r3, #69	; 0x45
 8008cc0:	d114      	bne.n	8008cec <_strtod_l+0x19c>
 8008cc2:	b924      	cbnz	r4, 8008cce <_strtod_l+0x17e>
 8008cc4:	b910      	cbnz	r0, 8008ccc <_strtod_l+0x17c>
 8008cc6:	9b06      	ldr	r3, [sp, #24]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d09e      	beq.n	8008c0a <_strtod_l+0xba>
 8008ccc:	2400      	movs	r4, #0
 8008cce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008cd0:	1c73      	adds	r3, r6, #1
 8008cd2:	931b      	str	r3, [sp, #108]	; 0x6c
 8008cd4:	7873      	ldrb	r3, [r6, #1]
 8008cd6:	2b2b      	cmp	r3, #43	; 0x2b
 8008cd8:	d078      	beq.n	8008dcc <_strtod_l+0x27c>
 8008cda:	2b2d      	cmp	r3, #45	; 0x2d
 8008cdc:	d070      	beq.n	8008dc0 <_strtod_l+0x270>
 8008cde:	f04f 0c00 	mov.w	ip, #0
 8008ce2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008ce6:	2f09      	cmp	r7, #9
 8008ce8:	d97c      	bls.n	8008de4 <_strtod_l+0x294>
 8008cea:	961b      	str	r6, [sp, #108]	; 0x6c
 8008cec:	f04f 0e00 	mov.w	lr, #0
 8008cf0:	e09a      	b.n	8008e28 <_strtod_l+0x2d8>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	e7c7      	b.n	8008c86 <_strtod_l+0x136>
 8008cf6:	9905      	ldr	r1, [sp, #20]
 8008cf8:	2908      	cmp	r1, #8
 8008cfa:	bfdd      	ittte	le
 8008cfc:	9907      	ldrle	r1, [sp, #28]
 8008cfe:	fb02 3301 	mlale	r3, r2, r1, r3
 8008d02:	9307      	strle	r3, [sp, #28]
 8008d04:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008d08:	9b05      	ldr	r3, [sp, #20]
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	9305      	str	r3, [sp, #20]
 8008d10:	901b      	str	r0, [sp, #108]	; 0x6c
 8008d12:	e7bf      	b.n	8008c94 <_strtod_l+0x144>
 8008d14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d16:	191a      	adds	r2, r3, r4
 8008d18:	921b      	str	r2, [sp, #108]	; 0x6c
 8008d1a:	9a05      	ldr	r2, [sp, #20]
 8008d1c:	5d1b      	ldrb	r3, [r3, r4]
 8008d1e:	2a00      	cmp	r2, #0
 8008d20:	d037      	beq.n	8008d92 <_strtod_l+0x242>
 8008d22:	9c05      	ldr	r4, [sp, #20]
 8008d24:	4602      	mov	r2, r0
 8008d26:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008d2a:	2909      	cmp	r1, #9
 8008d2c:	d913      	bls.n	8008d56 <_strtod_l+0x206>
 8008d2e:	2101      	movs	r1, #1
 8008d30:	9104      	str	r1, [sp, #16]
 8008d32:	e7c2      	b.n	8008cba <_strtod_l+0x16a>
 8008d34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d36:	1c5a      	adds	r2, r3, #1
 8008d38:	921b      	str	r2, [sp, #108]	; 0x6c
 8008d3a:	785b      	ldrb	r3, [r3, #1]
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	2b30      	cmp	r3, #48	; 0x30
 8008d40:	d0f8      	beq.n	8008d34 <_strtod_l+0x1e4>
 8008d42:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008d46:	2a08      	cmp	r2, #8
 8008d48:	f200 84e4 	bhi.w	8009714 <_strtod_l+0xbc4>
 8008d4c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008d4e:	9208      	str	r2, [sp, #32]
 8008d50:	4602      	mov	r2, r0
 8008d52:	2000      	movs	r0, #0
 8008d54:	4604      	mov	r4, r0
 8008d56:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008d5a:	f100 0101 	add.w	r1, r0, #1
 8008d5e:	d012      	beq.n	8008d86 <_strtod_l+0x236>
 8008d60:	440a      	add	r2, r1
 8008d62:	eb00 0c04 	add.w	ip, r0, r4
 8008d66:	4621      	mov	r1, r4
 8008d68:	270a      	movs	r7, #10
 8008d6a:	458c      	cmp	ip, r1
 8008d6c:	d113      	bne.n	8008d96 <_strtod_l+0x246>
 8008d6e:	1821      	adds	r1, r4, r0
 8008d70:	2908      	cmp	r1, #8
 8008d72:	f104 0401 	add.w	r4, r4, #1
 8008d76:	4404      	add	r4, r0
 8008d78:	dc19      	bgt.n	8008dae <_strtod_l+0x25e>
 8008d7a:	9b07      	ldr	r3, [sp, #28]
 8008d7c:	210a      	movs	r1, #10
 8008d7e:	fb01 e303 	mla	r3, r1, r3, lr
 8008d82:	9307      	str	r3, [sp, #28]
 8008d84:	2100      	movs	r1, #0
 8008d86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d88:	1c58      	adds	r0, r3, #1
 8008d8a:	901b      	str	r0, [sp, #108]	; 0x6c
 8008d8c:	785b      	ldrb	r3, [r3, #1]
 8008d8e:	4608      	mov	r0, r1
 8008d90:	e7c9      	b.n	8008d26 <_strtod_l+0x1d6>
 8008d92:	9805      	ldr	r0, [sp, #20]
 8008d94:	e7d3      	b.n	8008d3e <_strtod_l+0x1ee>
 8008d96:	2908      	cmp	r1, #8
 8008d98:	f101 0101 	add.w	r1, r1, #1
 8008d9c:	dc03      	bgt.n	8008da6 <_strtod_l+0x256>
 8008d9e:	9b07      	ldr	r3, [sp, #28]
 8008da0:	437b      	muls	r3, r7
 8008da2:	9307      	str	r3, [sp, #28]
 8008da4:	e7e1      	b.n	8008d6a <_strtod_l+0x21a>
 8008da6:	2910      	cmp	r1, #16
 8008da8:	bfd8      	it	le
 8008daa:	437d      	mulle	r5, r7
 8008dac:	e7dd      	b.n	8008d6a <_strtod_l+0x21a>
 8008dae:	2c10      	cmp	r4, #16
 8008db0:	bfdc      	itt	le
 8008db2:	210a      	movle	r1, #10
 8008db4:	fb01 e505 	mlale	r5, r1, r5, lr
 8008db8:	e7e4      	b.n	8008d84 <_strtod_l+0x234>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	9304      	str	r3, [sp, #16]
 8008dbe:	e781      	b.n	8008cc4 <_strtod_l+0x174>
 8008dc0:	f04f 0c01 	mov.w	ip, #1
 8008dc4:	1cb3      	adds	r3, r6, #2
 8008dc6:	931b      	str	r3, [sp, #108]	; 0x6c
 8008dc8:	78b3      	ldrb	r3, [r6, #2]
 8008dca:	e78a      	b.n	8008ce2 <_strtod_l+0x192>
 8008dcc:	f04f 0c00 	mov.w	ip, #0
 8008dd0:	e7f8      	b.n	8008dc4 <_strtod_l+0x274>
 8008dd2:	bf00      	nop
 8008dd4:	0800d5f8 	.word	0x0800d5f8
 8008dd8:	7ff00000 	.word	0x7ff00000
 8008ddc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dde:	1c5f      	adds	r7, r3, #1
 8008de0:	971b      	str	r7, [sp, #108]	; 0x6c
 8008de2:	785b      	ldrb	r3, [r3, #1]
 8008de4:	2b30      	cmp	r3, #48	; 0x30
 8008de6:	d0f9      	beq.n	8008ddc <_strtod_l+0x28c>
 8008de8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008dec:	2f08      	cmp	r7, #8
 8008dee:	f63f af7d 	bhi.w	8008cec <_strtod_l+0x19c>
 8008df2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008df6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008df8:	930a      	str	r3, [sp, #40]	; 0x28
 8008dfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dfc:	1c5f      	adds	r7, r3, #1
 8008dfe:	971b      	str	r7, [sp, #108]	; 0x6c
 8008e00:	785b      	ldrb	r3, [r3, #1]
 8008e02:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008e06:	f1b8 0f09 	cmp.w	r8, #9
 8008e0a:	d937      	bls.n	8008e7c <_strtod_l+0x32c>
 8008e0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e0e:	1a7f      	subs	r7, r7, r1
 8008e10:	2f08      	cmp	r7, #8
 8008e12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008e16:	dc37      	bgt.n	8008e88 <_strtod_l+0x338>
 8008e18:	45be      	cmp	lr, r7
 8008e1a:	bfa8      	it	ge
 8008e1c:	46be      	movge	lr, r7
 8008e1e:	f1bc 0f00 	cmp.w	ip, #0
 8008e22:	d001      	beq.n	8008e28 <_strtod_l+0x2d8>
 8008e24:	f1ce 0e00 	rsb	lr, lr, #0
 8008e28:	2c00      	cmp	r4, #0
 8008e2a:	d151      	bne.n	8008ed0 <_strtod_l+0x380>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	f47f aece 	bne.w	8008bce <_strtod_l+0x7e>
 8008e32:	9a06      	ldr	r2, [sp, #24]
 8008e34:	2a00      	cmp	r2, #0
 8008e36:	f47f aeca 	bne.w	8008bce <_strtod_l+0x7e>
 8008e3a:	9a04      	ldr	r2, [sp, #16]
 8008e3c:	2a00      	cmp	r2, #0
 8008e3e:	f47f aee4 	bne.w	8008c0a <_strtod_l+0xba>
 8008e42:	2b4e      	cmp	r3, #78	; 0x4e
 8008e44:	d027      	beq.n	8008e96 <_strtod_l+0x346>
 8008e46:	dc21      	bgt.n	8008e8c <_strtod_l+0x33c>
 8008e48:	2b49      	cmp	r3, #73	; 0x49
 8008e4a:	f47f aede 	bne.w	8008c0a <_strtod_l+0xba>
 8008e4e:	49a0      	ldr	r1, [pc, #640]	; (80090d0 <_strtod_l+0x580>)
 8008e50:	a81b      	add	r0, sp, #108	; 0x6c
 8008e52:	f001 fd4b 	bl	800a8ec <__match>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	f43f aed7 	beq.w	8008c0a <_strtod_l+0xba>
 8008e5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e5e:	499d      	ldr	r1, [pc, #628]	; (80090d4 <_strtod_l+0x584>)
 8008e60:	3b01      	subs	r3, #1
 8008e62:	a81b      	add	r0, sp, #108	; 0x6c
 8008e64:	931b      	str	r3, [sp, #108]	; 0x6c
 8008e66:	f001 fd41 	bl	800a8ec <__match>
 8008e6a:	b910      	cbnz	r0, 8008e72 <_strtod_l+0x322>
 8008e6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e6e:	3301      	adds	r3, #1
 8008e70:	931b      	str	r3, [sp, #108]	; 0x6c
 8008e72:	f8df b274 	ldr.w	fp, [pc, #628]	; 80090e8 <_strtod_l+0x598>
 8008e76:	f04f 0a00 	mov.w	sl, #0
 8008e7a:	e6a8      	b.n	8008bce <_strtod_l+0x7e>
 8008e7c:	210a      	movs	r1, #10
 8008e7e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008e82:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008e86:	e7b8      	b.n	8008dfa <_strtod_l+0x2aa>
 8008e88:	46be      	mov	lr, r7
 8008e8a:	e7c8      	b.n	8008e1e <_strtod_l+0x2ce>
 8008e8c:	2b69      	cmp	r3, #105	; 0x69
 8008e8e:	d0de      	beq.n	8008e4e <_strtod_l+0x2fe>
 8008e90:	2b6e      	cmp	r3, #110	; 0x6e
 8008e92:	f47f aeba 	bne.w	8008c0a <_strtod_l+0xba>
 8008e96:	4990      	ldr	r1, [pc, #576]	; (80090d8 <_strtod_l+0x588>)
 8008e98:	a81b      	add	r0, sp, #108	; 0x6c
 8008e9a:	f001 fd27 	bl	800a8ec <__match>
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	f43f aeb3 	beq.w	8008c0a <_strtod_l+0xba>
 8008ea4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	2b28      	cmp	r3, #40	; 0x28
 8008eaa:	d10e      	bne.n	8008eca <_strtod_l+0x37a>
 8008eac:	aa1e      	add	r2, sp, #120	; 0x78
 8008eae:	498b      	ldr	r1, [pc, #556]	; (80090dc <_strtod_l+0x58c>)
 8008eb0:	a81b      	add	r0, sp, #108	; 0x6c
 8008eb2:	f001 fd2f 	bl	800a914 <__hexnan>
 8008eb6:	2805      	cmp	r0, #5
 8008eb8:	d107      	bne.n	8008eca <_strtod_l+0x37a>
 8008eba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008ebc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008ec0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008ec4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008ec8:	e681      	b.n	8008bce <_strtod_l+0x7e>
 8008eca:	f8df b224 	ldr.w	fp, [pc, #548]	; 80090f0 <_strtod_l+0x5a0>
 8008ece:	e7d2      	b.n	8008e76 <_strtod_l+0x326>
 8008ed0:	ebae 0302 	sub.w	r3, lr, r2
 8008ed4:	9306      	str	r3, [sp, #24]
 8008ed6:	9b05      	ldr	r3, [sp, #20]
 8008ed8:	9807      	ldr	r0, [sp, #28]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	bf08      	it	eq
 8008ede:	4623      	moveq	r3, r4
 8008ee0:	2c10      	cmp	r4, #16
 8008ee2:	9305      	str	r3, [sp, #20]
 8008ee4:	46a0      	mov	r8, r4
 8008ee6:	bfa8      	it	ge
 8008ee8:	f04f 0810 	movge.w	r8, #16
 8008eec:	f7f7 fb0a 	bl	8000504 <__aeabi_ui2d>
 8008ef0:	2c09      	cmp	r4, #9
 8008ef2:	4682      	mov	sl, r0
 8008ef4:	468b      	mov	fp, r1
 8008ef6:	dc13      	bgt.n	8008f20 <_strtod_l+0x3d0>
 8008ef8:	9b06      	ldr	r3, [sp, #24]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f43f ae67 	beq.w	8008bce <_strtod_l+0x7e>
 8008f00:	9b06      	ldr	r3, [sp, #24]
 8008f02:	dd7a      	ble.n	8008ffa <_strtod_l+0x4aa>
 8008f04:	2b16      	cmp	r3, #22
 8008f06:	dc61      	bgt.n	8008fcc <_strtod_l+0x47c>
 8008f08:	4a75      	ldr	r2, [pc, #468]	; (80090e0 <_strtod_l+0x590>)
 8008f0a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008f0e:	e9de 0100 	ldrd	r0, r1, [lr]
 8008f12:	4652      	mov	r2, sl
 8008f14:	465b      	mov	r3, fp
 8008f16:	f7f7 fb6f 	bl	80005f8 <__aeabi_dmul>
 8008f1a:	4682      	mov	sl, r0
 8008f1c:	468b      	mov	fp, r1
 8008f1e:	e656      	b.n	8008bce <_strtod_l+0x7e>
 8008f20:	4b6f      	ldr	r3, [pc, #444]	; (80090e0 <_strtod_l+0x590>)
 8008f22:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008f26:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008f2a:	f7f7 fb65 	bl	80005f8 <__aeabi_dmul>
 8008f2e:	4606      	mov	r6, r0
 8008f30:	4628      	mov	r0, r5
 8008f32:	460f      	mov	r7, r1
 8008f34:	f7f7 fae6 	bl	8000504 <__aeabi_ui2d>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	4639      	mov	r1, r7
 8008f40:	f7f7 f9a4 	bl	800028c <__adddf3>
 8008f44:	2c0f      	cmp	r4, #15
 8008f46:	4682      	mov	sl, r0
 8008f48:	468b      	mov	fp, r1
 8008f4a:	ddd5      	ble.n	8008ef8 <_strtod_l+0x3a8>
 8008f4c:	9b06      	ldr	r3, [sp, #24]
 8008f4e:	eba4 0808 	sub.w	r8, r4, r8
 8008f52:	4498      	add	r8, r3
 8008f54:	f1b8 0f00 	cmp.w	r8, #0
 8008f58:	f340 8096 	ble.w	8009088 <_strtod_l+0x538>
 8008f5c:	f018 030f 	ands.w	r3, r8, #15
 8008f60:	d00a      	beq.n	8008f78 <_strtod_l+0x428>
 8008f62:	495f      	ldr	r1, [pc, #380]	; (80090e0 <_strtod_l+0x590>)
 8008f64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f68:	4652      	mov	r2, sl
 8008f6a:	465b      	mov	r3, fp
 8008f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f70:	f7f7 fb42 	bl	80005f8 <__aeabi_dmul>
 8008f74:	4682      	mov	sl, r0
 8008f76:	468b      	mov	fp, r1
 8008f78:	f038 080f 	bics.w	r8, r8, #15
 8008f7c:	d073      	beq.n	8009066 <_strtod_l+0x516>
 8008f7e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008f82:	dd47      	ble.n	8009014 <_strtod_l+0x4c4>
 8008f84:	2400      	movs	r4, #0
 8008f86:	46a0      	mov	r8, r4
 8008f88:	9407      	str	r4, [sp, #28]
 8008f8a:	9405      	str	r4, [sp, #20]
 8008f8c:	2322      	movs	r3, #34	; 0x22
 8008f8e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80090e8 <_strtod_l+0x598>
 8008f92:	f8c9 3000 	str.w	r3, [r9]
 8008f96:	f04f 0a00 	mov.w	sl, #0
 8008f9a:	9b07      	ldr	r3, [sp, #28]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f43f ae16 	beq.w	8008bce <_strtod_l+0x7e>
 8008fa2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008fa4:	4648      	mov	r0, r9
 8008fa6:	f001 fdae 	bl	800ab06 <_Bfree>
 8008faa:	9905      	ldr	r1, [sp, #20]
 8008fac:	4648      	mov	r0, r9
 8008fae:	f001 fdaa 	bl	800ab06 <_Bfree>
 8008fb2:	4641      	mov	r1, r8
 8008fb4:	4648      	mov	r0, r9
 8008fb6:	f001 fda6 	bl	800ab06 <_Bfree>
 8008fba:	9907      	ldr	r1, [sp, #28]
 8008fbc:	4648      	mov	r0, r9
 8008fbe:	f001 fda2 	bl	800ab06 <_Bfree>
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	4648      	mov	r0, r9
 8008fc6:	f001 fd9e 	bl	800ab06 <_Bfree>
 8008fca:	e600      	b.n	8008bce <_strtod_l+0x7e>
 8008fcc:	9a06      	ldr	r2, [sp, #24]
 8008fce:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	dbba      	blt.n	8008f4c <_strtod_l+0x3fc>
 8008fd6:	4d42      	ldr	r5, [pc, #264]	; (80090e0 <_strtod_l+0x590>)
 8008fd8:	f1c4 040f 	rsb	r4, r4, #15
 8008fdc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008fe0:	4652      	mov	r2, sl
 8008fe2:	465b      	mov	r3, fp
 8008fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fe8:	f7f7 fb06 	bl	80005f8 <__aeabi_dmul>
 8008fec:	9b06      	ldr	r3, [sp, #24]
 8008fee:	1b1c      	subs	r4, r3, r4
 8008ff0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008ff4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ff8:	e78d      	b.n	8008f16 <_strtod_l+0x3c6>
 8008ffa:	f113 0f16 	cmn.w	r3, #22
 8008ffe:	dba5      	blt.n	8008f4c <_strtod_l+0x3fc>
 8009000:	4a37      	ldr	r2, [pc, #220]	; (80090e0 <_strtod_l+0x590>)
 8009002:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009006:	e9d2 2300 	ldrd	r2, r3, [r2]
 800900a:	4650      	mov	r0, sl
 800900c:	4659      	mov	r1, fp
 800900e:	f7f7 fc1d 	bl	800084c <__aeabi_ddiv>
 8009012:	e782      	b.n	8008f1a <_strtod_l+0x3ca>
 8009014:	2300      	movs	r3, #0
 8009016:	4e33      	ldr	r6, [pc, #204]	; (80090e4 <_strtod_l+0x594>)
 8009018:	ea4f 1828 	mov.w	r8, r8, asr #4
 800901c:	4650      	mov	r0, sl
 800901e:	4659      	mov	r1, fp
 8009020:	461d      	mov	r5, r3
 8009022:	f1b8 0f01 	cmp.w	r8, #1
 8009026:	dc21      	bgt.n	800906c <_strtod_l+0x51c>
 8009028:	b10b      	cbz	r3, 800902e <_strtod_l+0x4de>
 800902a:	4682      	mov	sl, r0
 800902c:	468b      	mov	fp, r1
 800902e:	4b2d      	ldr	r3, [pc, #180]	; (80090e4 <_strtod_l+0x594>)
 8009030:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009034:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009038:	4652      	mov	r2, sl
 800903a:	465b      	mov	r3, fp
 800903c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009040:	f7f7 fada 	bl	80005f8 <__aeabi_dmul>
 8009044:	4b28      	ldr	r3, [pc, #160]	; (80090e8 <_strtod_l+0x598>)
 8009046:	460a      	mov	r2, r1
 8009048:	400b      	ands	r3, r1
 800904a:	4928      	ldr	r1, [pc, #160]	; (80090ec <_strtod_l+0x59c>)
 800904c:	428b      	cmp	r3, r1
 800904e:	4682      	mov	sl, r0
 8009050:	d898      	bhi.n	8008f84 <_strtod_l+0x434>
 8009052:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009056:	428b      	cmp	r3, r1
 8009058:	bf86      	itte	hi
 800905a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80090f4 <_strtod_l+0x5a4>
 800905e:	f04f 3aff 	movhi.w	sl, #4294967295
 8009062:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009066:	2300      	movs	r3, #0
 8009068:	9304      	str	r3, [sp, #16]
 800906a:	e077      	b.n	800915c <_strtod_l+0x60c>
 800906c:	f018 0f01 	tst.w	r8, #1
 8009070:	d006      	beq.n	8009080 <_strtod_l+0x530>
 8009072:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8009076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907a:	f7f7 fabd 	bl	80005f8 <__aeabi_dmul>
 800907e:	2301      	movs	r3, #1
 8009080:	3501      	adds	r5, #1
 8009082:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009086:	e7cc      	b.n	8009022 <_strtod_l+0x4d2>
 8009088:	d0ed      	beq.n	8009066 <_strtod_l+0x516>
 800908a:	f1c8 0800 	rsb	r8, r8, #0
 800908e:	f018 020f 	ands.w	r2, r8, #15
 8009092:	d00a      	beq.n	80090aa <_strtod_l+0x55a>
 8009094:	4b12      	ldr	r3, [pc, #72]	; (80090e0 <_strtod_l+0x590>)
 8009096:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800909a:	4650      	mov	r0, sl
 800909c:	4659      	mov	r1, fp
 800909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a2:	f7f7 fbd3 	bl	800084c <__aeabi_ddiv>
 80090a6:	4682      	mov	sl, r0
 80090a8:	468b      	mov	fp, r1
 80090aa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80090ae:	d0da      	beq.n	8009066 <_strtod_l+0x516>
 80090b0:	f1b8 0f1f 	cmp.w	r8, #31
 80090b4:	dd20      	ble.n	80090f8 <_strtod_l+0x5a8>
 80090b6:	2400      	movs	r4, #0
 80090b8:	46a0      	mov	r8, r4
 80090ba:	9407      	str	r4, [sp, #28]
 80090bc:	9405      	str	r4, [sp, #20]
 80090be:	2322      	movs	r3, #34	; 0x22
 80090c0:	f04f 0a00 	mov.w	sl, #0
 80090c4:	f04f 0b00 	mov.w	fp, #0
 80090c8:	f8c9 3000 	str.w	r3, [r9]
 80090cc:	e765      	b.n	8008f9a <_strtod_l+0x44a>
 80090ce:	bf00      	nop
 80090d0:	0800d5c9 	.word	0x0800d5c9
 80090d4:	0800d64b 	.word	0x0800d64b
 80090d8:	0800d5d1 	.word	0x0800d5d1
 80090dc:	0800d60c 	.word	0x0800d60c
 80090e0:	0800d688 	.word	0x0800d688
 80090e4:	0800d660 	.word	0x0800d660
 80090e8:	7ff00000 	.word	0x7ff00000
 80090ec:	7ca00000 	.word	0x7ca00000
 80090f0:	fff80000 	.word	0xfff80000
 80090f4:	7fefffff 	.word	0x7fefffff
 80090f8:	f018 0310 	ands.w	r3, r8, #16
 80090fc:	bf18      	it	ne
 80090fe:	236a      	movne	r3, #106	; 0x6a
 8009100:	4da0      	ldr	r5, [pc, #640]	; (8009384 <_strtod_l+0x834>)
 8009102:	9304      	str	r3, [sp, #16]
 8009104:	4650      	mov	r0, sl
 8009106:	4659      	mov	r1, fp
 8009108:	2300      	movs	r3, #0
 800910a:	f1b8 0f00 	cmp.w	r8, #0
 800910e:	f300 810a 	bgt.w	8009326 <_strtod_l+0x7d6>
 8009112:	b10b      	cbz	r3, 8009118 <_strtod_l+0x5c8>
 8009114:	4682      	mov	sl, r0
 8009116:	468b      	mov	fp, r1
 8009118:	9b04      	ldr	r3, [sp, #16]
 800911a:	b1bb      	cbz	r3, 800914c <_strtod_l+0x5fc>
 800911c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009120:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009124:	2b00      	cmp	r3, #0
 8009126:	4659      	mov	r1, fp
 8009128:	dd10      	ble.n	800914c <_strtod_l+0x5fc>
 800912a:	2b1f      	cmp	r3, #31
 800912c:	f340 8107 	ble.w	800933e <_strtod_l+0x7ee>
 8009130:	2b34      	cmp	r3, #52	; 0x34
 8009132:	bfde      	ittt	le
 8009134:	3b20      	suble	r3, #32
 8009136:	f04f 32ff 	movle.w	r2, #4294967295
 800913a:	fa02 f303 	lslle.w	r3, r2, r3
 800913e:	f04f 0a00 	mov.w	sl, #0
 8009142:	bfcc      	ite	gt
 8009144:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009148:	ea03 0b01 	andle.w	fp, r3, r1
 800914c:	2200      	movs	r2, #0
 800914e:	2300      	movs	r3, #0
 8009150:	4650      	mov	r0, sl
 8009152:	4659      	mov	r1, fp
 8009154:	f7f7 fcb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009158:	2800      	cmp	r0, #0
 800915a:	d1ac      	bne.n	80090b6 <_strtod_l+0x566>
 800915c:	9b07      	ldr	r3, [sp, #28]
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	9a05      	ldr	r2, [sp, #20]
 8009162:	9908      	ldr	r1, [sp, #32]
 8009164:	4623      	mov	r3, r4
 8009166:	4648      	mov	r0, r9
 8009168:	f001 fd1f 	bl	800abaa <__s2b>
 800916c:	9007      	str	r0, [sp, #28]
 800916e:	2800      	cmp	r0, #0
 8009170:	f43f af08 	beq.w	8008f84 <_strtod_l+0x434>
 8009174:	9a06      	ldr	r2, [sp, #24]
 8009176:	9b06      	ldr	r3, [sp, #24]
 8009178:	2a00      	cmp	r2, #0
 800917a:	f1c3 0300 	rsb	r3, r3, #0
 800917e:	bfa8      	it	ge
 8009180:	2300      	movge	r3, #0
 8009182:	930e      	str	r3, [sp, #56]	; 0x38
 8009184:	2400      	movs	r4, #0
 8009186:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800918a:	9316      	str	r3, [sp, #88]	; 0x58
 800918c:	46a0      	mov	r8, r4
 800918e:	9b07      	ldr	r3, [sp, #28]
 8009190:	4648      	mov	r0, r9
 8009192:	6859      	ldr	r1, [r3, #4]
 8009194:	f001 fc83 	bl	800aa9e <_Balloc>
 8009198:	9005      	str	r0, [sp, #20]
 800919a:	2800      	cmp	r0, #0
 800919c:	f43f aef6 	beq.w	8008f8c <_strtod_l+0x43c>
 80091a0:	9b07      	ldr	r3, [sp, #28]
 80091a2:	691a      	ldr	r2, [r3, #16]
 80091a4:	3202      	adds	r2, #2
 80091a6:	f103 010c 	add.w	r1, r3, #12
 80091aa:	0092      	lsls	r2, r2, #2
 80091ac:	300c      	adds	r0, #12
 80091ae:	f001 fc6b 	bl	800aa88 <memcpy>
 80091b2:	aa1e      	add	r2, sp, #120	; 0x78
 80091b4:	a91d      	add	r1, sp, #116	; 0x74
 80091b6:	ec4b ab10 	vmov	d0, sl, fp
 80091ba:	4648      	mov	r0, r9
 80091bc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80091c0:	f001 ffae 	bl	800b120 <__d2b>
 80091c4:	901c      	str	r0, [sp, #112]	; 0x70
 80091c6:	2800      	cmp	r0, #0
 80091c8:	f43f aee0 	beq.w	8008f8c <_strtod_l+0x43c>
 80091cc:	2101      	movs	r1, #1
 80091ce:	4648      	mov	r0, r9
 80091d0:	f001 fd77 	bl	800acc2 <__i2b>
 80091d4:	4680      	mov	r8, r0
 80091d6:	2800      	cmp	r0, #0
 80091d8:	f43f aed8 	beq.w	8008f8c <_strtod_l+0x43c>
 80091dc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80091de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80091e0:	2e00      	cmp	r6, #0
 80091e2:	bfab      	itete	ge
 80091e4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80091e6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80091e8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80091ea:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80091ec:	bfac      	ite	ge
 80091ee:	18f7      	addge	r7, r6, r3
 80091f0:	1b9d      	sublt	r5, r3, r6
 80091f2:	9b04      	ldr	r3, [sp, #16]
 80091f4:	1af6      	subs	r6, r6, r3
 80091f6:	4416      	add	r6, r2
 80091f8:	4b63      	ldr	r3, [pc, #396]	; (8009388 <_strtod_l+0x838>)
 80091fa:	3e01      	subs	r6, #1
 80091fc:	429e      	cmp	r6, r3
 80091fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009202:	f280 80af 	bge.w	8009364 <_strtod_l+0x814>
 8009206:	1b9b      	subs	r3, r3, r6
 8009208:	2b1f      	cmp	r3, #31
 800920a:	eba2 0203 	sub.w	r2, r2, r3
 800920e:	f04f 0101 	mov.w	r1, #1
 8009212:	f300 809b 	bgt.w	800934c <_strtod_l+0x7fc>
 8009216:	fa01 f303 	lsl.w	r3, r1, r3
 800921a:	930f      	str	r3, [sp, #60]	; 0x3c
 800921c:	2300      	movs	r3, #0
 800921e:	930a      	str	r3, [sp, #40]	; 0x28
 8009220:	18be      	adds	r6, r7, r2
 8009222:	9b04      	ldr	r3, [sp, #16]
 8009224:	42b7      	cmp	r7, r6
 8009226:	4415      	add	r5, r2
 8009228:	441d      	add	r5, r3
 800922a:	463b      	mov	r3, r7
 800922c:	bfa8      	it	ge
 800922e:	4633      	movge	r3, r6
 8009230:	42ab      	cmp	r3, r5
 8009232:	bfa8      	it	ge
 8009234:	462b      	movge	r3, r5
 8009236:	2b00      	cmp	r3, #0
 8009238:	bfc2      	ittt	gt
 800923a:	1af6      	subgt	r6, r6, r3
 800923c:	1aed      	subgt	r5, r5, r3
 800923e:	1aff      	subgt	r7, r7, r3
 8009240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009242:	b1bb      	cbz	r3, 8009274 <_strtod_l+0x724>
 8009244:	4641      	mov	r1, r8
 8009246:	461a      	mov	r2, r3
 8009248:	4648      	mov	r0, r9
 800924a:	f001 fdd9 	bl	800ae00 <__pow5mult>
 800924e:	4680      	mov	r8, r0
 8009250:	2800      	cmp	r0, #0
 8009252:	f43f ae9b 	beq.w	8008f8c <_strtod_l+0x43c>
 8009256:	4601      	mov	r1, r0
 8009258:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800925a:	4648      	mov	r0, r9
 800925c:	f001 fd3a 	bl	800acd4 <__multiply>
 8009260:	900c      	str	r0, [sp, #48]	; 0x30
 8009262:	2800      	cmp	r0, #0
 8009264:	f43f ae92 	beq.w	8008f8c <_strtod_l+0x43c>
 8009268:	991c      	ldr	r1, [sp, #112]	; 0x70
 800926a:	4648      	mov	r0, r9
 800926c:	f001 fc4b 	bl	800ab06 <_Bfree>
 8009270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009272:	931c      	str	r3, [sp, #112]	; 0x70
 8009274:	2e00      	cmp	r6, #0
 8009276:	dc7a      	bgt.n	800936e <_strtod_l+0x81e>
 8009278:	9b06      	ldr	r3, [sp, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	dd08      	ble.n	8009290 <_strtod_l+0x740>
 800927e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009280:	9905      	ldr	r1, [sp, #20]
 8009282:	4648      	mov	r0, r9
 8009284:	f001 fdbc 	bl	800ae00 <__pow5mult>
 8009288:	9005      	str	r0, [sp, #20]
 800928a:	2800      	cmp	r0, #0
 800928c:	f43f ae7e 	beq.w	8008f8c <_strtod_l+0x43c>
 8009290:	2d00      	cmp	r5, #0
 8009292:	dd08      	ble.n	80092a6 <_strtod_l+0x756>
 8009294:	462a      	mov	r2, r5
 8009296:	9905      	ldr	r1, [sp, #20]
 8009298:	4648      	mov	r0, r9
 800929a:	f001 fdff 	bl	800ae9c <__lshift>
 800929e:	9005      	str	r0, [sp, #20]
 80092a0:	2800      	cmp	r0, #0
 80092a2:	f43f ae73 	beq.w	8008f8c <_strtod_l+0x43c>
 80092a6:	2f00      	cmp	r7, #0
 80092a8:	dd08      	ble.n	80092bc <_strtod_l+0x76c>
 80092aa:	4641      	mov	r1, r8
 80092ac:	463a      	mov	r2, r7
 80092ae:	4648      	mov	r0, r9
 80092b0:	f001 fdf4 	bl	800ae9c <__lshift>
 80092b4:	4680      	mov	r8, r0
 80092b6:	2800      	cmp	r0, #0
 80092b8:	f43f ae68 	beq.w	8008f8c <_strtod_l+0x43c>
 80092bc:	9a05      	ldr	r2, [sp, #20]
 80092be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80092c0:	4648      	mov	r0, r9
 80092c2:	f001 fe59 	bl	800af78 <__mdiff>
 80092c6:	4604      	mov	r4, r0
 80092c8:	2800      	cmp	r0, #0
 80092ca:	f43f ae5f 	beq.w	8008f8c <_strtod_l+0x43c>
 80092ce:	68c3      	ldr	r3, [r0, #12]
 80092d0:	930c      	str	r3, [sp, #48]	; 0x30
 80092d2:	2300      	movs	r3, #0
 80092d4:	60c3      	str	r3, [r0, #12]
 80092d6:	4641      	mov	r1, r8
 80092d8:	f001 fe34 	bl	800af44 <__mcmp>
 80092dc:	2800      	cmp	r0, #0
 80092de:	da55      	bge.n	800938c <_strtod_l+0x83c>
 80092e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092e2:	b9e3      	cbnz	r3, 800931e <_strtod_l+0x7ce>
 80092e4:	f1ba 0f00 	cmp.w	sl, #0
 80092e8:	d119      	bne.n	800931e <_strtod_l+0x7ce>
 80092ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092ee:	b9b3      	cbnz	r3, 800931e <_strtod_l+0x7ce>
 80092f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80092f4:	0d1b      	lsrs	r3, r3, #20
 80092f6:	051b      	lsls	r3, r3, #20
 80092f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80092fc:	d90f      	bls.n	800931e <_strtod_l+0x7ce>
 80092fe:	6963      	ldr	r3, [r4, #20]
 8009300:	b913      	cbnz	r3, 8009308 <_strtod_l+0x7b8>
 8009302:	6923      	ldr	r3, [r4, #16]
 8009304:	2b01      	cmp	r3, #1
 8009306:	dd0a      	ble.n	800931e <_strtod_l+0x7ce>
 8009308:	4621      	mov	r1, r4
 800930a:	2201      	movs	r2, #1
 800930c:	4648      	mov	r0, r9
 800930e:	f001 fdc5 	bl	800ae9c <__lshift>
 8009312:	4641      	mov	r1, r8
 8009314:	4604      	mov	r4, r0
 8009316:	f001 fe15 	bl	800af44 <__mcmp>
 800931a:	2800      	cmp	r0, #0
 800931c:	dc67      	bgt.n	80093ee <_strtod_l+0x89e>
 800931e:	9b04      	ldr	r3, [sp, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d171      	bne.n	8009408 <_strtod_l+0x8b8>
 8009324:	e63d      	b.n	8008fa2 <_strtod_l+0x452>
 8009326:	f018 0f01 	tst.w	r8, #1
 800932a:	d004      	beq.n	8009336 <_strtod_l+0x7e6>
 800932c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009330:	f7f7 f962 	bl	80005f8 <__aeabi_dmul>
 8009334:	2301      	movs	r3, #1
 8009336:	ea4f 0868 	mov.w	r8, r8, asr #1
 800933a:	3508      	adds	r5, #8
 800933c:	e6e5      	b.n	800910a <_strtod_l+0x5ba>
 800933e:	f04f 32ff 	mov.w	r2, #4294967295
 8009342:	fa02 f303 	lsl.w	r3, r2, r3
 8009346:	ea03 0a0a 	and.w	sl, r3, sl
 800934a:	e6ff      	b.n	800914c <_strtod_l+0x5fc>
 800934c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009350:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009354:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009358:	36e2      	adds	r6, #226	; 0xe2
 800935a:	fa01 f306 	lsl.w	r3, r1, r6
 800935e:	930a      	str	r3, [sp, #40]	; 0x28
 8009360:	910f      	str	r1, [sp, #60]	; 0x3c
 8009362:	e75d      	b.n	8009220 <_strtod_l+0x6d0>
 8009364:	2300      	movs	r3, #0
 8009366:	930a      	str	r3, [sp, #40]	; 0x28
 8009368:	2301      	movs	r3, #1
 800936a:	930f      	str	r3, [sp, #60]	; 0x3c
 800936c:	e758      	b.n	8009220 <_strtod_l+0x6d0>
 800936e:	4632      	mov	r2, r6
 8009370:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009372:	4648      	mov	r0, r9
 8009374:	f001 fd92 	bl	800ae9c <__lshift>
 8009378:	901c      	str	r0, [sp, #112]	; 0x70
 800937a:	2800      	cmp	r0, #0
 800937c:	f47f af7c 	bne.w	8009278 <_strtod_l+0x728>
 8009380:	e604      	b.n	8008f8c <_strtod_l+0x43c>
 8009382:	bf00      	nop
 8009384:	0800d620 	.word	0x0800d620
 8009388:	fffffc02 	.word	0xfffffc02
 800938c:	465d      	mov	r5, fp
 800938e:	f040 8086 	bne.w	800949e <_strtod_l+0x94e>
 8009392:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009394:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009398:	b32a      	cbz	r2, 80093e6 <_strtod_l+0x896>
 800939a:	4aaf      	ldr	r2, [pc, #700]	; (8009658 <_strtod_l+0xb08>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d153      	bne.n	8009448 <_strtod_l+0x8f8>
 80093a0:	9b04      	ldr	r3, [sp, #16]
 80093a2:	4650      	mov	r0, sl
 80093a4:	b1d3      	cbz	r3, 80093dc <_strtod_l+0x88c>
 80093a6:	4aad      	ldr	r2, [pc, #692]	; (800965c <_strtod_l+0xb0c>)
 80093a8:	402a      	ands	r2, r5
 80093aa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80093ae:	f04f 31ff 	mov.w	r1, #4294967295
 80093b2:	d816      	bhi.n	80093e2 <_strtod_l+0x892>
 80093b4:	0d12      	lsrs	r2, r2, #20
 80093b6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80093ba:	fa01 f303 	lsl.w	r3, r1, r3
 80093be:	4298      	cmp	r0, r3
 80093c0:	d142      	bne.n	8009448 <_strtod_l+0x8f8>
 80093c2:	4ba7      	ldr	r3, [pc, #668]	; (8009660 <_strtod_l+0xb10>)
 80093c4:	429d      	cmp	r5, r3
 80093c6:	d102      	bne.n	80093ce <_strtod_l+0x87e>
 80093c8:	3001      	adds	r0, #1
 80093ca:	f43f addf 	beq.w	8008f8c <_strtod_l+0x43c>
 80093ce:	4ba3      	ldr	r3, [pc, #652]	; (800965c <_strtod_l+0xb0c>)
 80093d0:	402b      	ands	r3, r5
 80093d2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80093d6:	f04f 0a00 	mov.w	sl, #0
 80093da:	e7a0      	b.n	800931e <_strtod_l+0x7ce>
 80093dc:	f04f 33ff 	mov.w	r3, #4294967295
 80093e0:	e7ed      	b.n	80093be <_strtod_l+0x86e>
 80093e2:	460b      	mov	r3, r1
 80093e4:	e7eb      	b.n	80093be <_strtod_l+0x86e>
 80093e6:	bb7b      	cbnz	r3, 8009448 <_strtod_l+0x8f8>
 80093e8:	f1ba 0f00 	cmp.w	sl, #0
 80093ec:	d12c      	bne.n	8009448 <_strtod_l+0x8f8>
 80093ee:	9904      	ldr	r1, [sp, #16]
 80093f0:	4a9a      	ldr	r2, [pc, #616]	; (800965c <_strtod_l+0xb0c>)
 80093f2:	465b      	mov	r3, fp
 80093f4:	b1f1      	cbz	r1, 8009434 <_strtod_l+0x8e4>
 80093f6:	ea02 010b 	and.w	r1, r2, fp
 80093fa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80093fe:	dc19      	bgt.n	8009434 <_strtod_l+0x8e4>
 8009400:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009404:	f77f ae5b 	ble.w	80090be <_strtod_l+0x56e>
 8009408:	4a96      	ldr	r2, [pc, #600]	; (8009664 <_strtod_l+0xb14>)
 800940a:	2300      	movs	r3, #0
 800940c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009410:	4650      	mov	r0, sl
 8009412:	4659      	mov	r1, fp
 8009414:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009418:	f7f7 f8ee 	bl	80005f8 <__aeabi_dmul>
 800941c:	4682      	mov	sl, r0
 800941e:	468b      	mov	fp, r1
 8009420:	2900      	cmp	r1, #0
 8009422:	f47f adbe 	bne.w	8008fa2 <_strtod_l+0x452>
 8009426:	2800      	cmp	r0, #0
 8009428:	f47f adbb 	bne.w	8008fa2 <_strtod_l+0x452>
 800942c:	2322      	movs	r3, #34	; 0x22
 800942e:	f8c9 3000 	str.w	r3, [r9]
 8009432:	e5b6      	b.n	8008fa2 <_strtod_l+0x452>
 8009434:	4013      	ands	r3, r2
 8009436:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800943a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800943e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009442:	f04f 3aff 	mov.w	sl, #4294967295
 8009446:	e76a      	b.n	800931e <_strtod_l+0x7ce>
 8009448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800944a:	b193      	cbz	r3, 8009472 <_strtod_l+0x922>
 800944c:	422b      	tst	r3, r5
 800944e:	f43f af66 	beq.w	800931e <_strtod_l+0x7ce>
 8009452:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009454:	9a04      	ldr	r2, [sp, #16]
 8009456:	4650      	mov	r0, sl
 8009458:	4659      	mov	r1, fp
 800945a:	b173      	cbz	r3, 800947a <_strtod_l+0x92a>
 800945c:	f7ff fb5c 	bl	8008b18 <sulp>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009468:	f7f6 ff10 	bl	800028c <__adddf3>
 800946c:	4682      	mov	sl, r0
 800946e:	468b      	mov	fp, r1
 8009470:	e755      	b.n	800931e <_strtod_l+0x7ce>
 8009472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009474:	ea13 0f0a 	tst.w	r3, sl
 8009478:	e7e9      	b.n	800944e <_strtod_l+0x8fe>
 800947a:	f7ff fb4d 	bl	8008b18 <sulp>
 800947e:	4602      	mov	r2, r0
 8009480:	460b      	mov	r3, r1
 8009482:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009486:	f7f6 feff 	bl	8000288 <__aeabi_dsub>
 800948a:	2200      	movs	r2, #0
 800948c:	2300      	movs	r3, #0
 800948e:	4682      	mov	sl, r0
 8009490:	468b      	mov	fp, r1
 8009492:	f7f7 fb19 	bl	8000ac8 <__aeabi_dcmpeq>
 8009496:	2800      	cmp	r0, #0
 8009498:	f47f ae11 	bne.w	80090be <_strtod_l+0x56e>
 800949c:	e73f      	b.n	800931e <_strtod_l+0x7ce>
 800949e:	4641      	mov	r1, r8
 80094a0:	4620      	mov	r0, r4
 80094a2:	f001 fe8c 	bl	800b1be <__ratio>
 80094a6:	ec57 6b10 	vmov	r6, r7, d0
 80094aa:	2200      	movs	r2, #0
 80094ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094b0:	ee10 0a10 	vmov	r0, s0
 80094b4:	4639      	mov	r1, r7
 80094b6:	f7f7 fb1b 	bl	8000af0 <__aeabi_dcmple>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d077      	beq.n	80095ae <_strtod_l+0xa5e>
 80094be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d04a      	beq.n	800955a <_strtod_l+0xa0a>
 80094c4:	4b68      	ldr	r3, [pc, #416]	; (8009668 <_strtod_l+0xb18>)
 80094c6:	2200      	movs	r2, #0
 80094c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80094cc:	4f66      	ldr	r7, [pc, #408]	; (8009668 <_strtod_l+0xb18>)
 80094ce:	2600      	movs	r6, #0
 80094d0:	4b62      	ldr	r3, [pc, #392]	; (800965c <_strtod_l+0xb0c>)
 80094d2:	402b      	ands	r3, r5
 80094d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80094d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094d8:	4b64      	ldr	r3, [pc, #400]	; (800966c <_strtod_l+0xb1c>)
 80094da:	429a      	cmp	r2, r3
 80094dc:	f040 80ce 	bne.w	800967c <_strtod_l+0xb2c>
 80094e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80094e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80094e8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80094ec:	ec4b ab10 	vmov	d0, sl, fp
 80094f0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80094f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80094f8:	f001 fd9c 	bl	800b034 <__ulp>
 80094fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009500:	ec53 2b10 	vmov	r2, r3, d0
 8009504:	f7f7 f878 	bl	80005f8 <__aeabi_dmul>
 8009508:	4652      	mov	r2, sl
 800950a:	465b      	mov	r3, fp
 800950c:	f7f6 febe 	bl	800028c <__adddf3>
 8009510:	460b      	mov	r3, r1
 8009512:	4952      	ldr	r1, [pc, #328]	; (800965c <_strtod_l+0xb0c>)
 8009514:	4a56      	ldr	r2, [pc, #344]	; (8009670 <_strtod_l+0xb20>)
 8009516:	4019      	ands	r1, r3
 8009518:	4291      	cmp	r1, r2
 800951a:	4682      	mov	sl, r0
 800951c:	d95b      	bls.n	80095d6 <_strtod_l+0xa86>
 800951e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009520:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009524:	4293      	cmp	r3, r2
 8009526:	d103      	bne.n	8009530 <_strtod_l+0x9e0>
 8009528:	9b08      	ldr	r3, [sp, #32]
 800952a:	3301      	adds	r3, #1
 800952c:	f43f ad2e 	beq.w	8008f8c <_strtod_l+0x43c>
 8009530:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009660 <_strtod_l+0xb10>
 8009534:	f04f 3aff 	mov.w	sl, #4294967295
 8009538:	991c      	ldr	r1, [sp, #112]	; 0x70
 800953a:	4648      	mov	r0, r9
 800953c:	f001 fae3 	bl	800ab06 <_Bfree>
 8009540:	9905      	ldr	r1, [sp, #20]
 8009542:	4648      	mov	r0, r9
 8009544:	f001 fadf 	bl	800ab06 <_Bfree>
 8009548:	4641      	mov	r1, r8
 800954a:	4648      	mov	r0, r9
 800954c:	f001 fadb 	bl	800ab06 <_Bfree>
 8009550:	4621      	mov	r1, r4
 8009552:	4648      	mov	r0, r9
 8009554:	f001 fad7 	bl	800ab06 <_Bfree>
 8009558:	e619      	b.n	800918e <_strtod_l+0x63e>
 800955a:	f1ba 0f00 	cmp.w	sl, #0
 800955e:	d11a      	bne.n	8009596 <_strtod_l+0xa46>
 8009560:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009564:	b9eb      	cbnz	r3, 80095a2 <_strtod_l+0xa52>
 8009566:	2200      	movs	r2, #0
 8009568:	4b3f      	ldr	r3, [pc, #252]	; (8009668 <_strtod_l+0xb18>)
 800956a:	4630      	mov	r0, r6
 800956c:	4639      	mov	r1, r7
 800956e:	f7f7 fab5 	bl	8000adc <__aeabi_dcmplt>
 8009572:	b9c8      	cbnz	r0, 80095a8 <_strtod_l+0xa58>
 8009574:	4630      	mov	r0, r6
 8009576:	4639      	mov	r1, r7
 8009578:	2200      	movs	r2, #0
 800957a:	4b3e      	ldr	r3, [pc, #248]	; (8009674 <_strtod_l+0xb24>)
 800957c:	f7f7 f83c 	bl	80005f8 <__aeabi_dmul>
 8009580:	4606      	mov	r6, r0
 8009582:	460f      	mov	r7, r1
 8009584:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009588:	9618      	str	r6, [sp, #96]	; 0x60
 800958a:	9319      	str	r3, [sp, #100]	; 0x64
 800958c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009590:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009594:	e79c      	b.n	80094d0 <_strtod_l+0x980>
 8009596:	f1ba 0f01 	cmp.w	sl, #1
 800959a:	d102      	bne.n	80095a2 <_strtod_l+0xa52>
 800959c:	2d00      	cmp	r5, #0
 800959e:	f43f ad8e 	beq.w	80090be <_strtod_l+0x56e>
 80095a2:	2200      	movs	r2, #0
 80095a4:	4b34      	ldr	r3, [pc, #208]	; (8009678 <_strtod_l+0xb28>)
 80095a6:	e78f      	b.n	80094c8 <_strtod_l+0x978>
 80095a8:	2600      	movs	r6, #0
 80095aa:	4f32      	ldr	r7, [pc, #200]	; (8009674 <_strtod_l+0xb24>)
 80095ac:	e7ea      	b.n	8009584 <_strtod_l+0xa34>
 80095ae:	4b31      	ldr	r3, [pc, #196]	; (8009674 <_strtod_l+0xb24>)
 80095b0:	4630      	mov	r0, r6
 80095b2:	4639      	mov	r1, r7
 80095b4:	2200      	movs	r2, #0
 80095b6:	f7f7 f81f 	bl	80005f8 <__aeabi_dmul>
 80095ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095bc:	4606      	mov	r6, r0
 80095be:	460f      	mov	r7, r1
 80095c0:	b933      	cbnz	r3, 80095d0 <_strtod_l+0xa80>
 80095c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095c6:	9010      	str	r0, [sp, #64]	; 0x40
 80095c8:	9311      	str	r3, [sp, #68]	; 0x44
 80095ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80095ce:	e7df      	b.n	8009590 <_strtod_l+0xa40>
 80095d0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80095d4:	e7f9      	b.n	80095ca <_strtod_l+0xa7a>
 80095d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80095da:	9b04      	ldr	r3, [sp, #16]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1ab      	bne.n	8009538 <_strtod_l+0x9e8>
 80095e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80095e4:	0d1b      	lsrs	r3, r3, #20
 80095e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095e8:	051b      	lsls	r3, r3, #20
 80095ea:	429a      	cmp	r2, r3
 80095ec:	465d      	mov	r5, fp
 80095ee:	d1a3      	bne.n	8009538 <_strtod_l+0x9e8>
 80095f0:	4639      	mov	r1, r7
 80095f2:	4630      	mov	r0, r6
 80095f4:	f7f7 fab0 	bl	8000b58 <__aeabi_d2iz>
 80095f8:	f7f6 ff94 	bl	8000524 <__aeabi_i2d>
 80095fc:	460b      	mov	r3, r1
 80095fe:	4602      	mov	r2, r0
 8009600:	4639      	mov	r1, r7
 8009602:	4630      	mov	r0, r6
 8009604:	f7f6 fe40 	bl	8000288 <__aeabi_dsub>
 8009608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800960a:	4606      	mov	r6, r0
 800960c:	460f      	mov	r7, r1
 800960e:	b933      	cbnz	r3, 800961e <_strtod_l+0xace>
 8009610:	f1ba 0f00 	cmp.w	sl, #0
 8009614:	d103      	bne.n	800961e <_strtod_l+0xace>
 8009616:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800961a:	2d00      	cmp	r5, #0
 800961c:	d06d      	beq.n	80096fa <_strtod_l+0xbaa>
 800961e:	a30a      	add	r3, pc, #40	; (adr r3, 8009648 <_strtod_l+0xaf8>)
 8009620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009624:	4630      	mov	r0, r6
 8009626:	4639      	mov	r1, r7
 8009628:	f7f7 fa58 	bl	8000adc <__aeabi_dcmplt>
 800962c:	2800      	cmp	r0, #0
 800962e:	f47f acb8 	bne.w	8008fa2 <_strtod_l+0x452>
 8009632:	a307      	add	r3, pc, #28	; (adr r3, 8009650 <_strtod_l+0xb00>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	4630      	mov	r0, r6
 800963a:	4639      	mov	r1, r7
 800963c:	f7f7 fa6c 	bl	8000b18 <__aeabi_dcmpgt>
 8009640:	2800      	cmp	r0, #0
 8009642:	f43f af79 	beq.w	8009538 <_strtod_l+0x9e8>
 8009646:	e4ac      	b.n	8008fa2 <_strtod_l+0x452>
 8009648:	94a03595 	.word	0x94a03595
 800964c:	3fdfffff 	.word	0x3fdfffff
 8009650:	35afe535 	.word	0x35afe535
 8009654:	3fe00000 	.word	0x3fe00000
 8009658:	000fffff 	.word	0x000fffff
 800965c:	7ff00000 	.word	0x7ff00000
 8009660:	7fefffff 	.word	0x7fefffff
 8009664:	39500000 	.word	0x39500000
 8009668:	3ff00000 	.word	0x3ff00000
 800966c:	7fe00000 	.word	0x7fe00000
 8009670:	7c9fffff 	.word	0x7c9fffff
 8009674:	3fe00000 	.word	0x3fe00000
 8009678:	bff00000 	.word	0xbff00000
 800967c:	9b04      	ldr	r3, [sp, #16]
 800967e:	b333      	cbz	r3, 80096ce <_strtod_l+0xb7e>
 8009680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009682:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009686:	d822      	bhi.n	80096ce <_strtod_l+0xb7e>
 8009688:	a327      	add	r3, pc, #156	; (adr r3, 8009728 <_strtod_l+0xbd8>)
 800968a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968e:	4630      	mov	r0, r6
 8009690:	4639      	mov	r1, r7
 8009692:	f7f7 fa2d 	bl	8000af0 <__aeabi_dcmple>
 8009696:	b1a0      	cbz	r0, 80096c2 <_strtod_l+0xb72>
 8009698:	4639      	mov	r1, r7
 800969a:	4630      	mov	r0, r6
 800969c:	f7f7 fa84 	bl	8000ba8 <__aeabi_d2uiz>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	bf08      	it	eq
 80096a4:	2001      	moveq	r0, #1
 80096a6:	f7f6 ff2d 	bl	8000504 <__aeabi_ui2d>
 80096aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096ac:	4606      	mov	r6, r0
 80096ae:	460f      	mov	r7, r1
 80096b0:	bb03      	cbnz	r3, 80096f4 <_strtod_l+0xba4>
 80096b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096b6:	9012      	str	r0, [sp, #72]	; 0x48
 80096b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80096ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80096be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80096c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096c6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80096ca:	1a9b      	subs	r3, r3, r2
 80096cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80096ce:	ed9d 0b08 	vldr	d0, [sp, #32]
 80096d2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80096d6:	f001 fcad 	bl	800b034 <__ulp>
 80096da:	4650      	mov	r0, sl
 80096dc:	ec53 2b10 	vmov	r2, r3, d0
 80096e0:	4659      	mov	r1, fp
 80096e2:	f7f6 ff89 	bl	80005f8 <__aeabi_dmul>
 80096e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80096ea:	f7f6 fdcf 	bl	800028c <__adddf3>
 80096ee:	4682      	mov	sl, r0
 80096f0:	468b      	mov	fp, r1
 80096f2:	e772      	b.n	80095da <_strtod_l+0xa8a>
 80096f4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80096f8:	e7df      	b.n	80096ba <_strtod_l+0xb6a>
 80096fa:	a30d      	add	r3, pc, #52	; (adr r3, 8009730 <_strtod_l+0xbe0>)
 80096fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009700:	f7f7 f9ec 	bl	8000adc <__aeabi_dcmplt>
 8009704:	e79c      	b.n	8009640 <_strtod_l+0xaf0>
 8009706:	2300      	movs	r3, #0
 8009708:	930d      	str	r3, [sp, #52]	; 0x34
 800970a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800970c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800970e:	6013      	str	r3, [r2, #0]
 8009710:	f7ff ba61 	b.w	8008bd6 <_strtod_l+0x86>
 8009714:	2b65      	cmp	r3, #101	; 0x65
 8009716:	f04f 0200 	mov.w	r2, #0
 800971a:	f43f ab4e 	beq.w	8008dba <_strtod_l+0x26a>
 800971e:	2101      	movs	r1, #1
 8009720:	4614      	mov	r4, r2
 8009722:	9104      	str	r1, [sp, #16]
 8009724:	f7ff bacb 	b.w	8008cbe <_strtod_l+0x16e>
 8009728:	ffc00000 	.word	0xffc00000
 800972c:	41dfffff 	.word	0x41dfffff
 8009730:	94a03595 	.word	0x94a03595
 8009734:	3fcfffff 	.word	0x3fcfffff

08009738 <strtod>:
 8009738:	4b07      	ldr	r3, [pc, #28]	; (8009758 <strtod+0x20>)
 800973a:	4a08      	ldr	r2, [pc, #32]	; (800975c <strtod+0x24>)
 800973c:	b410      	push	{r4}
 800973e:	681c      	ldr	r4, [r3, #0]
 8009740:	6a23      	ldr	r3, [r4, #32]
 8009742:	2b00      	cmp	r3, #0
 8009744:	bf08      	it	eq
 8009746:	4613      	moveq	r3, r2
 8009748:	460a      	mov	r2, r1
 800974a:	4601      	mov	r1, r0
 800974c:	4620      	mov	r0, r4
 800974e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009752:	f7ff b9fd 	b.w	8008b50 <_strtod_l>
 8009756:	bf00      	nop
 8009758:	2000002c 	.word	0x2000002c
 800975c:	20000090 	.word	0x20000090

08009760 <quorem>:
 8009760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009764:	6903      	ldr	r3, [r0, #16]
 8009766:	690c      	ldr	r4, [r1, #16]
 8009768:	42a3      	cmp	r3, r4
 800976a:	4680      	mov	r8, r0
 800976c:	f2c0 8082 	blt.w	8009874 <quorem+0x114>
 8009770:	3c01      	subs	r4, #1
 8009772:	f101 0714 	add.w	r7, r1, #20
 8009776:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800977a:	f100 0614 	add.w	r6, r0, #20
 800977e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009782:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009786:	eb06 030c 	add.w	r3, r6, ip
 800978a:	3501      	adds	r5, #1
 800978c:	eb07 090c 	add.w	r9, r7, ip
 8009790:	9301      	str	r3, [sp, #4]
 8009792:	fbb0 f5f5 	udiv	r5, r0, r5
 8009796:	b395      	cbz	r5, 80097fe <quorem+0x9e>
 8009798:	f04f 0a00 	mov.w	sl, #0
 800979c:	4638      	mov	r0, r7
 800979e:	46b6      	mov	lr, r6
 80097a0:	46d3      	mov	fp, sl
 80097a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80097a6:	b293      	uxth	r3, r2
 80097a8:	fb05 a303 	mla	r3, r5, r3, sl
 80097ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	ebab 0303 	sub.w	r3, fp, r3
 80097b6:	0c12      	lsrs	r2, r2, #16
 80097b8:	f8de b000 	ldr.w	fp, [lr]
 80097bc:	fb05 a202 	mla	r2, r5, r2, sl
 80097c0:	fa13 f38b 	uxtah	r3, r3, fp
 80097c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80097c8:	fa1f fb82 	uxth.w	fp, r2
 80097cc:	f8de 2000 	ldr.w	r2, [lr]
 80097d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80097d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097d8:	b29b      	uxth	r3, r3
 80097da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097de:	4581      	cmp	r9, r0
 80097e0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80097e4:	f84e 3b04 	str.w	r3, [lr], #4
 80097e8:	d2db      	bcs.n	80097a2 <quorem+0x42>
 80097ea:	f856 300c 	ldr.w	r3, [r6, ip]
 80097ee:	b933      	cbnz	r3, 80097fe <quorem+0x9e>
 80097f0:	9b01      	ldr	r3, [sp, #4]
 80097f2:	3b04      	subs	r3, #4
 80097f4:	429e      	cmp	r6, r3
 80097f6:	461a      	mov	r2, r3
 80097f8:	d330      	bcc.n	800985c <quorem+0xfc>
 80097fa:	f8c8 4010 	str.w	r4, [r8, #16]
 80097fe:	4640      	mov	r0, r8
 8009800:	f001 fba0 	bl	800af44 <__mcmp>
 8009804:	2800      	cmp	r0, #0
 8009806:	db25      	blt.n	8009854 <quorem+0xf4>
 8009808:	3501      	adds	r5, #1
 800980a:	4630      	mov	r0, r6
 800980c:	f04f 0c00 	mov.w	ip, #0
 8009810:	f857 2b04 	ldr.w	r2, [r7], #4
 8009814:	f8d0 e000 	ldr.w	lr, [r0]
 8009818:	b293      	uxth	r3, r2
 800981a:	ebac 0303 	sub.w	r3, ip, r3
 800981e:	0c12      	lsrs	r2, r2, #16
 8009820:	fa13 f38e 	uxtah	r3, r3, lr
 8009824:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009828:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800982c:	b29b      	uxth	r3, r3
 800982e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009832:	45b9      	cmp	r9, r7
 8009834:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009838:	f840 3b04 	str.w	r3, [r0], #4
 800983c:	d2e8      	bcs.n	8009810 <quorem+0xb0>
 800983e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009842:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009846:	b92a      	cbnz	r2, 8009854 <quorem+0xf4>
 8009848:	3b04      	subs	r3, #4
 800984a:	429e      	cmp	r6, r3
 800984c:	461a      	mov	r2, r3
 800984e:	d30b      	bcc.n	8009868 <quorem+0x108>
 8009850:	f8c8 4010 	str.w	r4, [r8, #16]
 8009854:	4628      	mov	r0, r5
 8009856:	b003      	add	sp, #12
 8009858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985c:	6812      	ldr	r2, [r2, #0]
 800985e:	3b04      	subs	r3, #4
 8009860:	2a00      	cmp	r2, #0
 8009862:	d1ca      	bne.n	80097fa <quorem+0x9a>
 8009864:	3c01      	subs	r4, #1
 8009866:	e7c5      	b.n	80097f4 <quorem+0x94>
 8009868:	6812      	ldr	r2, [r2, #0]
 800986a:	3b04      	subs	r3, #4
 800986c:	2a00      	cmp	r2, #0
 800986e:	d1ef      	bne.n	8009850 <quorem+0xf0>
 8009870:	3c01      	subs	r4, #1
 8009872:	e7ea      	b.n	800984a <quorem+0xea>
 8009874:	2000      	movs	r0, #0
 8009876:	e7ee      	b.n	8009856 <quorem+0xf6>

08009878 <_dtoa_r>:
 8009878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987c:	ec57 6b10 	vmov	r6, r7, d0
 8009880:	b097      	sub	sp, #92	; 0x5c
 8009882:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009884:	9106      	str	r1, [sp, #24]
 8009886:	4604      	mov	r4, r0
 8009888:	920b      	str	r2, [sp, #44]	; 0x2c
 800988a:	9312      	str	r3, [sp, #72]	; 0x48
 800988c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009890:	e9cd 6700 	strd	r6, r7, [sp]
 8009894:	b93d      	cbnz	r5, 80098a6 <_dtoa_r+0x2e>
 8009896:	2010      	movs	r0, #16
 8009898:	f001 f8dc 	bl	800aa54 <malloc>
 800989c:	6260      	str	r0, [r4, #36]	; 0x24
 800989e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80098a2:	6005      	str	r5, [r0, #0]
 80098a4:	60c5      	str	r5, [r0, #12]
 80098a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098a8:	6819      	ldr	r1, [r3, #0]
 80098aa:	b151      	cbz	r1, 80098c2 <_dtoa_r+0x4a>
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	604a      	str	r2, [r1, #4]
 80098b0:	2301      	movs	r3, #1
 80098b2:	4093      	lsls	r3, r2
 80098b4:	608b      	str	r3, [r1, #8]
 80098b6:	4620      	mov	r0, r4
 80098b8:	f001 f925 	bl	800ab06 <_Bfree>
 80098bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098be:	2200      	movs	r2, #0
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	1e3b      	subs	r3, r7, #0
 80098c4:	bfbb      	ittet	lt
 80098c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80098ca:	9301      	strlt	r3, [sp, #4]
 80098cc:	2300      	movge	r3, #0
 80098ce:	2201      	movlt	r2, #1
 80098d0:	bfac      	ite	ge
 80098d2:	f8c8 3000 	strge.w	r3, [r8]
 80098d6:	f8c8 2000 	strlt.w	r2, [r8]
 80098da:	4baf      	ldr	r3, [pc, #700]	; (8009b98 <_dtoa_r+0x320>)
 80098dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80098e0:	ea33 0308 	bics.w	r3, r3, r8
 80098e4:	d114      	bne.n	8009910 <_dtoa_r+0x98>
 80098e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80098ec:	6013      	str	r3, [r2, #0]
 80098ee:	9b00      	ldr	r3, [sp, #0]
 80098f0:	b923      	cbnz	r3, 80098fc <_dtoa_r+0x84>
 80098f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80098f6:	2800      	cmp	r0, #0
 80098f8:	f000 8542 	beq.w	800a380 <_dtoa_r+0xb08>
 80098fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009bac <_dtoa_r+0x334>
 8009902:	2b00      	cmp	r3, #0
 8009904:	f000 8544 	beq.w	800a390 <_dtoa_r+0xb18>
 8009908:	f10b 0303 	add.w	r3, fp, #3
 800990c:	f000 bd3e 	b.w	800a38c <_dtoa_r+0xb14>
 8009910:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009914:	2200      	movs	r2, #0
 8009916:	2300      	movs	r3, #0
 8009918:	4630      	mov	r0, r6
 800991a:	4639      	mov	r1, r7
 800991c:	f7f7 f8d4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009920:	4681      	mov	r9, r0
 8009922:	b168      	cbz	r0, 8009940 <_dtoa_r+0xc8>
 8009924:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009926:	2301      	movs	r3, #1
 8009928:	6013      	str	r3, [r2, #0]
 800992a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 8524 	beq.w	800a37a <_dtoa_r+0xb02>
 8009932:	4b9a      	ldr	r3, [pc, #616]	; (8009b9c <_dtoa_r+0x324>)
 8009934:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009936:	f103 3bff 	add.w	fp, r3, #4294967295
 800993a:	6013      	str	r3, [r2, #0]
 800993c:	f000 bd28 	b.w	800a390 <_dtoa_r+0xb18>
 8009940:	aa14      	add	r2, sp, #80	; 0x50
 8009942:	a915      	add	r1, sp, #84	; 0x54
 8009944:	ec47 6b10 	vmov	d0, r6, r7
 8009948:	4620      	mov	r0, r4
 800994a:	f001 fbe9 	bl	800b120 <__d2b>
 800994e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009952:	9004      	str	r0, [sp, #16]
 8009954:	2d00      	cmp	r5, #0
 8009956:	d07c      	beq.n	8009a52 <_dtoa_r+0x1da>
 8009958:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800995c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009960:	46b2      	mov	sl, r6
 8009962:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009966:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800996a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800996e:	2200      	movs	r2, #0
 8009970:	4b8b      	ldr	r3, [pc, #556]	; (8009ba0 <_dtoa_r+0x328>)
 8009972:	4650      	mov	r0, sl
 8009974:	4659      	mov	r1, fp
 8009976:	f7f6 fc87 	bl	8000288 <__aeabi_dsub>
 800997a:	a381      	add	r3, pc, #516	; (adr r3, 8009b80 <_dtoa_r+0x308>)
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	f7f6 fe3a 	bl	80005f8 <__aeabi_dmul>
 8009984:	a380      	add	r3, pc, #512	; (adr r3, 8009b88 <_dtoa_r+0x310>)
 8009986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998a:	f7f6 fc7f 	bl	800028c <__adddf3>
 800998e:	4606      	mov	r6, r0
 8009990:	4628      	mov	r0, r5
 8009992:	460f      	mov	r7, r1
 8009994:	f7f6 fdc6 	bl	8000524 <__aeabi_i2d>
 8009998:	a37d      	add	r3, pc, #500	; (adr r3, 8009b90 <_dtoa_r+0x318>)
 800999a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999e:	f7f6 fe2b 	bl	80005f8 <__aeabi_dmul>
 80099a2:	4602      	mov	r2, r0
 80099a4:	460b      	mov	r3, r1
 80099a6:	4630      	mov	r0, r6
 80099a8:	4639      	mov	r1, r7
 80099aa:	f7f6 fc6f 	bl	800028c <__adddf3>
 80099ae:	4606      	mov	r6, r0
 80099b0:	460f      	mov	r7, r1
 80099b2:	f7f7 f8d1 	bl	8000b58 <__aeabi_d2iz>
 80099b6:	2200      	movs	r2, #0
 80099b8:	4682      	mov	sl, r0
 80099ba:	2300      	movs	r3, #0
 80099bc:	4630      	mov	r0, r6
 80099be:	4639      	mov	r1, r7
 80099c0:	f7f7 f88c 	bl	8000adc <__aeabi_dcmplt>
 80099c4:	b148      	cbz	r0, 80099da <_dtoa_r+0x162>
 80099c6:	4650      	mov	r0, sl
 80099c8:	f7f6 fdac 	bl	8000524 <__aeabi_i2d>
 80099cc:	4632      	mov	r2, r6
 80099ce:	463b      	mov	r3, r7
 80099d0:	f7f7 f87a 	bl	8000ac8 <__aeabi_dcmpeq>
 80099d4:	b908      	cbnz	r0, 80099da <_dtoa_r+0x162>
 80099d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099da:	f1ba 0f16 	cmp.w	sl, #22
 80099de:	d859      	bhi.n	8009a94 <_dtoa_r+0x21c>
 80099e0:	4970      	ldr	r1, [pc, #448]	; (8009ba4 <_dtoa_r+0x32c>)
 80099e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80099e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099ee:	f7f7 f893 	bl	8000b18 <__aeabi_dcmpgt>
 80099f2:	2800      	cmp	r0, #0
 80099f4:	d050      	beq.n	8009a98 <_dtoa_r+0x220>
 80099f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099fa:	2300      	movs	r3, #0
 80099fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80099fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a00:	1b5d      	subs	r5, r3, r5
 8009a02:	f1b5 0801 	subs.w	r8, r5, #1
 8009a06:	bf49      	itett	mi
 8009a08:	f1c5 0301 	rsbmi	r3, r5, #1
 8009a0c:	2300      	movpl	r3, #0
 8009a0e:	9305      	strmi	r3, [sp, #20]
 8009a10:	f04f 0800 	movmi.w	r8, #0
 8009a14:	bf58      	it	pl
 8009a16:	9305      	strpl	r3, [sp, #20]
 8009a18:	f1ba 0f00 	cmp.w	sl, #0
 8009a1c:	db3e      	blt.n	8009a9c <_dtoa_r+0x224>
 8009a1e:	2300      	movs	r3, #0
 8009a20:	44d0      	add	r8, sl
 8009a22:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009a26:	9307      	str	r3, [sp, #28]
 8009a28:	9b06      	ldr	r3, [sp, #24]
 8009a2a:	2b09      	cmp	r3, #9
 8009a2c:	f200 8090 	bhi.w	8009b50 <_dtoa_r+0x2d8>
 8009a30:	2b05      	cmp	r3, #5
 8009a32:	bfc4      	itt	gt
 8009a34:	3b04      	subgt	r3, #4
 8009a36:	9306      	strgt	r3, [sp, #24]
 8009a38:	9b06      	ldr	r3, [sp, #24]
 8009a3a:	f1a3 0302 	sub.w	r3, r3, #2
 8009a3e:	bfcc      	ite	gt
 8009a40:	2500      	movgt	r5, #0
 8009a42:	2501      	movle	r5, #1
 8009a44:	2b03      	cmp	r3, #3
 8009a46:	f200 808f 	bhi.w	8009b68 <_dtoa_r+0x2f0>
 8009a4a:	e8df f003 	tbb	[pc, r3]
 8009a4e:	7f7d      	.short	0x7f7d
 8009a50:	7131      	.short	0x7131
 8009a52:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009a56:	441d      	add	r5, r3
 8009a58:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009a5c:	2820      	cmp	r0, #32
 8009a5e:	dd13      	ble.n	8009a88 <_dtoa_r+0x210>
 8009a60:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009a64:	9b00      	ldr	r3, [sp, #0]
 8009a66:	fa08 f800 	lsl.w	r8, r8, r0
 8009a6a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009a6e:	fa23 f000 	lsr.w	r0, r3, r0
 8009a72:	ea48 0000 	orr.w	r0, r8, r0
 8009a76:	f7f6 fd45 	bl	8000504 <__aeabi_ui2d>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	4682      	mov	sl, r0
 8009a7e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009a82:	3d01      	subs	r5, #1
 8009a84:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a86:	e772      	b.n	800996e <_dtoa_r+0xf6>
 8009a88:	9b00      	ldr	r3, [sp, #0]
 8009a8a:	f1c0 0020 	rsb	r0, r0, #32
 8009a8e:	fa03 f000 	lsl.w	r0, r3, r0
 8009a92:	e7f0      	b.n	8009a76 <_dtoa_r+0x1fe>
 8009a94:	2301      	movs	r3, #1
 8009a96:	e7b1      	b.n	80099fc <_dtoa_r+0x184>
 8009a98:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a9a:	e7b0      	b.n	80099fe <_dtoa_r+0x186>
 8009a9c:	9b05      	ldr	r3, [sp, #20]
 8009a9e:	eba3 030a 	sub.w	r3, r3, sl
 8009aa2:	9305      	str	r3, [sp, #20]
 8009aa4:	f1ca 0300 	rsb	r3, sl, #0
 8009aa8:	9307      	str	r3, [sp, #28]
 8009aaa:	2300      	movs	r3, #0
 8009aac:	930e      	str	r3, [sp, #56]	; 0x38
 8009aae:	e7bb      	b.n	8009a28 <_dtoa_r+0x1b0>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8009ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	dd59      	ble.n	8009b6e <_dtoa_r+0x2f6>
 8009aba:	9302      	str	r3, [sp, #8]
 8009abc:	4699      	mov	r9, r3
 8009abe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	6072      	str	r2, [r6, #4]
 8009ac4:	2204      	movs	r2, #4
 8009ac6:	f102 0014 	add.w	r0, r2, #20
 8009aca:	4298      	cmp	r0, r3
 8009acc:	6871      	ldr	r1, [r6, #4]
 8009ace:	d953      	bls.n	8009b78 <_dtoa_r+0x300>
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	f000 ffe4 	bl	800aa9e <_Balloc>
 8009ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ad8:	6030      	str	r0, [r6, #0]
 8009ada:	f1b9 0f0e 	cmp.w	r9, #14
 8009ade:	f8d3 b000 	ldr.w	fp, [r3]
 8009ae2:	f200 80e6 	bhi.w	8009cb2 <_dtoa_r+0x43a>
 8009ae6:	2d00      	cmp	r5, #0
 8009ae8:	f000 80e3 	beq.w	8009cb2 <_dtoa_r+0x43a>
 8009aec:	ed9d 7b00 	vldr	d7, [sp]
 8009af0:	f1ba 0f00 	cmp.w	sl, #0
 8009af4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009af8:	dd74      	ble.n	8009be4 <_dtoa_r+0x36c>
 8009afa:	4a2a      	ldr	r2, [pc, #168]	; (8009ba4 <_dtoa_r+0x32c>)
 8009afc:	f00a 030f 	and.w	r3, sl, #15
 8009b00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b04:	ed93 7b00 	vldr	d7, [r3]
 8009b08:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009b0c:	06f0      	lsls	r0, r6, #27
 8009b0e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009b12:	d565      	bpl.n	8009be0 <_dtoa_r+0x368>
 8009b14:	4b24      	ldr	r3, [pc, #144]	; (8009ba8 <_dtoa_r+0x330>)
 8009b16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b1e:	f7f6 fe95 	bl	800084c <__aeabi_ddiv>
 8009b22:	e9cd 0100 	strd	r0, r1, [sp]
 8009b26:	f006 060f 	and.w	r6, r6, #15
 8009b2a:	2503      	movs	r5, #3
 8009b2c:	4f1e      	ldr	r7, [pc, #120]	; (8009ba8 <_dtoa_r+0x330>)
 8009b2e:	e04c      	b.n	8009bca <_dtoa_r+0x352>
 8009b30:	2301      	movs	r3, #1
 8009b32:	930a      	str	r3, [sp, #40]	; 0x28
 8009b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b36:	4453      	add	r3, sl
 8009b38:	f103 0901 	add.w	r9, r3, #1
 8009b3c:	9302      	str	r3, [sp, #8]
 8009b3e:	464b      	mov	r3, r9
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	bfb8      	it	lt
 8009b44:	2301      	movlt	r3, #1
 8009b46:	e7ba      	b.n	8009abe <_dtoa_r+0x246>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e7b2      	b.n	8009ab2 <_dtoa_r+0x23a>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	e7f0      	b.n	8009b32 <_dtoa_r+0x2ba>
 8009b50:	2501      	movs	r5, #1
 8009b52:	2300      	movs	r3, #0
 8009b54:	9306      	str	r3, [sp, #24]
 8009b56:	950a      	str	r5, [sp, #40]	; 0x28
 8009b58:	f04f 33ff 	mov.w	r3, #4294967295
 8009b5c:	9302      	str	r3, [sp, #8]
 8009b5e:	4699      	mov	r9, r3
 8009b60:	2200      	movs	r2, #0
 8009b62:	2312      	movs	r3, #18
 8009b64:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b66:	e7aa      	b.n	8009abe <_dtoa_r+0x246>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	930a      	str	r3, [sp, #40]	; 0x28
 8009b6c:	e7f4      	b.n	8009b58 <_dtoa_r+0x2e0>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	9302      	str	r3, [sp, #8]
 8009b72:	4699      	mov	r9, r3
 8009b74:	461a      	mov	r2, r3
 8009b76:	e7f5      	b.n	8009b64 <_dtoa_r+0x2ec>
 8009b78:	3101      	adds	r1, #1
 8009b7a:	6071      	str	r1, [r6, #4]
 8009b7c:	0052      	lsls	r2, r2, #1
 8009b7e:	e7a2      	b.n	8009ac6 <_dtoa_r+0x24e>
 8009b80:	636f4361 	.word	0x636f4361
 8009b84:	3fd287a7 	.word	0x3fd287a7
 8009b88:	8b60c8b3 	.word	0x8b60c8b3
 8009b8c:	3fc68a28 	.word	0x3fc68a28
 8009b90:	509f79fb 	.word	0x509f79fb
 8009b94:	3fd34413 	.word	0x3fd34413
 8009b98:	7ff00000 	.word	0x7ff00000
 8009b9c:	0800d5d5 	.word	0x0800d5d5
 8009ba0:	3ff80000 	.word	0x3ff80000
 8009ba4:	0800d688 	.word	0x0800d688
 8009ba8:	0800d660 	.word	0x0800d660
 8009bac:	0800d651 	.word	0x0800d651
 8009bb0:	07f1      	lsls	r1, r6, #31
 8009bb2:	d508      	bpl.n	8009bc6 <_dtoa_r+0x34e>
 8009bb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bbc:	f7f6 fd1c 	bl	80005f8 <__aeabi_dmul>
 8009bc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009bc4:	3501      	adds	r5, #1
 8009bc6:	1076      	asrs	r6, r6, #1
 8009bc8:	3708      	adds	r7, #8
 8009bca:	2e00      	cmp	r6, #0
 8009bcc:	d1f0      	bne.n	8009bb0 <_dtoa_r+0x338>
 8009bce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009bd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bd6:	f7f6 fe39 	bl	800084c <__aeabi_ddiv>
 8009bda:	e9cd 0100 	strd	r0, r1, [sp]
 8009bde:	e01a      	b.n	8009c16 <_dtoa_r+0x39e>
 8009be0:	2502      	movs	r5, #2
 8009be2:	e7a3      	b.n	8009b2c <_dtoa_r+0x2b4>
 8009be4:	f000 80a0 	beq.w	8009d28 <_dtoa_r+0x4b0>
 8009be8:	f1ca 0600 	rsb	r6, sl, #0
 8009bec:	4b9f      	ldr	r3, [pc, #636]	; (8009e6c <_dtoa_r+0x5f4>)
 8009bee:	4fa0      	ldr	r7, [pc, #640]	; (8009e70 <_dtoa_r+0x5f8>)
 8009bf0:	f006 020f 	and.w	r2, r6, #15
 8009bf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c00:	f7f6 fcfa 	bl	80005f8 <__aeabi_dmul>
 8009c04:	e9cd 0100 	strd	r0, r1, [sp]
 8009c08:	1136      	asrs	r6, r6, #4
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	2502      	movs	r5, #2
 8009c0e:	2e00      	cmp	r6, #0
 8009c10:	d17f      	bne.n	8009d12 <_dtoa_r+0x49a>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1e1      	bne.n	8009bda <_dtoa_r+0x362>
 8009c16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f000 8087 	beq.w	8009d2c <_dtoa_r+0x4b4>
 8009c1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009c22:	2200      	movs	r2, #0
 8009c24:	4b93      	ldr	r3, [pc, #588]	; (8009e74 <_dtoa_r+0x5fc>)
 8009c26:	4630      	mov	r0, r6
 8009c28:	4639      	mov	r1, r7
 8009c2a:	f7f6 ff57 	bl	8000adc <__aeabi_dcmplt>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	d07c      	beq.n	8009d2c <_dtoa_r+0x4b4>
 8009c32:	f1b9 0f00 	cmp.w	r9, #0
 8009c36:	d079      	beq.n	8009d2c <_dtoa_r+0x4b4>
 8009c38:	9b02      	ldr	r3, [sp, #8]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	dd35      	ble.n	8009caa <_dtoa_r+0x432>
 8009c3e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009c42:	9308      	str	r3, [sp, #32]
 8009c44:	4639      	mov	r1, r7
 8009c46:	2200      	movs	r2, #0
 8009c48:	4b8b      	ldr	r3, [pc, #556]	; (8009e78 <_dtoa_r+0x600>)
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	f7f6 fcd4 	bl	80005f8 <__aeabi_dmul>
 8009c50:	e9cd 0100 	strd	r0, r1, [sp]
 8009c54:	9f02      	ldr	r7, [sp, #8]
 8009c56:	3501      	adds	r5, #1
 8009c58:	4628      	mov	r0, r5
 8009c5a:	f7f6 fc63 	bl	8000524 <__aeabi_i2d>
 8009c5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c62:	f7f6 fcc9 	bl	80005f8 <__aeabi_dmul>
 8009c66:	2200      	movs	r2, #0
 8009c68:	4b84      	ldr	r3, [pc, #528]	; (8009e7c <_dtoa_r+0x604>)
 8009c6a:	f7f6 fb0f 	bl	800028c <__adddf3>
 8009c6e:	4605      	mov	r5, r0
 8009c70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009c74:	2f00      	cmp	r7, #0
 8009c76:	d15d      	bne.n	8009d34 <_dtoa_r+0x4bc>
 8009c78:	2200      	movs	r2, #0
 8009c7a:	4b81      	ldr	r3, [pc, #516]	; (8009e80 <_dtoa_r+0x608>)
 8009c7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c80:	f7f6 fb02 	bl	8000288 <__aeabi_dsub>
 8009c84:	462a      	mov	r2, r5
 8009c86:	4633      	mov	r3, r6
 8009c88:	e9cd 0100 	strd	r0, r1, [sp]
 8009c8c:	f7f6 ff44 	bl	8000b18 <__aeabi_dcmpgt>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	f040 8288 	bne.w	800a1a6 <_dtoa_r+0x92e>
 8009c96:	462a      	mov	r2, r5
 8009c98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ca0:	f7f6 ff1c 	bl	8000adc <__aeabi_dcmplt>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	f040 827c 	bne.w	800a1a2 <_dtoa_r+0x92a>
 8009caa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009cae:	e9cd 2300 	strd	r2, r3, [sp]
 8009cb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f2c0 8150 	blt.w	8009f5a <_dtoa_r+0x6e2>
 8009cba:	f1ba 0f0e 	cmp.w	sl, #14
 8009cbe:	f300 814c 	bgt.w	8009f5a <_dtoa_r+0x6e2>
 8009cc2:	4b6a      	ldr	r3, [pc, #424]	; (8009e6c <_dtoa_r+0x5f4>)
 8009cc4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009cc8:	ed93 7b00 	vldr	d7, [r3]
 8009ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009cd4:	f280 80d8 	bge.w	8009e88 <_dtoa_r+0x610>
 8009cd8:	f1b9 0f00 	cmp.w	r9, #0
 8009cdc:	f300 80d4 	bgt.w	8009e88 <_dtoa_r+0x610>
 8009ce0:	f040 825e 	bne.w	800a1a0 <_dtoa_r+0x928>
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	4b66      	ldr	r3, [pc, #408]	; (8009e80 <_dtoa_r+0x608>)
 8009ce8:	ec51 0b17 	vmov	r0, r1, d7
 8009cec:	f7f6 fc84 	bl	80005f8 <__aeabi_dmul>
 8009cf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cf4:	f7f6 ff06 	bl	8000b04 <__aeabi_dcmpge>
 8009cf8:	464f      	mov	r7, r9
 8009cfa:	464e      	mov	r6, r9
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	f040 8234 	bne.w	800a16a <_dtoa_r+0x8f2>
 8009d02:	2331      	movs	r3, #49	; 0x31
 8009d04:	f10b 0501 	add.w	r5, fp, #1
 8009d08:	f88b 3000 	strb.w	r3, [fp]
 8009d0c:	f10a 0a01 	add.w	sl, sl, #1
 8009d10:	e22f      	b.n	800a172 <_dtoa_r+0x8fa>
 8009d12:	07f2      	lsls	r2, r6, #31
 8009d14:	d505      	bpl.n	8009d22 <_dtoa_r+0x4aa>
 8009d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d1a:	f7f6 fc6d 	bl	80005f8 <__aeabi_dmul>
 8009d1e:	3501      	adds	r5, #1
 8009d20:	2301      	movs	r3, #1
 8009d22:	1076      	asrs	r6, r6, #1
 8009d24:	3708      	adds	r7, #8
 8009d26:	e772      	b.n	8009c0e <_dtoa_r+0x396>
 8009d28:	2502      	movs	r5, #2
 8009d2a:	e774      	b.n	8009c16 <_dtoa_r+0x39e>
 8009d2c:	f8cd a020 	str.w	sl, [sp, #32]
 8009d30:	464f      	mov	r7, r9
 8009d32:	e791      	b.n	8009c58 <_dtoa_r+0x3e0>
 8009d34:	4b4d      	ldr	r3, [pc, #308]	; (8009e6c <_dtoa_r+0x5f4>)
 8009d36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d3a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d047      	beq.n	8009dd4 <_dtoa_r+0x55c>
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	2000      	movs	r0, #0
 8009d4a:	494e      	ldr	r1, [pc, #312]	; (8009e84 <_dtoa_r+0x60c>)
 8009d4c:	f7f6 fd7e 	bl	800084c <__aeabi_ddiv>
 8009d50:	462a      	mov	r2, r5
 8009d52:	4633      	mov	r3, r6
 8009d54:	f7f6 fa98 	bl	8000288 <__aeabi_dsub>
 8009d58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d5c:	465d      	mov	r5, fp
 8009d5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d62:	f7f6 fef9 	bl	8000b58 <__aeabi_d2iz>
 8009d66:	4606      	mov	r6, r0
 8009d68:	f7f6 fbdc 	bl	8000524 <__aeabi_i2d>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	460b      	mov	r3, r1
 8009d70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d74:	f7f6 fa88 	bl	8000288 <__aeabi_dsub>
 8009d78:	3630      	adds	r6, #48	; 0x30
 8009d7a:	f805 6b01 	strb.w	r6, [r5], #1
 8009d7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d82:	e9cd 0100 	strd	r0, r1, [sp]
 8009d86:	f7f6 fea9 	bl	8000adc <__aeabi_dcmplt>
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	d163      	bne.n	8009e56 <_dtoa_r+0x5de>
 8009d8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d92:	2000      	movs	r0, #0
 8009d94:	4937      	ldr	r1, [pc, #220]	; (8009e74 <_dtoa_r+0x5fc>)
 8009d96:	f7f6 fa77 	bl	8000288 <__aeabi_dsub>
 8009d9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d9e:	f7f6 fe9d 	bl	8000adc <__aeabi_dcmplt>
 8009da2:	2800      	cmp	r0, #0
 8009da4:	f040 80b7 	bne.w	8009f16 <_dtoa_r+0x69e>
 8009da8:	eba5 030b 	sub.w	r3, r5, fp
 8009dac:	429f      	cmp	r7, r3
 8009dae:	f77f af7c 	ble.w	8009caa <_dtoa_r+0x432>
 8009db2:	2200      	movs	r2, #0
 8009db4:	4b30      	ldr	r3, [pc, #192]	; (8009e78 <_dtoa_r+0x600>)
 8009db6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009dba:	f7f6 fc1d 	bl	80005f8 <__aeabi_dmul>
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009dc4:	4b2c      	ldr	r3, [pc, #176]	; (8009e78 <_dtoa_r+0x600>)
 8009dc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dca:	f7f6 fc15 	bl	80005f8 <__aeabi_dmul>
 8009dce:	e9cd 0100 	strd	r0, r1, [sp]
 8009dd2:	e7c4      	b.n	8009d5e <_dtoa_r+0x4e6>
 8009dd4:	462a      	mov	r2, r5
 8009dd6:	4633      	mov	r3, r6
 8009dd8:	f7f6 fc0e 	bl	80005f8 <__aeabi_dmul>
 8009ddc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009de0:	eb0b 0507 	add.w	r5, fp, r7
 8009de4:	465e      	mov	r6, fp
 8009de6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dea:	f7f6 feb5 	bl	8000b58 <__aeabi_d2iz>
 8009dee:	4607      	mov	r7, r0
 8009df0:	f7f6 fb98 	bl	8000524 <__aeabi_i2d>
 8009df4:	3730      	adds	r7, #48	; 0x30
 8009df6:	4602      	mov	r2, r0
 8009df8:	460b      	mov	r3, r1
 8009dfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dfe:	f7f6 fa43 	bl	8000288 <__aeabi_dsub>
 8009e02:	f806 7b01 	strb.w	r7, [r6], #1
 8009e06:	42ae      	cmp	r6, r5
 8009e08:	e9cd 0100 	strd	r0, r1, [sp]
 8009e0c:	f04f 0200 	mov.w	r2, #0
 8009e10:	d126      	bne.n	8009e60 <_dtoa_r+0x5e8>
 8009e12:	4b1c      	ldr	r3, [pc, #112]	; (8009e84 <_dtoa_r+0x60c>)
 8009e14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e18:	f7f6 fa38 	bl	800028c <__adddf3>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e24:	f7f6 fe78 	bl	8000b18 <__aeabi_dcmpgt>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	d174      	bne.n	8009f16 <_dtoa_r+0x69e>
 8009e2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009e30:	2000      	movs	r0, #0
 8009e32:	4914      	ldr	r1, [pc, #80]	; (8009e84 <_dtoa_r+0x60c>)
 8009e34:	f7f6 fa28 	bl	8000288 <__aeabi_dsub>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e40:	f7f6 fe4c 	bl	8000adc <__aeabi_dcmplt>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	f43f af30 	beq.w	8009caa <_dtoa_r+0x432>
 8009e4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e4e:	2b30      	cmp	r3, #48	; 0x30
 8009e50:	f105 32ff 	add.w	r2, r5, #4294967295
 8009e54:	d002      	beq.n	8009e5c <_dtoa_r+0x5e4>
 8009e56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009e5a:	e04a      	b.n	8009ef2 <_dtoa_r+0x67a>
 8009e5c:	4615      	mov	r5, r2
 8009e5e:	e7f4      	b.n	8009e4a <_dtoa_r+0x5d2>
 8009e60:	4b05      	ldr	r3, [pc, #20]	; (8009e78 <_dtoa_r+0x600>)
 8009e62:	f7f6 fbc9 	bl	80005f8 <__aeabi_dmul>
 8009e66:	e9cd 0100 	strd	r0, r1, [sp]
 8009e6a:	e7bc      	b.n	8009de6 <_dtoa_r+0x56e>
 8009e6c:	0800d688 	.word	0x0800d688
 8009e70:	0800d660 	.word	0x0800d660
 8009e74:	3ff00000 	.word	0x3ff00000
 8009e78:	40240000 	.word	0x40240000
 8009e7c:	401c0000 	.word	0x401c0000
 8009e80:	40140000 	.word	0x40140000
 8009e84:	3fe00000 	.word	0x3fe00000
 8009e88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009e8c:	465d      	mov	r5, fp
 8009e8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e92:	4630      	mov	r0, r6
 8009e94:	4639      	mov	r1, r7
 8009e96:	f7f6 fcd9 	bl	800084c <__aeabi_ddiv>
 8009e9a:	f7f6 fe5d 	bl	8000b58 <__aeabi_d2iz>
 8009e9e:	4680      	mov	r8, r0
 8009ea0:	f7f6 fb40 	bl	8000524 <__aeabi_i2d>
 8009ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ea8:	f7f6 fba6 	bl	80005f8 <__aeabi_dmul>
 8009eac:	4602      	mov	r2, r0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	4639      	mov	r1, r7
 8009eb4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009eb8:	f7f6 f9e6 	bl	8000288 <__aeabi_dsub>
 8009ebc:	f805 6b01 	strb.w	r6, [r5], #1
 8009ec0:	eba5 060b 	sub.w	r6, r5, fp
 8009ec4:	45b1      	cmp	r9, r6
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	d139      	bne.n	8009f40 <_dtoa_r+0x6c8>
 8009ecc:	f7f6 f9de 	bl	800028c <__adddf3>
 8009ed0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ed4:	4606      	mov	r6, r0
 8009ed6:	460f      	mov	r7, r1
 8009ed8:	f7f6 fe1e 	bl	8000b18 <__aeabi_dcmpgt>
 8009edc:	b9c8      	cbnz	r0, 8009f12 <_dtoa_r+0x69a>
 8009ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	4639      	mov	r1, r7
 8009ee6:	f7f6 fdef 	bl	8000ac8 <__aeabi_dcmpeq>
 8009eea:	b110      	cbz	r0, 8009ef2 <_dtoa_r+0x67a>
 8009eec:	f018 0f01 	tst.w	r8, #1
 8009ef0:	d10f      	bne.n	8009f12 <_dtoa_r+0x69a>
 8009ef2:	9904      	ldr	r1, [sp, #16]
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f000 fe06 	bl	800ab06 <_Bfree>
 8009efa:	2300      	movs	r3, #0
 8009efc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009efe:	702b      	strb	r3, [r5, #0]
 8009f00:	f10a 0301 	add.w	r3, sl, #1
 8009f04:	6013      	str	r3, [r2, #0]
 8009f06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 8241 	beq.w	800a390 <_dtoa_r+0xb18>
 8009f0e:	601d      	str	r5, [r3, #0]
 8009f10:	e23e      	b.n	800a390 <_dtoa_r+0xb18>
 8009f12:	f8cd a020 	str.w	sl, [sp, #32]
 8009f16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f1a:	2a39      	cmp	r2, #57	; 0x39
 8009f1c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009f20:	d108      	bne.n	8009f34 <_dtoa_r+0x6bc>
 8009f22:	459b      	cmp	fp, r3
 8009f24:	d10a      	bne.n	8009f3c <_dtoa_r+0x6c4>
 8009f26:	9b08      	ldr	r3, [sp, #32]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	9308      	str	r3, [sp, #32]
 8009f2c:	2330      	movs	r3, #48	; 0x30
 8009f2e:	f88b 3000 	strb.w	r3, [fp]
 8009f32:	465b      	mov	r3, fp
 8009f34:	781a      	ldrb	r2, [r3, #0]
 8009f36:	3201      	adds	r2, #1
 8009f38:	701a      	strb	r2, [r3, #0]
 8009f3a:	e78c      	b.n	8009e56 <_dtoa_r+0x5de>
 8009f3c:	461d      	mov	r5, r3
 8009f3e:	e7ea      	b.n	8009f16 <_dtoa_r+0x69e>
 8009f40:	2200      	movs	r2, #0
 8009f42:	4b9b      	ldr	r3, [pc, #620]	; (800a1b0 <_dtoa_r+0x938>)
 8009f44:	f7f6 fb58 	bl	80005f8 <__aeabi_dmul>
 8009f48:	2200      	movs	r2, #0
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	4606      	mov	r6, r0
 8009f4e:	460f      	mov	r7, r1
 8009f50:	f7f6 fdba 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d09a      	beq.n	8009e8e <_dtoa_r+0x616>
 8009f58:	e7cb      	b.n	8009ef2 <_dtoa_r+0x67a>
 8009f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f5c:	2a00      	cmp	r2, #0
 8009f5e:	f000 808b 	beq.w	800a078 <_dtoa_r+0x800>
 8009f62:	9a06      	ldr	r2, [sp, #24]
 8009f64:	2a01      	cmp	r2, #1
 8009f66:	dc6e      	bgt.n	800a046 <_dtoa_r+0x7ce>
 8009f68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f6a:	2a00      	cmp	r2, #0
 8009f6c:	d067      	beq.n	800a03e <_dtoa_r+0x7c6>
 8009f6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f72:	9f07      	ldr	r7, [sp, #28]
 8009f74:	9d05      	ldr	r5, [sp, #20]
 8009f76:	9a05      	ldr	r2, [sp, #20]
 8009f78:	2101      	movs	r1, #1
 8009f7a:	441a      	add	r2, r3
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	9205      	str	r2, [sp, #20]
 8009f80:	4498      	add	r8, r3
 8009f82:	f000 fe9e 	bl	800acc2 <__i2b>
 8009f86:	4606      	mov	r6, r0
 8009f88:	2d00      	cmp	r5, #0
 8009f8a:	dd0c      	ble.n	8009fa6 <_dtoa_r+0x72e>
 8009f8c:	f1b8 0f00 	cmp.w	r8, #0
 8009f90:	dd09      	ble.n	8009fa6 <_dtoa_r+0x72e>
 8009f92:	4545      	cmp	r5, r8
 8009f94:	9a05      	ldr	r2, [sp, #20]
 8009f96:	462b      	mov	r3, r5
 8009f98:	bfa8      	it	ge
 8009f9a:	4643      	movge	r3, r8
 8009f9c:	1ad2      	subs	r2, r2, r3
 8009f9e:	9205      	str	r2, [sp, #20]
 8009fa0:	1aed      	subs	r5, r5, r3
 8009fa2:	eba8 0803 	sub.w	r8, r8, r3
 8009fa6:	9b07      	ldr	r3, [sp, #28]
 8009fa8:	b1eb      	cbz	r3, 8009fe6 <_dtoa_r+0x76e>
 8009faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d067      	beq.n	800a080 <_dtoa_r+0x808>
 8009fb0:	b18f      	cbz	r7, 8009fd6 <_dtoa_r+0x75e>
 8009fb2:	4631      	mov	r1, r6
 8009fb4:	463a      	mov	r2, r7
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f000 ff22 	bl	800ae00 <__pow5mult>
 8009fbc:	9a04      	ldr	r2, [sp, #16]
 8009fbe:	4601      	mov	r1, r0
 8009fc0:	4606      	mov	r6, r0
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f000 fe86 	bl	800acd4 <__multiply>
 8009fc8:	9904      	ldr	r1, [sp, #16]
 8009fca:	9008      	str	r0, [sp, #32]
 8009fcc:	4620      	mov	r0, r4
 8009fce:	f000 fd9a 	bl	800ab06 <_Bfree>
 8009fd2:	9b08      	ldr	r3, [sp, #32]
 8009fd4:	9304      	str	r3, [sp, #16]
 8009fd6:	9b07      	ldr	r3, [sp, #28]
 8009fd8:	1bda      	subs	r2, r3, r7
 8009fda:	d004      	beq.n	8009fe6 <_dtoa_r+0x76e>
 8009fdc:	9904      	ldr	r1, [sp, #16]
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f000 ff0e 	bl	800ae00 <__pow5mult>
 8009fe4:	9004      	str	r0, [sp, #16]
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f000 fe6a 	bl	800acc2 <__i2b>
 8009fee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ff0:	4607      	mov	r7, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f000 81d0 	beq.w	800a398 <_dtoa_r+0xb20>
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	4601      	mov	r1, r0
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f000 feff 	bl	800ae00 <__pow5mult>
 800a002:	9b06      	ldr	r3, [sp, #24]
 800a004:	2b01      	cmp	r3, #1
 800a006:	4607      	mov	r7, r0
 800a008:	dc40      	bgt.n	800a08c <_dtoa_r+0x814>
 800a00a:	9b00      	ldr	r3, [sp, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d139      	bne.n	800a084 <_dtoa_r+0x80c>
 800a010:	9b01      	ldr	r3, [sp, #4]
 800a012:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a016:	2b00      	cmp	r3, #0
 800a018:	d136      	bne.n	800a088 <_dtoa_r+0x810>
 800a01a:	9b01      	ldr	r3, [sp, #4]
 800a01c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a020:	0d1b      	lsrs	r3, r3, #20
 800a022:	051b      	lsls	r3, r3, #20
 800a024:	b12b      	cbz	r3, 800a032 <_dtoa_r+0x7ba>
 800a026:	9b05      	ldr	r3, [sp, #20]
 800a028:	3301      	adds	r3, #1
 800a02a:	9305      	str	r3, [sp, #20]
 800a02c:	f108 0801 	add.w	r8, r8, #1
 800a030:	2301      	movs	r3, #1
 800a032:	9307      	str	r3, [sp, #28]
 800a034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a036:	2b00      	cmp	r3, #0
 800a038:	d12a      	bne.n	800a090 <_dtoa_r+0x818>
 800a03a:	2001      	movs	r0, #1
 800a03c:	e030      	b.n	800a0a0 <_dtoa_r+0x828>
 800a03e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a040:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a044:	e795      	b.n	8009f72 <_dtoa_r+0x6fa>
 800a046:	9b07      	ldr	r3, [sp, #28]
 800a048:	f109 37ff 	add.w	r7, r9, #4294967295
 800a04c:	42bb      	cmp	r3, r7
 800a04e:	bfbf      	itttt	lt
 800a050:	9b07      	ldrlt	r3, [sp, #28]
 800a052:	9707      	strlt	r7, [sp, #28]
 800a054:	1afa      	sublt	r2, r7, r3
 800a056:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a058:	bfbb      	ittet	lt
 800a05a:	189b      	addlt	r3, r3, r2
 800a05c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a05e:	1bdf      	subge	r7, r3, r7
 800a060:	2700      	movlt	r7, #0
 800a062:	f1b9 0f00 	cmp.w	r9, #0
 800a066:	bfb5      	itete	lt
 800a068:	9b05      	ldrlt	r3, [sp, #20]
 800a06a:	9d05      	ldrge	r5, [sp, #20]
 800a06c:	eba3 0509 	sublt.w	r5, r3, r9
 800a070:	464b      	movge	r3, r9
 800a072:	bfb8      	it	lt
 800a074:	2300      	movlt	r3, #0
 800a076:	e77e      	b.n	8009f76 <_dtoa_r+0x6fe>
 800a078:	9f07      	ldr	r7, [sp, #28]
 800a07a:	9d05      	ldr	r5, [sp, #20]
 800a07c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a07e:	e783      	b.n	8009f88 <_dtoa_r+0x710>
 800a080:	9a07      	ldr	r2, [sp, #28]
 800a082:	e7ab      	b.n	8009fdc <_dtoa_r+0x764>
 800a084:	2300      	movs	r3, #0
 800a086:	e7d4      	b.n	800a032 <_dtoa_r+0x7ba>
 800a088:	9b00      	ldr	r3, [sp, #0]
 800a08a:	e7d2      	b.n	800a032 <_dtoa_r+0x7ba>
 800a08c:	2300      	movs	r3, #0
 800a08e:	9307      	str	r3, [sp, #28]
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a096:	6918      	ldr	r0, [r3, #16]
 800a098:	f000 fdc5 	bl	800ac26 <__hi0bits>
 800a09c:	f1c0 0020 	rsb	r0, r0, #32
 800a0a0:	4440      	add	r0, r8
 800a0a2:	f010 001f 	ands.w	r0, r0, #31
 800a0a6:	d047      	beq.n	800a138 <_dtoa_r+0x8c0>
 800a0a8:	f1c0 0320 	rsb	r3, r0, #32
 800a0ac:	2b04      	cmp	r3, #4
 800a0ae:	dd3b      	ble.n	800a128 <_dtoa_r+0x8b0>
 800a0b0:	9b05      	ldr	r3, [sp, #20]
 800a0b2:	f1c0 001c 	rsb	r0, r0, #28
 800a0b6:	4403      	add	r3, r0
 800a0b8:	9305      	str	r3, [sp, #20]
 800a0ba:	4405      	add	r5, r0
 800a0bc:	4480      	add	r8, r0
 800a0be:	9b05      	ldr	r3, [sp, #20]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	dd05      	ble.n	800a0d0 <_dtoa_r+0x858>
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	9904      	ldr	r1, [sp, #16]
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f000 fee7 	bl	800ae9c <__lshift>
 800a0ce:	9004      	str	r0, [sp, #16]
 800a0d0:	f1b8 0f00 	cmp.w	r8, #0
 800a0d4:	dd05      	ble.n	800a0e2 <_dtoa_r+0x86a>
 800a0d6:	4639      	mov	r1, r7
 800a0d8:	4642      	mov	r2, r8
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f000 fede 	bl	800ae9c <__lshift>
 800a0e0:	4607      	mov	r7, r0
 800a0e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0e4:	b353      	cbz	r3, 800a13c <_dtoa_r+0x8c4>
 800a0e6:	4639      	mov	r1, r7
 800a0e8:	9804      	ldr	r0, [sp, #16]
 800a0ea:	f000 ff2b 	bl	800af44 <__mcmp>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	da24      	bge.n	800a13c <_dtoa_r+0x8c4>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	220a      	movs	r2, #10
 800a0f6:	9904      	ldr	r1, [sp, #16]
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	f000 fd1b 	bl	800ab34 <__multadd>
 800a0fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a100:	9004      	str	r0, [sp, #16]
 800a102:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a106:	2b00      	cmp	r3, #0
 800a108:	f000 814d 	beq.w	800a3a6 <_dtoa_r+0xb2e>
 800a10c:	2300      	movs	r3, #0
 800a10e:	4631      	mov	r1, r6
 800a110:	220a      	movs	r2, #10
 800a112:	4620      	mov	r0, r4
 800a114:	f000 fd0e 	bl	800ab34 <__multadd>
 800a118:	9b02      	ldr	r3, [sp, #8]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	4606      	mov	r6, r0
 800a11e:	dc4f      	bgt.n	800a1c0 <_dtoa_r+0x948>
 800a120:	9b06      	ldr	r3, [sp, #24]
 800a122:	2b02      	cmp	r3, #2
 800a124:	dd4c      	ble.n	800a1c0 <_dtoa_r+0x948>
 800a126:	e011      	b.n	800a14c <_dtoa_r+0x8d4>
 800a128:	d0c9      	beq.n	800a0be <_dtoa_r+0x846>
 800a12a:	9a05      	ldr	r2, [sp, #20]
 800a12c:	331c      	adds	r3, #28
 800a12e:	441a      	add	r2, r3
 800a130:	9205      	str	r2, [sp, #20]
 800a132:	441d      	add	r5, r3
 800a134:	4498      	add	r8, r3
 800a136:	e7c2      	b.n	800a0be <_dtoa_r+0x846>
 800a138:	4603      	mov	r3, r0
 800a13a:	e7f6      	b.n	800a12a <_dtoa_r+0x8b2>
 800a13c:	f1b9 0f00 	cmp.w	r9, #0
 800a140:	dc38      	bgt.n	800a1b4 <_dtoa_r+0x93c>
 800a142:	9b06      	ldr	r3, [sp, #24]
 800a144:	2b02      	cmp	r3, #2
 800a146:	dd35      	ble.n	800a1b4 <_dtoa_r+0x93c>
 800a148:	f8cd 9008 	str.w	r9, [sp, #8]
 800a14c:	9b02      	ldr	r3, [sp, #8]
 800a14e:	b963      	cbnz	r3, 800a16a <_dtoa_r+0x8f2>
 800a150:	4639      	mov	r1, r7
 800a152:	2205      	movs	r2, #5
 800a154:	4620      	mov	r0, r4
 800a156:	f000 fced 	bl	800ab34 <__multadd>
 800a15a:	4601      	mov	r1, r0
 800a15c:	4607      	mov	r7, r0
 800a15e:	9804      	ldr	r0, [sp, #16]
 800a160:	f000 fef0 	bl	800af44 <__mcmp>
 800a164:	2800      	cmp	r0, #0
 800a166:	f73f adcc 	bgt.w	8009d02 <_dtoa_r+0x48a>
 800a16a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a16c:	465d      	mov	r5, fp
 800a16e:	ea6f 0a03 	mvn.w	sl, r3
 800a172:	f04f 0900 	mov.w	r9, #0
 800a176:	4639      	mov	r1, r7
 800a178:	4620      	mov	r0, r4
 800a17a:	f000 fcc4 	bl	800ab06 <_Bfree>
 800a17e:	2e00      	cmp	r6, #0
 800a180:	f43f aeb7 	beq.w	8009ef2 <_dtoa_r+0x67a>
 800a184:	f1b9 0f00 	cmp.w	r9, #0
 800a188:	d005      	beq.n	800a196 <_dtoa_r+0x91e>
 800a18a:	45b1      	cmp	r9, r6
 800a18c:	d003      	beq.n	800a196 <_dtoa_r+0x91e>
 800a18e:	4649      	mov	r1, r9
 800a190:	4620      	mov	r0, r4
 800a192:	f000 fcb8 	bl	800ab06 <_Bfree>
 800a196:	4631      	mov	r1, r6
 800a198:	4620      	mov	r0, r4
 800a19a:	f000 fcb4 	bl	800ab06 <_Bfree>
 800a19e:	e6a8      	b.n	8009ef2 <_dtoa_r+0x67a>
 800a1a0:	2700      	movs	r7, #0
 800a1a2:	463e      	mov	r6, r7
 800a1a4:	e7e1      	b.n	800a16a <_dtoa_r+0x8f2>
 800a1a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a1aa:	463e      	mov	r6, r7
 800a1ac:	e5a9      	b.n	8009d02 <_dtoa_r+0x48a>
 800a1ae:	bf00      	nop
 800a1b0:	40240000 	.word	0x40240000
 800a1b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1b6:	f8cd 9008 	str.w	r9, [sp, #8]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 80fa 	beq.w	800a3b4 <_dtoa_r+0xb3c>
 800a1c0:	2d00      	cmp	r5, #0
 800a1c2:	dd05      	ble.n	800a1d0 <_dtoa_r+0x958>
 800a1c4:	4631      	mov	r1, r6
 800a1c6:	462a      	mov	r2, r5
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f000 fe67 	bl	800ae9c <__lshift>
 800a1ce:	4606      	mov	r6, r0
 800a1d0:	9b07      	ldr	r3, [sp, #28]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d04c      	beq.n	800a270 <_dtoa_r+0x9f8>
 800a1d6:	6871      	ldr	r1, [r6, #4]
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f000 fc60 	bl	800aa9e <_Balloc>
 800a1de:	6932      	ldr	r2, [r6, #16]
 800a1e0:	3202      	adds	r2, #2
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	0092      	lsls	r2, r2, #2
 800a1e6:	f106 010c 	add.w	r1, r6, #12
 800a1ea:	300c      	adds	r0, #12
 800a1ec:	f000 fc4c 	bl	800aa88 <memcpy>
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	4629      	mov	r1, r5
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f000 fe51 	bl	800ae9c <__lshift>
 800a1fa:	9b00      	ldr	r3, [sp, #0]
 800a1fc:	f8cd b014 	str.w	fp, [sp, #20]
 800a200:	f003 0301 	and.w	r3, r3, #1
 800a204:	46b1      	mov	r9, r6
 800a206:	9307      	str	r3, [sp, #28]
 800a208:	4606      	mov	r6, r0
 800a20a:	4639      	mov	r1, r7
 800a20c:	9804      	ldr	r0, [sp, #16]
 800a20e:	f7ff faa7 	bl	8009760 <quorem>
 800a212:	4649      	mov	r1, r9
 800a214:	4605      	mov	r5, r0
 800a216:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a21a:	9804      	ldr	r0, [sp, #16]
 800a21c:	f000 fe92 	bl	800af44 <__mcmp>
 800a220:	4632      	mov	r2, r6
 800a222:	9000      	str	r0, [sp, #0]
 800a224:	4639      	mov	r1, r7
 800a226:	4620      	mov	r0, r4
 800a228:	f000 fea6 	bl	800af78 <__mdiff>
 800a22c:	68c3      	ldr	r3, [r0, #12]
 800a22e:	4602      	mov	r2, r0
 800a230:	bb03      	cbnz	r3, 800a274 <_dtoa_r+0x9fc>
 800a232:	4601      	mov	r1, r0
 800a234:	9008      	str	r0, [sp, #32]
 800a236:	9804      	ldr	r0, [sp, #16]
 800a238:	f000 fe84 	bl	800af44 <__mcmp>
 800a23c:	9a08      	ldr	r2, [sp, #32]
 800a23e:	4603      	mov	r3, r0
 800a240:	4611      	mov	r1, r2
 800a242:	4620      	mov	r0, r4
 800a244:	9308      	str	r3, [sp, #32]
 800a246:	f000 fc5e 	bl	800ab06 <_Bfree>
 800a24a:	9b08      	ldr	r3, [sp, #32]
 800a24c:	b9a3      	cbnz	r3, 800a278 <_dtoa_r+0xa00>
 800a24e:	9a06      	ldr	r2, [sp, #24]
 800a250:	b992      	cbnz	r2, 800a278 <_dtoa_r+0xa00>
 800a252:	9a07      	ldr	r2, [sp, #28]
 800a254:	b982      	cbnz	r2, 800a278 <_dtoa_r+0xa00>
 800a256:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a25a:	d029      	beq.n	800a2b0 <_dtoa_r+0xa38>
 800a25c:	9b00      	ldr	r3, [sp, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	dd01      	ble.n	800a266 <_dtoa_r+0x9ee>
 800a262:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a266:	9b05      	ldr	r3, [sp, #20]
 800a268:	1c5d      	adds	r5, r3, #1
 800a26a:	f883 8000 	strb.w	r8, [r3]
 800a26e:	e782      	b.n	800a176 <_dtoa_r+0x8fe>
 800a270:	4630      	mov	r0, r6
 800a272:	e7c2      	b.n	800a1fa <_dtoa_r+0x982>
 800a274:	2301      	movs	r3, #1
 800a276:	e7e3      	b.n	800a240 <_dtoa_r+0x9c8>
 800a278:	9a00      	ldr	r2, [sp, #0]
 800a27a:	2a00      	cmp	r2, #0
 800a27c:	db04      	blt.n	800a288 <_dtoa_r+0xa10>
 800a27e:	d125      	bne.n	800a2cc <_dtoa_r+0xa54>
 800a280:	9a06      	ldr	r2, [sp, #24]
 800a282:	bb1a      	cbnz	r2, 800a2cc <_dtoa_r+0xa54>
 800a284:	9a07      	ldr	r2, [sp, #28]
 800a286:	bb0a      	cbnz	r2, 800a2cc <_dtoa_r+0xa54>
 800a288:	2b00      	cmp	r3, #0
 800a28a:	ddec      	ble.n	800a266 <_dtoa_r+0x9ee>
 800a28c:	2201      	movs	r2, #1
 800a28e:	9904      	ldr	r1, [sp, #16]
 800a290:	4620      	mov	r0, r4
 800a292:	f000 fe03 	bl	800ae9c <__lshift>
 800a296:	4639      	mov	r1, r7
 800a298:	9004      	str	r0, [sp, #16]
 800a29a:	f000 fe53 	bl	800af44 <__mcmp>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	dc03      	bgt.n	800a2aa <_dtoa_r+0xa32>
 800a2a2:	d1e0      	bne.n	800a266 <_dtoa_r+0x9ee>
 800a2a4:	f018 0f01 	tst.w	r8, #1
 800a2a8:	d0dd      	beq.n	800a266 <_dtoa_r+0x9ee>
 800a2aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a2ae:	d1d8      	bne.n	800a262 <_dtoa_r+0x9ea>
 800a2b0:	9b05      	ldr	r3, [sp, #20]
 800a2b2:	9a05      	ldr	r2, [sp, #20]
 800a2b4:	1c5d      	adds	r5, r3, #1
 800a2b6:	2339      	movs	r3, #57	; 0x39
 800a2b8:	7013      	strb	r3, [r2, #0]
 800a2ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a2be:	2b39      	cmp	r3, #57	; 0x39
 800a2c0:	f105 32ff 	add.w	r2, r5, #4294967295
 800a2c4:	d04f      	beq.n	800a366 <_dtoa_r+0xaee>
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	7013      	strb	r3, [r2, #0]
 800a2ca:	e754      	b.n	800a176 <_dtoa_r+0x8fe>
 800a2cc:	9a05      	ldr	r2, [sp, #20]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f102 0501 	add.w	r5, r2, #1
 800a2d4:	dd06      	ble.n	800a2e4 <_dtoa_r+0xa6c>
 800a2d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a2da:	d0e9      	beq.n	800a2b0 <_dtoa_r+0xa38>
 800a2dc:	f108 0801 	add.w	r8, r8, #1
 800a2e0:	9b05      	ldr	r3, [sp, #20]
 800a2e2:	e7c2      	b.n	800a26a <_dtoa_r+0x9f2>
 800a2e4:	9a02      	ldr	r2, [sp, #8]
 800a2e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a2ea:	eba5 030b 	sub.w	r3, r5, fp
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d021      	beq.n	800a336 <_dtoa_r+0xabe>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	220a      	movs	r2, #10
 800a2f6:	9904      	ldr	r1, [sp, #16]
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f000 fc1b 	bl	800ab34 <__multadd>
 800a2fe:	45b1      	cmp	r9, r6
 800a300:	9004      	str	r0, [sp, #16]
 800a302:	f04f 0300 	mov.w	r3, #0
 800a306:	f04f 020a 	mov.w	r2, #10
 800a30a:	4649      	mov	r1, r9
 800a30c:	4620      	mov	r0, r4
 800a30e:	d105      	bne.n	800a31c <_dtoa_r+0xaa4>
 800a310:	f000 fc10 	bl	800ab34 <__multadd>
 800a314:	4681      	mov	r9, r0
 800a316:	4606      	mov	r6, r0
 800a318:	9505      	str	r5, [sp, #20]
 800a31a:	e776      	b.n	800a20a <_dtoa_r+0x992>
 800a31c:	f000 fc0a 	bl	800ab34 <__multadd>
 800a320:	4631      	mov	r1, r6
 800a322:	4681      	mov	r9, r0
 800a324:	2300      	movs	r3, #0
 800a326:	220a      	movs	r2, #10
 800a328:	4620      	mov	r0, r4
 800a32a:	f000 fc03 	bl	800ab34 <__multadd>
 800a32e:	4606      	mov	r6, r0
 800a330:	e7f2      	b.n	800a318 <_dtoa_r+0xaa0>
 800a332:	f04f 0900 	mov.w	r9, #0
 800a336:	2201      	movs	r2, #1
 800a338:	9904      	ldr	r1, [sp, #16]
 800a33a:	4620      	mov	r0, r4
 800a33c:	f000 fdae 	bl	800ae9c <__lshift>
 800a340:	4639      	mov	r1, r7
 800a342:	9004      	str	r0, [sp, #16]
 800a344:	f000 fdfe 	bl	800af44 <__mcmp>
 800a348:	2800      	cmp	r0, #0
 800a34a:	dcb6      	bgt.n	800a2ba <_dtoa_r+0xa42>
 800a34c:	d102      	bne.n	800a354 <_dtoa_r+0xadc>
 800a34e:	f018 0f01 	tst.w	r8, #1
 800a352:	d1b2      	bne.n	800a2ba <_dtoa_r+0xa42>
 800a354:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a358:	2b30      	cmp	r3, #48	; 0x30
 800a35a:	f105 32ff 	add.w	r2, r5, #4294967295
 800a35e:	f47f af0a 	bne.w	800a176 <_dtoa_r+0x8fe>
 800a362:	4615      	mov	r5, r2
 800a364:	e7f6      	b.n	800a354 <_dtoa_r+0xadc>
 800a366:	4593      	cmp	fp, r2
 800a368:	d105      	bne.n	800a376 <_dtoa_r+0xafe>
 800a36a:	2331      	movs	r3, #49	; 0x31
 800a36c:	f10a 0a01 	add.w	sl, sl, #1
 800a370:	f88b 3000 	strb.w	r3, [fp]
 800a374:	e6ff      	b.n	800a176 <_dtoa_r+0x8fe>
 800a376:	4615      	mov	r5, r2
 800a378:	e79f      	b.n	800a2ba <_dtoa_r+0xa42>
 800a37a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a3e0 <_dtoa_r+0xb68>
 800a37e:	e007      	b.n	800a390 <_dtoa_r+0xb18>
 800a380:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a382:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a3e4 <_dtoa_r+0xb6c>
 800a386:	b11b      	cbz	r3, 800a390 <_dtoa_r+0xb18>
 800a388:	f10b 0308 	add.w	r3, fp, #8
 800a38c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a38e:	6013      	str	r3, [r2, #0]
 800a390:	4658      	mov	r0, fp
 800a392:	b017      	add	sp, #92	; 0x5c
 800a394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a398:	9b06      	ldr	r3, [sp, #24]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	f77f ae35 	ble.w	800a00a <_dtoa_r+0x792>
 800a3a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3a2:	9307      	str	r3, [sp, #28]
 800a3a4:	e649      	b.n	800a03a <_dtoa_r+0x7c2>
 800a3a6:	9b02      	ldr	r3, [sp, #8]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	dc03      	bgt.n	800a3b4 <_dtoa_r+0xb3c>
 800a3ac:	9b06      	ldr	r3, [sp, #24]
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	f73f aecc 	bgt.w	800a14c <_dtoa_r+0x8d4>
 800a3b4:	465d      	mov	r5, fp
 800a3b6:	4639      	mov	r1, r7
 800a3b8:	9804      	ldr	r0, [sp, #16]
 800a3ba:	f7ff f9d1 	bl	8009760 <quorem>
 800a3be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a3c2:	f805 8b01 	strb.w	r8, [r5], #1
 800a3c6:	9a02      	ldr	r2, [sp, #8]
 800a3c8:	eba5 030b 	sub.w	r3, r5, fp
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	ddb0      	ble.n	800a332 <_dtoa_r+0xaba>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	220a      	movs	r2, #10
 800a3d4:	9904      	ldr	r1, [sp, #16]
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f000 fbac 	bl	800ab34 <__multadd>
 800a3dc:	9004      	str	r0, [sp, #16]
 800a3de:	e7ea      	b.n	800a3b6 <_dtoa_r+0xb3e>
 800a3e0:	0800d5d4 	.word	0x0800d5d4
 800a3e4:	0800d648 	.word	0x0800d648

0800a3e8 <rshift>:
 800a3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ea:	6906      	ldr	r6, [r0, #16]
 800a3ec:	114b      	asrs	r3, r1, #5
 800a3ee:	429e      	cmp	r6, r3
 800a3f0:	f100 0414 	add.w	r4, r0, #20
 800a3f4:	dd30      	ble.n	800a458 <rshift+0x70>
 800a3f6:	f011 011f 	ands.w	r1, r1, #31
 800a3fa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a3fe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a402:	d108      	bne.n	800a416 <rshift+0x2e>
 800a404:	4621      	mov	r1, r4
 800a406:	42b2      	cmp	r2, r6
 800a408:	460b      	mov	r3, r1
 800a40a:	d211      	bcs.n	800a430 <rshift+0x48>
 800a40c:	f852 3b04 	ldr.w	r3, [r2], #4
 800a410:	f841 3b04 	str.w	r3, [r1], #4
 800a414:	e7f7      	b.n	800a406 <rshift+0x1e>
 800a416:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a41a:	f1c1 0c20 	rsb	ip, r1, #32
 800a41e:	40cd      	lsrs	r5, r1
 800a420:	3204      	adds	r2, #4
 800a422:	4623      	mov	r3, r4
 800a424:	42b2      	cmp	r2, r6
 800a426:	4617      	mov	r7, r2
 800a428:	d30c      	bcc.n	800a444 <rshift+0x5c>
 800a42a:	601d      	str	r5, [r3, #0]
 800a42c:	b105      	cbz	r5, 800a430 <rshift+0x48>
 800a42e:	3304      	adds	r3, #4
 800a430:	1b1a      	subs	r2, r3, r4
 800a432:	42a3      	cmp	r3, r4
 800a434:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a438:	bf08      	it	eq
 800a43a:	2300      	moveq	r3, #0
 800a43c:	6102      	str	r2, [r0, #16]
 800a43e:	bf08      	it	eq
 800a440:	6143      	streq	r3, [r0, #20]
 800a442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a444:	683f      	ldr	r7, [r7, #0]
 800a446:	fa07 f70c 	lsl.w	r7, r7, ip
 800a44a:	433d      	orrs	r5, r7
 800a44c:	f843 5b04 	str.w	r5, [r3], #4
 800a450:	f852 5b04 	ldr.w	r5, [r2], #4
 800a454:	40cd      	lsrs	r5, r1
 800a456:	e7e5      	b.n	800a424 <rshift+0x3c>
 800a458:	4623      	mov	r3, r4
 800a45a:	e7e9      	b.n	800a430 <rshift+0x48>

0800a45c <__hexdig_fun>:
 800a45c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a460:	2b09      	cmp	r3, #9
 800a462:	d802      	bhi.n	800a46a <__hexdig_fun+0xe>
 800a464:	3820      	subs	r0, #32
 800a466:	b2c0      	uxtb	r0, r0
 800a468:	4770      	bx	lr
 800a46a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a46e:	2b05      	cmp	r3, #5
 800a470:	d801      	bhi.n	800a476 <__hexdig_fun+0x1a>
 800a472:	3847      	subs	r0, #71	; 0x47
 800a474:	e7f7      	b.n	800a466 <__hexdig_fun+0xa>
 800a476:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a47a:	2b05      	cmp	r3, #5
 800a47c:	d801      	bhi.n	800a482 <__hexdig_fun+0x26>
 800a47e:	3827      	subs	r0, #39	; 0x27
 800a480:	e7f1      	b.n	800a466 <__hexdig_fun+0xa>
 800a482:	2000      	movs	r0, #0
 800a484:	4770      	bx	lr

0800a486 <__gethex>:
 800a486:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a48a:	b08b      	sub	sp, #44	; 0x2c
 800a48c:	468a      	mov	sl, r1
 800a48e:	9002      	str	r0, [sp, #8]
 800a490:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a492:	9306      	str	r3, [sp, #24]
 800a494:	4690      	mov	r8, r2
 800a496:	f000 facd 	bl	800aa34 <__localeconv_l>
 800a49a:	6803      	ldr	r3, [r0, #0]
 800a49c:	9303      	str	r3, [sp, #12]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7f5 fe96 	bl	80001d0 <strlen>
 800a4a4:	9b03      	ldr	r3, [sp, #12]
 800a4a6:	9001      	str	r0, [sp, #4]
 800a4a8:	4403      	add	r3, r0
 800a4aa:	f04f 0b00 	mov.w	fp, #0
 800a4ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a4b2:	9307      	str	r3, [sp, #28]
 800a4b4:	f8da 3000 	ldr.w	r3, [sl]
 800a4b8:	3302      	adds	r3, #2
 800a4ba:	461f      	mov	r7, r3
 800a4bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a4c0:	2830      	cmp	r0, #48	; 0x30
 800a4c2:	d06c      	beq.n	800a59e <__gethex+0x118>
 800a4c4:	f7ff ffca 	bl	800a45c <__hexdig_fun>
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	d16a      	bne.n	800a5a4 <__gethex+0x11e>
 800a4ce:	9a01      	ldr	r2, [sp, #4]
 800a4d0:	9903      	ldr	r1, [sp, #12]
 800a4d2:	4638      	mov	r0, r7
 800a4d4:	f001 f8fa 	bl	800b6cc <strncmp>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d166      	bne.n	800a5aa <__gethex+0x124>
 800a4dc:	9b01      	ldr	r3, [sp, #4]
 800a4de:	5cf8      	ldrb	r0, [r7, r3]
 800a4e0:	18fe      	adds	r6, r7, r3
 800a4e2:	f7ff ffbb 	bl	800a45c <__hexdig_fun>
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	d062      	beq.n	800a5b0 <__gethex+0x12a>
 800a4ea:	4633      	mov	r3, r6
 800a4ec:	7818      	ldrb	r0, [r3, #0]
 800a4ee:	2830      	cmp	r0, #48	; 0x30
 800a4f0:	461f      	mov	r7, r3
 800a4f2:	f103 0301 	add.w	r3, r3, #1
 800a4f6:	d0f9      	beq.n	800a4ec <__gethex+0x66>
 800a4f8:	f7ff ffb0 	bl	800a45c <__hexdig_fun>
 800a4fc:	fab0 f580 	clz	r5, r0
 800a500:	096d      	lsrs	r5, r5, #5
 800a502:	4634      	mov	r4, r6
 800a504:	f04f 0b01 	mov.w	fp, #1
 800a508:	463a      	mov	r2, r7
 800a50a:	4616      	mov	r6, r2
 800a50c:	3201      	adds	r2, #1
 800a50e:	7830      	ldrb	r0, [r6, #0]
 800a510:	f7ff ffa4 	bl	800a45c <__hexdig_fun>
 800a514:	2800      	cmp	r0, #0
 800a516:	d1f8      	bne.n	800a50a <__gethex+0x84>
 800a518:	9a01      	ldr	r2, [sp, #4]
 800a51a:	9903      	ldr	r1, [sp, #12]
 800a51c:	4630      	mov	r0, r6
 800a51e:	f001 f8d5 	bl	800b6cc <strncmp>
 800a522:	b950      	cbnz	r0, 800a53a <__gethex+0xb4>
 800a524:	b954      	cbnz	r4, 800a53c <__gethex+0xb6>
 800a526:	9b01      	ldr	r3, [sp, #4]
 800a528:	18f4      	adds	r4, r6, r3
 800a52a:	4622      	mov	r2, r4
 800a52c:	4616      	mov	r6, r2
 800a52e:	3201      	adds	r2, #1
 800a530:	7830      	ldrb	r0, [r6, #0]
 800a532:	f7ff ff93 	bl	800a45c <__hexdig_fun>
 800a536:	2800      	cmp	r0, #0
 800a538:	d1f8      	bne.n	800a52c <__gethex+0xa6>
 800a53a:	b10c      	cbz	r4, 800a540 <__gethex+0xba>
 800a53c:	1ba4      	subs	r4, r4, r6
 800a53e:	00a4      	lsls	r4, r4, #2
 800a540:	7833      	ldrb	r3, [r6, #0]
 800a542:	2b50      	cmp	r3, #80	; 0x50
 800a544:	d001      	beq.n	800a54a <__gethex+0xc4>
 800a546:	2b70      	cmp	r3, #112	; 0x70
 800a548:	d140      	bne.n	800a5cc <__gethex+0x146>
 800a54a:	7873      	ldrb	r3, [r6, #1]
 800a54c:	2b2b      	cmp	r3, #43	; 0x2b
 800a54e:	d031      	beq.n	800a5b4 <__gethex+0x12e>
 800a550:	2b2d      	cmp	r3, #45	; 0x2d
 800a552:	d033      	beq.n	800a5bc <__gethex+0x136>
 800a554:	1c71      	adds	r1, r6, #1
 800a556:	f04f 0900 	mov.w	r9, #0
 800a55a:	7808      	ldrb	r0, [r1, #0]
 800a55c:	f7ff ff7e 	bl	800a45c <__hexdig_fun>
 800a560:	1e43      	subs	r3, r0, #1
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b18      	cmp	r3, #24
 800a566:	d831      	bhi.n	800a5cc <__gethex+0x146>
 800a568:	f1a0 0210 	sub.w	r2, r0, #16
 800a56c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a570:	f7ff ff74 	bl	800a45c <__hexdig_fun>
 800a574:	1e43      	subs	r3, r0, #1
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b18      	cmp	r3, #24
 800a57a:	d922      	bls.n	800a5c2 <__gethex+0x13c>
 800a57c:	f1b9 0f00 	cmp.w	r9, #0
 800a580:	d000      	beq.n	800a584 <__gethex+0xfe>
 800a582:	4252      	negs	r2, r2
 800a584:	4414      	add	r4, r2
 800a586:	f8ca 1000 	str.w	r1, [sl]
 800a58a:	b30d      	cbz	r5, 800a5d0 <__gethex+0x14a>
 800a58c:	f1bb 0f00 	cmp.w	fp, #0
 800a590:	bf0c      	ite	eq
 800a592:	2706      	moveq	r7, #6
 800a594:	2700      	movne	r7, #0
 800a596:	4638      	mov	r0, r7
 800a598:	b00b      	add	sp, #44	; 0x2c
 800a59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59e:	f10b 0b01 	add.w	fp, fp, #1
 800a5a2:	e78a      	b.n	800a4ba <__gethex+0x34>
 800a5a4:	2500      	movs	r5, #0
 800a5a6:	462c      	mov	r4, r5
 800a5a8:	e7ae      	b.n	800a508 <__gethex+0x82>
 800a5aa:	463e      	mov	r6, r7
 800a5ac:	2501      	movs	r5, #1
 800a5ae:	e7c7      	b.n	800a540 <__gethex+0xba>
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	e7fb      	b.n	800a5ac <__gethex+0x126>
 800a5b4:	f04f 0900 	mov.w	r9, #0
 800a5b8:	1cb1      	adds	r1, r6, #2
 800a5ba:	e7ce      	b.n	800a55a <__gethex+0xd4>
 800a5bc:	f04f 0901 	mov.w	r9, #1
 800a5c0:	e7fa      	b.n	800a5b8 <__gethex+0x132>
 800a5c2:	230a      	movs	r3, #10
 800a5c4:	fb03 0202 	mla	r2, r3, r2, r0
 800a5c8:	3a10      	subs	r2, #16
 800a5ca:	e7cf      	b.n	800a56c <__gethex+0xe6>
 800a5cc:	4631      	mov	r1, r6
 800a5ce:	e7da      	b.n	800a586 <__gethex+0x100>
 800a5d0:	1bf3      	subs	r3, r6, r7
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	4629      	mov	r1, r5
 800a5d6:	2b07      	cmp	r3, #7
 800a5d8:	dc49      	bgt.n	800a66e <__gethex+0x1e8>
 800a5da:	9802      	ldr	r0, [sp, #8]
 800a5dc:	f000 fa5f 	bl	800aa9e <_Balloc>
 800a5e0:	9b01      	ldr	r3, [sp, #4]
 800a5e2:	f100 0914 	add.w	r9, r0, #20
 800a5e6:	f04f 0b00 	mov.w	fp, #0
 800a5ea:	f1c3 0301 	rsb	r3, r3, #1
 800a5ee:	4605      	mov	r5, r0
 800a5f0:	f8cd 9010 	str.w	r9, [sp, #16]
 800a5f4:	46da      	mov	sl, fp
 800a5f6:	9308      	str	r3, [sp, #32]
 800a5f8:	42b7      	cmp	r7, r6
 800a5fa:	d33b      	bcc.n	800a674 <__gethex+0x1ee>
 800a5fc:	9804      	ldr	r0, [sp, #16]
 800a5fe:	f840 ab04 	str.w	sl, [r0], #4
 800a602:	eba0 0009 	sub.w	r0, r0, r9
 800a606:	1080      	asrs	r0, r0, #2
 800a608:	6128      	str	r0, [r5, #16]
 800a60a:	0147      	lsls	r7, r0, #5
 800a60c:	4650      	mov	r0, sl
 800a60e:	f000 fb0a 	bl	800ac26 <__hi0bits>
 800a612:	f8d8 6000 	ldr.w	r6, [r8]
 800a616:	1a3f      	subs	r7, r7, r0
 800a618:	42b7      	cmp	r7, r6
 800a61a:	dd64      	ble.n	800a6e6 <__gethex+0x260>
 800a61c:	1bbf      	subs	r7, r7, r6
 800a61e:	4639      	mov	r1, r7
 800a620:	4628      	mov	r0, r5
 800a622:	f000 fe19 	bl	800b258 <__any_on>
 800a626:	4682      	mov	sl, r0
 800a628:	b178      	cbz	r0, 800a64a <__gethex+0x1c4>
 800a62a:	1e7b      	subs	r3, r7, #1
 800a62c:	1159      	asrs	r1, r3, #5
 800a62e:	f003 021f 	and.w	r2, r3, #31
 800a632:	f04f 0a01 	mov.w	sl, #1
 800a636:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a63a:	fa0a f202 	lsl.w	r2, sl, r2
 800a63e:	420a      	tst	r2, r1
 800a640:	d003      	beq.n	800a64a <__gethex+0x1c4>
 800a642:	4553      	cmp	r3, sl
 800a644:	dc46      	bgt.n	800a6d4 <__gethex+0x24e>
 800a646:	f04f 0a02 	mov.w	sl, #2
 800a64a:	4639      	mov	r1, r7
 800a64c:	4628      	mov	r0, r5
 800a64e:	f7ff fecb 	bl	800a3e8 <rshift>
 800a652:	443c      	add	r4, r7
 800a654:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a658:	42a3      	cmp	r3, r4
 800a65a:	da52      	bge.n	800a702 <__gethex+0x27c>
 800a65c:	4629      	mov	r1, r5
 800a65e:	9802      	ldr	r0, [sp, #8]
 800a660:	f000 fa51 	bl	800ab06 <_Bfree>
 800a664:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a666:	2300      	movs	r3, #0
 800a668:	6013      	str	r3, [r2, #0]
 800a66a:	27a3      	movs	r7, #163	; 0xa3
 800a66c:	e793      	b.n	800a596 <__gethex+0x110>
 800a66e:	3101      	adds	r1, #1
 800a670:	105b      	asrs	r3, r3, #1
 800a672:	e7b0      	b.n	800a5d6 <__gethex+0x150>
 800a674:	1e73      	subs	r3, r6, #1
 800a676:	9305      	str	r3, [sp, #20]
 800a678:	9a07      	ldr	r2, [sp, #28]
 800a67a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a67e:	4293      	cmp	r3, r2
 800a680:	d018      	beq.n	800a6b4 <__gethex+0x22e>
 800a682:	f1bb 0f20 	cmp.w	fp, #32
 800a686:	d107      	bne.n	800a698 <__gethex+0x212>
 800a688:	9b04      	ldr	r3, [sp, #16]
 800a68a:	f8c3 a000 	str.w	sl, [r3]
 800a68e:	3304      	adds	r3, #4
 800a690:	f04f 0a00 	mov.w	sl, #0
 800a694:	9304      	str	r3, [sp, #16]
 800a696:	46d3      	mov	fp, sl
 800a698:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a69c:	f7ff fede 	bl	800a45c <__hexdig_fun>
 800a6a0:	f000 000f 	and.w	r0, r0, #15
 800a6a4:	fa00 f00b 	lsl.w	r0, r0, fp
 800a6a8:	ea4a 0a00 	orr.w	sl, sl, r0
 800a6ac:	f10b 0b04 	add.w	fp, fp, #4
 800a6b0:	9b05      	ldr	r3, [sp, #20]
 800a6b2:	e00d      	b.n	800a6d0 <__gethex+0x24a>
 800a6b4:	9b05      	ldr	r3, [sp, #20]
 800a6b6:	9a08      	ldr	r2, [sp, #32]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	42bb      	cmp	r3, r7
 800a6bc:	d3e1      	bcc.n	800a682 <__gethex+0x1fc>
 800a6be:	4618      	mov	r0, r3
 800a6c0:	9a01      	ldr	r2, [sp, #4]
 800a6c2:	9903      	ldr	r1, [sp, #12]
 800a6c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c6:	f001 f801 	bl	800b6cc <strncmp>
 800a6ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d1d8      	bne.n	800a682 <__gethex+0x1fc>
 800a6d0:	461e      	mov	r6, r3
 800a6d2:	e791      	b.n	800a5f8 <__gethex+0x172>
 800a6d4:	1eb9      	subs	r1, r7, #2
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	f000 fdbe 	bl	800b258 <__any_on>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d0b2      	beq.n	800a646 <__gethex+0x1c0>
 800a6e0:	f04f 0a03 	mov.w	sl, #3
 800a6e4:	e7b1      	b.n	800a64a <__gethex+0x1c4>
 800a6e6:	da09      	bge.n	800a6fc <__gethex+0x276>
 800a6e8:	1bf7      	subs	r7, r6, r7
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	463a      	mov	r2, r7
 800a6ee:	9802      	ldr	r0, [sp, #8]
 800a6f0:	f000 fbd4 	bl	800ae9c <__lshift>
 800a6f4:	1be4      	subs	r4, r4, r7
 800a6f6:	4605      	mov	r5, r0
 800a6f8:	f100 0914 	add.w	r9, r0, #20
 800a6fc:	f04f 0a00 	mov.w	sl, #0
 800a700:	e7a8      	b.n	800a654 <__gethex+0x1ce>
 800a702:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a706:	42a0      	cmp	r0, r4
 800a708:	dd6a      	ble.n	800a7e0 <__gethex+0x35a>
 800a70a:	1b04      	subs	r4, r0, r4
 800a70c:	42a6      	cmp	r6, r4
 800a70e:	dc2e      	bgt.n	800a76e <__gethex+0x2e8>
 800a710:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a714:	2b02      	cmp	r3, #2
 800a716:	d022      	beq.n	800a75e <__gethex+0x2d8>
 800a718:	2b03      	cmp	r3, #3
 800a71a:	d024      	beq.n	800a766 <__gethex+0x2e0>
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d115      	bne.n	800a74c <__gethex+0x2c6>
 800a720:	42a6      	cmp	r6, r4
 800a722:	d113      	bne.n	800a74c <__gethex+0x2c6>
 800a724:	2e01      	cmp	r6, #1
 800a726:	dc0b      	bgt.n	800a740 <__gethex+0x2ba>
 800a728:	9a06      	ldr	r2, [sp, #24]
 800a72a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a72e:	6013      	str	r3, [r2, #0]
 800a730:	2301      	movs	r3, #1
 800a732:	612b      	str	r3, [r5, #16]
 800a734:	f8c9 3000 	str.w	r3, [r9]
 800a738:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a73a:	2762      	movs	r7, #98	; 0x62
 800a73c:	601d      	str	r5, [r3, #0]
 800a73e:	e72a      	b.n	800a596 <__gethex+0x110>
 800a740:	1e71      	subs	r1, r6, #1
 800a742:	4628      	mov	r0, r5
 800a744:	f000 fd88 	bl	800b258 <__any_on>
 800a748:	2800      	cmp	r0, #0
 800a74a:	d1ed      	bne.n	800a728 <__gethex+0x2a2>
 800a74c:	4629      	mov	r1, r5
 800a74e:	9802      	ldr	r0, [sp, #8]
 800a750:	f000 f9d9 	bl	800ab06 <_Bfree>
 800a754:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a756:	2300      	movs	r3, #0
 800a758:	6013      	str	r3, [r2, #0]
 800a75a:	2750      	movs	r7, #80	; 0x50
 800a75c:	e71b      	b.n	800a596 <__gethex+0x110>
 800a75e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a760:	2b00      	cmp	r3, #0
 800a762:	d0e1      	beq.n	800a728 <__gethex+0x2a2>
 800a764:	e7f2      	b.n	800a74c <__gethex+0x2c6>
 800a766:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1dd      	bne.n	800a728 <__gethex+0x2a2>
 800a76c:	e7ee      	b.n	800a74c <__gethex+0x2c6>
 800a76e:	1e67      	subs	r7, r4, #1
 800a770:	f1ba 0f00 	cmp.w	sl, #0
 800a774:	d131      	bne.n	800a7da <__gethex+0x354>
 800a776:	b127      	cbz	r7, 800a782 <__gethex+0x2fc>
 800a778:	4639      	mov	r1, r7
 800a77a:	4628      	mov	r0, r5
 800a77c:	f000 fd6c 	bl	800b258 <__any_on>
 800a780:	4682      	mov	sl, r0
 800a782:	117a      	asrs	r2, r7, #5
 800a784:	2301      	movs	r3, #1
 800a786:	f007 071f 	and.w	r7, r7, #31
 800a78a:	fa03 f707 	lsl.w	r7, r3, r7
 800a78e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a792:	4621      	mov	r1, r4
 800a794:	421f      	tst	r7, r3
 800a796:	4628      	mov	r0, r5
 800a798:	bf18      	it	ne
 800a79a:	f04a 0a02 	orrne.w	sl, sl, #2
 800a79e:	1b36      	subs	r6, r6, r4
 800a7a0:	f7ff fe22 	bl	800a3e8 <rshift>
 800a7a4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a7a8:	2702      	movs	r7, #2
 800a7aa:	f1ba 0f00 	cmp.w	sl, #0
 800a7ae:	d048      	beq.n	800a842 <__gethex+0x3bc>
 800a7b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d015      	beq.n	800a7e4 <__gethex+0x35e>
 800a7b8:	2b03      	cmp	r3, #3
 800a7ba:	d017      	beq.n	800a7ec <__gethex+0x366>
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d109      	bne.n	800a7d4 <__gethex+0x34e>
 800a7c0:	f01a 0f02 	tst.w	sl, #2
 800a7c4:	d006      	beq.n	800a7d4 <__gethex+0x34e>
 800a7c6:	f8d9 3000 	ldr.w	r3, [r9]
 800a7ca:	ea4a 0a03 	orr.w	sl, sl, r3
 800a7ce:	f01a 0f01 	tst.w	sl, #1
 800a7d2:	d10e      	bne.n	800a7f2 <__gethex+0x36c>
 800a7d4:	f047 0710 	orr.w	r7, r7, #16
 800a7d8:	e033      	b.n	800a842 <__gethex+0x3bc>
 800a7da:	f04f 0a01 	mov.w	sl, #1
 800a7de:	e7d0      	b.n	800a782 <__gethex+0x2fc>
 800a7e0:	2701      	movs	r7, #1
 800a7e2:	e7e2      	b.n	800a7aa <__gethex+0x324>
 800a7e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7e6:	f1c3 0301 	rsb	r3, r3, #1
 800a7ea:	9315      	str	r3, [sp, #84]	; 0x54
 800a7ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d0f0      	beq.n	800a7d4 <__gethex+0x34e>
 800a7f2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a7f6:	f105 0314 	add.w	r3, r5, #20
 800a7fa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a7fe:	eb03 010a 	add.w	r1, r3, sl
 800a802:	f04f 0c00 	mov.w	ip, #0
 800a806:	4618      	mov	r0, r3
 800a808:	f853 2b04 	ldr.w	r2, [r3], #4
 800a80c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a810:	d01c      	beq.n	800a84c <__gethex+0x3c6>
 800a812:	3201      	adds	r2, #1
 800a814:	6002      	str	r2, [r0, #0]
 800a816:	2f02      	cmp	r7, #2
 800a818:	f105 0314 	add.w	r3, r5, #20
 800a81c:	d138      	bne.n	800a890 <__gethex+0x40a>
 800a81e:	f8d8 2000 	ldr.w	r2, [r8]
 800a822:	3a01      	subs	r2, #1
 800a824:	42b2      	cmp	r2, r6
 800a826:	d10a      	bne.n	800a83e <__gethex+0x3b8>
 800a828:	1171      	asrs	r1, r6, #5
 800a82a:	2201      	movs	r2, #1
 800a82c:	f006 061f 	and.w	r6, r6, #31
 800a830:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a834:	fa02 f606 	lsl.w	r6, r2, r6
 800a838:	421e      	tst	r6, r3
 800a83a:	bf18      	it	ne
 800a83c:	4617      	movne	r7, r2
 800a83e:	f047 0720 	orr.w	r7, r7, #32
 800a842:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a844:	601d      	str	r5, [r3, #0]
 800a846:	9b06      	ldr	r3, [sp, #24]
 800a848:	601c      	str	r4, [r3, #0]
 800a84a:	e6a4      	b.n	800a596 <__gethex+0x110>
 800a84c:	4299      	cmp	r1, r3
 800a84e:	f843 cc04 	str.w	ip, [r3, #-4]
 800a852:	d8d8      	bhi.n	800a806 <__gethex+0x380>
 800a854:	68ab      	ldr	r3, [r5, #8]
 800a856:	4599      	cmp	r9, r3
 800a858:	db12      	blt.n	800a880 <__gethex+0x3fa>
 800a85a:	6869      	ldr	r1, [r5, #4]
 800a85c:	9802      	ldr	r0, [sp, #8]
 800a85e:	3101      	adds	r1, #1
 800a860:	f000 f91d 	bl	800aa9e <_Balloc>
 800a864:	692a      	ldr	r2, [r5, #16]
 800a866:	3202      	adds	r2, #2
 800a868:	f105 010c 	add.w	r1, r5, #12
 800a86c:	4683      	mov	fp, r0
 800a86e:	0092      	lsls	r2, r2, #2
 800a870:	300c      	adds	r0, #12
 800a872:	f000 f909 	bl	800aa88 <memcpy>
 800a876:	4629      	mov	r1, r5
 800a878:	9802      	ldr	r0, [sp, #8]
 800a87a:	f000 f944 	bl	800ab06 <_Bfree>
 800a87e:	465d      	mov	r5, fp
 800a880:	692b      	ldr	r3, [r5, #16]
 800a882:	1c5a      	adds	r2, r3, #1
 800a884:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a888:	612a      	str	r2, [r5, #16]
 800a88a:	2201      	movs	r2, #1
 800a88c:	615a      	str	r2, [r3, #20]
 800a88e:	e7c2      	b.n	800a816 <__gethex+0x390>
 800a890:	692a      	ldr	r2, [r5, #16]
 800a892:	454a      	cmp	r2, r9
 800a894:	dd0b      	ble.n	800a8ae <__gethex+0x428>
 800a896:	2101      	movs	r1, #1
 800a898:	4628      	mov	r0, r5
 800a89a:	f7ff fda5 	bl	800a3e8 <rshift>
 800a89e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8a2:	3401      	adds	r4, #1
 800a8a4:	42a3      	cmp	r3, r4
 800a8a6:	f6ff aed9 	blt.w	800a65c <__gethex+0x1d6>
 800a8aa:	2701      	movs	r7, #1
 800a8ac:	e7c7      	b.n	800a83e <__gethex+0x3b8>
 800a8ae:	f016 061f 	ands.w	r6, r6, #31
 800a8b2:	d0fa      	beq.n	800a8aa <__gethex+0x424>
 800a8b4:	449a      	add	sl, r3
 800a8b6:	f1c6 0620 	rsb	r6, r6, #32
 800a8ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a8be:	f000 f9b2 	bl	800ac26 <__hi0bits>
 800a8c2:	42b0      	cmp	r0, r6
 800a8c4:	dbe7      	blt.n	800a896 <__gethex+0x410>
 800a8c6:	e7f0      	b.n	800a8aa <__gethex+0x424>

0800a8c8 <L_shift>:
 800a8c8:	f1c2 0208 	rsb	r2, r2, #8
 800a8cc:	0092      	lsls	r2, r2, #2
 800a8ce:	b570      	push	{r4, r5, r6, lr}
 800a8d0:	f1c2 0620 	rsb	r6, r2, #32
 800a8d4:	6843      	ldr	r3, [r0, #4]
 800a8d6:	6804      	ldr	r4, [r0, #0]
 800a8d8:	fa03 f506 	lsl.w	r5, r3, r6
 800a8dc:	432c      	orrs	r4, r5
 800a8de:	40d3      	lsrs	r3, r2
 800a8e0:	6004      	str	r4, [r0, #0]
 800a8e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8e6:	4288      	cmp	r0, r1
 800a8e8:	d3f4      	bcc.n	800a8d4 <L_shift+0xc>
 800a8ea:	bd70      	pop	{r4, r5, r6, pc}

0800a8ec <__match>:
 800a8ec:	b530      	push	{r4, r5, lr}
 800a8ee:	6803      	ldr	r3, [r0, #0]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8f6:	b914      	cbnz	r4, 800a8fe <__match+0x12>
 800a8f8:	6003      	str	r3, [r0, #0]
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	bd30      	pop	{r4, r5, pc}
 800a8fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a902:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a906:	2d19      	cmp	r5, #25
 800a908:	bf98      	it	ls
 800a90a:	3220      	addls	r2, #32
 800a90c:	42a2      	cmp	r2, r4
 800a90e:	d0f0      	beq.n	800a8f2 <__match+0x6>
 800a910:	2000      	movs	r0, #0
 800a912:	e7f3      	b.n	800a8fc <__match+0x10>

0800a914 <__hexnan>:
 800a914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a918:	680b      	ldr	r3, [r1, #0]
 800a91a:	6801      	ldr	r1, [r0, #0]
 800a91c:	115f      	asrs	r7, r3, #5
 800a91e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a922:	f013 031f 	ands.w	r3, r3, #31
 800a926:	b087      	sub	sp, #28
 800a928:	bf18      	it	ne
 800a92a:	3704      	addne	r7, #4
 800a92c:	2500      	movs	r5, #0
 800a92e:	1f3e      	subs	r6, r7, #4
 800a930:	4682      	mov	sl, r0
 800a932:	4690      	mov	r8, r2
 800a934:	9301      	str	r3, [sp, #4]
 800a936:	f847 5c04 	str.w	r5, [r7, #-4]
 800a93a:	46b1      	mov	r9, r6
 800a93c:	4634      	mov	r4, r6
 800a93e:	9502      	str	r5, [sp, #8]
 800a940:	46ab      	mov	fp, r5
 800a942:	784a      	ldrb	r2, [r1, #1]
 800a944:	1c4b      	adds	r3, r1, #1
 800a946:	9303      	str	r3, [sp, #12]
 800a948:	b342      	cbz	r2, 800a99c <__hexnan+0x88>
 800a94a:	4610      	mov	r0, r2
 800a94c:	9105      	str	r1, [sp, #20]
 800a94e:	9204      	str	r2, [sp, #16]
 800a950:	f7ff fd84 	bl	800a45c <__hexdig_fun>
 800a954:	2800      	cmp	r0, #0
 800a956:	d143      	bne.n	800a9e0 <__hexnan+0xcc>
 800a958:	9a04      	ldr	r2, [sp, #16]
 800a95a:	9905      	ldr	r1, [sp, #20]
 800a95c:	2a20      	cmp	r2, #32
 800a95e:	d818      	bhi.n	800a992 <__hexnan+0x7e>
 800a960:	9b02      	ldr	r3, [sp, #8]
 800a962:	459b      	cmp	fp, r3
 800a964:	dd13      	ble.n	800a98e <__hexnan+0x7a>
 800a966:	454c      	cmp	r4, r9
 800a968:	d206      	bcs.n	800a978 <__hexnan+0x64>
 800a96a:	2d07      	cmp	r5, #7
 800a96c:	dc04      	bgt.n	800a978 <__hexnan+0x64>
 800a96e:	462a      	mov	r2, r5
 800a970:	4649      	mov	r1, r9
 800a972:	4620      	mov	r0, r4
 800a974:	f7ff ffa8 	bl	800a8c8 <L_shift>
 800a978:	4544      	cmp	r4, r8
 800a97a:	d944      	bls.n	800aa06 <__hexnan+0xf2>
 800a97c:	2300      	movs	r3, #0
 800a97e:	f1a4 0904 	sub.w	r9, r4, #4
 800a982:	f844 3c04 	str.w	r3, [r4, #-4]
 800a986:	f8cd b008 	str.w	fp, [sp, #8]
 800a98a:	464c      	mov	r4, r9
 800a98c:	461d      	mov	r5, r3
 800a98e:	9903      	ldr	r1, [sp, #12]
 800a990:	e7d7      	b.n	800a942 <__hexnan+0x2e>
 800a992:	2a29      	cmp	r2, #41	; 0x29
 800a994:	d14a      	bne.n	800aa2c <__hexnan+0x118>
 800a996:	3102      	adds	r1, #2
 800a998:	f8ca 1000 	str.w	r1, [sl]
 800a99c:	f1bb 0f00 	cmp.w	fp, #0
 800a9a0:	d044      	beq.n	800aa2c <__hexnan+0x118>
 800a9a2:	454c      	cmp	r4, r9
 800a9a4:	d206      	bcs.n	800a9b4 <__hexnan+0xa0>
 800a9a6:	2d07      	cmp	r5, #7
 800a9a8:	dc04      	bgt.n	800a9b4 <__hexnan+0xa0>
 800a9aa:	462a      	mov	r2, r5
 800a9ac:	4649      	mov	r1, r9
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f7ff ff8a 	bl	800a8c8 <L_shift>
 800a9b4:	4544      	cmp	r4, r8
 800a9b6:	d928      	bls.n	800aa0a <__hexnan+0xf6>
 800a9b8:	4643      	mov	r3, r8
 800a9ba:	f854 2b04 	ldr.w	r2, [r4], #4
 800a9be:	f843 2b04 	str.w	r2, [r3], #4
 800a9c2:	42a6      	cmp	r6, r4
 800a9c4:	d2f9      	bcs.n	800a9ba <__hexnan+0xa6>
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f843 2b04 	str.w	r2, [r3], #4
 800a9cc:	429e      	cmp	r6, r3
 800a9ce:	d2fb      	bcs.n	800a9c8 <__hexnan+0xb4>
 800a9d0:	6833      	ldr	r3, [r6, #0]
 800a9d2:	b91b      	cbnz	r3, 800a9dc <__hexnan+0xc8>
 800a9d4:	4546      	cmp	r6, r8
 800a9d6:	d127      	bne.n	800aa28 <__hexnan+0x114>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	6033      	str	r3, [r6, #0]
 800a9dc:	2005      	movs	r0, #5
 800a9de:	e026      	b.n	800aa2e <__hexnan+0x11a>
 800a9e0:	3501      	adds	r5, #1
 800a9e2:	2d08      	cmp	r5, #8
 800a9e4:	f10b 0b01 	add.w	fp, fp, #1
 800a9e8:	dd06      	ble.n	800a9f8 <__hexnan+0xe4>
 800a9ea:	4544      	cmp	r4, r8
 800a9ec:	d9cf      	bls.n	800a98e <__hexnan+0x7a>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9f4:	2501      	movs	r5, #1
 800a9f6:	3c04      	subs	r4, #4
 800a9f8:	6822      	ldr	r2, [r4, #0]
 800a9fa:	f000 000f 	and.w	r0, r0, #15
 800a9fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aa02:	6020      	str	r0, [r4, #0]
 800aa04:	e7c3      	b.n	800a98e <__hexnan+0x7a>
 800aa06:	2508      	movs	r5, #8
 800aa08:	e7c1      	b.n	800a98e <__hexnan+0x7a>
 800aa0a:	9b01      	ldr	r3, [sp, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d0df      	beq.n	800a9d0 <__hexnan+0xbc>
 800aa10:	f04f 32ff 	mov.w	r2, #4294967295
 800aa14:	f1c3 0320 	rsb	r3, r3, #32
 800aa18:	fa22 f303 	lsr.w	r3, r2, r3
 800aa1c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800aa20:	401a      	ands	r2, r3
 800aa22:	f847 2c04 	str.w	r2, [r7, #-4]
 800aa26:	e7d3      	b.n	800a9d0 <__hexnan+0xbc>
 800aa28:	3e04      	subs	r6, #4
 800aa2a:	e7d1      	b.n	800a9d0 <__hexnan+0xbc>
 800aa2c:	2004      	movs	r0, #4
 800aa2e:	b007      	add	sp, #28
 800aa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa34 <__localeconv_l>:
 800aa34:	30f0      	adds	r0, #240	; 0xf0
 800aa36:	4770      	bx	lr

0800aa38 <_localeconv_r>:
 800aa38:	4b04      	ldr	r3, [pc, #16]	; (800aa4c <_localeconv_r+0x14>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	6a18      	ldr	r0, [r3, #32]
 800aa3e:	4b04      	ldr	r3, [pc, #16]	; (800aa50 <_localeconv_r+0x18>)
 800aa40:	2800      	cmp	r0, #0
 800aa42:	bf08      	it	eq
 800aa44:	4618      	moveq	r0, r3
 800aa46:	30f0      	adds	r0, #240	; 0xf0
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	2000002c 	.word	0x2000002c
 800aa50:	20000090 	.word	0x20000090

0800aa54 <malloc>:
 800aa54:	4b02      	ldr	r3, [pc, #8]	; (800aa60 <malloc+0xc>)
 800aa56:	4601      	mov	r1, r0
 800aa58:	6818      	ldr	r0, [r3, #0]
 800aa5a:	f000 bc7b 	b.w	800b354 <_malloc_r>
 800aa5e:	bf00      	nop
 800aa60:	2000002c 	.word	0x2000002c

0800aa64 <__ascii_mbtowc>:
 800aa64:	b082      	sub	sp, #8
 800aa66:	b901      	cbnz	r1, 800aa6a <__ascii_mbtowc+0x6>
 800aa68:	a901      	add	r1, sp, #4
 800aa6a:	b142      	cbz	r2, 800aa7e <__ascii_mbtowc+0x1a>
 800aa6c:	b14b      	cbz	r3, 800aa82 <__ascii_mbtowc+0x1e>
 800aa6e:	7813      	ldrb	r3, [r2, #0]
 800aa70:	600b      	str	r3, [r1, #0]
 800aa72:	7812      	ldrb	r2, [r2, #0]
 800aa74:	1c10      	adds	r0, r2, #0
 800aa76:	bf18      	it	ne
 800aa78:	2001      	movne	r0, #1
 800aa7a:	b002      	add	sp, #8
 800aa7c:	4770      	bx	lr
 800aa7e:	4610      	mov	r0, r2
 800aa80:	e7fb      	b.n	800aa7a <__ascii_mbtowc+0x16>
 800aa82:	f06f 0001 	mvn.w	r0, #1
 800aa86:	e7f8      	b.n	800aa7a <__ascii_mbtowc+0x16>

0800aa88 <memcpy>:
 800aa88:	b510      	push	{r4, lr}
 800aa8a:	1e43      	subs	r3, r0, #1
 800aa8c:	440a      	add	r2, r1
 800aa8e:	4291      	cmp	r1, r2
 800aa90:	d100      	bne.n	800aa94 <memcpy+0xc>
 800aa92:	bd10      	pop	{r4, pc}
 800aa94:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa9c:	e7f7      	b.n	800aa8e <memcpy+0x6>

0800aa9e <_Balloc>:
 800aa9e:	b570      	push	{r4, r5, r6, lr}
 800aaa0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	460e      	mov	r6, r1
 800aaa6:	b93d      	cbnz	r5, 800aab8 <_Balloc+0x1a>
 800aaa8:	2010      	movs	r0, #16
 800aaaa:	f7ff ffd3 	bl	800aa54 <malloc>
 800aaae:	6260      	str	r0, [r4, #36]	; 0x24
 800aab0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aab4:	6005      	str	r5, [r0, #0]
 800aab6:	60c5      	str	r5, [r0, #12]
 800aab8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aaba:	68eb      	ldr	r3, [r5, #12]
 800aabc:	b183      	cbz	r3, 800aae0 <_Balloc+0x42>
 800aabe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800aac6:	b9b8      	cbnz	r0, 800aaf8 <_Balloc+0x5a>
 800aac8:	2101      	movs	r1, #1
 800aaca:	fa01 f506 	lsl.w	r5, r1, r6
 800aace:	1d6a      	adds	r2, r5, #5
 800aad0:	0092      	lsls	r2, r2, #2
 800aad2:	4620      	mov	r0, r4
 800aad4:	f000 fbe1 	bl	800b29a <_calloc_r>
 800aad8:	b160      	cbz	r0, 800aaf4 <_Balloc+0x56>
 800aada:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800aade:	e00e      	b.n	800aafe <_Balloc+0x60>
 800aae0:	2221      	movs	r2, #33	; 0x21
 800aae2:	2104      	movs	r1, #4
 800aae4:	4620      	mov	r0, r4
 800aae6:	f000 fbd8 	bl	800b29a <_calloc_r>
 800aaea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaec:	60e8      	str	r0, [r5, #12]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1e4      	bne.n	800aabe <_Balloc+0x20>
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	bd70      	pop	{r4, r5, r6, pc}
 800aaf8:	6802      	ldr	r2, [r0, #0]
 800aafa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800aafe:	2300      	movs	r3, #0
 800ab00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab04:	e7f7      	b.n	800aaf6 <_Balloc+0x58>

0800ab06 <_Bfree>:
 800ab06:	b570      	push	{r4, r5, r6, lr}
 800ab08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ab0a:	4606      	mov	r6, r0
 800ab0c:	460d      	mov	r5, r1
 800ab0e:	b93c      	cbnz	r4, 800ab20 <_Bfree+0x1a>
 800ab10:	2010      	movs	r0, #16
 800ab12:	f7ff ff9f 	bl	800aa54 <malloc>
 800ab16:	6270      	str	r0, [r6, #36]	; 0x24
 800ab18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab1c:	6004      	str	r4, [r0, #0]
 800ab1e:	60c4      	str	r4, [r0, #12]
 800ab20:	b13d      	cbz	r5, 800ab32 <_Bfree+0x2c>
 800ab22:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ab24:	686a      	ldr	r2, [r5, #4]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab2c:	6029      	str	r1, [r5, #0]
 800ab2e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ab32:	bd70      	pop	{r4, r5, r6, pc}

0800ab34 <__multadd>:
 800ab34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab38:	690d      	ldr	r5, [r1, #16]
 800ab3a:	461f      	mov	r7, r3
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	460c      	mov	r4, r1
 800ab40:	f101 0c14 	add.w	ip, r1, #20
 800ab44:	2300      	movs	r3, #0
 800ab46:	f8dc 0000 	ldr.w	r0, [ip]
 800ab4a:	b281      	uxth	r1, r0
 800ab4c:	fb02 7101 	mla	r1, r2, r1, r7
 800ab50:	0c0f      	lsrs	r7, r1, #16
 800ab52:	0c00      	lsrs	r0, r0, #16
 800ab54:	fb02 7000 	mla	r0, r2, r0, r7
 800ab58:	b289      	uxth	r1, r1
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ab60:	429d      	cmp	r5, r3
 800ab62:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ab66:	f84c 1b04 	str.w	r1, [ip], #4
 800ab6a:	dcec      	bgt.n	800ab46 <__multadd+0x12>
 800ab6c:	b1d7      	cbz	r7, 800aba4 <__multadd+0x70>
 800ab6e:	68a3      	ldr	r3, [r4, #8]
 800ab70:	42ab      	cmp	r3, r5
 800ab72:	dc12      	bgt.n	800ab9a <__multadd+0x66>
 800ab74:	6861      	ldr	r1, [r4, #4]
 800ab76:	4630      	mov	r0, r6
 800ab78:	3101      	adds	r1, #1
 800ab7a:	f7ff ff90 	bl	800aa9e <_Balloc>
 800ab7e:	6922      	ldr	r2, [r4, #16]
 800ab80:	3202      	adds	r2, #2
 800ab82:	f104 010c 	add.w	r1, r4, #12
 800ab86:	4680      	mov	r8, r0
 800ab88:	0092      	lsls	r2, r2, #2
 800ab8a:	300c      	adds	r0, #12
 800ab8c:	f7ff ff7c 	bl	800aa88 <memcpy>
 800ab90:	4621      	mov	r1, r4
 800ab92:	4630      	mov	r0, r6
 800ab94:	f7ff ffb7 	bl	800ab06 <_Bfree>
 800ab98:	4644      	mov	r4, r8
 800ab9a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab9e:	3501      	adds	r5, #1
 800aba0:	615f      	str	r7, [r3, #20]
 800aba2:	6125      	str	r5, [r4, #16]
 800aba4:	4620      	mov	r0, r4
 800aba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800abaa <__s2b>:
 800abaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abae:	460c      	mov	r4, r1
 800abb0:	4615      	mov	r5, r2
 800abb2:	461f      	mov	r7, r3
 800abb4:	2209      	movs	r2, #9
 800abb6:	3308      	adds	r3, #8
 800abb8:	4606      	mov	r6, r0
 800abba:	fb93 f3f2 	sdiv	r3, r3, r2
 800abbe:	2100      	movs	r1, #0
 800abc0:	2201      	movs	r2, #1
 800abc2:	429a      	cmp	r2, r3
 800abc4:	db20      	blt.n	800ac08 <__s2b+0x5e>
 800abc6:	4630      	mov	r0, r6
 800abc8:	f7ff ff69 	bl	800aa9e <_Balloc>
 800abcc:	9b08      	ldr	r3, [sp, #32]
 800abce:	6143      	str	r3, [r0, #20]
 800abd0:	2d09      	cmp	r5, #9
 800abd2:	f04f 0301 	mov.w	r3, #1
 800abd6:	6103      	str	r3, [r0, #16]
 800abd8:	dd19      	ble.n	800ac0e <__s2b+0x64>
 800abda:	f104 0809 	add.w	r8, r4, #9
 800abde:	46c1      	mov	r9, r8
 800abe0:	442c      	add	r4, r5
 800abe2:	f819 3b01 	ldrb.w	r3, [r9], #1
 800abe6:	4601      	mov	r1, r0
 800abe8:	3b30      	subs	r3, #48	; 0x30
 800abea:	220a      	movs	r2, #10
 800abec:	4630      	mov	r0, r6
 800abee:	f7ff ffa1 	bl	800ab34 <__multadd>
 800abf2:	45a1      	cmp	r9, r4
 800abf4:	d1f5      	bne.n	800abe2 <__s2b+0x38>
 800abf6:	eb08 0405 	add.w	r4, r8, r5
 800abfa:	3c08      	subs	r4, #8
 800abfc:	1b2d      	subs	r5, r5, r4
 800abfe:	1963      	adds	r3, r4, r5
 800ac00:	42bb      	cmp	r3, r7
 800ac02:	db07      	blt.n	800ac14 <__s2b+0x6a>
 800ac04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac08:	0052      	lsls	r2, r2, #1
 800ac0a:	3101      	adds	r1, #1
 800ac0c:	e7d9      	b.n	800abc2 <__s2b+0x18>
 800ac0e:	340a      	adds	r4, #10
 800ac10:	2509      	movs	r5, #9
 800ac12:	e7f3      	b.n	800abfc <__s2b+0x52>
 800ac14:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac18:	4601      	mov	r1, r0
 800ac1a:	3b30      	subs	r3, #48	; 0x30
 800ac1c:	220a      	movs	r2, #10
 800ac1e:	4630      	mov	r0, r6
 800ac20:	f7ff ff88 	bl	800ab34 <__multadd>
 800ac24:	e7eb      	b.n	800abfe <__s2b+0x54>

0800ac26 <__hi0bits>:
 800ac26:	0c02      	lsrs	r2, r0, #16
 800ac28:	0412      	lsls	r2, r2, #16
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	b9b2      	cbnz	r2, 800ac5c <__hi0bits+0x36>
 800ac2e:	0403      	lsls	r3, r0, #16
 800ac30:	2010      	movs	r0, #16
 800ac32:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ac36:	bf04      	itt	eq
 800ac38:	021b      	lsleq	r3, r3, #8
 800ac3a:	3008      	addeq	r0, #8
 800ac3c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ac40:	bf04      	itt	eq
 800ac42:	011b      	lsleq	r3, r3, #4
 800ac44:	3004      	addeq	r0, #4
 800ac46:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ac4a:	bf04      	itt	eq
 800ac4c:	009b      	lsleq	r3, r3, #2
 800ac4e:	3002      	addeq	r0, #2
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	db06      	blt.n	800ac62 <__hi0bits+0x3c>
 800ac54:	005b      	lsls	r3, r3, #1
 800ac56:	d503      	bpl.n	800ac60 <__hi0bits+0x3a>
 800ac58:	3001      	adds	r0, #1
 800ac5a:	4770      	bx	lr
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	e7e8      	b.n	800ac32 <__hi0bits+0xc>
 800ac60:	2020      	movs	r0, #32
 800ac62:	4770      	bx	lr

0800ac64 <__lo0bits>:
 800ac64:	6803      	ldr	r3, [r0, #0]
 800ac66:	f013 0207 	ands.w	r2, r3, #7
 800ac6a:	4601      	mov	r1, r0
 800ac6c:	d00b      	beq.n	800ac86 <__lo0bits+0x22>
 800ac6e:	07da      	lsls	r2, r3, #31
 800ac70:	d423      	bmi.n	800acba <__lo0bits+0x56>
 800ac72:	0798      	lsls	r0, r3, #30
 800ac74:	bf49      	itett	mi
 800ac76:	085b      	lsrmi	r3, r3, #1
 800ac78:	089b      	lsrpl	r3, r3, #2
 800ac7a:	2001      	movmi	r0, #1
 800ac7c:	600b      	strmi	r3, [r1, #0]
 800ac7e:	bf5c      	itt	pl
 800ac80:	600b      	strpl	r3, [r1, #0]
 800ac82:	2002      	movpl	r0, #2
 800ac84:	4770      	bx	lr
 800ac86:	b298      	uxth	r0, r3
 800ac88:	b9a8      	cbnz	r0, 800acb6 <__lo0bits+0x52>
 800ac8a:	0c1b      	lsrs	r3, r3, #16
 800ac8c:	2010      	movs	r0, #16
 800ac8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ac92:	bf04      	itt	eq
 800ac94:	0a1b      	lsreq	r3, r3, #8
 800ac96:	3008      	addeq	r0, #8
 800ac98:	071a      	lsls	r2, r3, #28
 800ac9a:	bf04      	itt	eq
 800ac9c:	091b      	lsreq	r3, r3, #4
 800ac9e:	3004      	addeq	r0, #4
 800aca0:	079a      	lsls	r2, r3, #30
 800aca2:	bf04      	itt	eq
 800aca4:	089b      	lsreq	r3, r3, #2
 800aca6:	3002      	addeq	r0, #2
 800aca8:	07da      	lsls	r2, r3, #31
 800acaa:	d402      	bmi.n	800acb2 <__lo0bits+0x4e>
 800acac:	085b      	lsrs	r3, r3, #1
 800acae:	d006      	beq.n	800acbe <__lo0bits+0x5a>
 800acb0:	3001      	adds	r0, #1
 800acb2:	600b      	str	r3, [r1, #0]
 800acb4:	4770      	bx	lr
 800acb6:	4610      	mov	r0, r2
 800acb8:	e7e9      	b.n	800ac8e <__lo0bits+0x2a>
 800acba:	2000      	movs	r0, #0
 800acbc:	4770      	bx	lr
 800acbe:	2020      	movs	r0, #32
 800acc0:	4770      	bx	lr

0800acc2 <__i2b>:
 800acc2:	b510      	push	{r4, lr}
 800acc4:	460c      	mov	r4, r1
 800acc6:	2101      	movs	r1, #1
 800acc8:	f7ff fee9 	bl	800aa9e <_Balloc>
 800accc:	2201      	movs	r2, #1
 800acce:	6144      	str	r4, [r0, #20]
 800acd0:	6102      	str	r2, [r0, #16]
 800acd2:	bd10      	pop	{r4, pc}

0800acd4 <__multiply>:
 800acd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd8:	4614      	mov	r4, r2
 800acda:	690a      	ldr	r2, [r1, #16]
 800acdc:	6923      	ldr	r3, [r4, #16]
 800acde:	429a      	cmp	r2, r3
 800ace0:	bfb8      	it	lt
 800ace2:	460b      	movlt	r3, r1
 800ace4:	4688      	mov	r8, r1
 800ace6:	bfbc      	itt	lt
 800ace8:	46a0      	movlt	r8, r4
 800acea:	461c      	movlt	r4, r3
 800acec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800acf0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800acf4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800acf8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800acfc:	eb07 0609 	add.w	r6, r7, r9
 800ad00:	42b3      	cmp	r3, r6
 800ad02:	bfb8      	it	lt
 800ad04:	3101      	addlt	r1, #1
 800ad06:	f7ff feca 	bl	800aa9e <_Balloc>
 800ad0a:	f100 0514 	add.w	r5, r0, #20
 800ad0e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ad12:	462b      	mov	r3, r5
 800ad14:	2200      	movs	r2, #0
 800ad16:	4573      	cmp	r3, lr
 800ad18:	d316      	bcc.n	800ad48 <__multiply+0x74>
 800ad1a:	f104 0214 	add.w	r2, r4, #20
 800ad1e:	f108 0114 	add.w	r1, r8, #20
 800ad22:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ad26:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ad2a:	9300      	str	r3, [sp, #0]
 800ad2c:	9b00      	ldr	r3, [sp, #0]
 800ad2e:	9201      	str	r2, [sp, #4]
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d80c      	bhi.n	800ad4e <__multiply+0x7a>
 800ad34:	2e00      	cmp	r6, #0
 800ad36:	dd03      	ble.n	800ad40 <__multiply+0x6c>
 800ad38:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d05d      	beq.n	800adfc <__multiply+0x128>
 800ad40:	6106      	str	r6, [r0, #16]
 800ad42:	b003      	add	sp, #12
 800ad44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad48:	f843 2b04 	str.w	r2, [r3], #4
 800ad4c:	e7e3      	b.n	800ad16 <__multiply+0x42>
 800ad4e:	f8b2 b000 	ldrh.w	fp, [r2]
 800ad52:	f1bb 0f00 	cmp.w	fp, #0
 800ad56:	d023      	beq.n	800ada0 <__multiply+0xcc>
 800ad58:	4689      	mov	r9, r1
 800ad5a:	46ac      	mov	ip, r5
 800ad5c:	f04f 0800 	mov.w	r8, #0
 800ad60:	f859 4b04 	ldr.w	r4, [r9], #4
 800ad64:	f8dc a000 	ldr.w	sl, [ip]
 800ad68:	b2a3      	uxth	r3, r4
 800ad6a:	fa1f fa8a 	uxth.w	sl, sl
 800ad6e:	fb0b a303 	mla	r3, fp, r3, sl
 800ad72:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ad76:	f8dc 4000 	ldr.w	r4, [ip]
 800ad7a:	4443      	add	r3, r8
 800ad7c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ad80:	fb0b 840a 	mla	r4, fp, sl, r8
 800ad84:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ad88:	46e2      	mov	sl, ip
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ad90:	454f      	cmp	r7, r9
 800ad92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ad96:	f84a 3b04 	str.w	r3, [sl], #4
 800ad9a:	d82b      	bhi.n	800adf4 <__multiply+0x120>
 800ad9c:	f8cc 8004 	str.w	r8, [ip, #4]
 800ada0:	9b01      	ldr	r3, [sp, #4]
 800ada2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ada6:	3204      	adds	r2, #4
 800ada8:	f1ba 0f00 	cmp.w	sl, #0
 800adac:	d020      	beq.n	800adf0 <__multiply+0x11c>
 800adae:	682b      	ldr	r3, [r5, #0]
 800adb0:	4689      	mov	r9, r1
 800adb2:	46a8      	mov	r8, r5
 800adb4:	f04f 0b00 	mov.w	fp, #0
 800adb8:	f8b9 c000 	ldrh.w	ip, [r9]
 800adbc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800adc0:	fb0a 440c 	mla	r4, sl, ip, r4
 800adc4:	445c      	add	r4, fp
 800adc6:	46c4      	mov	ip, r8
 800adc8:	b29b      	uxth	r3, r3
 800adca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800adce:	f84c 3b04 	str.w	r3, [ip], #4
 800add2:	f859 3b04 	ldr.w	r3, [r9], #4
 800add6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800adda:	0c1b      	lsrs	r3, r3, #16
 800addc:	fb0a b303 	mla	r3, sl, r3, fp
 800ade0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ade4:	454f      	cmp	r7, r9
 800ade6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800adea:	d805      	bhi.n	800adf8 <__multiply+0x124>
 800adec:	f8c8 3004 	str.w	r3, [r8, #4]
 800adf0:	3504      	adds	r5, #4
 800adf2:	e79b      	b.n	800ad2c <__multiply+0x58>
 800adf4:	46d4      	mov	ip, sl
 800adf6:	e7b3      	b.n	800ad60 <__multiply+0x8c>
 800adf8:	46e0      	mov	r8, ip
 800adfa:	e7dd      	b.n	800adb8 <__multiply+0xe4>
 800adfc:	3e01      	subs	r6, #1
 800adfe:	e799      	b.n	800ad34 <__multiply+0x60>

0800ae00 <__pow5mult>:
 800ae00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae04:	4615      	mov	r5, r2
 800ae06:	f012 0203 	ands.w	r2, r2, #3
 800ae0a:	4606      	mov	r6, r0
 800ae0c:	460f      	mov	r7, r1
 800ae0e:	d007      	beq.n	800ae20 <__pow5mult+0x20>
 800ae10:	3a01      	subs	r2, #1
 800ae12:	4c21      	ldr	r4, [pc, #132]	; (800ae98 <__pow5mult+0x98>)
 800ae14:	2300      	movs	r3, #0
 800ae16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae1a:	f7ff fe8b 	bl	800ab34 <__multadd>
 800ae1e:	4607      	mov	r7, r0
 800ae20:	10ad      	asrs	r5, r5, #2
 800ae22:	d035      	beq.n	800ae90 <__pow5mult+0x90>
 800ae24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae26:	b93c      	cbnz	r4, 800ae38 <__pow5mult+0x38>
 800ae28:	2010      	movs	r0, #16
 800ae2a:	f7ff fe13 	bl	800aa54 <malloc>
 800ae2e:	6270      	str	r0, [r6, #36]	; 0x24
 800ae30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae34:	6004      	str	r4, [r0, #0]
 800ae36:	60c4      	str	r4, [r0, #12]
 800ae38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ae3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae40:	b94c      	cbnz	r4, 800ae56 <__pow5mult+0x56>
 800ae42:	f240 2171 	movw	r1, #625	; 0x271
 800ae46:	4630      	mov	r0, r6
 800ae48:	f7ff ff3b 	bl	800acc2 <__i2b>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae52:	4604      	mov	r4, r0
 800ae54:	6003      	str	r3, [r0, #0]
 800ae56:	f04f 0800 	mov.w	r8, #0
 800ae5a:	07eb      	lsls	r3, r5, #31
 800ae5c:	d50a      	bpl.n	800ae74 <__pow5mult+0x74>
 800ae5e:	4639      	mov	r1, r7
 800ae60:	4622      	mov	r2, r4
 800ae62:	4630      	mov	r0, r6
 800ae64:	f7ff ff36 	bl	800acd4 <__multiply>
 800ae68:	4639      	mov	r1, r7
 800ae6a:	4681      	mov	r9, r0
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	f7ff fe4a 	bl	800ab06 <_Bfree>
 800ae72:	464f      	mov	r7, r9
 800ae74:	106d      	asrs	r5, r5, #1
 800ae76:	d00b      	beq.n	800ae90 <__pow5mult+0x90>
 800ae78:	6820      	ldr	r0, [r4, #0]
 800ae7a:	b938      	cbnz	r0, 800ae8c <__pow5mult+0x8c>
 800ae7c:	4622      	mov	r2, r4
 800ae7e:	4621      	mov	r1, r4
 800ae80:	4630      	mov	r0, r6
 800ae82:	f7ff ff27 	bl	800acd4 <__multiply>
 800ae86:	6020      	str	r0, [r4, #0]
 800ae88:	f8c0 8000 	str.w	r8, [r0]
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	e7e4      	b.n	800ae5a <__pow5mult+0x5a>
 800ae90:	4638      	mov	r0, r7
 800ae92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae96:	bf00      	nop
 800ae98:	0800d750 	.word	0x0800d750

0800ae9c <__lshift>:
 800ae9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aea0:	460c      	mov	r4, r1
 800aea2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aea6:	6923      	ldr	r3, [r4, #16]
 800aea8:	6849      	ldr	r1, [r1, #4]
 800aeaa:	eb0a 0903 	add.w	r9, sl, r3
 800aeae:	68a3      	ldr	r3, [r4, #8]
 800aeb0:	4607      	mov	r7, r0
 800aeb2:	4616      	mov	r6, r2
 800aeb4:	f109 0501 	add.w	r5, r9, #1
 800aeb8:	42ab      	cmp	r3, r5
 800aeba:	db32      	blt.n	800af22 <__lshift+0x86>
 800aebc:	4638      	mov	r0, r7
 800aebe:	f7ff fdee 	bl	800aa9e <_Balloc>
 800aec2:	2300      	movs	r3, #0
 800aec4:	4680      	mov	r8, r0
 800aec6:	f100 0114 	add.w	r1, r0, #20
 800aeca:	461a      	mov	r2, r3
 800aecc:	4553      	cmp	r3, sl
 800aece:	db2b      	blt.n	800af28 <__lshift+0x8c>
 800aed0:	6920      	ldr	r0, [r4, #16]
 800aed2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aed6:	f104 0314 	add.w	r3, r4, #20
 800aeda:	f016 021f 	ands.w	r2, r6, #31
 800aede:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aee2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aee6:	d025      	beq.n	800af34 <__lshift+0x98>
 800aee8:	f1c2 0e20 	rsb	lr, r2, #32
 800aeec:	2000      	movs	r0, #0
 800aeee:	681e      	ldr	r6, [r3, #0]
 800aef0:	468a      	mov	sl, r1
 800aef2:	4096      	lsls	r6, r2
 800aef4:	4330      	orrs	r0, r6
 800aef6:	f84a 0b04 	str.w	r0, [sl], #4
 800aefa:	f853 0b04 	ldr.w	r0, [r3], #4
 800aefe:	459c      	cmp	ip, r3
 800af00:	fa20 f00e 	lsr.w	r0, r0, lr
 800af04:	d814      	bhi.n	800af30 <__lshift+0x94>
 800af06:	6048      	str	r0, [r1, #4]
 800af08:	b108      	cbz	r0, 800af0e <__lshift+0x72>
 800af0a:	f109 0502 	add.w	r5, r9, #2
 800af0e:	3d01      	subs	r5, #1
 800af10:	4638      	mov	r0, r7
 800af12:	f8c8 5010 	str.w	r5, [r8, #16]
 800af16:	4621      	mov	r1, r4
 800af18:	f7ff fdf5 	bl	800ab06 <_Bfree>
 800af1c:	4640      	mov	r0, r8
 800af1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af22:	3101      	adds	r1, #1
 800af24:	005b      	lsls	r3, r3, #1
 800af26:	e7c7      	b.n	800aeb8 <__lshift+0x1c>
 800af28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800af2c:	3301      	adds	r3, #1
 800af2e:	e7cd      	b.n	800aecc <__lshift+0x30>
 800af30:	4651      	mov	r1, sl
 800af32:	e7dc      	b.n	800aeee <__lshift+0x52>
 800af34:	3904      	subs	r1, #4
 800af36:	f853 2b04 	ldr.w	r2, [r3], #4
 800af3a:	f841 2f04 	str.w	r2, [r1, #4]!
 800af3e:	459c      	cmp	ip, r3
 800af40:	d8f9      	bhi.n	800af36 <__lshift+0x9a>
 800af42:	e7e4      	b.n	800af0e <__lshift+0x72>

0800af44 <__mcmp>:
 800af44:	6903      	ldr	r3, [r0, #16]
 800af46:	690a      	ldr	r2, [r1, #16]
 800af48:	1a9b      	subs	r3, r3, r2
 800af4a:	b530      	push	{r4, r5, lr}
 800af4c:	d10c      	bne.n	800af68 <__mcmp+0x24>
 800af4e:	0092      	lsls	r2, r2, #2
 800af50:	3014      	adds	r0, #20
 800af52:	3114      	adds	r1, #20
 800af54:	1884      	adds	r4, r0, r2
 800af56:	4411      	add	r1, r2
 800af58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af60:	4295      	cmp	r5, r2
 800af62:	d003      	beq.n	800af6c <__mcmp+0x28>
 800af64:	d305      	bcc.n	800af72 <__mcmp+0x2e>
 800af66:	2301      	movs	r3, #1
 800af68:	4618      	mov	r0, r3
 800af6a:	bd30      	pop	{r4, r5, pc}
 800af6c:	42a0      	cmp	r0, r4
 800af6e:	d3f3      	bcc.n	800af58 <__mcmp+0x14>
 800af70:	e7fa      	b.n	800af68 <__mcmp+0x24>
 800af72:	f04f 33ff 	mov.w	r3, #4294967295
 800af76:	e7f7      	b.n	800af68 <__mcmp+0x24>

0800af78 <__mdiff>:
 800af78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af7c:	460d      	mov	r5, r1
 800af7e:	4607      	mov	r7, r0
 800af80:	4611      	mov	r1, r2
 800af82:	4628      	mov	r0, r5
 800af84:	4614      	mov	r4, r2
 800af86:	f7ff ffdd 	bl	800af44 <__mcmp>
 800af8a:	1e06      	subs	r6, r0, #0
 800af8c:	d108      	bne.n	800afa0 <__mdiff+0x28>
 800af8e:	4631      	mov	r1, r6
 800af90:	4638      	mov	r0, r7
 800af92:	f7ff fd84 	bl	800aa9e <_Balloc>
 800af96:	2301      	movs	r3, #1
 800af98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800af9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa0:	bfa4      	itt	ge
 800afa2:	4623      	movge	r3, r4
 800afa4:	462c      	movge	r4, r5
 800afa6:	4638      	mov	r0, r7
 800afa8:	6861      	ldr	r1, [r4, #4]
 800afaa:	bfa6      	itte	ge
 800afac:	461d      	movge	r5, r3
 800afae:	2600      	movge	r6, #0
 800afb0:	2601      	movlt	r6, #1
 800afb2:	f7ff fd74 	bl	800aa9e <_Balloc>
 800afb6:	692b      	ldr	r3, [r5, #16]
 800afb8:	60c6      	str	r6, [r0, #12]
 800afba:	6926      	ldr	r6, [r4, #16]
 800afbc:	f105 0914 	add.w	r9, r5, #20
 800afc0:	f104 0214 	add.w	r2, r4, #20
 800afc4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800afc8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800afcc:	f100 0514 	add.w	r5, r0, #20
 800afd0:	f04f 0e00 	mov.w	lr, #0
 800afd4:	f852 ab04 	ldr.w	sl, [r2], #4
 800afd8:	f859 4b04 	ldr.w	r4, [r9], #4
 800afdc:	fa1e f18a 	uxtah	r1, lr, sl
 800afe0:	b2a3      	uxth	r3, r4
 800afe2:	1ac9      	subs	r1, r1, r3
 800afe4:	0c23      	lsrs	r3, r4, #16
 800afe6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800afea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800afee:	b289      	uxth	r1, r1
 800aff0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800aff4:	45c8      	cmp	r8, r9
 800aff6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800affa:	4694      	mov	ip, r2
 800affc:	f845 3b04 	str.w	r3, [r5], #4
 800b000:	d8e8      	bhi.n	800afd4 <__mdiff+0x5c>
 800b002:	45bc      	cmp	ip, r7
 800b004:	d304      	bcc.n	800b010 <__mdiff+0x98>
 800b006:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b00a:	b183      	cbz	r3, 800b02e <__mdiff+0xb6>
 800b00c:	6106      	str	r6, [r0, #16]
 800b00e:	e7c5      	b.n	800af9c <__mdiff+0x24>
 800b010:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b014:	fa1e f381 	uxtah	r3, lr, r1
 800b018:	141a      	asrs	r2, r3, #16
 800b01a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b01e:	b29b      	uxth	r3, r3
 800b020:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b024:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b028:	f845 3b04 	str.w	r3, [r5], #4
 800b02c:	e7e9      	b.n	800b002 <__mdiff+0x8a>
 800b02e:	3e01      	subs	r6, #1
 800b030:	e7e9      	b.n	800b006 <__mdiff+0x8e>
	...

0800b034 <__ulp>:
 800b034:	4b12      	ldr	r3, [pc, #72]	; (800b080 <__ulp+0x4c>)
 800b036:	ee10 2a90 	vmov	r2, s1
 800b03a:	401a      	ands	r2, r3
 800b03c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b040:	2b00      	cmp	r3, #0
 800b042:	dd04      	ble.n	800b04e <__ulp+0x1a>
 800b044:	2000      	movs	r0, #0
 800b046:	4619      	mov	r1, r3
 800b048:	ec41 0b10 	vmov	d0, r0, r1
 800b04c:	4770      	bx	lr
 800b04e:	425b      	negs	r3, r3
 800b050:	151b      	asrs	r3, r3, #20
 800b052:	2b13      	cmp	r3, #19
 800b054:	f04f 0000 	mov.w	r0, #0
 800b058:	f04f 0100 	mov.w	r1, #0
 800b05c:	dc04      	bgt.n	800b068 <__ulp+0x34>
 800b05e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b062:	fa42 f103 	asr.w	r1, r2, r3
 800b066:	e7ef      	b.n	800b048 <__ulp+0x14>
 800b068:	3b14      	subs	r3, #20
 800b06a:	2b1e      	cmp	r3, #30
 800b06c:	f04f 0201 	mov.w	r2, #1
 800b070:	bfda      	itte	le
 800b072:	f1c3 031f 	rsble	r3, r3, #31
 800b076:	fa02 f303 	lslle.w	r3, r2, r3
 800b07a:	4613      	movgt	r3, r2
 800b07c:	4618      	mov	r0, r3
 800b07e:	e7e3      	b.n	800b048 <__ulp+0x14>
 800b080:	7ff00000 	.word	0x7ff00000

0800b084 <__b2d>:
 800b084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b086:	6905      	ldr	r5, [r0, #16]
 800b088:	f100 0714 	add.w	r7, r0, #20
 800b08c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b090:	1f2e      	subs	r6, r5, #4
 800b092:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b096:	4620      	mov	r0, r4
 800b098:	f7ff fdc5 	bl	800ac26 <__hi0bits>
 800b09c:	f1c0 0320 	rsb	r3, r0, #32
 800b0a0:	280a      	cmp	r0, #10
 800b0a2:	600b      	str	r3, [r1, #0]
 800b0a4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b11c <__b2d+0x98>
 800b0a8:	dc14      	bgt.n	800b0d4 <__b2d+0x50>
 800b0aa:	f1c0 0e0b 	rsb	lr, r0, #11
 800b0ae:	fa24 f10e 	lsr.w	r1, r4, lr
 800b0b2:	42b7      	cmp	r7, r6
 800b0b4:	ea41 030c 	orr.w	r3, r1, ip
 800b0b8:	bf34      	ite	cc
 800b0ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b0be:	2100      	movcs	r1, #0
 800b0c0:	3015      	adds	r0, #21
 800b0c2:	fa04 f000 	lsl.w	r0, r4, r0
 800b0c6:	fa21 f10e 	lsr.w	r1, r1, lr
 800b0ca:	ea40 0201 	orr.w	r2, r0, r1
 800b0ce:	ec43 2b10 	vmov	d0, r2, r3
 800b0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0d4:	42b7      	cmp	r7, r6
 800b0d6:	bf3a      	itte	cc
 800b0d8:	f1a5 0608 	subcc.w	r6, r5, #8
 800b0dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b0e0:	2100      	movcs	r1, #0
 800b0e2:	380b      	subs	r0, #11
 800b0e4:	d015      	beq.n	800b112 <__b2d+0x8e>
 800b0e6:	4084      	lsls	r4, r0
 800b0e8:	f1c0 0520 	rsb	r5, r0, #32
 800b0ec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b0f0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b0f4:	42be      	cmp	r6, r7
 800b0f6:	fa21 fc05 	lsr.w	ip, r1, r5
 800b0fa:	ea44 030c 	orr.w	r3, r4, ip
 800b0fe:	bf8c      	ite	hi
 800b100:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b104:	2400      	movls	r4, #0
 800b106:	fa01 f000 	lsl.w	r0, r1, r0
 800b10a:	40ec      	lsrs	r4, r5
 800b10c:	ea40 0204 	orr.w	r2, r0, r4
 800b110:	e7dd      	b.n	800b0ce <__b2d+0x4a>
 800b112:	ea44 030c 	orr.w	r3, r4, ip
 800b116:	460a      	mov	r2, r1
 800b118:	e7d9      	b.n	800b0ce <__b2d+0x4a>
 800b11a:	bf00      	nop
 800b11c:	3ff00000 	.word	0x3ff00000

0800b120 <__d2b>:
 800b120:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b124:	460e      	mov	r6, r1
 800b126:	2101      	movs	r1, #1
 800b128:	ec59 8b10 	vmov	r8, r9, d0
 800b12c:	4615      	mov	r5, r2
 800b12e:	f7ff fcb6 	bl	800aa9e <_Balloc>
 800b132:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b136:	4607      	mov	r7, r0
 800b138:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b13c:	bb34      	cbnz	r4, 800b18c <__d2b+0x6c>
 800b13e:	9301      	str	r3, [sp, #4]
 800b140:	f1b8 0300 	subs.w	r3, r8, #0
 800b144:	d027      	beq.n	800b196 <__d2b+0x76>
 800b146:	a802      	add	r0, sp, #8
 800b148:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b14c:	f7ff fd8a 	bl	800ac64 <__lo0bits>
 800b150:	9900      	ldr	r1, [sp, #0]
 800b152:	b1f0      	cbz	r0, 800b192 <__d2b+0x72>
 800b154:	9a01      	ldr	r2, [sp, #4]
 800b156:	f1c0 0320 	rsb	r3, r0, #32
 800b15a:	fa02 f303 	lsl.w	r3, r2, r3
 800b15e:	430b      	orrs	r3, r1
 800b160:	40c2      	lsrs	r2, r0
 800b162:	617b      	str	r3, [r7, #20]
 800b164:	9201      	str	r2, [sp, #4]
 800b166:	9b01      	ldr	r3, [sp, #4]
 800b168:	61bb      	str	r3, [r7, #24]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	bf14      	ite	ne
 800b16e:	2102      	movne	r1, #2
 800b170:	2101      	moveq	r1, #1
 800b172:	6139      	str	r1, [r7, #16]
 800b174:	b1c4      	cbz	r4, 800b1a8 <__d2b+0x88>
 800b176:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b17a:	4404      	add	r4, r0
 800b17c:	6034      	str	r4, [r6, #0]
 800b17e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b182:	6028      	str	r0, [r5, #0]
 800b184:	4638      	mov	r0, r7
 800b186:	b003      	add	sp, #12
 800b188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b18c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b190:	e7d5      	b.n	800b13e <__d2b+0x1e>
 800b192:	6179      	str	r1, [r7, #20]
 800b194:	e7e7      	b.n	800b166 <__d2b+0x46>
 800b196:	a801      	add	r0, sp, #4
 800b198:	f7ff fd64 	bl	800ac64 <__lo0bits>
 800b19c:	9b01      	ldr	r3, [sp, #4]
 800b19e:	617b      	str	r3, [r7, #20]
 800b1a0:	2101      	movs	r1, #1
 800b1a2:	6139      	str	r1, [r7, #16]
 800b1a4:	3020      	adds	r0, #32
 800b1a6:	e7e5      	b.n	800b174 <__d2b+0x54>
 800b1a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b1ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b1b0:	6030      	str	r0, [r6, #0]
 800b1b2:	6918      	ldr	r0, [r3, #16]
 800b1b4:	f7ff fd37 	bl	800ac26 <__hi0bits>
 800b1b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b1bc:	e7e1      	b.n	800b182 <__d2b+0x62>

0800b1be <__ratio>:
 800b1be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c2:	4688      	mov	r8, r1
 800b1c4:	4669      	mov	r1, sp
 800b1c6:	4681      	mov	r9, r0
 800b1c8:	f7ff ff5c 	bl	800b084 <__b2d>
 800b1cc:	a901      	add	r1, sp, #4
 800b1ce:	4640      	mov	r0, r8
 800b1d0:	ec57 6b10 	vmov	r6, r7, d0
 800b1d4:	f7ff ff56 	bl	800b084 <__b2d>
 800b1d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b1e0:	eba3 0c02 	sub.w	ip, r3, r2
 800b1e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b1e8:	1a9b      	subs	r3, r3, r2
 800b1ea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b1ee:	ec5b ab10 	vmov	sl, fp, d0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	bfce      	itee	gt
 800b1f6:	463a      	movgt	r2, r7
 800b1f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b1fc:	465a      	movle	r2, fp
 800b1fe:	4659      	mov	r1, fp
 800b200:	463d      	mov	r5, r7
 800b202:	bfd4      	ite	le
 800b204:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b208:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b20c:	4630      	mov	r0, r6
 800b20e:	ee10 2a10 	vmov	r2, s0
 800b212:	460b      	mov	r3, r1
 800b214:	4629      	mov	r1, r5
 800b216:	f7f5 fb19 	bl	800084c <__aeabi_ddiv>
 800b21a:	ec41 0b10 	vmov	d0, r0, r1
 800b21e:	b003      	add	sp, #12
 800b220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b224 <__copybits>:
 800b224:	3901      	subs	r1, #1
 800b226:	b510      	push	{r4, lr}
 800b228:	1149      	asrs	r1, r1, #5
 800b22a:	6914      	ldr	r4, [r2, #16]
 800b22c:	3101      	adds	r1, #1
 800b22e:	f102 0314 	add.w	r3, r2, #20
 800b232:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b236:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b23a:	42a3      	cmp	r3, r4
 800b23c:	4602      	mov	r2, r0
 800b23e:	d303      	bcc.n	800b248 <__copybits+0x24>
 800b240:	2300      	movs	r3, #0
 800b242:	428a      	cmp	r2, r1
 800b244:	d305      	bcc.n	800b252 <__copybits+0x2e>
 800b246:	bd10      	pop	{r4, pc}
 800b248:	f853 2b04 	ldr.w	r2, [r3], #4
 800b24c:	f840 2b04 	str.w	r2, [r0], #4
 800b250:	e7f3      	b.n	800b23a <__copybits+0x16>
 800b252:	f842 3b04 	str.w	r3, [r2], #4
 800b256:	e7f4      	b.n	800b242 <__copybits+0x1e>

0800b258 <__any_on>:
 800b258:	f100 0214 	add.w	r2, r0, #20
 800b25c:	6900      	ldr	r0, [r0, #16]
 800b25e:	114b      	asrs	r3, r1, #5
 800b260:	4298      	cmp	r0, r3
 800b262:	b510      	push	{r4, lr}
 800b264:	db11      	blt.n	800b28a <__any_on+0x32>
 800b266:	dd0a      	ble.n	800b27e <__any_on+0x26>
 800b268:	f011 011f 	ands.w	r1, r1, #31
 800b26c:	d007      	beq.n	800b27e <__any_on+0x26>
 800b26e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b272:	fa24 f001 	lsr.w	r0, r4, r1
 800b276:	fa00 f101 	lsl.w	r1, r0, r1
 800b27a:	428c      	cmp	r4, r1
 800b27c:	d10b      	bne.n	800b296 <__any_on+0x3e>
 800b27e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b282:	4293      	cmp	r3, r2
 800b284:	d803      	bhi.n	800b28e <__any_on+0x36>
 800b286:	2000      	movs	r0, #0
 800b288:	bd10      	pop	{r4, pc}
 800b28a:	4603      	mov	r3, r0
 800b28c:	e7f7      	b.n	800b27e <__any_on+0x26>
 800b28e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b292:	2900      	cmp	r1, #0
 800b294:	d0f5      	beq.n	800b282 <__any_on+0x2a>
 800b296:	2001      	movs	r0, #1
 800b298:	e7f6      	b.n	800b288 <__any_on+0x30>

0800b29a <_calloc_r>:
 800b29a:	b538      	push	{r3, r4, r5, lr}
 800b29c:	fb02 f401 	mul.w	r4, r2, r1
 800b2a0:	4621      	mov	r1, r4
 800b2a2:	f000 f857 	bl	800b354 <_malloc_r>
 800b2a6:	4605      	mov	r5, r0
 800b2a8:	b118      	cbz	r0, 800b2b2 <_calloc_r+0x18>
 800b2aa:	4622      	mov	r2, r4
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	f7fc ffaf 	bl	8008210 <memset>
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b2b8 <_free_r>:
 800b2b8:	b538      	push	{r3, r4, r5, lr}
 800b2ba:	4605      	mov	r5, r0
 800b2bc:	2900      	cmp	r1, #0
 800b2be:	d045      	beq.n	800b34c <_free_r+0x94>
 800b2c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2c4:	1f0c      	subs	r4, r1, #4
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	bfb8      	it	lt
 800b2ca:	18e4      	addlt	r4, r4, r3
 800b2cc:	f000 fa36 	bl	800b73c <__malloc_lock>
 800b2d0:	4a1f      	ldr	r2, [pc, #124]	; (800b350 <_free_r+0x98>)
 800b2d2:	6813      	ldr	r3, [r2, #0]
 800b2d4:	4610      	mov	r0, r2
 800b2d6:	b933      	cbnz	r3, 800b2e6 <_free_r+0x2e>
 800b2d8:	6063      	str	r3, [r4, #4]
 800b2da:	6014      	str	r4, [r2, #0]
 800b2dc:	4628      	mov	r0, r5
 800b2de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2e2:	f000 ba2c 	b.w	800b73e <__malloc_unlock>
 800b2e6:	42a3      	cmp	r3, r4
 800b2e8:	d90c      	bls.n	800b304 <_free_r+0x4c>
 800b2ea:	6821      	ldr	r1, [r4, #0]
 800b2ec:	1862      	adds	r2, r4, r1
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	bf04      	itt	eq
 800b2f2:	681a      	ldreq	r2, [r3, #0]
 800b2f4:	685b      	ldreq	r3, [r3, #4]
 800b2f6:	6063      	str	r3, [r4, #4]
 800b2f8:	bf04      	itt	eq
 800b2fa:	1852      	addeq	r2, r2, r1
 800b2fc:	6022      	streq	r2, [r4, #0]
 800b2fe:	6004      	str	r4, [r0, #0]
 800b300:	e7ec      	b.n	800b2dc <_free_r+0x24>
 800b302:	4613      	mov	r3, r2
 800b304:	685a      	ldr	r2, [r3, #4]
 800b306:	b10a      	cbz	r2, 800b30c <_free_r+0x54>
 800b308:	42a2      	cmp	r2, r4
 800b30a:	d9fa      	bls.n	800b302 <_free_r+0x4a>
 800b30c:	6819      	ldr	r1, [r3, #0]
 800b30e:	1858      	adds	r0, r3, r1
 800b310:	42a0      	cmp	r0, r4
 800b312:	d10b      	bne.n	800b32c <_free_r+0x74>
 800b314:	6820      	ldr	r0, [r4, #0]
 800b316:	4401      	add	r1, r0
 800b318:	1858      	adds	r0, r3, r1
 800b31a:	4282      	cmp	r2, r0
 800b31c:	6019      	str	r1, [r3, #0]
 800b31e:	d1dd      	bne.n	800b2dc <_free_r+0x24>
 800b320:	6810      	ldr	r0, [r2, #0]
 800b322:	6852      	ldr	r2, [r2, #4]
 800b324:	605a      	str	r2, [r3, #4]
 800b326:	4401      	add	r1, r0
 800b328:	6019      	str	r1, [r3, #0]
 800b32a:	e7d7      	b.n	800b2dc <_free_r+0x24>
 800b32c:	d902      	bls.n	800b334 <_free_r+0x7c>
 800b32e:	230c      	movs	r3, #12
 800b330:	602b      	str	r3, [r5, #0]
 800b332:	e7d3      	b.n	800b2dc <_free_r+0x24>
 800b334:	6820      	ldr	r0, [r4, #0]
 800b336:	1821      	adds	r1, r4, r0
 800b338:	428a      	cmp	r2, r1
 800b33a:	bf04      	itt	eq
 800b33c:	6811      	ldreq	r1, [r2, #0]
 800b33e:	6852      	ldreq	r2, [r2, #4]
 800b340:	6062      	str	r2, [r4, #4]
 800b342:	bf04      	itt	eq
 800b344:	1809      	addeq	r1, r1, r0
 800b346:	6021      	streq	r1, [r4, #0]
 800b348:	605c      	str	r4, [r3, #4]
 800b34a:	e7c7      	b.n	800b2dc <_free_r+0x24>
 800b34c:	bd38      	pop	{r3, r4, r5, pc}
 800b34e:	bf00      	nop
 800b350:	20000474 	.word	0x20000474

0800b354 <_malloc_r>:
 800b354:	b570      	push	{r4, r5, r6, lr}
 800b356:	1ccd      	adds	r5, r1, #3
 800b358:	f025 0503 	bic.w	r5, r5, #3
 800b35c:	3508      	adds	r5, #8
 800b35e:	2d0c      	cmp	r5, #12
 800b360:	bf38      	it	cc
 800b362:	250c      	movcc	r5, #12
 800b364:	2d00      	cmp	r5, #0
 800b366:	4606      	mov	r6, r0
 800b368:	db01      	blt.n	800b36e <_malloc_r+0x1a>
 800b36a:	42a9      	cmp	r1, r5
 800b36c:	d903      	bls.n	800b376 <_malloc_r+0x22>
 800b36e:	230c      	movs	r3, #12
 800b370:	6033      	str	r3, [r6, #0]
 800b372:	2000      	movs	r0, #0
 800b374:	bd70      	pop	{r4, r5, r6, pc}
 800b376:	f000 f9e1 	bl	800b73c <__malloc_lock>
 800b37a:	4a21      	ldr	r2, [pc, #132]	; (800b400 <_malloc_r+0xac>)
 800b37c:	6814      	ldr	r4, [r2, #0]
 800b37e:	4621      	mov	r1, r4
 800b380:	b991      	cbnz	r1, 800b3a8 <_malloc_r+0x54>
 800b382:	4c20      	ldr	r4, [pc, #128]	; (800b404 <_malloc_r+0xb0>)
 800b384:	6823      	ldr	r3, [r4, #0]
 800b386:	b91b      	cbnz	r3, 800b390 <_malloc_r+0x3c>
 800b388:	4630      	mov	r0, r6
 800b38a:	f000 f98f 	bl	800b6ac <_sbrk_r>
 800b38e:	6020      	str	r0, [r4, #0]
 800b390:	4629      	mov	r1, r5
 800b392:	4630      	mov	r0, r6
 800b394:	f000 f98a 	bl	800b6ac <_sbrk_r>
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	d124      	bne.n	800b3e6 <_malloc_r+0x92>
 800b39c:	230c      	movs	r3, #12
 800b39e:	6033      	str	r3, [r6, #0]
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	f000 f9cc 	bl	800b73e <__malloc_unlock>
 800b3a6:	e7e4      	b.n	800b372 <_malloc_r+0x1e>
 800b3a8:	680b      	ldr	r3, [r1, #0]
 800b3aa:	1b5b      	subs	r3, r3, r5
 800b3ac:	d418      	bmi.n	800b3e0 <_malloc_r+0x8c>
 800b3ae:	2b0b      	cmp	r3, #11
 800b3b0:	d90f      	bls.n	800b3d2 <_malloc_r+0x7e>
 800b3b2:	600b      	str	r3, [r1, #0]
 800b3b4:	50cd      	str	r5, [r1, r3]
 800b3b6:	18cc      	adds	r4, r1, r3
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	f000 f9c0 	bl	800b73e <__malloc_unlock>
 800b3be:	f104 000b 	add.w	r0, r4, #11
 800b3c2:	1d23      	adds	r3, r4, #4
 800b3c4:	f020 0007 	bic.w	r0, r0, #7
 800b3c8:	1ac3      	subs	r3, r0, r3
 800b3ca:	d0d3      	beq.n	800b374 <_malloc_r+0x20>
 800b3cc:	425a      	negs	r2, r3
 800b3ce:	50e2      	str	r2, [r4, r3]
 800b3d0:	e7d0      	b.n	800b374 <_malloc_r+0x20>
 800b3d2:	428c      	cmp	r4, r1
 800b3d4:	684b      	ldr	r3, [r1, #4]
 800b3d6:	bf16      	itet	ne
 800b3d8:	6063      	strne	r3, [r4, #4]
 800b3da:	6013      	streq	r3, [r2, #0]
 800b3dc:	460c      	movne	r4, r1
 800b3de:	e7eb      	b.n	800b3b8 <_malloc_r+0x64>
 800b3e0:	460c      	mov	r4, r1
 800b3e2:	6849      	ldr	r1, [r1, #4]
 800b3e4:	e7cc      	b.n	800b380 <_malloc_r+0x2c>
 800b3e6:	1cc4      	adds	r4, r0, #3
 800b3e8:	f024 0403 	bic.w	r4, r4, #3
 800b3ec:	42a0      	cmp	r0, r4
 800b3ee:	d005      	beq.n	800b3fc <_malloc_r+0xa8>
 800b3f0:	1a21      	subs	r1, r4, r0
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f000 f95a 	bl	800b6ac <_sbrk_r>
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	d0cf      	beq.n	800b39c <_malloc_r+0x48>
 800b3fc:	6025      	str	r5, [r4, #0]
 800b3fe:	e7db      	b.n	800b3b8 <_malloc_r+0x64>
 800b400:	20000474 	.word	0x20000474
 800b404:	20000478 	.word	0x20000478

0800b408 <__ssputs_r>:
 800b408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b40c:	688e      	ldr	r6, [r1, #8]
 800b40e:	429e      	cmp	r6, r3
 800b410:	4682      	mov	sl, r0
 800b412:	460c      	mov	r4, r1
 800b414:	4690      	mov	r8, r2
 800b416:	4699      	mov	r9, r3
 800b418:	d837      	bhi.n	800b48a <__ssputs_r+0x82>
 800b41a:	898a      	ldrh	r2, [r1, #12]
 800b41c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b420:	d031      	beq.n	800b486 <__ssputs_r+0x7e>
 800b422:	6825      	ldr	r5, [r4, #0]
 800b424:	6909      	ldr	r1, [r1, #16]
 800b426:	1a6f      	subs	r7, r5, r1
 800b428:	6965      	ldr	r5, [r4, #20]
 800b42a:	2302      	movs	r3, #2
 800b42c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b430:	fb95 f5f3 	sdiv	r5, r5, r3
 800b434:	f109 0301 	add.w	r3, r9, #1
 800b438:	443b      	add	r3, r7
 800b43a:	429d      	cmp	r5, r3
 800b43c:	bf38      	it	cc
 800b43e:	461d      	movcc	r5, r3
 800b440:	0553      	lsls	r3, r2, #21
 800b442:	d530      	bpl.n	800b4a6 <__ssputs_r+0x9e>
 800b444:	4629      	mov	r1, r5
 800b446:	f7ff ff85 	bl	800b354 <_malloc_r>
 800b44a:	4606      	mov	r6, r0
 800b44c:	b950      	cbnz	r0, 800b464 <__ssputs_r+0x5c>
 800b44e:	230c      	movs	r3, #12
 800b450:	f8ca 3000 	str.w	r3, [sl]
 800b454:	89a3      	ldrh	r3, [r4, #12]
 800b456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b45a:	81a3      	strh	r3, [r4, #12]
 800b45c:	f04f 30ff 	mov.w	r0, #4294967295
 800b460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b464:	463a      	mov	r2, r7
 800b466:	6921      	ldr	r1, [r4, #16]
 800b468:	f7ff fb0e 	bl	800aa88 <memcpy>
 800b46c:	89a3      	ldrh	r3, [r4, #12]
 800b46e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b476:	81a3      	strh	r3, [r4, #12]
 800b478:	6126      	str	r6, [r4, #16]
 800b47a:	6165      	str	r5, [r4, #20]
 800b47c:	443e      	add	r6, r7
 800b47e:	1bed      	subs	r5, r5, r7
 800b480:	6026      	str	r6, [r4, #0]
 800b482:	60a5      	str	r5, [r4, #8]
 800b484:	464e      	mov	r6, r9
 800b486:	454e      	cmp	r6, r9
 800b488:	d900      	bls.n	800b48c <__ssputs_r+0x84>
 800b48a:	464e      	mov	r6, r9
 800b48c:	4632      	mov	r2, r6
 800b48e:	4641      	mov	r1, r8
 800b490:	6820      	ldr	r0, [r4, #0]
 800b492:	f000 f93a 	bl	800b70a <memmove>
 800b496:	68a3      	ldr	r3, [r4, #8]
 800b498:	1b9b      	subs	r3, r3, r6
 800b49a:	60a3      	str	r3, [r4, #8]
 800b49c:	6823      	ldr	r3, [r4, #0]
 800b49e:	441e      	add	r6, r3
 800b4a0:	6026      	str	r6, [r4, #0]
 800b4a2:	2000      	movs	r0, #0
 800b4a4:	e7dc      	b.n	800b460 <__ssputs_r+0x58>
 800b4a6:	462a      	mov	r2, r5
 800b4a8:	f000 f94a 	bl	800b740 <_realloc_r>
 800b4ac:	4606      	mov	r6, r0
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d1e2      	bne.n	800b478 <__ssputs_r+0x70>
 800b4b2:	6921      	ldr	r1, [r4, #16]
 800b4b4:	4650      	mov	r0, sl
 800b4b6:	f7ff feff 	bl	800b2b8 <_free_r>
 800b4ba:	e7c8      	b.n	800b44e <__ssputs_r+0x46>

0800b4bc <_svfiprintf_r>:
 800b4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c0:	461d      	mov	r5, r3
 800b4c2:	898b      	ldrh	r3, [r1, #12]
 800b4c4:	061f      	lsls	r7, r3, #24
 800b4c6:	b09d      	sub	sp, #116	; 0x74
 800b4c8:	4680      	mov	r8, r0
 800b4ca:	460c      	mov	r4, r1
 800b4cc:	4616      	mov	r6, r2
 800b4ce:	d50f      	bpl.n	800b4f0 <_svfiprintf_r+0x34>
 800b4d0:	690b      	ldr	r3, [r1, #16]
 800b4d2:	b96b      	cbnz	r3, 800b4f0 <_svfiprintf_r+0x34>
 800b4d4:	2140      	movs	r1, #64	; 0x40
 800b4d6:	f7ff ff3d 	bl	800b354 <_malloc_r>
 800b4da:	6020      	str	r0, [r4, #0]
 800b4dc:	6120      	str	r0, [r4, #16]
 800b4de:	b928      	cbnz	r0, 800b4ec <_svfiprintf_r+0x30>
 800b4e0:	230c      	movs	r3, #12
 800b4e2:	f8c8 3000 	str.w	r3, [r8]
 800b4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ea:	e0c8      	b.n	800b67e <_svfiprintf_r+0x1c2>
 800b4ec:	2340      	movs	r3, #64	; 0x40
 800b4ee:	6163      	str	r3, [r4, #20]
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b4f4:	2320      	movs	r3, #32
 800b4f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4fa:	2330      	movs	r3, #48	; 0x30
 800b4fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b500:	9503      	str	r5, [sp, #12]
 800b502:	f04f 0b01 	mov.w	fp, #1
 800b506:	4637      	mov	r7, r6
 800b508:	463d      	mov	r5, r7
 800b50a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b50e:	b10b      	cbz	r3, 800b514 <_svfiprintf_r+0x58>
 800b510:	2b25      	cmp	r3, #37	; 0x25
 800b512:	d13e      	bne.n	800b592 <_svfiprintf_r+0xd6>
 800b514:	ebb7 0a06 	subs.w	sl, r7, r6
 800b518:	d00b      	beq.n	800b532 <_svfiprintf_r+0x76>
 800b51a:	4653      	mov	r3, sl
 800b51c:	4632      	mov	r2, r6
 800b51e:	4621      	mov	r1, r4
 800b520:	4640      	mov	r0, r8
 800b522:	f7ff ff71 	bl	800b408 <__ssputs_r>
 800b526:	3001      	adds	r0, #1
 800b528:	f000 80a4 	beq.w	800b674 <_svfiprintf_r+0x1b8>
 800b52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52e:	4453      	add	r3, sl
 800b530:	9309      	str	r3, [sp, #36]	; 0x24
 800b532:	783b      	ldrb	r3, [r7, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	f000 809d 	beq.w	800b674 <_svfiprintf_r+0x1b8>
 800b53a:	2300      	movs	r3, #0
 800b53c:	f04f 32ff 	mov.w	r2, #4294967295
 800b540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b544:	9304      	str	r3, [sp, #16]
 800b546:	9307      	str	r3, [sp, #28]
 800b548:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b54c:	931a      	str	r3, [sp, #104]	; 0x68
 800b54e:	462f      	mov	r7, r5
 800b550:	2205      	movs	r2, #5
 800b552:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b556:	4850      	ldr	r0, [pc, #320]	; (800b698 <_svfiprintf_r+0x1dc>)
 800b558:	f7f4 fe42 	bl	80001e0 <memchr>
 800b55c:	9b04      	ldr	r3, [sp, #16]
 800b55e:	b9d0      	cbnz	r0, 800b596 <_svfiprintf_r+0xda>
 800b560:	06d9      	lsls	r1, r3, #27
 800b562:	bf44      	itt	mi
 800b564:	2220      	movmi	r2, #32
 800b566:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b56a:	071a      	lsls	r2, r3, #28
 800b56c:	bf44      	itt	mi
 800b56e:	222b      	movmi	r2, #43	; 0x2b
 800b570:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b574:	782a      	ldrb	r2, [r5, #0]
 800b576:	2a2a      	cmp	r2, #42	; 0x2a
 800b578:	d015      	beq.n	800b5a6 <_svfiprintf_r+0xea>
 800b57a:	9a07      	ldr	r2, [sp, #28]
 800b57c:	462f      	mov	r7, r5
 800b57e:	2000      	movs	r0, #0
 800b580:	250a      	movs	r5, #10
 800b582:	4639      	mov	r1, r7
 800b584:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b588:	3b30      	subs	r3, #48	; 0x30
 800b58a:	2b09      	cmp	r3, #9
 800b58c:	d94d      	bls.n	800b62a <_svfiprintf_r+0x16e>
 800b58e:	b1b8      	cbz	r0, 800b5c0 <_svfiprintf_r+0x104>
 800b590:	e00f      	b.n	800b5b2 <_svfiprintf_r+0xf6>
 800b592:	462f      	mov	r7, r5
 800b594:	e7b8      	b.n	800b508 <_svfiprintf_r+0x4c>
 800b596:	4a40      	ldr	r2, [pc, #256]	; (800b698 <_svfiprintf_r+0x1dc>)
 800b598:	1a80      	subs	r0, r0, r2
 800b59a:	fa0b f000 	lsl.w	r0, fp, r0
 800b59e:	4318      	orrs	r0, r3
 800b5a0:	9004      	str	r0, [sp, #16]
 800b5a2:	463d      	mov	r5, r7
 800b5a4:	e7d3      	b.n	800b54e <_svfiprintf_r+0x92>
 800b5a6:	9a03      	ldr	r2, [sp, #12]
 800b5a8:	1d11      	adds	r1, r2, #4
 800b5aa:	6812      	ldr	r2, [r2, #0]
 800b5ac:	9103      	str	r1, [sp, #12]
 800b5ae:	2a00      	cmp	r2, #0
 800b5b0:	db01      	blt.n	800b5b6 <_svfiprintf_r+0xfa>
 800b5b2:	9207      	str	r2, [sp, #28]
 800b5b4:	e004      	b.n	800b5c0 <_svfiprintf_r+0x104>
 800b5b6:	4252      	negs	r2, r2
 800b5b8:	f043 0302 	orr.w	r3, r3, #2
 800b5bc:	9207      	str	r2, [sp, #28]
 800b5be:	9304      	str	r3, [sp, #16]
 800b5c0:	783b      	ldrb	r3, [r7, #0]
 800b5c2:	2b2e      	cmp	r3, #46	; 0x2e
 800b5c4:	d10c      	bne.n	800b5e0 <_svfiprintf_r+0x124>
 800b5c6:	787b      	ldrb	r3, [r7, #1]
 800b5c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b5ca:	d133      	bne.n	800b634 <_svfiprintf_r+0x178>
 800b5cc:	9b03      	ldr	r3, [sp, #12]
 800b5ce:	1d1a      	adds	r2, r3, #4
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	9203      	str	r2, [sp, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	bfb8      	it	lt
 800b5d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5dc:	3702      	adds	r7, #2
 800b5de:	9305      	str	r3, [sp, #20]
 800b5e0:	4d2e      	ldr	r5, [pc, #184]	; (800b69c <_svfiprintf_r+0x1e0>)
 800b5e2:	7839      	ldrb	r1, [r7, #0]
 800b5e4:	2203      	movs	r2, #3
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	f7f4 fdfa 	bl	80001e0 <memchr>
 800b5ec:	b138      	cbz	r0, 800b5fe <_svfiprintf_r+0x142>
 800b5ee:	2340      	movs	r3, #64	; 0x40
 800b5f0:	1b40      	subs	r0, r0, r5
 800b5f2:	fa03 f000 	lsl.w	r0, r3, r0
 800b5f6:	9b04      	ldr	r3, [sp, #16]
 800b5f8:	4303      	orrs	r3, r0
 800b5fa:	3701      	adds	r7, #1
 800b5fc:	9304      	str	r3, [sp, #16]
 800b5fe:	7839      	ldrb	r1, [r7, #0]
 800b600:	4827      	ldr	r0, [pc, #156]	; (800b6a0 <_svfiprintf_r+0x1e4>)
 800b602:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b606:	2206      	movs	r2, #6
 800b608:	1c7e      	adds	r6, r7, #1
 800b60a:	f7f4 fde9 	bl	80001e0 <memchr>
 800b60e:	2800      	cmp	r0, #0
 800b610:	d038      	beq.n	800b684 <_svfiprintf_r+0x1c8>
 800b612:	4b24      	ldr	r3, [pc, #144]	; (800b6a4 <_svfiprintf_r+0x1e8>)
 800b614:	bb13      	cbnz	r3, 800b65c <_svfiprintf_r+0x1a0>
 800b616:	9b03      	ldr	r3, [sp, #12]
 800b618:	3307      	adds	r3, #7
 800b61a:	f023 0307 	bic.w	r3, r3, #7
 800b61e:	3308      	adds	r3, #8
 800b620:	9303      	str	r3, [sp, #12]
 800b622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b624:	444b      	add	r3, r9
 800b626:	9309      	str	r3, [sp, #36]	; 0x24
 800b628:	e76d      	b.n	800b506 <_svfiprintf_r+0x4a>
 800b62a:	fb05 3202 	mla	r2, r5, r2, r3
 800b62e:	2001      	movs	r0, #1
 800b630:	460f      	mov	r7, r1
 800b632:	e7a6      	b.n	800b582 <_svfiprintf_r+0xc6>
 800b634:	2300      	movs	r3, #0
 800b636:	3701      	adds	r7, #1
 800b638:	9305      	str	r3, [sp, #20]
 800b63a:	4619      	mov	r1, r3
 800b63c:	250a      	movs	r5, #10
 800b63e:	4638      	mov	r0, r7
 800b640:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b644:	3a30      	subs	r2, #48	; 0x30
 800b646:	2a09      	cmp	r2, #9
 800b648:	d903      	bls.n	800b652 <_svfiprintf_r+0x196>
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d0c8      	beq.n	800b5e0 <_svfiprintf_r+0x124>
 800b64e:	9105      	str	r1, [sp, #20]
 800b650:	e7c6      	b.n	800b5e0 <_svfiprintf_r+0x124>
 800b652:	fb05 2101 	mla	r1, r5, r1, r2
 800b656:	2301      	movs	r3, #1
 800b658:	4607      	mov	r7, r0
 800b65a:	e7f0      	b.n	800b63e <_svfiprintf_r+0x182>
 800b65c:	ab03      	add	r3, sp, #12
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	4622      	mov	r2, r4
 800b662:	4b11      	ldr	r3, [pc, #68]	; (800b6a8 <_svfiprintf_r+0x1ec>)
 800b664:	a904      	add	r1, sp, #16
 800b666:	4640      	mov	r0, r8
 800b668:	f7fc fe6e 	bl	8008348 <_printf_float>
 800b66c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b670:	4681      	mov	r9, r0
 800b672:	d1d6      	bne.n	800b622 <_svfiprintf_r+0x166>
 800b674:	89a3      	ldrh	r3, [r4, #12]
 800b676:	065b      	lsls	r3, r3, #25
 800b678:	f53f af35 	bmi.w	800b4e6 <_svfiprintf_r+0x2a>
 800b67c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b67e:	b01d      	add	sp, #116	; 0x74
 800b680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b684:	ab03      	add	r3, sp, #12
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	4622      	mov	r2, r4
 800b68a:	4b07      	ldr	r3, [pc, #28]	; (800b6a8 <_svfiprintf_r+0x1ec>)
 800b68c:	a904      	add	r1, sp, #16
 800b68e:	4640      	mov	r0, r8
 800b690:	f7fd f910 	bl	80088b4 <_printf_i>
 800b694:	e7ea      	b.n	800b66c <_svfiprintf_r+0x1b0>
 800b696:	bf00      	nop
 800b698:	0800d75c 	.word	0x0800d75c
 800b69c:	0800d762 	.word	0x0800d762
 800b6a0:	0800d766 	.word	0x0800d766
 800b6a4:	08008349 	.word	0x08008349
 800b6a8:	0800b409 	.word	0x0800b409

0800b6ac <_sbrk_r>:
 800b6ac:	b538      	push	{r3, r4, r5, lr}
 800b6ae:	4c06      	ldr	r4, [pc, #24]	; (800b6c8 <_sbrk_r+0x1c>)
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	4605      	mov	r5, r0
 800b6b4:	4608      	mov	r0, r1
 800b6b6:	6023      	str	r3, [r4, #0]
 800b6b8:	f7f8 f85a 	bl	8003770 <_sbrk>
 800b6bc:	1c43      	adds	r3, r0, #1
 800b6be:	d102      	bne.n	800b6c6 <_sbrk_r+0x1a>
 800b6c0:	6823      	ldr	r3, [r4, #0]
 800b6c2:	b103      	cbz	r3, 800b6c6 <_sbrk_r+0x1a>
 800b6c4:	602b      	str	r3, [r5, #0]
 800b6c6:	bd38      	pop	{r3, r4, r5, pc}
 800b6c8:	200006e0 	.word	0x200006e0

0800b6cc <strncmp>:
 800b6cc:	b510      	push	{r4, lr}
 800b6ce:	b16a      	cbz	r2, 800b6ec <strncmp+0x20>
 800b6d0:	3901      	subs	r1, #1
 800b6d2:	1884      	adds	r4, r0, r2
 800b6d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b6d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d103      	bne.n	800b6e8 <strncmp+0x1c>
 800b6e0:	42a0      	cmp	r0, r4
 800b6e2:	d001      	beq.n	800b6e8 <strncmp+0x1c>
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1f5      	bne.n	800b6d4 <strncmp+0x8>
 800b6e8:	1a98      	subs	r0, r3, r2
 800b6ea:	bd10      	pop	{r4, pc}
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	e7fc      	b.n	800b6ea <strncmp+0x1e>

0800b6f0 <__ascii_wctomb>:
 800b6f0:	b149      	cbz	r1, 800b706 <__ascii_wctomb+0x16>
 800b6f2:	2aff      	cmp	r2, #255	; 0xff
 800b6f4:	bf85      	ittet	hi
 800b6f6:	238a      	movhi	r3, #138	; 0x8a
 800b6f8:	6003      	strhi	r3, [r0, #0]
 800b6fa:	700a      	strbls	r2, [r1, #0]
 800b6fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800b700:	bf98      	it	ls
 800b702:	2001      	movls	r0, #1
 800b704:	4770      	bx	lr
 800b706:	4608      	mov	r0, r1
 800b708:	4770      	bx	lr

0800b70a <memmove>:
 800b70a:	4288      	cmp	r0, r1
 800b70c:	b510      	push	{r4, lr}
 800b70e:	eb01 0302 	add.w	r3, r1, r2
 800b712:	d807      	bhi.n	800b724 <memmove+0x1a>
 800b714:	1e42      	subs	r2, r0, #1
 800b716:	4299      	cmp	r1, r3
 800b718:	d00a      	beq.n	800b730 <memmove+0x26>
 800b71a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b71e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b722:	e7f8      	b.n	800b716 <memmove+0xc>
 800b724:	4283      	cmp	r3, r0
 800b726:	d9f5      	bls.n	800b714 <memmove+0xa>
 800b728:	1881      	adds	r1, r0, r2
 800b72a:	1ad2      	subs	r2, r2, r3
 800b72c:	42d3      	cmn	r3, r2
 800b72e:	d100      	bne.n	800b732 <memmove+0x28>
 800b730:	bd10      	pop	{r4, pc}
 800b732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b736:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b73a:	e7f7      	b.n	800b72c <memmove+0x22>

0800b73c <__malloc_lock>:
 800b73c:	4770      	bx	lr

0800b73e <__malloc_unlock>:
 800b73e:	4770      	bx	lr

0800b740 <_realloc_r>:
 800b740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b742:	4607      	mov	r7, r0
 800b744:	4614      	mov	r4, r2
 800b746:	460e      	mov	r6, r1
 800b748:	b921      	cbnz	r1, 800b754 <_realloc_r+0x14>
 800b74a:	4611      	mov	r1, r2
 800b74c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b750:	f7ff be00 	b.w	800b354 <_malloc_r>
 800b754:	b922      	cbnz	r2, 800b760 <_realloc_r+0x20>
 800b756:	f7ff fdaf 	bl	800b2b8 <_free_r>
 800b75a:	4625      	mov	r5, r4
 800b75c:	4628      	mov	r0, r5
 800b75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b760:	f000 f814 	bl	800b78c <_malloc_usable_size_r>
 800b764:	42a0      	cmp	r0, r4
 800b766:	d20f      	bcs.n	800b788 <_realloc_r+0x48>
 800b768:	4621      	mov	r1, r4
 800b76a:	4638      	mov	r0, r7
 800b76c:	f7ff fdf2 	bl	800b354 <_malloc_r>
 800b770:	4605      	mov	r5, r0
 800b772:	2800      	cmp	r0, #0
 800b774:	d0f2      	beq.n	800b75c <_realloc_r+0x1c>
 800b776:	4631      	mov	r1, r6
 800b778:	4622      	mov	r2, r4
 800b77a:	f7ff f985 	bl	800aa88 <memcpy>
 800b77e:	4631      	mov	r1, r6
 800b780:	4638      	mov	r0, r7
 800b782:	f7ff fd99 	bl	800b2b8 <_free_r>
 800b786:	e7e9      	b.n	800b75c <_realloc_r+0x1c>
 800b788:	4635      	mov	r5, r6
 800b78a:	e7e7      	b.n	800b75c <_realloc_r+0x1c>

0800b78c <_malloc_usable_size_r>:
 800b78c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b790:	1f18      	subs	r0, r3, #4
 800b792:	2b00      	cmp	r3, #0
 800b794:	bfbc      	itt	lt
 800b796:	580b      	ldrlt	r3, [r1, r0]
 800b798:	18c0      	addlt	r0, r0, r3
 800b79a:	4770      	bx	lr
 800b79c:	0000      	movs	r0, r0
	...

0800b7a0 <cos>:
 800b7a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7a2:	ec51 0b10 	vmov	r0, r1, d0
 800b7a6:	4a1e      	ldr	r2, [pc, #120]	; (800b820 <cos+0x80>)
 800b7a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	dc06      	bgt.n	800b7be <cos+0x1e>
 800b7b0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800b818 <cos+0x78>
 800b7b4:	f000 fd10 	bl	800c1d8 <__kernel_cos>
 800b7b8:	ec51 0b10 	vmov	r0, r1, d0
 800b7bc:	e007      	b.n	800b7ce <cos+0x2e>
 800b7be:	4a19      	ldr	r2, [pc, #100]	; (800b824 <cos+0x84>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	dd09      	ble.n	800b7d8 <cos+0x38>
 800b7c4:	ee10 2a10 	vmov	r2, s0
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	f7f4 fd5d 	bl	8000288 <__aeabi_dsub>
 800b7ce:	ec41 0b10 	vmov	d0, r0, r1
 800b7d2:	b005      	add	sp, #20
 800b7d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7d8:	4668      	mov	r0, sp
 800b7da:	f000 f9ad 	bl	800bb38 <__ieee754_rem_pio2>
 800b7de:	f000 0003 	and.w	r0, r0, #3
 800b7e2:	2801      	cmp	r0, #1
 800b7e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b7e8:	ed9d 0b00 	vldr	d0, [sp]
 800b7ec:	d007      	beq.n	800b7fe <cos+0x5e>
 800b7ee:	2802      	cmp	r0, #2
 800b7f0:	d00e      	beq.n	800b810 <cos+0x70>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	d0de      	beq.n	800b7b4 <cos+0x14>
 800b7f6:	2001      	movs	r0, #1
 800b7f8:	f001 f8f6 	bl	800c9e8 <__kernel_sin>
 800b7fc:	e7dc      	b.n	800b7b8 <cos+0x18>
 800b7fe:	f001 f8f3 	bl	800c9e8 <__kernel_sin>
 800b802:	ec53 2b10 	vmov	r2, r3, d0
 800b806:	ee10 0a10 	vmov	r0, s0
 800b80a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b80e:	e7de      	b.n	800b7ce <cos+0x2e>
 800b810:	f000 fce2 	bl	800c1d8 <__kernel_cos>
 800b814:	e7f5      	b.n	800b802 <cos+0x62>
 800b816:	bf00      	nop
	...
 800b820:	3fe921fb 	.word	0x3fe921fb
 800b824:	7fefffff 	.word	0x7fefffff

0800b828 <sin>:
 800b828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b82a:	ec51 0b10 	vmov	r0, r1, d0
 800b82e:	4a20      	ldr	r2, [pc, #128]	; (800b8b0 <sin+0x88>)
 800b830:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b834:	4293      	cmp	r3, r2
 800b836:	dc07      	bgt.n	800b848 <sin+0x20>
 800b838:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800b8a8 <sin+0x80>
 800b83c:	2000      	movs	r0, #0
 800b83e:	f001 f8d3 	bl	800c9e8 <__kernel_sin>
 800b842:	ec51 0b10 	vmov	r0, r1, d0
 800b846:	e007      	b.n	800b858 <sin+0x30>
 800b848:	4a1a      	ldr	r2, [pc, #104]	; (800b8b4 <sin+0x8c>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	dd09      	ble.n	800b862 <sin+0x3a>
 800b84e:	ee10 2a10 	vmov	r2, s0
 800b852:	460b      	mov	r3, r1
 800b854:	f7f4 fd18 	bl	8000288 <__aeabi_dsub>
 800b858:	ec41 0b10 	vmov	d0, r0, r1
 800b85c:	b005      	add	sp, #20
 800b85e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b862:	4668      	mov	r0, sp
 800b864:	f000 f968 	bl	800bb38 <__ieee754_rem_pio2>
 800b868:	f000 0003 	and.w	r0, r0, #3
 800b86c:	2801      	cmp	r0, #1
 800b86e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b872:	ed9d 0b00 	vldr	d0, [sp]
 800b876:	d004      	beq.n	800b882 <sin+0x5a>
 800b878:	2802      	cmp	r0, #2
 800b87a:	d005      	beq.n	800b888 <sin+0x60>
 800b87c:	b970      	cbnz	r0, 800b89c <sin+0x74>
 800b87e:	2001      	movs	r0, #1
 800b880:	e7dd      	b.n	800b83e <sin+0x16>
 800b882:	f000 fca9 	bl	800c1d8 <__kernel_cos>
 800b886:	e7dc      	b.n	800b842 <sin+0x1a>
 800b888:	2001      	movs	r0, #1
 800b88a:	f001 f8ad 	bl	800c9e8 <__kernel_sin>
 800b88e:	ec53 2b10 	vmov	r2, r3, d0
 800b892:	ee10 0a10 	vmov	r0, s0
 800b896:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b89a:	e7dd      	b.n	800b858 <sin+0x30>
 800b89c:	f000 fc9c 	bl	800c1d8 <__kernel_cos>
 800b8a0:	e7f5      	b.n	800b88e <sin+0x66>
 800b8a2:	bf00      	nop
 800b8a4:	f3af 8000 	nop.w
	...
 800b8b0:	3fe921fb 	.word	0x3fe921fb
 800b8b4:	7fefffff 	.word	0x7fefffff

0800b8b8 <atan2>:
 800b8b8:	f000 b85e 	b.w	800b978 <__ieee754_atan2>

0800b8bc <sqrt>:
 800b8bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8c0:	ed2d 8b02 	vpush	{d8}
 800b8c4:	b08b      	sub	sp, #44	; 0x2c
 800b8c6:	ec55 4b10 	vmov	r4, r5, d0
 800b8ca:	f000 fb27 	bl	800bf1c <__ieee754_sqrt>
 800b8ce:	4b26      	ldr	r3, [pc, #152]	; (800b968 <sqrt+0xac>)
 800b8d0:	eeb0 8a40 	vmov.f32	s16, s0
 800b8d4:	eef0 8a60 	vmov.f32	s17, s1
 800b8d8:	f993 6000 	ldrsb.w	r6, [r3]
 800b8dc:	1c73      	adds	r3, r6, #1
 800b8de:	d02a      	beq.n	800b936 <sqrt+0x7a>
 800b8e0:	4622      	mov	r2, r4
 800b8e2:	462b      	mov	r3, r5
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	4629      	mov	r1, r5
 800b8e8:	f7f5 f920 	bl	8000b2c <__aeabi_dcmpun>
 800b8ec:	4607      	mov	r7, r0
 800b8ee:	bb10      	cbnz	r0, 800b936 <sqrt+0x7a>
 800b8f0:	f04f 0800 	mov.w	r8, #0
 800b8f4:	f04f 0900 	mov.w	r9, #0
 800b8f8:	4642      	mov	r2, r8
 800b8fa:	464b      	mov	r3, r9
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	4629      	mov	r1, r5
 800b900:	f7f5 f8ec 	bl	8000adc <__aeabi_dcmplt>
 800b904:	b1b8      	cbz	r0, 800b936 <sqrt+0x7a>
 800b906:	2301      	movs	r3, #1
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	4b18      	ldr	r3, [pc, #96]	; (800b96c <sqrt+0xb0>)
 800b90c:	9301      	str	r3, [sp, #4]
 800b90e:	9708      	str	r7, [sp, #32]
 800b910:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b914:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b918:	b9b6      	cbnz	r6, 800b948 <sqrt+0x8c>
 800b91a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b91e:	4668      	mov	r0, sp
 800b920:	f001 fb4e 	bl	800cfc0 <matherr>
 800b924:	b1d0      	cbz	r0, 800b95c <sqrt+0xa0>
 800b926:	9b08      	ldr	r3, [sp, #32]
 800b928:	b11b      	cbz	r3, 800b932 <sqrt+0x76>
 800b92a:	f7fc fc47 	bl	80081bc <__errno>
 800b92e:	9b08      	ldr	r3, [sp, #32]
 800b930:	6003      	str	r3, [r0, #0]
 800b932:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b936:	eeb0 0a48 	vmov.f32	s0, s16
 800b93a:	eef0 0a68 	vmov.f32	s1, s17
 800b93e:	b00b      	add	sp, #44	; 0x2c
 800b940:	ecbd 8b02 	vpop	{d8}
 800b944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b948:	4642      	mov	r2, r8
 800b94a:	464b      	mov	r3, r9
 800b94c:	4640      	mov	r0, r8
 800b94e:	4649      	mov	r1, r9
 800b950:	f7f4 ff7c 	bl	800084c <__aeabi_ddiv>
 800b954:	2e02      	cmp	r6, #2
 800b956:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b95a:	d1e0      	bne.n	800b91e <sqrt+0x62>
 800b95c:	f7fc fc2e 	bl	80081bc <__errno>
 800b960:	2321      	movs	r3, #33	; 0x21
 800b962:	6003      	str	r3, [r0, #0]
 800b964:	e7df      	b.n	800b926 <sqrt+0x6a>
 800b966:	bf00      	nop
 800b968:	200001fc 	.word	0x200001fc
 800b96c:	0800d86e 	.word	0x0800d86e

0800b970 <atan2f>:
 800b970:	f000 bb84 	b.w	800c07c <__ieee754_atan2f>
 800b974:	0000      	movs	r0, r0
	...

0800b978 <__ieee754_atan2>:
 800b978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b97c:	ec57 6b11 	vmov	r6, r7, d1
 800b980:	4273      	negs	r3, r6
 800b982:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b986:	4333      	orrs	r3, r6
 800b988:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800bb30 <__ieee754_atan2+0x1b8>
 800b98c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b990:	4573      	cmp	r3, lr
 800b992:	ec51 0b10 	vmov	r0, r1, d0
 800b996:	ee11 8a10 	vmov	r8, s2
 800b99a:	d80a      	bhi.n	800b9b2 <__ieee754_atan2+0x3a>
 800b99c:	4244      	negs	r4, r0
 800b99e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9a2:	4304      	orrs	r4, r0
 800b9a4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b9a8:	4574      	cmp	r4, lr
 800b9aa:	468c      	mov	ip, r1
 800b9ac:	ee10 9a10 	vmov	r9, s0
 800b9b0:	d907      	bls.n	800b9c2 <__ieee754_atan2+0x4a>
 800b9b2:	4632      	mov	r2, r6
 800b9b4:	463b      	mov	r3, r7
 800b9b6:	f7f4 fc69 	bl	800028c <__adddf3>
 800b9ba:	ec41 0b10 	vmov	d0, r0, r1
 800b9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9c2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b9c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b9ca:	4334      	orrs	r4, r6
 800b9cc:	d103      	bne.n	800b9d6 <__ieee754_atan2+0x5e>
 800b9ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9d2:	f001 b8c5 	b.w	800cb60 <atan>
 800b9d6:	17bc      	asrs	r4, r7, #30
 800b9d8:	f004 0402 	and.w	r4, r4, #2
 800b9dc:	ea53 0909 	orrs.w	r9, r3, r9
 800b9e0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b9e4:	d107      	bne.n	800b9f6 <__ieee754_atan2+0x7e>
 800b9e6:	2c02      	cmp	r4, #2
 800b9e8:	d073      	beq.n	800bad2 <__ieee754_atan2+0x15a>
 800b9ea:	2c03      	cmp	r4, #3
 800b9ec:	d1e5      	bne.n	800b9ba <__ieee754_atan2+0x42>
 800b9ee:	a13e      	add	r1, pc, #248	; (adr r1, 800bae8 <__ieee754_atan2+0x170>)
 800b9f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9f4:	e7e1      	b.n	800b9ba <__ieee754_atan2+0x42>
 800b9f6:	ea52 0808 	orrs.w	r8, r2, r8
 800b9fa:	d106      	bne.n	800ba0a <__ieee754_atan2+0x92>
 800b9fc:	f1bc 0f00 	cmp.w	ip, #0
 800ba00:	da6b      	bge.n	800bada <__ieee754_atan2+0x162>
 800ba02:	a13b      	add	r1, pc, #236	; (adr r1, 800baf0 <__ieee754_atan2+0x178>)
 800ba04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba08:	e7d7      	b.n	800b9ba <__ieee754_atan2+0x42>
 800ba0a:	4572      	cmp	r2, lr
 800ba0c:	d120      	bne.n	800ba50 <__ieee754_atan2+0xd8>
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d111      	bne.n	800ba36 <__ieee754_atan2+0xbe>
 800ba12:	2c02      	cmp	r4, #2
 800ba14:	d007      	beq.n	800ba26 <__ieee754_atan2+0xae>
 800ba16:	2c03      	cmp	r4, #3
 800ba18:	d009      	beq.n	800ba2e <__ieee754_atan2+0xb6>
 800ba1a:	2c01      	cmp	r4, #1
 800ba1c:	d155      	bne.n	800baca <__ieee754_atan2+0x152>
 800ba1e:	a136      	add	r1, pc, #216	; (adr r1, 800baf8 <__ieee754_atan2+0x180>)
 800ba20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba24:	e7c9      	b.n	800b9ba <__ieee754_atan2+0x42>
 800ba26:	a136      	add	r1, pc, #216	; (adr r1, 800bb00 <__ieee754_atan2+0x188>)
 800ba28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba2c:	e7c5      	b.n	800b9ba <__ieee754_atan2+0x42>
 800ba2e:	a136      	add	r1, pc, #216	; (adr r1, 800bb08 <__ieee754_atan2+0x190>)
 800ba30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba34:	e7c1      	b.n	800b9ba <__ieee754_atan2+0x42>
 800ba36:	2c02      	cmp	r4, #2
 800ba38:	d04b      	beq.n	800bad2 <__ieee754_atan2+0x15a>
 800ba3a:	2c03      	cmp	r4, #3
 800ba3c:	d0d7      	beq.n	800b9ee <__ieee754_atan2+0x76>
 800ba3e:	2c01      	cmp	r4, #1
 800ba40:	f04f 0000 	mov.w	r0, #0
 800ba44:	d102      	bne.n	800ba4c <__ieee754_atan2+0xd4>
 800ba46:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ba4a:	e7b6      	b.n	800b9ba <__ieee754_atan2+0x42>
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	e7b4      	b.n	800b9ba <__ieee754_atan2+0x42>
 800ba50:	4573      	cmp	r3, lr
 800ba52:	d0d3      	beq.n	800b9fc <__ieee754_atan2+0x84>
 800ba54:	1a9b      	subs	r3, r3, r2
 800ba56:	151b      	asrs	r3, r3, #20
 800ba58:	2b3c      	cmp	r3, #60	; 0x3c
 800ba5a:	dc1e      	bgt.n	800ba9a <__ieee754_atan2+0x122>
 800ba5c:	2f00      	cmp	r7, #0
 800ba5e:	da01      	bge.n	800ba64 <__ieee754_atan2+0xec>
 800ba60:	333c      	adds	r3, #60	; 0x3c
 800ba62:	db1e      	blt.n	800baa2 <__ieee754_atan2+0x12a>
 800ba64:	4632      	mov	r2, r6
 800ba66:	463b      	mov	r3, r7
 800ba68:	f7f4 fef0 	bl	800084c <__aeabi_ddiv>
 800ba6c:	ec41 0b10 	vmov	d0, r0, r1
 800ba70:	f001 fa16 	bl	800cea0 <fabs>
 800ba74:	f001 f874 	bl	800cb60 <atan>
 800ba78:	ec51 0b10 	vmov	r0, r1, d0
 800ba7c:	2c01      	cmp	r4, #1
 800ba7e:	d013      	beq.n	800baa8 <__ieee754_atan2+0x130>
 800ba80:	2c02      	cmp	r4, #2
 800ba82:	d015      	beq.n	800bab0 <__ieee754_atan2+0x138>
 800ba84:	2c00      	cmp	r4, #0
 800ba86:	d098      	beq.n	800b9ba <__ieee754_atan2+0x42>
 800ba88:	a321      	add	r3, pc, #132	; (adr r3, 800bb10 <__ieee754_atan2+0x198>)
 800ba8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8e:	f7f4 fbfb 	bl	8000288 <__aeabi_dsub>
 800ba92:	a321      	add	r3, pc, #132	; (adr r3, 800bb18 <__ieee754_atan2+0x1a0>)
 800ba94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba98:	e014      	b.n	800bac4 <__ieee754_atan2+0x14c>
 800ba9a:	a121      	add	r1, pc, #132	; (adr r1, 800bb20 <__ieee754_atan2+0x1a8>)
 800ba9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baa0:	e7ec      	b.n	800ba7c <__ieee754_atan2+0x104>
 800baa2:	2000      	movs	r0, #0
 800baa4:	2100      	movs	r1, #0
 800baa6:	e7e9      	b.n	800ba7c <__ieee754_atan2+0x104>
 800baa8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800baac:	4619      	mov	r1, r3
 800baae:	e784      	b.n	800b9ba <__ieee754_atan2+0x42>
 800bab0:	a317      	add	r3, pc, #92	; (adr r3, 800bb10 <__ieee754_atan2+0x198>)
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	f7f4 fbe7 	bl	8000288 <__aeabi_dsub>
 800baba:	4602      	mov	r2, r0
 800babc:	460b      	mov	r3, r1
 800babe:	a116      	add	r1, pc, #88	; (adr r1, 800bb18 <__ieee754_atan2+0x1a0>)
 800bac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bac4:	f7f4 fbe0 	bl	8000288 <__aeabi_dsub>
 800bac8:	e777      	b.n	800b9ba <__ieee754_atan2+0x42>
 800baca:	a117      	add	r1, pc, #92	; (adr r1, 800bb28 <__ieee754_atan2+0x1b0>)
 800bacc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bad0:	e773      	b.n	800b9ba <__ieee754_atan2+0x42>
 800bad2:	a111      	add	r1, pc, #68	; (adr r1, 800bb18 <__ieee754_atan2+0x1a0>)
 800bad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bad8:	e76f      	b.n	800b9ba <__ieee754_atan2+0x42>
 800bada:	a111      	add	r1, pc, #68	; (adr r1, 800bb20 <__ieee754_atan2+0x1a8>)
 800badc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bae0:	e76b      	b.n	800b9ba <__ieee754_atan2+0x42>
 800bae2:	bf00      	nop
 800bae4:	f3af 8000 	nop.w
 800bae8:	54442d18 	.word	0x54442d18
 800baec:	c00921fb 	.word	0xc00921fb
 800baf0:	54442d18 	.word	0x54442d18
 800baf4:	bff921fb 	.word	0xbff921fb
 800baf8:	54442d18 	.word	0x54442d18
 800bafc:	bfe921fb 	.word	0xbfe921fb
 800bb00:	7f3321d2 	.word	0x7f3321d2
 800bb04:	4002d97c 	.word	0x4002d97c
 800bb08:	7f3321d2 	.word	0x7f3321d2
 800bb0c:	c002d97c 	.word	0xc002d97c
 800bb10:	33145c07 	.word	0x33145c07
 800bb14:	3ca1a626 	.word	0x3ca1a626
 800bb18:	54442d18 	.word	0x54442d18
 800bb1c:	400921fb 	.word	0x400921fb
 800bb20:	54442d18 	.word	0x54442d18
 800bb24:	3ff921fb 	.word	0x3ff921fb
 800bb28:	54442d18 	.word	0x54442d18
 800bb2c:	3fe921fb 	.word	0x3fe921fb
 800bb30:	7ff00000 	.word	0x7ff00000
 800bb34:	00000000 	.word	0x00000000

0800bb38 <__ieee754_rem_pio2>:
 800bb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3c:	ec57 6b10 	vmov	r6, r7, d0
 800bb40:	4bc3      	ldr	r3, [pc, #780]	; (800be50 <__ieee754_rem_pio2+0x318>)
 800bb42:	b08d      	sub	sp, #52	; 0x34
 800bb44:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bb48:	4598      	cmp	r8, r3
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	9704      	str	r7, [sp, #16]
 800bb4e:	dc07      	bgt.n	800bb60 <__ieee754_rem_pio2+0x28>
 800bb50:	2200      	movs	r2, #0
 800bb52:	2300      	movs	r3, #0
 800bb54:	ed84 0b00 	vstr	d0, [r4]
 800bb58:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bb5c:	2500      	movs	r5, #0
 800bb5e:	e027      	b.n	800bbb0 <__ieee754_rem_pio2+0x78>
 800bb60:	4bbc      	ldr	r3, [pc, #752]	; (800be54 <__ieee754_rem_pio2+0x31c>)
 800bb62:	4598      	cmp	r8, r3
 800bb64:	dc75      	bgt.n	800bc52 <__ieee754_rem_pio2+0x11a>
 800bb66:	9b04      	ldr	r3, [sp, #16]
 800bb68:	4dbb      	ldr	r5, [pc, #748]	; (800be58 <__ieee754_rem_pio2+0x320>)
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	ee10 0a10 	vmov	r0, s0
 800bb70:	a3a9      	add	r3, pc, #676	; (adr r3, 800be18 <__ieee754_rem_pio2+0x2e0>)
 800bb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb76:	4639      	mov	r1, r7
 800bb78:	dd36      	ble.n	800bbe8 <__ieee754_rem_pio2+0xb0>
 800bb7a:	f7f4 fb85 	bl	8000288 <__aeabi_dsub>
 800bb7e:	45a8      	cmp	r8, r5
 800bb80:	4606      	mov	r6, r0
 800bb82:	460f      	mov	r7, r1
 800bb84:	d018      	beq.n	800bbb8 <__ieee754_rem_pio2+0x80>
 800bb86:	a3a6      	add	r3, pc, #664	; (adr r3, 800be20 <__ieee754_rem_pio2+0x2e8>)
 800bb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8c:	f7f4 fb7c 	bl	8000288 <__aeabi_dsub>
 800bb90:	4602      	mov	r2, r0
 800bb92:	460b      	mov	r3, r1
 800bb94:	e9c4 2300 	strd	r2, r3, [r4]
 800bb98:	4630      	mov	r0, r6
 800bb9a:	4639      	mov	r1, r7
 800bb9c:	f7f4 fb74 	bl	8000288 <__aeabi_dsub>
 800bba0:	a39f      	add	r3, pc, #636	; (adr r3, 800be20 <__ieee754_rem_pio2+0x2e8>)
 800bba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba6:	f7f4 fb6f 	bl	8000288 <__aeabi_dsub>
 800bbaa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bbae:	2501      	movs	r5, #1
 800bbb0:	4628      	mov	r0, r5
 800bbb2:	b00d      	add	sp, #52	; 0x34
 800bbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb8:	a39b      	add	r3, pc, #620	; (adr r3, 800be28 <__ieee754_rem_pio2+0x2f0>)
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	f7f4 fb63 	bl	8000288 <__aeabi_dsub>
 800bbc2:	a39b      	add	r3, pc, #620	; (adr r3, 800be30 <__ieee754_rem_pio2+0x2f8>)
 800bbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc8:	4606      	mov	r6, r0
 800bbca:	460f      	mov	r7, r1
 800bbcc:	f7f4 fb5c 	bl	8000288 <__aeabi_dsub>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	e9c4 2300 	strd	r2, r3, [r4]
 800bbd8:	4630      	mov	r0, r6
 800bbda:	4639      	mov	r1, r7
 800bbdc:	f7f4 fb54 	bl	8000288 <__aeabi_dsub>
 800bbe0:	a393      	add	r3, pc, #588	; (adr r3, 800be30 <__ieee754_rem_pio2+0x2f8>)
 800bbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe6:	e7de      	b.n	800bba6 <__ieee754_rem_pio2+0x6e>
 800bbe8:	f7f4 fb50 	bl	800028c <__adddf3>
 800bbec:	45a8      	cmp	r8, r5
 800bbee:	4606      	mov	r6, r0
 800bbf0:	460f      	mov	r7, r1
 800bbf2:	d016      	beq.n	800bc22 <__ieee754_rem_pio2+0xea>
 800bbf4:	a38a      	add	r3, pc, #552	; (adr r3, 800be20 <__ieee754_rem_pio2+0x2e8>)
 800bbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfa:	f7f4 fb47 	bl	800028c <__adddf3>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	460b      	mov	r3, r1
 800bc02:	e9c4 2300 	strd	r2, r3, [r4]
 800bc06:	4630      	mov	r0, r6
 800bc08:	4639      	mov	r1, r7
 800bc0a:	f7f4 fb3d 	bl	8000288 <__aeabi_dsub>
 800bc0e:	a384      	add	r3, pc, #528	; (adr r3, 800be20 <__ieee754_rem_pio2+0x2e8>)
 800bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc14:	f7f4 fb3a 	bl	800028c <__adddf3>
 800bc18:	f04f 35ff 	mov.w	r5, #4294967295
 800bc1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bc20:	e7c6      	b.n	800bbb0 <__ieee754_rem_pio2+0x78>
 800bc22:	a381      	add	r3, pc, #516	; (adr r3, 800be28 <__ieee754_rem_pio2+0x2f0>)
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	f7f4 fb30 	bl	800028c <__adddf3>
 800bc2c:	a380      	add	r3, pc, #512	; (adr r3, 800be30 <__ieee754_rem_pio2+0x2f8>)
 800bc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc32:	4606      	mov	r6, r0
 800bc34:	460f      	mov	r7, r1
 800bc36:	f7f4 fb29 	bl	800028c <__adddf3>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	e9c4 2300 	strd	r2, r3, [r4]
 800bc42:	4630      	mov	r0, r6
 800bc44:	4639      	mov	r1, r7
 800bc46:	f7f4 fb1f 	bl	8000288 <__aeabi_dsub>
 800bc4a:	a379      	add	r3, pc, #484	; (adr r3, 800be30 <__ieee754_rem_pio2+0x2f8>)
 800bc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc50:	e7e0      	b.n	800bc14 <__ieee754_rem_pio2+0xdc>
 800bc52:	4b82      	ldr	r3, [pc, #520]	; (800be5c <__ieee754_rem_pio2+0x324>)
 800bc54:	4598      	cmp	r8, r3
 800bc56:	f300 80d0 	bgt.w	800bdfa <__ieee754_rem_pio2+0x2c2>
 800bc5a:	f001 f921 	bl	800cea0 <fabs>
 800bc5e:	ec57 6b10 	vmov	r6, r7, d0
 800bc62:	ee10 0a10 	vmov	r0, s0
 800bc66:	a374      	add	r3, pc, #464	; (adr r3, 800be38 <__ieee754_rem_pio2+0x300>)
 800bc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6c:	4639      	mov	r1, r7
 800bc6e:	f7f4 fcc3 	bl	80005f8 <__aeabi_dmul>
 800bc72:	2200      	movs	r2, #0
 800bc74:	4b7a      	ldr	r3, [pc, #488]	; (800be60 <__ieee754_rem_pio2+0x328>)
 800bc76:	f7f4 fb09 	bl	800028c <__adddf3>
 800bc7a:	f7f4 ff6d 	bl	8000b58 <__aeabi_d2iz>
 800bc7e:	4605      	mov	r5, r0
 800bc80:	f7f4 fc50 	bl	8000524 <__aeabi_i2d>
 800bc84:	a364      	add	r3, pc, #400	; (adr r3, 800be18 <__ieee754_rem_pio2+0x2e0>)
 800bc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc8e:	f7f4 fcb3 	bl	80005f8 <__aeabi_dmul>
 800bc92:	4602      	mov	r2, r0
 800bc94:	460b      	mov	r3, r1
 800bc96:	4630      	mov	r0, r6
 800bc98:	4639      	mov	r1, r7
 800bc9a:	f7f4 faf5 	bl	8000288 <__aeabi_dsub>
 800bc9e:	a360      	add	r3, pc, #384	; (adr r3, 800be20 <__ieee754_rem_pio2+0x2e8>)
 800bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca4:	4682      	mov	sl, r0
 800bca6:	468b      	mov	fp, r1
 800bca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcac:	f7f4 fca4 	bl	80005f8 <__aeabi_dmul>
 800bcb0:	2d1f      	cmp	r5, #31
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	460f      	mov	r7, r1
 800bcb6:	dc0c      	bgt.n	800bcd2 <__ieee754_rem_pio2+0x19a>
 800bcb8:	1e6a      	subs	r2, r5, #1
 800bcba:	4b6a      	ldr	r3, [pc, #424]	; (800be64 <__ieee754_rem_pio2+0x32c>)
 800bcbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc0:	4543      	cmp	r3, r8
 800bcc2:	d006      	beq.n	800bcd2 <__ieee754_rem_pio2+0x19a>
 800bcc4:	4632      	mov	r2, r6
 800bcc6:	463b      	mov	r3, r7
 800bcc8:	4650      	mov	r0, sl
 800bcca:	4659      	mov	r1, fp
 800bccc:	f7f4 fadc 	bl	8000288 <__aeabi_dsub>
 800bcd0:	e00e      	b.n	800bcf0 <__ieee754_rem_pio2+0x1b8>
 800bcd2:	4632      	mov	r2, r6
 800bcd4:	463b      	mov	r3, r7
 800bcd6:	4650      	mov	r0, sl
 800bcd8:	4659      	mov	r1, fp
 800bcda:	f7f4 fad5 	bl	8000288 <__aeabi_dsub>
 800bcde:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bce2:	9305      	str	r3, [sp, #20]
 800bce4:	9a05      	ldr	r2, [sp, #20]
 800bce6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bcea:	1ad3      	subs	r3, r2, r3
 800bcec:	2b10      	cmp	r3, #16
 800bcee:	dc02      	bgt.n	800bcf6 <__ieee754_rem_pio2+0x1be>
 800bcf0:	e9c4 0100 	strd	r0, r1, [r4]
 800bcf4:	e039      	b.n	800bd6a <__ieee754_rem_pio2+0x232>
 800bcf6:	a34c      	add	r3, pc, #304	; (adr r3, 800be28 <__ieee754_rem_pio2+0x2f0>)
 800bcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd00:	f7f4 fc7a 	bl	80005f8 <__aeabi_dmul>
 800bd04:	4606      	mov	r6, r0
 800bd06:	460f      	mov	r7, r1
 800bd08:	4602      	mov	r2, r0
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	4650      	mov	r0, sl
 800bd0e:	4659      	mov	r1, fp
 800bd10:	f7f4 faba 	bl	8000288 <__aeabi_dsub>
 800bd14:	4602      	mov	r2, r0
 800bd16:	460b      	mov	r3, r1
 800bd18:	4680      	mov	r8, r0
 800bd1a:	4689      	mov	r9, r1
 800bd1c:	4650      	mov	r0, sl
 800bd1e:	4659      	mov	r1, fp
 800bd20:	f7f4 fab2 	bl	8000288 <__aeabi_dsub>
 800bd24:	4632      	mov	r2, r6
 800bd26:	463b      	mov	r3, r7
 800bd28:	f7f4 faae 	bl	8000288 <__aeabi_dsub>
 800bd2c:	a340      	add	r3, pc, #256	; (adr r3, 800be30 <__ieee754_rem_pio2+0x2f8>)
 800bd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd32:	4606      	mov	r6, r0
 800bd34:	460f      	mov	r7, r1
 800bd36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd3a:	f7f4 fc5d 	bl	80005f8 <__aeabi_dmul>
 800bd3e:	4632      	mov	r2, r6
 800bd40:	463b      	mov	r3, r7
 800bd42:	f7f4 faa1 	bl	8000288 <__aeabi_dsub>
 800bd46:	4602      	mov	r2, r0
 800bd48:	460b      	mov	r3, r1
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	460f      	mov	r7, r1
 800bd4e:	4640      	mov	r0, r8
 800bd50:	4649      	mov	r1, r9
 800bd52:	f7f4 fa99 	bl	8000288 <__aeabi_dsub>
 800bd56:	9a05      	ldr	r2, [sp, #20]
 800bd58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bd5c:	1ad3      	subs	r3, r2, r3
 800bd5e:	2b31      	cmp	r3, #49	; 0x31
 800bd60:	dc20      	bgt.n	800bda4 <__ieee754_rem_pio2+0x26c>
 800bd62:	e9c4 0100 	strd	r0, r1, [r4]
 800bd66:	46c2      	mov	sl, r8
 800bd68:	46cb      	mov	fp, r9
 800bd6a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bd6e:	4650      	mov	r0, sl
 800bd70:	4642      	mov	r2, r8
 800bd72:	464b      	mov	r3, r9
 800bd74:	4659      	mov	r1, fp
 800bd76:	f7f4 fa87 	bl	8000288 <__aeabi_dsub>
 800bd7a:	463b      	mov	r3, r7
 800bd7c:	4632      	mov	r2, r6
 800bd7e:	f7f4 fa83 	bl	8000288 <__aeabi_dsub>
 800bd82:	9b04      	ldr	r3, [sp, #16]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd8a:	f6bf af11 	bge.w	800bbb0 <__ieee754_rem_pio2+0x78>
 800bd8e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bd92:	6063      	str	r3, [r4, #4]
 800bd94:	f8c4 8000 	str.w	r8, [r4]
 800bd98:	60a0      	str	r0, [r4, #8]
 800bd9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd9e:	60e3      	str	r3, [r4, #12]
 800bda0:	426d      	negs	r5, r5
 800bda2:	e705      	b.n	800bbb0 <__ieee754_rem_pio2+0x78>
 800bda4:	a326      	add	r3, pc, #152	; (adr r3, 800be40 <__ieee754_rem_pio2+0x308>)
 800bda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdae:	f7f4 fc23 	bl	80005f8 <__aeabi_dmul>
 800bdb2:	4606      	mov	r6, r0
 800bdb4:	460f      	mov	r7, r1
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	460b      	mov	r3, r1
 800bdba:	4640      	mov	r0, r8
 800bdbc:	4649      	mov	r1, r9
 800bdbe:	f7f4 fa63 	bl	8000288 <__aeabi_dsub>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	4682      	mov	sl, r0
 800bdc8:	468b      	mov	fp, r1
 800bdca:	4640      	mov	r0, r8
 800bdcc:	4649      	mov	r1, r9
 800bdce:	f7f4 fa5b 	bl	8000288 <__aeabi_dsub>
 800bdd2:	4632      	mov	r2, r6
 800bdd4:	463b      	mov	r3, r7
 800bdd6:	f7f4 fa57 	bl	8000288 <__aeabi_dsub>
 800bdda:	a31b      	add	r3, pc, #108	; (adr r3, 800be48 <__ieee754_rem_pio2+0x310>)
 800bddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde0:	4606      	mov	r6, r0
 800bde2:	460f      	mov	r7, r1
 800bde4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bde8:	f7f4 fc06 	bl	80005f8 <__aeabi_dmul>
 800bdec:	4632      	mov	r2, r6
 800bdee:	463b      	mov	r3, r7
 800bdf0:	f7f4 fa4a 	bl	8000288 <__aeabi_dsub>
 800bdf4:	4606      	mov	r6, r0
 800bdf6:	460f      	mov	r7, r1
 800bdf8:	e764      	b.n	800bcc4 <__ieee754_rem_pio2+0x18c>
 800bdfa:	4b1b      	ldr	r3, [pc, #108]	; (800be68 <__ieee754_rem_pio2+0x330>)
 800bdfc:	4598      	cmp	r8, r3
 800bdfe:	dd35      	ble.n	800be6c <__ieee754_rem_pio2+0x334>
 800be00:	ee10 2a10 	vmov	r2, s0
 800be04:	463b      	mov	r3, r7
 800be06:	4630      	mov	r0, r6
 800be08:	4639      	mov	r1, r7
 800be0a:	f7f4 fa3d 	bl	8000288 <__aeabi_dsub>
 800be0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800be12:	e9c4 0100 	strd	r0, r1, [r4]
 800be16:	e6a1      	b.n	800bb5c <__ieee754_rem_pio2+0x24>
 800be18:	54400000 	.word	0x54400000
 800be1c:	3ff921fb 	.word	0x3ff921fb
 800be20:	1a626331 	.word	0x1a626331
 800be24:	3dd0b461 	.word	0x3dd0b461
 800be28:	1a600000 	.word	0x1a600000
 800be2c:	3dd0b461 	.word	0x3dd0b461
 800be30:	2e037073 	.word	0x2e037073
 800be34:	3ba3198a 	.word	0x3ba3198a
 800be38:	6dc9c883 	.word	0x6dc9c883
 800be3c:	3fe45f30 	.word	0x3fe45f30
 800be40:	2e000000 	.word	0x2e000000
 800be44:	3ba3198a 	.word	0x3ba3198a
 800be48:	252049c1 	.word	0x252049c1
 800be4c:	397b839a 	.word	0x397b839a
 800be50:	3fe921fb 	.word	0x3fe921fb
 800be54:	4002d97b 	.word	0x4002d97b
 800be58:	3ff921fb 	.word	0x3ff921fb
 800be5c:	413921fb 	.word	0x413921fb
 800be60:	3fe00000 	.word	0x3fe00000
 800be64:	0800d874 	.word	0x0800d874
 800be68:	7fefffff 	.word	0x7fefffff
 800be6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800be70:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800be74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800be78:	4630      	mov	r0, r6
 800be7a:	460f      	mov	r7, r1
 800be7c:	f7f4 fe6c 	bl	8000b58 <__aeabi_d2iz>
 800be80:	f7f4 fb50 	bl	8000524 <__aeabi_i2d>
 800be84:	4602      	mov	r2, r0
 800be86:	460b      	mov	r3, r1
 800be88:	4630      	mov	r0, r6
 800be8a:	4639      	mov	r1, r7
 800be8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be90:	f7f4 f9fa 	bl	8000288 <__aeabi_dsub>
 800be94:	2200      	movs	r2, #0
 800be96:	4b1f      	ldr	r3, [pc, #124]	; (800bf14 <__ieee754_rem_pio2+0x3dc>)
 800be98:	f7f4 fbae 	bl	80005f8 <__aeabi_dmul>
 800be9c:	460f      	mov	r7, r1
 800be9e:	4606      	mov	r6, r0
 800bea0:	f7f4 fe5a 	bl	8000b58 <__aeabi_d2iz>
 800bea4:	f7f4 fb3e 	bl	8000524 <__aeabi_i2d>
 800bea8:	4602      	mov	r2, r0
 800beaa:	460b      	mov	r3, r1
 800beac:	4630      	mov	r0, r6
 800beae:	4639      	mov	r1, r7
 800beb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800beb4:	f7f4 f9e8 	bl	8000288 <__aeabi_dsub>
 800beb8:	2200      	movs	r2, #0
 800beba:	4b16      	ldr	r3, [pc, #88]	; (800bf14 <__ieee754_rem_pio2+0x3dc>)
 800bebc:	f7f4 fb9c 	bl	80005f8 <__aeabi_dmul>
 800bec0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bec4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800bec8:	f04f 0803 	mov.w	r8, #3
 800becc:	2600      	movs	r6, #0
 800bece:	2700      	movs	r7, #0
 800bed0:	4632      	mov	r2, r6
 800bed2:	463b      	mov	r3, r7
 800bed4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800bed8:	f108 3aff 	add.w	sl, r8, #4294967295
 800bedc:	f7f4 fdf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bee0:	b9b0      	cbnz	r0, 800bf10 <__ieee754_rem_pio2+0x3d8>
 800bee2:	4b0d      	ldr	r3, [pc, #52]	; (800bf18 <__ieee754_rem_pio2+0x3e0>)
 800bee4:	9301      	str	r3, [sp, #4]
 800bee6:	2302      	movs	r3, #2
 800bee8:	9300      	str	r3, [sp, #0]
 800beea:	462a      	mov	r2, r5
 800beec:	4643      	mov	r3, r8
 800beee:	4621      	mov	r1, r4
 800bef0:	a806      	add	r0, sp, #24
 800bef2:	f000 fa39 	bl	800c368 <__kernel_rem_pio2>
 800bef6:	9b04      	ldr	r3, [sp, #16]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	4605      	mov	r5, r0
 800befc:	f6bf ae58 	bge.w	800bbb0 <__ieee754_rem_pio2+0x78>
 800bf00:	6863      	ldr	r3, [r4, #4]
 800bf02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bf06:	6063      	str	r3, [r4, #4]
 800bf08:	68e3      	ldr	r3, [r4, #12]
 800bf0a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bf0e:	e746      	b.n	800bd9e <__ieee754_rem_pio2+0x266>
 800bf10:	46d0      	mov	r8, sl
 800bf12:	e7dd      	b.n	800bed0 <__ieee754_rem_pio2+0x398>
 800bf14:	41700000 	.word	0x41700000
 800bf18:	0800d8f4 	.word	0x0800d8f4

0800bf1c <__ieee754_sqrt>:
 800bf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf20:	4955      	ldr	r1, [pc, #340]	; (800c078 <__ieee754_sqrt+0x15c>)
 800bf22:	ec55 4b10 	vmov	r4, r5, d0
 800bf26:	43a9      	bics	r1, r5
 800bf28:	462b      	mov	r3, r5
 800bf2a:	462a      	mov	r2, r5
 800bf2c:	d112      	bne.n	800bf54 <__ieee754_sqrt+0x38>
 800bf2e:	ee10 2a10 	vmov	r2, s0
 800bf32:	ee10 0a10 	vmov	r0, s0
 800bf36:	4629      	mov	r1, r5
 800bf38:	f7f4 fb5e 	bl	80005f8 <__aeabi_dmul>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	460b      	mov	r3, r1
 800bf40:	4620      	mov	r0, r4
 800bf42:	4629      	mov	r1, r5
 800bf44:	f7f4 f9a2 	bl	800028c <__adddf3>
 800bf48:	4604      	mov	r4, r0
 800bf4a:	460d      	mov	r5, r1
 800bf4c:	ec45 4b10 	vmov	d0, r4, r5
 800bf50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf54:	2d00      	cmp	r5, #0
 800bf56:	ee10 0a10 	vmov	r0, s0
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	dc0f      	bgt.n	800bf7e <__ieee754_sqrt+0x62>
 800bf5e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bf62:	4330      	orrs	r0, r6
 800bf64:	d0f2      	beq.n	800bf4c <__ieee754_sqrt+0x30>
 800bf66:	b155      	cbz	r5, 800bf7e <__ieee754_sqrt+0x62>
 800bf68:	ee10 2a10 	vmov	r2, s0
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	4629      	mov	r1, r5
 800bf70:	f7f4 f98a 	bl	8000288 <__aeabi_dsub>
 800bf74:	4602      	mov	r2, r0
 800bf76:	460b      	mov	r3, r1
 800bf78:	f7f4 fc68 	bl	800084c <__aeabi_ddiv>
 800bf7c:	e7e4      	b.n	800bf48 <__ieee754_sqrt+0x2c>
 800bf7e:	151b      	asrs	r3, r3, #20
 800bf80:	d073      	beq.n	800c06a <__ieee754_sqrt+0x14e>
 800bf82:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bf86:	07dd      	lsls	r5, r3, #31
 800bf88:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bf8c:	bf48      	it	mi
 800bf8e:	0fc8      	lsrmi	r0, r1, #31
 800bf90:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bf94:	bf44      	itt	mi
 800bf96:	0049      	lslmi	r1, r1, #1
 800bf98:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800bf9c:	2500      	movs	r5, #0
 800bf9e:	1058      	asrs	r0, r3, #1
 800bfa0:	0fcb      	lsrs	r3, r1, #31
 800bfa2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800bfa6:	0049      	lsls	r1, r1, #1
 800bfa8:	2316      	movs	r3, #22
 800bfaa:	462c      	mov	r4, r5
 800bfac:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800bfb0:	19a7      	adds	r7, r4, r6
 800bfb2:	4297      	cmp	r7, r2
 800bfb4:	bfde      	ittt	le
 800bfb6:	19bc      	addle	r4, r7, r6
 800bfb8:	1bd2      	suble	r2, r2, r7
 800bfba:	19ad      	addle	r5, r5, r6
 800bfbc:	0fcf      	lsrs	r7, r1, #31
 800bfbe:	3b01      	subs	r3, #1
 800bfc0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800bfc4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bfc8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bfcc:	d1f0      	bne.n	800bfb0 <__ieee754_sqrt+0x94>
 800bfce:	f04f 0c20 	mov.w	ip, #32
 800bfd2:	469e      	mov	lr, r3
 800bfd4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bfd8:	42a2      	cmp	r2, r4
 800bfda:	eb06 070e 	add.w	r7, r6, lr
 800bfde:	dc02      	bgt.n	800bfe6 <__ieee754_sqrt+0xca>
 800bfe0:	d112      	bne.n	800c008 <__ieee754_sqrt+0xec>
 800bfe2:	428f      	cmp	r7, r1
 800bfe4:	d810      	bhi.n	800c008 <__ieee754_sqrt+0xec>
 800bfe6:	2f00      	cmp	r7, #0
 800bfe8:	eb07 0e06 	add.w	lr, r7, r6
 800bfec:	da42      	bge.n	800c074 <__ieee754_sqrt+0x158>
 800bfee:	f1be 0f00 	cmp.w	lr, #0
 800bff2:	db3f      	blt.n	800c074 <__ieee754_sqrt+0x158>
 800bff4:	f104 0801 	add.w	r8, r4, #1
 800bff8:	1b12      	subs	r2, r2, r4
 800bffa:	428f      	cmp	r7, r1
 800bffc:	bf88      	it	hi
 800bffe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c002:	1bc9      	subs	r1, r1, r7
 800c004:	4433      	add	r3, r6
 800c006:	4644      	mov	r4, r8
 800c008:	0052      	lsls	r2, r2, #1
 800c00a:	f1bc 0c01 	subs.w	ip, ip, #1
 800c00e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c012:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c016:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c01a:	d1dd      	bne.n	800bfd8 <__ieee754_sqrt+0xbc>
 800c01c:	430a      	orrs	r2, r1
 800c01e:	d006      	beq.n	800c02e <__ieee754_sqrt+0x112>
 800c020:	1c5c      	adds	r4, r3, #1
 800c022:	bf13      	iteet	ne
 800c024:	3301      	addne	r3, #1
 800c026:	3501      	addeq	r5, #1
 800c028:	4663      	moveq	r3, ip
 800c02a:	f023 0301 	bicne.w	r3, r3, #1
 800c02e:	106a      	asrs	r2, r5, #1
 800c030:	085b      	lsrs	r3, r3, #1
 800c032:	07e9      	lsls	r1, r5, #31
 800c034:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c038:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c03c:	bf48      	it	mi
 800c03e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c042:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c046:	461c      	mov	r4, r3
 800c048:	e780      	b.n	800bf4c <__ieee754_sqrt+0x30>
 800c04a:	0aca      	lsrs	r2, r1, #11
 800c04c:	3815      	subs	r0, #21
 800c04e:	0549      	lsls	r1, r1, #21
 800c050:	2a00      	cmp	r2, #0
 800c052:	d0fa      	beq.n	800c04a <__ieee754_sqrt+0x12e>
 800c054:	02d6      	lsls	r6, r2, #11
 800c056:	d50a      	bpl.n	800c06e <__ieee754_sqrt+0x152>
 800c058:	f1c3 0420 	rsb	r4, r3, #32
 800c05c:	fa21 f404 	lsr.w	r4, r1, r4
 800c060:	1e5d      	subs	r5, r3, #1
 800c062:	4099      	lsls	r1, r3
 800c064:	4322      	orrs	r2, r4
 800c066:	1b43      	subs	r3, r0, r5
 800c068:	e78b      	b.n	800bf82 <__ieee754_sqrt+0x66>
 800c06a:	4618      	mov	r0, r3
 800c06c:	e7f0      	b.n	800c050 <__ieee754_sqrt+0x134>
 800c06e:	0052      	lsls	r2, r2, #1
 800c070:	3301      	adds	r3, #1
 800c072:	e7ef      	b.n	800c054 <__ieee754_sqrt+0x138>
 800c074:	46a0      	mov	r8, r4
 800c076:	e7bf      	b.n	800bff8 <__ieee754_sqrt+0xdc>
 800c078:	7ff00000 	.word	0x7ff00000

0800c07c <__ieee754_atan2f>:
 800c07c:	ee10 2a90 	vmov	r2, s1
 800c080:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c084:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c088:	b510      	push	{r4, lr}
 800c08a:	eef0 7a40 	vmov.f32	s15, s0
 800c08e:	dc06      	bgt.n	800c09e <__ieee754_atan2f+0x22>
 800c090:	ee10 0a10 	vmov	r0, s0
 800c094:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c098:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c09c:	dd04      	ble.n	800c0a8 <__ieee754_atan2f+0x2c>
 800c09e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c0a2:	eeb0 0a67 	vmov.f32	s0, s15
 800c0a6:	bd10      	pop	{r4, pc}
 800c0a8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800c0ac:	d103      	bne.n	800c0b6 <__ieee754_atan2f+0x3a>
 800c0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0b2:	f000 bfff 	b.w	800d0b4 <atanf>
 800c0b6:	1794      	asrs	r4, r2, #30
 800c0b8:	f004 0402 	and.w	r4, r4, #2
 800c0bc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c0c0:	b943      	cbnz	r3, 800c0d4 <__ieee754_atan2f+0x58>
 800c0c2:	2c02      	cmp	r4, #2
 800c0c4:	d06e      	beq.n	800c1a4 <__ieee754_atan2f+0x128>
 800c0c6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800c1ac <__ieee754_atan2f+0x130>
 800c0ca:	2c03      	cmp	r4, #3
 800c0cc:	bf08      	it	eq
 800c0ce:	eef0 7a47 	vmoveq.f32	s15, s14
 800c0d2:	e7e6      	b.n	800c0a2 <__ieee754_atan2f+0x26>
 800c0d4:	b941      	cbnz	r1, 800c0e8 <__ieee754_atan2f+0x6c>
 800c0d6:	eddf 7a36 	vldr	s15, [pc, #216]	; 800c1b0 <__ieee754_atan2f+0x134>
 800c0da:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c1b4 <__ieee754_atan2f+0x138>
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	bfb8      	it	lt
 800c0e2:	eef0 7a47 	vmovlt.f32	s15, s14
 800c0e6:	e7dc      	b.n	800c0a2 <__ieee754_atan2f+0x26>
 800c0e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c0ec:	d122      	bne.n	800c134 <__ieee754_atan2f+0xb8>
 800c0ee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c0f2:	d112      	bne.n	800c11a <__ieee754_atan2f+0x9e>
 800c0f4:	2c02      	cmp	r4, #2
 800c0f6:	d00a      	beq.n	800c10e <__ieee754_atan2f+0x92>
 800c0f8:	2c03      	cmp	r4, #3
 800c0fa:	d00b      	beq.n	800c114 <__ieee754_atan2f+0x98>
 800c0fc:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800c1b8 <__ieee754_atan2f+0x13c>
 800c100:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800c1bc <__ieee754_atan2f+0x140>
 800c104:	2c01      	cmp	r4, #1
 800c106:	bf18      	it	ne
 800c108:	eef0 7a47 	vmovne.f32	s15, s14
 800c10c:	e7c9      	b.n	800c0a2 <__ieee754_atan2f+0x26>
 800c10e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800c1c0 <__ieee754_atan2f+0x144>
 800c112:	e7c6      	b.n	800c0a2 <__ieee754_atan2f+0x26>
 800c114:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c1c4 <__ieee754_atan2f+0x148>
 800c118:	e7c3      	b.n	800c0a2 <__ieee754_atan2f+0x26>
 800c11a:	2c02      	cmp	r4, #2
 800c11c:	d042      	beq.n	800c1a4 <__ieee754_atan2f+0x128>
 800c11e:	2c03      	cmp	r4, #3
 800c120:	d005      	beq.n	800c12e <__ieee754_atan2f+0xb2>
 800c122:	2c01      	cmp	r4, #1
 800c124:	eddf 7a28 	vldr	s15, [pc, #160]	; 800c1c8 <__ieee754_atan2f+0x14c>
 800c128:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800c1cc <__ieee754_atan2f+0x150>
 800c12c:	e7eb      	b.n	800c106 <__ieee754_atan2f+0x8a>
 800c12e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c1ac <__ieee754_atan2f+0x130>
 800c132:	e7b6      	b.n	800c0a2 <__ieee754_atan2f+0x26>
 800c134:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c138:	d0cd      	beq.n	800c0d6 <__ieee754_atan2f+0x5a>
 800c13a:	1a5b      	subs	r3, r3, r1
 800c13c:	15db      	asrs	r3, r3, #23
 800c13e:	2b3c      	cmp	r3, #60	; 0x3c
 800c140:	dc1a      	bgt.n	800c178 <__ieee754_atan2f+0xfc>
 800c142:	2a00      	cmp	r2, #0
 800c144:	da01      	bge.n	800c14a <__ieee754_atan2f+0xce>
 800c146:	333c      	adds	r3, #60	; 0x3c
 800c148:	db19      	blt.n	800c17e <__ieee754_atan2f+0x102>
 800c14a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c14e:	f001 f885 	bl	800d25c <fabsf>
 800c152:	f000 ffaf 	bl	800d0b4 <atanf>
 800c156:	eef0 7a40 	vmov.f32	s15, s0
 800c15a:	2c01      	cmp	r4, #1
 800c15c:	d012      	beq.n	800c184 <__ieee754_atan2f+0x108>
 800c15e:	2c02      	cmp	r4, #2
 800c160:	d017      	beq.n	800c192 <__ieee754_atan2f+0x116>
 800c162:	2c00      	cmp	r4, #0
 800c164:	d09d      	beq.n	800c0a2 <__ieee754_atan2f+0x26>
 800c166:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800c1d0 <__ieee754_atan2f+0x154>
 800c16a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c16e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800c1d4 <__ieee754_atan2f+0x158>
 800c172:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c176:	e794      	b.n	800c0a2 <__ieee754_atan2f+0x26>
 800c178:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c1b0 <__ieee754_atan2f+0x134>
 800c17c:	e7ed      	b.n	800c15a <__ieee754_atan2f+0xde>
 800c17e:	eddf 7a13 	vldr	s15, [pc, #76]	; 800c1cc <__ieee754_atan2f+0x150>
 800c182:	e7ea      	b.n	800c15a <__ieee754_atan2f+0xde>
 800c184:	ee17 3a90 	vmov	r3, s15
 800c188:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c18c:	ee07 3a90 	vmov	s15, r3
 800c190:	e787      	b.n	800c0a2 <__ieee754_atan2f+0x26>
 800c192:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800c1d0 <__ieee754_atan2f+0x154>
 800c196:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c19a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800c1d4 <__ieee754_atan2f+0x158>
 800c19e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1a2:	e77e      	b.n	800c0a2 <__ieee754_atan2f+0x26>
 800c1a4:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800c1d4 <__ieee754_atan2f+0x158>
 800c1a8:	e77b      	b.n	800c0a2 <__ieee754_atan2f+0x26>
 800c1aa:	bf00      	nop
 800c1ac:	c0490fdb 	.word	0xc0490fdb
 800c1b0:	3fc90fdb 	.word	0x3fc90fdb
 800c1b4:	bfc90fdb 	.word	0xbfc90fdb
 800c1b8:	bf490fdb 	.word	0xbf490fdb
 800c1bc:	3f490fdb 	.word	0x3f490fdb
 800c1c0:	4016cbe4 	.word	0x4016cbe4
 800c1c4:	c016cbe4 	.word	0xc016cbe4
 800c1c8:	80000000 	.word	0x80000000
 800c1cc:	00000000 	.word	0x00000000
 800c1d0:	33bbbd2e 	.word	0x33bbbd2e
 800c1d4:	40490fdb 	.word	0x40490fdb

0800c1d8 <__kernel_cos>:
 800c1d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1dc:	ec59 8b10 	vmov	r8, r9, d0
 800c1e0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800c1e4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c1e8:	ed2d 8b02 	vpush	{d8}
 800c1ec:	eeb0 8a41 	vmov.f32	s16, s2
 800c1f0:	eef0 8a61 	vmov.f32	s17, s3
 800c1f4:	da07      	bge.n	800c206 <__kernel_cos+0x2e>
 800c1f6:	ee10 0a10 	vmov	r0, s0
 800c1fa:	4649      	mov	r1, r9
 800c1fc:	f7f4 fcac 	bl	8000b58 <__aeabi_d2iz>
 800c200:	2800      	cmp	r0, #0
 800c202:	f000 8089 	beq.w	800c318 <__kernel_cos+0x140>
 800c206:	4642      	mov	r2, r8
 800c208:	464b      	mov	r3, r9
 800c20a:	4640      	mov	r0, r8
 800c20c:	4649      	mov	r1, r9
 800c20e:	f7f4 f9f3 	bl	80005f8 <__aeabi_dmul>
 800c212:	2200      	movs	r2, #0
 800c214:	4b4e      	ldr	r3, [pc, #312]	; (800c350 <__kernel_cos+0x178>)
 800c216:	4604      	mov	r4, r0
 800c218:	460d      	mov	r5, r1
 800c21a:	f7f4 f9ed 	bl	80005f8 <__aeabi_dmul>
 800c21e:	a340      	add	r3, pc, #256	; (adr r3, 800c320 <__kernel_cos+0x148>)
 800c220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c224:	4682      	mov	sl, r0
 800c226:	468b      	mov	fp, r1
 800c228:	4620      	mov	r0, r4
 800c22a:	4629      	mov	r1, r5
 800c22c:	f7f4 f9e4 	bl	80005f8 <__aeabi_dmul>
 800c230:	a33d      	add	r3, pc, #244	; (adr r3, 800c328 <__kernel_cos+0x150>)
 800c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c236:	f7f4 f829 	bl	800028c <__adddf3>
 800c23a:	4622      	mov	r2, r4
 800c23c:	462b      	mov	r3, r5
 800c23e:	f7f4 f9db 	bl	80005f8 <__aeabi_dmul>
 800c242:	a33b      	add	r3, pc, #236	; (adr r3, 800c330 <__kernel_cos+0x158>)
 800c244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c248:	f7f4 f81e 	bl	8000288 <__aeabi_dsub>
 800c24c:	4622      	mov	r2, r4
 800c24e:	462b      	mov	r3, r5
 800c250:	f7f4 f9d2 	bl	80005f8 <__aeabi_dmul>
 800c254:	a338      	add	r3, pc, #224	; (adr r3, 800c338 <__kernel_cos+0x160>)
 800c256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25a:	f7f4 f817 	bl	800028c <__adddf3>
 800c25e:	4622      	mov	r2, r4
 800c260:	462b      	mov	r3, r5
 800c262:	f7f4 f9c9 	bl	80005f8 <__aeabi_dmul>
 800c266:	a336      	add	r3, pc, #216	; (adr r3, 800c340 <__kernel_cos+0x168>)
 800c268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26c:	f7f4 f80c 	bl	8000288 <__aeabi_dsub>
 800c270:	4622      	mov	r2, r4
 800c272:	462b      	mov	r3, r5
 800c274:	f7f4 f9c0 	bl	80005f8 <__aeabi_dmul>
 800c278:	a333      	add	r3, pc, #204	; (adr r3, 800c348 <__kernel_cos+0x170>)
 800c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27e:	f7f4 f805 	bl	800028c <__adddf3>
 800c282:	4622      	mov	r2, r4
 800c284:	462b      	mov	r3, r5
 800c286:	f7f4 f9b7 	bl	80005f8 <__aeabi_dmul>
 800c28a:	4622      	mov	r2, r4
 800c28c:	462b      	mov	r3, r5
 800c28e:	f7f4 f9b3 	bl	80005f8 <__aeabi_dmul>
 800c292:	ec53 2b18 	vmov	r2, r3, d8
 800c296:	4604      	mov	r4, r0
 800c298:	460d      	mov	r5, r1
 800c29a:	4640      	mov	r0, r8
 800c29c:	4649      	mov	r1, r9
 800c29e:	f7f4 f9ab 	bl	80005f8 <__aeabi_dmul>
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	4629      	mov	r1, r5
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	f7f3 ffed 	bl	8000288 <__aeabi_dsub>
 800c2ae:	4b29      	ldr	r3, [pc, #164]	; (800c354 <__kernel_cos+0x17c>)
 800c2b0:	429e      	cmp	r6, r3
 800c2b2:	4680      	mov	r8, r0
 800c2b4:	4689      	mov	r9, r1
 800c2b6:	dc11      	bgt.n	800c2dc <__kernel_cos+0x104>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	4650      	mov	r0, sl
 800c2be:	4659      	mov	r1, fp
 800c2c0:	f7f3 ffe2 	bl	8000288 <__aeabi_dsub>
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	4924      	ldr	r1, [pc, #144]	; (800c358 <__kernel_cos+0x180>)
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	f7f3 ffdc 	bl	8000288 <__aeabi_dsub>
 800c2d0:	ecbd 8b02 	vpop	{d8}
 800c2d4:	ec41 0b10 	vmov	d0, r0, r1
 800c2d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2dc:	4b1f      	ldr	r3, [pc, #124]	; (800c35c <__kernel_cos+0x184>)
 800c2de:	491e      	ldr	r1, [pc, #120]	; (800c358 <__kernel_cos+0x180>)
 800c2e0:	429e      	cmp	r6, r3
 800c2e2:	bfcc      	ite	gt
 800c2e4:	4d1e      	ldrgt	r5, [pc, #120]	; (800c360 <__kernel_cos+0x188>)
 800c2e6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c2ea:	2400      	movs	r4, #0
 800c2ec:	4622      	mov	r2, r4
 800c2ee:	462b      	mov	r3, r5
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	f7f3 ffc9 	bl	8000288 <__aeabi_dsub>
 800c2f6:	4622      	mov	r2, r4
 800c2f8:	4606      	mov	r6, r0
 800c2fa:	460f      	mov	r7, r1
 800c2fc:	462b      	mov	r3, r5
 800c2fe:	4650      	mov	r0, sl
 800c300:	4659      	mov	r1, fp
 800c302:	f7f3 ffc1 	bl	8000288 <__aeabi_dsub>
 800c306:	4642      	mov	r2, r8
 800c308:	464b      	mov	r3, r9
 800c30a:	f7f3 ffbd 	bl	8000288 <__aeabi_dsub>
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
 800c312:	4630      	mov	r0, r6
 800c314:	4639      	mov	r1, r7
 800c316:	e7d9      	b.n	800c2cc <__kernel_cos+0xf4>
 800c318:	2000      	movs	r0, #0
 800c31a:	490f      	ldr	r1, [pc, #60]	; (800c358 <__kernel_cos+0x180>)
 800c31c:	e7d8      	b.n	800c2d0 <__kernel_cos+0xf8>
 800c31e:	bf00      	nop
 800c320:	be8838d4 	.word	0xbe8838d4
 800c324:	bda8fae9 	.word	0xbda8fae9
 800c328:	bdb4b1c4 	.word	0xbdb4b1c4
 800c32c:	3e21ee9e 	.word	0x3e21ee9e
 800c330:	809c52ad 	.word	0x809c52ad
 800c334:	3e927e4f 	.word	0x3e927e4f
 800c338:	19cb1590 	.word	0x19cb1590
 800c33c:	3efa01a0 	.word	0x3efa01a0
 800c340:	16c15177 	.word	0x16c15177
 800c344:	3f56c16c 	.word	0x3f56c16c
 800c348:	5555554c 	.word	0x5555554c
 800c34c:	3fa55555 	.word	0x3fa55555
 800c350:	3fe00000 	.word	0x3fe00000
 800c354:	3fd33332 	.word	0x3fd33332
 800c358:	3ff00000 	.word	0x3ff00000
 800c35c:	3fe90000 	.word	0x3fe90000
 800c360:	3fd20000 	.word	0x3fd20000
 800c364:	00000000 	.word	0x00000000

0800c368 <__kernel_rem_pio2>:
 800c368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36c:	ed2d 8b02 	vpush	{d8}
 800c370:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c374:	1ed4      	subs	r4, r2, #3
 800c376:	9308      	str	r3, [sp, #32]
 800c378:	9101      	str	r1, [sp, #4]
 800c37a:	4bc5      	ldr	r3, [pc, #788]	; (800c690 <__kernel_rem_pio2+0x328>)
 800c37c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c37e:	9009      	str	r0, [sp, #36]	; 0x24
 800c380:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c384:	9304      	str	r3, [sp, #16]
 800c386:	9b08      	ldr	r3, [sp, #32]
 800c388:	3b01      	subs	r3, #1
 800c38a:	9307      	str	r3, [sp, #28]
 800c38c:	2318      	movs	r3, #24
 800c38e:	fb94 f4f3 	sdiv	r4, r4, r3
 800c392:	f06f 0317 	mvn.w	r3, #23
 800c396:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800c39a:	fb04 3303 	mla	r3, r4, r3, r3
 800c39e:	eb03 0a02 	add.w	sl, r3, r2
 800c3a2:	9b04      	ldr	r3, [sp, #16]
 800c3a4:	9a07      	ldr	r2, [sp, #28]
 800c3a6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c680 <__kernel_rem_pio2+0x318>
 800c3aa:	eb03 0802 	add.w	r8, r3, r2
 800c3ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c3b0:	1aa7      	subs	r7, r4, r2
 800c3b2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c3b6:	ae22      	add	r6, sp, #136	; 0x88
 800c3b8:	2500      	movs	r5, #0
 800c3ba:	4545      	cmp	r5, r8
 800c3bc:	dd13      	ble.n	800c3e6 <__kernel_rem_pio2+0x7e>
 800c3be:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800c680 <__kernel_rem_pio2+0x318>
 800c3c2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800c3c6:	2600      	movs	r6, #0
 800c3c8:	9b04      	ldr	r3, [sp, #16]
 800c3ca:	429e      	cmp	r6, r3
 800c3cc:	dc32      	bgt.n	800c434 <__kernel_rem_pio2+0xcc>
 800c3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3d0:	9302      	str	r3, [sp, #8]
 800c3d2:	9b08      	ldr	r3, [sp, #32]
 800c3d4:	199d      	adds	r5, r3, r6
 800c3d6:	ab22      	add	r3, sp, #136	; 0x88
 800c3d8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c3dc:	9306      	str	r3, [sp, #24]
 800c3de:	ec59 8b18 	vmov	r8, r9, d8
 800c3e2:	2700      	movs	r7, #0
 800c3e4:	e01f      	b.n	800c426 <__kernel_rem_pio2+0xbe>
 800c3e6:	42ef      	cmn	r7, r5
 800c3e8:	d407      	bmi.n	800c3fa <__kernel_rem_pio2+0x92>
 800c3ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c3ee:	f7f4 f899 	bl	8000524 <__aeabi_i2d>
 800c3f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c3f6:	3501      	adds	r5, #1
 800c3f8:	e7df      	b.n	800c3ba <__kernel_rem_pio2+0x52>
 800c3fa:	ec51 0b18 	vmov	r0, r1, d8
 800c3fe:	e7f8      	b.n	800c3f2 <__kernel_rem_pio2+0x8a>
 800c400:	9906      	ldr	r1, [sp, #24]
 800c402:	9d02      	ldr	r5, [sp, #8]
 800c404:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800c408:	9106      	str	r1, [sp, #24]
 800c40a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800c40e:	9502      	str	r5, [sp, #8]
 800c410:	f7f4 f8f2 	bl	80005f8 <__aeabi_dmul>
 800c414:	4602      	mov	r2, r0
 800c416:	460b      	mov	r3, r1
 800c418:	4640      	mov	r0, r8
 800c41a:	4649      	mov	r1, r9
 800c41c:	f7f3 ff36 	bl	800028c <__adddf3>
 800c420:	3701      	adds	r7, #1
 800c422:	4680      	mov	r8, r0
 800c424:	4689      	mov	r9, r1
 800c426:	9b07      	ldr	r3, [sp, #28]
 800c428:	429f      	cmp	r7, r3
 800c42a:	dde9      	ble.n	800c400 <__kernel_rem_pio2+0x98>
 800c42c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800c430:	3601      	adds	r6, #1
 800c432:	e7c9      	b.n	800c3c8 <__kernel_rem_pio2+0x60>
 800c434:	9b04      	ldr	r3, [sp, #16]
 800c436:	aa0e      	add	r2, sp, #56	; 0x38
 800c438:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c43c:	930c      	str	r3, [sp, #48]	; 0x30
 800c43e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c440:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c444:	9c04      	ldr	r4, [sp, #16]
 800c446:	930b      	str	r3, [sp, #44]	; 0x2c
 800c448:	ab9a      	add	r3, sp, #616	; 0x268
 800c44a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800c44e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c452:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c456:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800c45a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800c45e:	ab9a      	add	r3, sp, #616	; 0x268
 800c460:	445b      	add	r3, fp
 800c462:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800c466:	2500      	movs	r5, #0
 800c468:	1b63      	subs	r3, r4, r5
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	dc78      	bgt.n	800c560 <__kernel_rem_pio2+0x1f8>
 800c46e:	4650      	mov	r0, sl
 800c470:	ec49 8b10 	vmov	d0, r8, r9
 800c474:	f000 fda8 	bl	800cfc8 <scalbn>
 800c478:	ec57 6b10 	vmov	r6, r7, d0
 800c47c:	2200      	movs	r2, #0
 800c47e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c482:	ee10 0a10 	vmov	r0, s0
 800c486:	4639      	mov	r1, r7
 800c488:	f7f4 f8b6 	bl	80005f8 <__aeabi_dmul>
 800c48c:	ec41 0b10 	vmov	d0, r0, r1
 800c490:	f000 fd12 	bl	800ceb8 <floor>
 800c494:	2200      	movs	r2, #0
 800c496:	ec51 0b10 	vmov	r0, r1, d0
 800c49a:	4b7e      	ldr	r3, [pc, #504]	; (800c694 <__kernel_rem_pio2+0x32c>)
 800c49c:	f7f4 f8ac 	bl	80005f8 <__aeabi_dmul>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	4639      	mov	r1, r7
 800c4a8:	f7f3 feee 	bl	8000288 <__aeabi_dsub>
 800c4ac:	460f      	mov	r7, r1
 800c4ae:	4606      	mov	r6, r0
 800c4b0:	f7f4 fb52 	bl	8000b58 <__aeabi_d2iz>
 800c4b4:	9006      	str	r0, [sp, #24]
 800c4b6:	f7f4 f835 	bl	8000524 <__aeabi_i2d>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	460b      	mov	r3, r1
 800c4be:	4630      	mov	r0, r6
 800c4c0:	4639      	mov	r1, r7
 800c4c2:	f7f3 fee1 	bl	8000288 <__aeabi_dsub>
 800c4c6:	f1ba 0f00 	cmp.w	sl, #0
 800c4ca:	4606      	mov	r6, r0
 800c4cc:	460f      	mov	r7, r1
 800c4ce:	dd6c      	ble.n	800c5aa <__kernel_rem_pio2+0x242>
 800c4d0:	1e62      	subs	r2, r4, #1
 800c4d2:	ab0e      	add	r3, sp, #56	; 0x38
 800c4d4:	f1ca 0118 	rsb	r1, sl, #24
 800c4d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c4dc:	9d06      	ldr	r5, [sp, #24]
 800c4de:	fa40 f301 	asr.w	r3, r0, r1
 800c4e2:	441d      	add	r5, r3
 800c4e4:	408b      	lsls	r3, r1
 800c4e6:	1ac0      	subs	r0, r0, r3
 800c4e8:	ab0e      	add	r3, sp, #56	; 0x38
 800c4ea:	9506      	str	r5, [sp, #24]
 800c4ec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c4f0:	f1ca 0317 	rsb	r3, sl, #23
 800c4f4:	fa40 f303 	asr.w	r3, r0, r3
 800c4f8:	9302      	str	r3, [sp, #8]
 800c4fa:	9b02      	ldr	r3, [sp, #8]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	dd62      	ble.n	800c5c6 <__kernel_rem_pio2+0x25e>
 800c500:	9b06      	ldr	r3, [sp, #24]
 800c502:	2200      	movs	r2, #0
 800c504:	3301      	adds	r3, #1
 800c506:	9306      	str	r3, [sp, #24]
 800c508:	4615      	mov	r5, r2
 800c50a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c50e:	4294      	cmp	r4, r2
 800c510:	f300 8095 	bgt.w	800c63e <__kernel_rem_pio2+0x2d6>
 800c514:	f1ba 0f00 	cmp.w	sl, #0
 800c518:	dd07      	ble.n	800c52a <__kernel_rem_pio2+0x1c2>
 800c51a:	f1ba 0f01 	cmp.w	sl, #1
 800c51e:	f000 80a2 	beq.w	800c666 <__kernel_rem_pio2+0x2fe>
 800c522:	f1ba 0f02 	cmp.w	sl, #2
 800c526:	f000 80c1 	beq.w	800c6ac <__kernel_rem_pio2+0x344>
 800c52a:	9b02      	ldr	r3, [sp, #8]
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d14a      	bne.n	800c5c6 <__kernel_rem_pio2+0x25e>
 800c530:	4632      	mov	r2, r6
 800c532:	463b      	mov	r3, r7
 800c534:	2000      	movs	r0, #0
 800c536:	4958      	ldr	r1, [pc, #352]	; (800c698 <__kernel_rem_pio2+0x330>)
 800c538:	f7f3 fea6 	bl	8000288 <__aeabi_dsub>
 800c53c:	4606      	mov	r6, r0
 800c53e:	460f      	mov	r7, r1
 800c540:	2d00      	cmp	r5, #0
 800c542:	d040      	beq.n	800c5c6 <__kernel_rem_pio2+0x25e>
 800c544:	4650      	mov	r0, sl
 800c546:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c688 <__kernel_rem_pio2+0x320>
 800c54a:	f000 fd3d 	bl	800cfc8 <scalbn>
 800c54e:	4630      	mov	r0, r6
 800c550:	4639      	mov	r1, r7
 800c552:	ec53 2b10 	vmov	r2, r3, d0
 800c556:	f7f3 fe97 	bl	8000288 <__aeabi_dsub>
 800c55a:	4606      	mov	r6, r0
 800c55c:	460f      	mov	r7, r1
 800c55e:	e032      	b.n	800c5c6 <__kernel_rem_pio2+0x25e>
 800c560:	2200      	movs	r2, #0
 800c562:	4b4e      	ldr	r3, [pc, #312]	; (800c69c <__kernel_rem_pio2+0x334>)
 800c564:	4640      	mov	r0, r8
 800c566:	4649      	mov	r1, r9
 800c568:	f7f4 f846 	bl	80005f8 <__aeabi_dmul>
 800c56c:	f7f4 faf4 	bl	8000b58 <__aeabi_d2iz>
 800c570:	f7f3 ffd8 	bl	8000524 <__aeabi_i2d>
 800c574:	2200      	movs	r2, #0
 800c576:	4b4a      	ldr	r3, [pc, #296]	; (800c6a0 <__kernel_rem_pio2+0x338>)
 800c578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c57c:	f7f4 f83c 	bl	80005f8 <__aeabi_dmul>
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	4640      	mov	r0, r8
 800c586:	4649      	mov	r1, r9
 800c588:	f7f3 fe7e 	bl	8000288 <__aeabi_dsub>
 800c58c:	f7f4 fae4 	bl	8000b58 <__aeabi_d2iz>
 800c590:	ab0e      	add	r3, sp, #56	; 0x38
 800c592:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800c596:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c59a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c59e:	f7f3 fe75 	bl	800028c <__adddf3>
 800c5a2:	3501      	adds	r5, #1
 800c5a4:	4680      	mov	r8, r0
 800c5a6:	4689      	mov	r9, r1
 800c5a8:	e75e      	b.n	800c468 <__kernel_rem_pio2+0x100>
 800c5aa:	d105      	bne.n	800c5b8 <__kernel_rem_pio2+0x250>
 800c5ac:	1e63      	subs	r3, r4, #1
 800c5ae:	aa0e      	add	r2, sp, #56	; 0x38
 800c5b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c5b4:	15c3      	asrs	r3, r0, #23
 800c5b6:	e79f      	b.n	800c4f8 <__kernel_rem_pio2+0x190>
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	4b3a      	ldr	r3, [pc, #232]	; (800c6a4 <__kernel_rem_pio2+0x33c>)
 800c5bc:	f7f4 faa2 	bl	8000b04 <__aeabi_dcmpge>
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d139      	bne.n	800c638 <__kernel_rem_pio2+0x2d0>
 800c5c4:	9002      	str	r0, [sp, #8]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	4639      	mov	r1, r7
 800c5ce:	f7f4 fa7b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	f000 80c7 	beq.w	800c766 <__kernel_rem_pio2+0x3fe>
 800c5d8:	1e65      	subs	r5, r4, #1
 800c5da:	462b      	mov	r3, r5
 800c5dc:	2200      	movs	r2, #0
 800c5de:	9904      	ldr	r1, [sp, #16]
 800c5e0:	428b      	cmp	r3, r1
 800c5e2:	da6a      	bge.n	800c6ba <__kernel_rem_pio2+0x352>
 800c5e4:	2a00      	cmp	r2, #0
 800c5e6:	f000 8088 	beq.w	800c6fa <__kernel_rem_pio2+0x392>
 800c5ea:	ab0e      	add	r3, sp, #56	; 0x38
 800c5ec:	f1aa 0a18 	sub.w	sl, sl, #24
 800c5f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f000 80b4 	beq.w	800c762 <__kernel_rem_pio2+0x3fa>
 800c5fa:	4650      	mov	r0, sl
 800c5fc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800c688 <__kernel_rem_pio2+0x320>
 800c600:	f000 fce2 	bl	800cfc8 <scalbn>
 800c604:	00ec      	lsls	r4, r5, #3
 800c606:	ab72      	add	r3, sp, #456	; 0x1c8
 800c608:	191e      	adds	r6, r3, r4
 800c60a:	ec59 8b10 	vmov	r8, r9, d0
 800c60e:	f106 0a08 	add.w	sl, r6, #8
 800c612:	462f      	mov	r7, r5
 800c614:	2f00      	cmp	r7, #0
 800c616:	f280 80df 	bge.w	800c7d8 <__kernel_rem_pio2+0x470>
 800c61a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800c680 <__kernel_rem_pio2+0x318>
 800c61e:	f04f 0a00 	mov.w	sl, #0
 800c622:	eba5 030a 	sub.w	r3, r5, sl
 800c626:	2b00      	cmp	r3, #0
 800c628:	f2c0 810a 	blt.w	800c840 <__kernel_rem_pio2+0x4d8>
 800c62c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800c6a8 <__kernel_rem_pio2+0x340>
 800c630:	ec59 8b18 	vmov	r8, r9, d8
 800c634:	2700      	movs	r7, #0
 800c636:	e0f5      	b.n	800c824 <__kernel_rem_pio2+0x4bc>
 800c638:	2302      	movs	r3, #2
 800c63a:	9302      	str	r3, [sp, #8]
 800c63c:	e760      	b.n	800c500 <__kernel_rem_pio2+0x198>
 800c63e:	ab0e      	add	r3, sp, #56	; 0x38
 800c640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c644:	b94d      	cbnz	r5, 800c65a <__kernel_rem_pio2+0x2f2>
 800c646:	b12b      	cbz	r3, 800c654 <__kernel_rem_pio2+0x2ec>
 800c648:	a80e      	add	r0, sp, #56	; 0x38
 800c64a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c64e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c652:	2301      	movs	r3, #1
 800c654:	3201      	adds	r2, #1
 800c656:	461d      	mov	r5, r3
 800c658:	e759      	b.n	800c50e <__kernel_rem_pio2+0x1a6>
 800c65a:	a80e      	add	r0, sp, #56	; 0x38
 800c65c:	1acb      	subs	r3, r1, r3
 800c65e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c662:	462b      	mov	r3, r5
 800c664:	e7f6      	b.n	800c654 <__kernel_rem_pio2+0x2ec>
 800c666:	1e62      	subs	r2, r4, #1
 800c668:	ab0e      	add	r3, sp, #56	; 0x38
 800c66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c672:	a90e      	add	r1, sp, #56	; 0x38
 800c674:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c678:	e757      	b.n	800c52a <__kernel_rem_pio2+0x1c2>
 800c67a:	bf00      	nop
 800c67c:	f3af 8000 	nop.w
	...
 800c68c:	3ff00000 	.word	0x3ff00000
 800c690:	0800da40 	.word	0x0800da40
 800c694:	40200000 	.word	0x40200000
 800c698:	3ff00000 	.word	0x3ff00000
 800c69c:	3e700000 	.word	0x3e700000
 800c6a0:	41700000 	.word	0x41700000
 800c6a4:	3fe00000 	.word	0x3fe00000
 800c6a8:	0800da00 	.word	0x0800da00
 800c6ac:	1e62      	subs	r2, r4, #1
 800c6ae:	ab0e      	add	r3, sp, #56	; 0x38
 800c6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c6b8:	e7db      	b.n	800c672 <__kernel_rem_pio2+0x30a>
 800c6ba:	a90e      	add	r1, sp, #56	; 0x38
 800c6bc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	430a      	orrs	r2, r1
 800c6c4:	e78b      	b.n	800c5de <__kernel_rem_pio2+0x276>
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c6cc:	2900      	cmp	r1, #0
 800c6ce:	d0fa      	beq.n	800c6c6 <__kernel_rem_pio2+0x35e>
 800c6d0:	9a08      	ldr	r2, [sp, #32]
 800c6d2:	4422      	add	r2, r4
 800c6d4:	00d2      	lsls	r2, r2, #3
 800c6d6:	a922      	add	r1, sp, #136	; 0x88
 800c6d8:	18e3      	adds	r3, r4, r3
 800c6da:	9206      	str	r2, [sp, #24]
 800c6dc:	440a      	add	r2, r1
 800c6de:	9302      	str	r3, [sp, #8]
 800c6e0:	f10b 0108 	add.w	r1, fp, #8
 800c6e4:	f102 0308 	add.w	r3, r2, #8
 800c6e8:	1c66      	adds	r6, r4, #1
 800c6ea:	910a      	str	r1, [sp, #40]	; 0x28
 800c6ec:	2500      	movs	r5, #0
 800c6ee:	930d      	str	r3, [sp, #52]	; 0x34
 800c6f0:	9b02      	ldr	r3, [sp, #8]
 800c6f2:	42b3      	cmp	r3, r6
 800c6f4:	da04      	bge.n	800c700 <__kernel_rem_pio2+0x398>
 800c6f6:	461c      	mov	r4, r3
 800c6f8:	e6a6      	b.n	800c448 <__kernel_rem_pio2+0xe0>
 800c6fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	e7e3      	b.n	800c6c8 <__kernel_rem_pio2+0x360>
 800c700:	9b06      	ldr	r3, [sp, #24]
 800c702:	18ef      	adds	r7, r5, r3
 800c704:	ab22      	add	r3, sp, #136	; 0x88
 800c706:	441f      	add	r7, r3
 800c708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c70a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c70e:	f7f3 ff09 	bl	8000524 <__aeabi_i2d>
 800c712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c714:	461c      	mov	r4, r3
 800c716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c718:	e9c7 0100 	strd	r0, r1, [r7]
 800c71c:	eb03 0b05 	add.w	fp, r3, r5
 800c720:	2700      	movs	r7, #0
 800c722:	f04f 0800 	mov.w	r8, #0
 800c726:	f04f 0900 	mov.w	r9, #0
 800c72a:	9b07      	ldr	r3, [sp, #28]
 800c72c:	429f      	cmp	r7, r3
 800c72e:	dd08      	ble.n	800c742 <__kernel_rem_pio2+0x3da>
 800c730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c732:	aa72      	add	r2, sp, #456	; 0x1c8
 800c734:	18eb      	adds	r3, r5, r3
 800c736:	4413      	add	r3, r2
 800c738:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800c73c:	3601      	adds	r6, #1
 800c73e:	3508      	adds	r5, #8
 800c740:	e7d6      	b.n	800c6f0 <__kernel_rem_pio2+0x388>
 800c742:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c746:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c74a:	f7f3 ff55 	bl	80005f8 <__aeabi_dmul>
 800c74e:	4602      	mov	r2, r0
 800c750:	460b      	mov	r3, r1
 800c752:	4640      	mov	r0, r8
 800c754:	4649      	mov	r1, r9
 800c756:	f7f3 fd99 	bl	800028c <__adddf3>
 800c75a:	3701      	adds	r7, #1
 800c75c:	4680      	mov	r8, r0
 800c75e:	4689      	mov	r9, r1
 800c760:	e7e3      	b.n	800c72a <__kernel_rem_pio2+0x3c2>
 800c762:	3d01      	subs	r5, #1
 800c764:	e741      	b.n	800c5ea <__kernel_rem_pio2+0x282>
 800c766:	f1ca 0000 	rsb	r0, sl, #0
 800c76a:	ec47 6b10 	vmov	d0, r6, r7
 800c76e:	f000 fc2b 	bl	800cfc8 <scalbn>
 800c772:	ec57 6b10 	vmov	r6, r7, d0
 800c776:	2200      	movs	r2, #0
 800c778:	4b99      	ldr	r3, [pc, #612]	; (800c9e0 <__kernel_rem_pio2+0x678>)
 800c77a:	ee10 0a10 	vmov	r0, s0
 800c77e:	4639      	mov	r1, r7
 800c780:	f7f4 f9c0 	bl	8000b04 <__aeabi_dcmpge>
 800c784:	b1f8      	cbz	r0, 800c7c6 <__kernel_rem_pio2+0x45e>
 800c786:	2200      	movs	r2, #0
 800c788:	4b96      	ldr	r3, [pc, #600]	; (800c9e4 <__kernel_rem_pio2+0x67c>)
 800c78a:	4630      	mov	r0, r6
 800c78c:	4639      	mov	r1, r7
 800c78e:	f7f3 ff33 	bl	80005f8 <__aeabi_dmul>
 800c792:	f7f4 f9e1 	bl	8000b58 <__aeabi_d2iz>
 800c796:	4680      	mov	r8, r0
 800c798:	f7f3 fec4 	bl	8000524 <__aeabi_i2d>
 800c79c:	2200      	movs	r2, #0
 800c79e:	4b90      	ldr	r3, [pc, #576]	; (800c9e0 <__kernel_rem_pio2+0x678>)
 800c7a0:	f7f3 ff2a 	bl	80005f8 <__aeabi_dmul>
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	4639      	mov	r1, r7
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	f7f3 fd6c 	bl	8000288 <__aeabi_dsub>
 800c7b0:	f7f4 f9d2 	bl	8000b58 <__aeabi_d2iz>
 800c7b4:	1c65      	adds	r5, r4, #1
 800c7b6:	ab0e      	add	r3, sp, #56	; 0x38
 800c7b8:	f10a 0a18 	add.w	sl, sl, #24
 800c7bc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c7c0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c7c4:	e719      	b.n	800c5fa <__kernel_rem_pio2+0x292>
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	4639      	mov	r1, r7
 800c7ca:	f7f4 f9c5 	bl	8000b58 <__aeabi_d2iz>
 800c7ce:	ab0e      	add	r3, sp, #56	; 0x38
 800c7d0:	4625      	mov	r5, r4
 800c7d2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c7d6:	e710      	b.n	800c5fa <__kernel_rem_pio2+0x292>
 800c7d8:	ab0e      	add	r3, sp, #56	; 0x38
 800c7da:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c7de:	f7f3 fea1 	bl	8000524 <__aeabi_i2d>
 800c7e2:	4642      	mov	r2, r8
 800c7e4:	464b      	mov	r3, r9
 800c7e6:	f7f3 ff07 	bl	80005f8 <__aeabi_dmul>
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800c7f0:	4b7c      	ldr	r3, [pc, #496]	; (800c9e4 <__kernel_rem_pio2+0x67c>)
 800c7f2:	4640      	mov	r0, r8
 800c7f4:	4649      	mov	r1, r9
 800c7f6:	f7f3 feff 	bl	80005f8 <__aeabi_dmul>
 800c7fa:	3f01      	subs	r7, #1
 800c7fc:	4680      	mov	r8, r0
 800c7fe:	4689      	mov	r9, r1
 800c800:	e708      	b.n	800c614 <__kernel_rem_pio2+0x2ac>
 800c802:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800c806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800c80e:	f7f3 fef3 	bl	80005f8 <__aeabi_dmul>
 800c812:	4602      	mov	r2, r0
 800c814:	460b      	mov	r3, r1
 800c816:	4640      	mov	r0, r8
 800c818:	4649      	mov	r1, r9
 800c81a:	f7f3 fd37 	bl	800028c <__adddf3>
 800c81e:	3701      	adds	r7, #1
 800c820:	4680      	mov	r8, r0
 800c822:	4689      	mov	r9, r1
 800c824:	9b04      	ldr	r3, [sp, #16]
 800c826:	429f      	cmp	r7, r3
 800c828:	dc01      	bgt.n	800c82e <__kernel_rem_pio2+0x4c6>
 800c82a:	45ba      	cmp	sl, r7
 800c82c:	dae9      	bge.n	800c802 <__kernel_rem_pio2+0x49a>
 800c82e:	ab4a      	add	r3, sp, #296	; 0x128
 800c830:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c834:	e9c3 8900 	strd	r8, r9, [r3]
 800c838:	f10a 0a01 	add.w	sl, sl, #1
 800c83c:	3e08      	subs	r6, #8
 800c83e:	e6f0      	b.n	800c622 <__kernel_rem_pio2+0x2ba>
 800c840:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c842:	2b03      	cmp	r3, #3
 800c844:	d85b      	bhi.n	800c8fe <__kernel_rem_pio2+0x596>
 800c846:	e8df f003 	tbb	[pc, r3]
 800c84a:	264a      	.short	0x264a
 800c84c:	0226      	.short	0x0226
 800c84e:	ab9a      	add	r3, sp, #616	; 0x268
 800c850:	441c      	add	r4, r3
 800c852:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c856:	46a2      	mov	sl, r4
 800c858:	46ab      	mov	fp, r5
 800c85a:	f1bb 0f00 	cmp.w	fp, #0
 800c85e:	dc6c      	bgt.n	800c93a <__kernel_rem_pio2+0x5d2>
 800c860:	46a2      	mov	sl, r4
 800c862:	46ab      	mov	fp, r5
 800c864:	f1bb 0f01 	cmp.w	fp, #1
 800c868:	f300 8086 	bgt.w	800c978 <__kernel_rem_pio2+0x610>
 800c86c:	2000      	movs	r0, #0
 800c86e:	2100      	movs	r1, #0
 800c870:	2d01      	cmp	r5, #1
 800c872:	f300 80a0 	bgt.w	800c9b6 <__kernel_rem_pio2+0x64e>
 800c876:	9b02      	ldr	r3, [sp, #8]
 800c878:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c87c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800c880:	2b00      	cmp	r3, #0
 800c882:	f040 809e 	bne.w	800c9c2 <__kernel_rem_pio2+0x65a>
 800c886:	9b01      	ldr	r3, [sp, #4]
 800c888:	e9c3 7800 	strd	r7, r8, [r3]
 800c88c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c890:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c894:	e033      	b.n	800c8fe <__kernel_rem_pio2+0x596>
 800c896:	3408      	adds	r4, #8
 800c898:	ab4a      	add	r3, sp, #296	; 0x128
 800c89a:	441c      	add	r4, r3
 800c89c:	462e      	mov	r6, r5
 800c89e:	2000      	movs	r0, #0
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	2e00      	cmp	r6, #0
 800c8a4:	da3a      	bge.n	800c91c <__kernel_rem_pio2+0x5b4>
 800c8a6:	9b02      	ldr	r3, [sp, #8]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d03d      	beq.n	800c928 <__kernel_rem_pio2+0x5c0>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8b2:	9c01      	ldr	r4, [sp, #4]
 800c8b4:	e9c4 2300 	strd	r2, r3, [r4]
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c8c0:	f7f3 fce2 	bl	8000288 <__aeabi_dsub>
 800c8c4:	ae4c      	add	r6, sp, #304	; 0x130
 800c8c6:	2401      	movs	r4, #1
 800c8c8:	42a5      	cmp	r5, r4
 800c8ca:	da30      	bge.n	800c92e <__kernel_rem_pio2+0x5c6>
 800c8cc:	9b02      	ldr	r3, [sp, #8]
 800c8ce:	b113      	cbz	r3, 800c8d6 <__kernel_rem_pio2+0x56e>
 800c8d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	9b01      	ldr	r3, [sp, #4]
 800c8d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c8dc:	e00f      	b.n	800c8fe <__kernel_rem_pio2+0x596>
 800c8de:	ab9a      	add	r3, sp, #616	; 0x268
 800c8e0:	441c      	add	r4, r3
 800c8e2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c8e6:	2000      	movs	r0, #0
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	2d00      	cmp	r5, #0
 800c8ec:	da10      	bge.n	800c910 <__kernel_rem_pio2+0x5a8>
 800c8ee:	9b02      	ldr	r3, [sp, #8]
 800c8f0:	b113      	cbz	r3, 800c8f8 <__kernel_rem_pio2+0x590>
 800c8f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	9b01      	ldr	r3, [sp, #4]
 800c8fa:	e9c3 0100 	strd	r0, r1, [r3]
 800c8fe:	9b06      	ldr	r3, [sp, #24]
 800c900:	f003 0007 	and.w	r0, r3, #7
 800c904:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c908:	ecbd 8b02 	vpop	{d8}
 800c90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c910:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c914:	f7f3 fcba 	bl	800028c <__adddf3>
 800c918:	3d01      	subs	r5, #1
 800c91a:	e7e6      	b.n	800c8ea <__kernel_rem_pio2+0x582>
 800c91c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c920:	f7f3 fcb4 	bl	800028c <__adddf3>
 800c924:	3e01      	subs	r6, #1
 800c926:	e7bc      	b.n	800c8a2 <__kernel_rem_pio2+0x53a>
 800c928:	4602      	mov	r2, r0
 800c92a:	460b      	mov	r3, r1
 800c92c:	e7c1      	b.n	800c8b2 <__kernel_rem_pio2+0x54a>
 800c92e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c932:	f7f3 fcab 	bl	800028c <__adddf3>
 800c936:	3401      	adds	r4, #1
 800c938:	e7c6      	b.n	800c8c8 <__kernel_rem_pio2+0x560>
 800c93a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800c93e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800c942:	4640      	mov	r0, r8
 800c944:	ec53 2b17 	vmov	r2, r3, d7
 800c948:	4649      	mov	r1, r9
 800c94a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c94e:	f7f3 fc9d 	bl	800028c <__adddf3>
 800c952:	4602      	mov	r2, r0
 800c954:	460b      	mov	r3, r1
 800c956:	4606      	mov	r6, r0
 800c958:	460f      	mov	r7, r1
 800c95a:	4640      	mov	r0, r8
 800c95c:	4649      	mov	r1, r9
 800c95e:	f7f3 fc93 	bl	8000288 <__aeabi_dsub>
 800c962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c966:	f7f3 fc91 	bl	800028c <__adddf3>
 800c96a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c96e:	e9ca 0100 	strd	r0, r1, [sl]
 800c972:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800c976:	e770      	b.n	800c85a <__kernel_rem_pio2+0x4f2>
 800c978:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800c97c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800c980:	4630      	mov	r0, r6
 800c982:	ec53 2b17 	vmov	r2, r3, d7
 800c986:	4639      	mov	r1, r7
 800c988:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c98c:	f7f3 fc7e 	bl	800028c <__adddf3>
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	4680      	mov	r8, r0
 800c996:	4689      	mov	r9, r1
 800c998:	4630      	mov	r0, r6
 800c99a:	4639      	mov	r1, r7
 800c99c:	f7f3 fc74 	bl	8000288 <__aeabi_dsub>
 800c9a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9a4:	f7f3 fc72 	bl	800028c <__adddf3>
 800c9a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c9ac:	e9ca 0100 	strd	r0, r1, [sl]
 800c9b0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800c9b4:	e756      	b.n	800c864 <__kernel_rem_pio2+0x4fc>
 800c9b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c9ba:	f7f3 fc67 	bl	800028c <__adddf3>
 800c9be:	3d01      	subs	r5, #1
 800c9c0:	e756      	b.n	800c870 <__kernel_rem_pio2+0x508>
 800c9c2:	9b01      	ldr	r3, [sp, #4]
 800c9c4:	9a01      	ldr	r2, [sp, #4]
 800c9c6:	601f      	str	r7, [r3, #0]
 800c9c8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800c9cc:	605c      	str	r4, [r3, #4]
 800c9ce:	609d      	str	r5, [r3, #8]
 800c9d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c9d4:	60d3      	str	r3, [r2, #12]
 800c9d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9da:	6110      	str	r0, [r2, #16]
 800c9dc:	6153      	str	r3, [r2, #20]
 800c9de:	e78e      	b.n	800c8fe <__kernel_rem_pio2+0x596>
 800c9e0:	41700000 	.word	0x41700000
 800c9e4:	3e700000 	.word	0x3e700000

0800c9e8 <__kernel_sin>:
 800c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ec:	ec55 4b10 	vmov	r4, r5, d0
 800c9f0:	b085      	sub	sp, #20
 800c9f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c9f6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c9fa:	ed8d 1b00 	vstr	d1, [sp]
 800c9fe:	9002      	str	r0, [sp, #8]
 800ca00:	da06      	bge.n	800ca10 <__kernel_sin+0x28>
 800ca02:	ee10 0a10 	vmov	r0, s0
 800ca06:	4629      	mov	r1, r5
 800ca08:	f7f4 f8a6 	bl	8000b58 <__aeabi_d2iz>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	d051      	beq.n	800cab4 <__kernel_sin+0xcc>
 800ca10:	4622      	mov	r2, r4
 800ca12:	462b      	mov	r3, r5
 800ca14:	4620      	mov	r0, r4
 800ca16:	4629      	mov	r1, r5
 800ca18:	f7f3 fdee 	bl	80005f8 <__aeabi_dmul>
 800ca1c:	4682      	mov	sl, r0
 800ca1e:	468b      	mov	fp, r1
 800ca20:	4602      	mov	r2, r0
 800ca22:	460b      	mov	r3, r1
 800ca24:	4620      	mov	r0, r4
 800ca26:	4629      	mov	r1, r5
 800ca28:	f7f3 fde6 	bl	80005f8 <__aeabi_dmul>
 800ca2c:	a341      	add	r3, pc, #260	; (adr r3, 800cb34 <__kernel_sin+0x14c>)
 800ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca32:	4680      	mov	r8, r0
 800ca34:	4689      	mov	r9, r1
 800ca36:	4650      	mov	r0, sl
 800ca38:	4659      	mov	r1, fp
 800ca3a:	f7f3 fddd 	bl	80005f8 <__aeabi_dmul>
 800ca3e:	a33f      	add	r3, pc, #252	; (adr r3, 800cb3c <__kernel_sin+0x154>)
 800ca40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca44:	f7f3 fc20 	bl	8000288 <__aeabi_dsub>
 800ca48:	4652      	mov	r2, sl
 800ca4a:	465b      	mov	r3, fp
 800ca4c:	f7f3 fdd4 	bl	80005f8 <__aeabi_dmul>
 800ca50:	a33c      	add	r3, pc, #240	; (adr r3, 800cb44 <__kernel_sin+0x15c>)
 800ca52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca56:	f7f3 fc19 	bl	800028c <__adddf3>
 800ca5a:	4652      	mov	r2, sl
 800ca5c:	465b      	mov	r3, fp
 800ca5e:	f7f3 fdcb 	bl	80005f8 <__aeabi_dmul>
 800ca62:	a33a      	add	r3, pc, #232	; (adr r3, 800cb4c <__kernel_sin+0x164>)
 800ca64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca68:	f7f3 fc0e 	bl	8000288 <__aeabi_dsub>
 800ca6c:	4652      	mov	r2, sl
 800ca6e:	465b      	mov	r3, fp
 800ca70:	f7f3 fdc2 	bl	80005f8 <__aeabi_dmul>
 800ca74:	a337      	add	r3, pc, #220	; (adr r3, 800cb54 <__kernel_sin+0x16c>)
 800ca76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7a:	f7f3 fc07 	bl	800028c <__adddf3>
 800ca7e:	9b02      	ldr	r3, [sp, #8]
 800ca80:	4606      	mov	r6, r0
 800ca82:	460f      	mov	r7, r1
 800ca84:	b9db      	cbnz	r3, 800cabe <__kernel_sin+0xd6>
 800ca86:	4602      	mov	r2, r0
 800ca88:	460b      	mov	r3, r1
 800ca8a:	4650      	mov	r0, sl
 800ca8c:	4659      	mov	r1, fp
 800ca8e:	f7f3 fdb3 	bl	80005f8 <__aeabi_dmul>
 800ca92:	a325      	add	r3, pc, #148	; (adr r3, 800cb28 <__kernel_sin+0x140>)
 800ca94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca98:	f7f3 fbf6 	bl	8000288 <__aeabi_dsub>
 800ca9c:	4642      	mov	r2, r8
 800ca9e:	464b      	mov	r3, r9
 800caa0:	f7f3 fdaa 	bl	80005f8 <__aeabi_dmul>
 800caa4:	4602      	mov	r2, r0
 800caa6:	460b      	mov	r3, r1
 800caa8:	4620      	mov	r0, r4
 800caaa:	4629      	mov	r1, r5
 800caac:	f7f3 fbee 	bl	800028c <__adddf3>
 800cab0:	4604      	mov	r4, r0
 800cab2:	460d      	mov	r5, r1
 800cab4:	ec45 4b10 	vmov	d0, r4, r5
 800cab8:	b005      	add	sp, #20
 800caba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cabe:	2200      	movs	r2, #0
 800cac0:	4b1b      	ldr	r3, [pc, #108]	; (800cb30 <__kernel_sin+0x148>)
 800cac2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cac6:	f7f3 fd97 	bl	80005f8 <__aeabi_dmul>
 800caca:	4632      	mov	r2, r6
 800cacc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cad0:	463b      	mov	r3, r7
 800cad2:	4640      	mov	r0, r8
 800cad4:	4649      	mov	r1, r9
 800cad6:	f7f3 fd8f 	bl	80005f8 <__aeabi_dmul>
 800cada:	4602      	mov	r2, r0
 800cadc:	460b      	mov	r3, r1
 800cade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cae2:	f7f3 fbd1 	bl	8000288 <__aeabi_dsub>
 800cae6:	4652      	mov	r2, sl
 800cae8:	465b      	mov	r3, fp
 800caea:	f7f3 fd85 	bl	80005f8 <__aeabi_dmul>
 800caee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800caf2:	f7f3 fbc9 	bl	8000288 <__aeabi_dsub>
 800caf6:	a30c      	add	r3, pc, #48	; (adr r3, 800cb28 <__kernel_sin+0x140>)
 800caf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafc:	4606      	mov	r6, r0
 800cafe:	460f      	mov	r7, r1
 800cb00:	4640      	mov	r0, r8
 800cb02:	4649      	mov	r1, r9
 800cb04:	f7f3 fd78 	bl	80005f8 <__aeabi_dmul>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	4630      	mov	r0, r6
 800cb0e:	4639      	mov	r1, r7
 800cb10:	f7f3 fbbc 	bl	800028c <__adddf3>
 800cb14:	4602      	mov	r2, r0
 800cb16:	460b      	mov	r3, r1
 800cb18:	4620      	mov	r0, r4
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	f7f3 fbb4 	bl	8000288 <__aeabi_dsub>
 800cb20:	e7c6      	b.n	800cab0 <__kernel_sin+0xc8>
 800cb22:	bf00      	nop
 800cb24:	f3af 8000 	nop.w
 800cb28:	55555549 	.word	0x55555549
 800cb2c:	3fc55555 	.word	0x3fc55555
 800cb30:	3fe00000 	.word	0x3fe00000
 800cb34:	5acfd57c 	.word	0x5acfd57c
 800cb38:	3de5d93a 	.word	0x3de5d93a
 800cb3c:	8a2b9ceb 	.word	0x8a2b9ceb
 800cb40:	3e5ae5e6 	.word	0x3e5ae5e6
 800cb44:	57b1fe7d 	.word	0x57b1fe7d
 800cb48:	3ec71de3 	.word	0x3ec71de3
 800cb4c:	19c161d5 	.word	0x19c161d5
 800cb50:	3f2a01a0 	.word	0x3f2a01a0
 800cb54:	1110f8a6 	.word	0x1110f8a6
 800cb58:	3f811111 	.word	0x3f811111
 800cb5c:	00000000 	.word	0x00000000

0800cb60 <atan>:
 800cb60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb64:	ec55 4b10 	vmov	r4, r5, d0
 800cb68:	4bc3      	ldr	r3, [pc, #780]	; (800ce78 <atan+0x318>)
 800cb6a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cb6e:	429e      	cmp	r6, r3
 800cb70:	46ab      	mov	fp, r5
 800cb72:	dd18      	ble.n	800cba6 <atan+0x46>
 800cb74:	4bc1      	ldr	r3, [pc, #772]	; (800ce7c <atan+0x31c>)
 800cb76:	429e      	cmp	r6, r3
 800cb78:	dc01      	bgt.n	800cb7e <atan+0x1e>
 800cb7a:	d109      	bne.n	800cb90 <atan+0x30>
 800cb7c:	b144      	cbz	r4, 800cb90 <atan+0x30>
 800cb7e:	4622      	mov	r2, r4
 800cb80:	462b      	mov	r3, r5
 800cb82:	4620      	mov	r0, r4
 800cb84:	4629      	mov	r1, r5
 800cb86:	f7f3 fb81 	bl	800028c <__adddf3>
 800cb8a:	4604      	mov	r4, r0
 800cb8c:	460d      	mov	r5, r1
 800cb8e:	e006      	b.n	800cb9e <atan+0x3e>
 800cb90:	f1bb 0f00 	cmp.w	fp, #0
 800cb94:	f340 8131 	ble.w	800cdfa <atan+0x29a>
 800cb98:	a59b      	add	r5, pc, #620	; (adr r5, 800ce08 <atan+0x2a8>)
 800cb9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb9e:	ec45 4b10 	vmov	d0, r4, r5
 800cba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba6:	4bb6      	ldr	r3, [pc, #728]	; (800ce80 <atan+0x320>)
 800cba8:	429e      	cmp	r6, r3
 800cbaa:	dc14      	bgt.n	800cbd6 <atan+0x76>
 800cbac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cbb0:	429e      	cmp	r6, r3
 800cbb2:	dc0d      	bgt.n	800cbd0 <atan+0x70>
 800cbb4:	a396      	add	r3, pc, #600	; (adr r3, 800ce10 <atan+0x2b0>)
 800cbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbba:	ee10 0a10 	vmov	r0, s0
 800cbbe:	4629      	mov	r1, r5
 800cbc0:	f7f3 fb64 	bl	800028c <__adddf3>
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	4baf      	ldr	r3, [pc, #700]	; (800ce84 <atan+0x324>)
 800cbc8:	f7f3 ffa6 	bl	8000b18 <__aeabi_dcmpgt>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	d1e6      	bne.n	800cb9e <atan+0x3e>
 800cbd0:	f04f 3aff 	mov.w	sl, #4294967295
 800cbd4:	e02b      	b.n	800cc2e <atan+0xce>
 800cbd6:	f000 f963 	bl	800cea0 <fabs>
 800cbda:	4bab      	ldr	r3, [pc, #684]	; (800ce88 <atan+0x328>)
 800cbdc:	429e      	cmp	r6, r3
 800cbde:	ec55 4b10 	vmov	r4, r5, d0
 800cbe2:	f300 80bf 	bgt.w	800cd64 <atan+0x204>
 800cbe6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cbea:	429e      	cmp	r6, r3
 800cbec:	f300 80a0 	bgt.w	800cd30 <atan+0x1d0>
 800cbf0:	ee10 2a10 	vmov	r2, s0
 800cbf4:	ee10 0a10 	vmov	r0, s0
 800cbf8:	462b      	mov	r3, r5
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	f7f3 fb46 	bl	800028c <__adddf3>
 800cc00:	2200      	movs	r2, #0
 800cc02:	4ba0      	ldr	r3, [pc, #640]	; (800ce84 <atan+0x324>)
 800cc04:	f7f3 fb40 	bl	8000288 <__aeabi_dsub>
 800cc08:	2200      	movs	r2, #0
 800cc0a:	4606      	mov	r6, r0
 800cc0c:	460f      	mov	r7, r1
 800cc0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc12:	4620      	mov	r0, r4
 800cc14:	4629      	mov	r1, r5
 800cc16:	f7f3 fb39 	bl	800028c <__adddf3>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	4630      	mov	r0, r6
 800cc20:	4639      	mov	r1, r7
 800cc22:	f7f3 fe13 	bl	800084c <__aeabi_ddiv>
 800cc26:	f04f 0a00 	mov.w	sl, #0
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	460d      	mov	r5, r1
 800cc2e:	4622      	mov	r2, r4
 800cc30:	462b      	mov	r3, r5
 800cc32:	4620      	mov	r0, r4
 800cc34:	4629      	mov	r1, r5
 800cc36:	f7f3 fcdf 	bl	80005f8 <__aeabi_dmul>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	4680      	mov	r8, r0
 800cc40:	4689      	mov	r9, r1
 800cc42:	f7f3 fcd9 	bl	80005f8 <__aeabi_dmul>
 800cc46:	a374      	add	r3, pc, #464	; (adr r3, 800ce18 <atan+0x2b8>)
 800cc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4c:	4606      	mov	r6, r0
 800cc4e:	460f      	mov	r7, r1
 800cc50:	f7f3 fcd2 	bl	80005f8 <__aeabi_dmul>
 800cc54:	a372      	add	r3, pc, #456	; (adr r3, 800ce20 <atan+0x2c0>)
 800cc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5a:	f7f3 fb17 	bl	800028c <__adddf3>
 800cc5e:	4632      	mov	r2, r6
 800cc60:	463b      	mov	r3, r7
 800cc62:	f7f3 fcc9 	bl	80005f8 <__aeabi_dmul>
 800cc66:	a370      	add	r3, pc, #448	; (adr r3, 800ce28 <atan+0x2c8>)
 800cc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6c:	f7f3 fb0e 	bl	800028c <__adddf3>
 800cc70:	4632      	mov	r2, r6
 800cc72:	463b      	mov	r3, r7
 800cc74:	f7f3 fcc0 	bl	80005f8 <__aeabi_dmul>
 800cc78:	a36d      	add	r3, pc, #436	; (adr r3, 800ce30 <atan+0x2d0>)
 800cc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7e:	f7f3 fb05 	bl	800028c <__adddf3>
 800cc82:	4632      	mov	r2, r6
 800cc84:	463b      	mov	r3, r7
 800cc86:	f7f3 fcb7 	bl	80005f8 <__aeabi_dmul>
 800cc8a:	a36b      	add	r3, pc, #428	; (adr r3, 800ce38 <atan+0x2d8>)
 800cc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc90:	f7f3 fafc 	bl	800028c <__adddf3>
 800cc94:	4632      	mov	r2, r6
 800cc96:	463b      	mov	r3, r7
 800cc98:	f7f3 fcae 	bl	80005f8 <__aeabi_dmul>
 800cc9c:	a368      	add	r3, pc, #416	; (adr r3, 800ce40 <atan+0x2e0>)
 800cc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca2:	f7f3 faf3 	bl	800028c <__adddf3>
 800cca6:	4642      	mov	r2, r8
 800cca8:	464b      	mov	r3, r9
 800ccaa:	f7f3 fca5 	bl	80005f8 <__aeabi_dmul>
 800ccae:	a366      	add	r3, pc, #408	; (adr r3, 800ce48 <atan+0x2e8>)
 800ccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb4:	4680      	mov	r8, r0
 800ccb6:	4689      	mov	r9, r1
 800ccb8:	4630      	mov	r0, r6
 800ccba:	4639      	mov	r1, r7
 800ccbc:	f7f3 fc9c 	bl	80005f8 <__aeabi_dmul>
 800ccc0:	a363      	add	r3, pc, #396	; (adr r3, 800ce50 <atan+0x2f0>)
 800ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc6:	f7f3 fadf 	bl	8000288 <__aeabi_dsub>
 800ccca:	4632      	mov	r2, r6
 800cccc:	463b      	mov	r3, r7
 800ccce:	f7f3 fc93 	bl	80005f8 <__aeabi_dmul>
 800ccd2:	a361      	add	r3, pc, #388	; (adr r3, 800ce58 <atan+0x2f8>)
 800ccd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd8:	f7f3 fad6 	bl	8000288 <__aeabi_dsub>
 800ccdc:	4632      	mov	r2, r6
 800ccde:	463b      	mov	r3, r7
 800cce0:	f7f3 fc8a 	bl	80005f8 <__aeabi_dmul>
 800cce4:	a35e      	add	r3, pc, #376	; (adr r3, 800ce60 <atan+0x300>)
 800cce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccea:	f7f3 facd 	bl	8000288 <__aeabi_dsub>
 800ccee:	4632      	mov	r2, r6
 800ccf0:	463b      	mov	r3, r7
 800ccf2:	f7f3 fc81 	bl	80005f8 <__aeabi_dmul>
 800ccf6:	a35c      	add	r3, pc, #368	; (adr r3, 800ce68 <atan+0x308>)
 800ccf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfc:	f7f3 fac4 	bl	8000288 <__aeabi_dsub>
 800cd00:	4632      	mov	r2, r6
 800cd02:	463b      	mov	r3, r7
 800cd04:	f7f3 fc78 	bl	80005f8 <__aeabi_dmul>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	4640      	mov	r0, r8
 800cd0e:	4649      	mov	r1, r9
 800cd10:	f7f3 fabc 	bl	800028c <__adddf3>
 800cd14:	4622      	mov	r2, r4
 800cd16:	462b      	mov	r3, r5
 800cd18:	f7f3 fc6e 	bl	80005f8 <__aeabi_dmul>
 800cd1c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	d14b      	bne.n	800cdbe <atan+0x25e>
 800cd26:	4620      	mov	r0, r4
 800cd28:	4629      	mov	r1, r5
 800cd2a:	f7f3 faad 	bl	8000288 <__aeabi_dsub>
 800cd2e:	e72c      	b.n	800cb8a <atan+0x2a>
 800cd30:	ee10 0a10 	vmov	r0, s0
 800cd34:	2200      	movs	r2, #0
 800cd36:	4b53      	ldr	r3, [pc, #332]	; (800ce84 <atan+0x324>)
 800cd38:	4629      	mov	r1, r5
 800cd3a:	f7f3 faa5 	bl	8000288 <__aeabi_dsub>
 800cd3e:	2200      	movs	r2, #0
 800cd40:	4606      	mov	r6, r0
 800cd42:	460f      	mov	r7, r1
 800cd44:	4b4f      	ldr	r3, [pc, #316]	; (800ce84 <atan+0x324>)
 800cd46:	4620      	mov	r0, r4
 800cd48:	4629      	mov	r1, r5
 800cd4a:	f7f3 fa9f 	bl	800028c <__adddf3>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	460b      	mov	r3, r1
 800cd52:	4630      	mov	r0, r6
 800cd54:	4639      	mov	r1, r7
 800cd56:	f7f3 fd79 	bl	800084c <__aeabi_ddiv>
 800cd5a:	f04f 0a01 	mov.w	sl, #1
 800cd5e:	4604      	mov	r4, r0
 800cd60:	460d      	mov	r5, r1
 800cd62:	e764      	b.n	800cc2e <atan+0xce>
 800cd64:	4b49      	ldr	r3, [pc, #292]	; (800ce8c <atan+0x32c>)
 800cd66:	429e      	cmp	r6, r3
 800cd68:	dc1d      	bgt.n	800cda6 <atan+0x246>
 800cd6a:	ee10 0a10 	vmov	r0, s0
 800cd6e:	2200      	movs	r2, #0
 800cd70:	4b47      	ldr	r3, [pc, #284]	; (800ce90 <atan+0x330>)
 800cd72:	4629      	mov	r1, r5
 800cd74:	f7f3 fa88 	bl	8000288 <__aeabi_dsub>
 800cd78:	2200      	movs	r2, #0
 800cd7a:	4606      	mov	r6, r0
 800cd7c:	460f      	mov	r7, r1
 800cd7e:	4b44      	ldr	r3, [pc, #272]	; (800ce90 <atan+0x330>)
 800cd80:	4620      	mov	r0, r4
 800cd82:	4629      	mov	r1, r5
 800cd84:	f7f3 fc38 	bl	80005f8 <__aeabi_dmul>
 800cd88:	2200      	movs	r2, #0
 800cd8a:	4b3e      	ldr	r3, [pc, #248]	; (800ce84 <atan+0x324>)
 800cd8c:	f7f3 fa7e 	bl	800028c <__adddf3>
 800cd90:	4602      	mov	r2, r0
 800cd92:	460b      	mov	r3, r1
 800cd94:	4630      	mov	r0, r6
 800cd96:	4639      	mov	r1, r7
 800cd98:	f7f3 fd58 	bl	800084c <__aeabi_ddiv>
 800cd9c:	f04f 0a02 	mov.w	sl, #2
 800cda0:	4604      	mov	r4, r0
 800cda2:	460d      	mov	r5, r1
 800cda4:	e743      	b.n	800cc2e <atan+0xce>
 800cda6:	462b      	mov	r3, r5
 800cda8:	ee10 2a10 	vmov	r2, s0
 800cdac:	2000      	movs	r0, #0
 800cdae:	4939      	ldr	r1, [pc, #228]	; (800ce94 <atan+0x334>)
 800cdb0:	f7f3 fd4c 	bl	800084c <__aeabi_ddiv>
 800cdb4:	f04f 0a03 	mov.w	sl, #3
 800cdb8:	4604      	mov	r4, r0
 800cdba:	460d      	mov	r5, r1
 800cdbc:	e737      	b.n	800cc2e <atan+0xce>
 800cdbe:	4b36      	ldr	r3, [pc, #216]	; (800ce98 <atan+0x338>)
 800cdc0:	4e36      	ldr	r6, [pc, #216]	; (800ce9c <atan+0x33c>)
 800cdc2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800cdc6:	4456      	add	r6, sl
 800cdc8:	449a      	add	sl, r3
 800cdca:	e9da 2300 	ldrd	r2, r3, [sl]
 800cdce:	f7f3 fa5b 	bl	8000288 <__aeabi_dsub>
 800cdd2:	4622      	mov	r2, r4
 800cdd4:	462b      	mov	r3, r5
 800cdd6:	f7f3 fa57 	bl	8000288 <__aeabi_dsub>
 800cdda:	4602      	mov	r2, r0
 800cddc:	460b      	mov	r3, r1
 800cdde:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cde2:	f7f3 fa51 	bl	8000288 <__aeabi_dsub>
 800cde6:	f1bb 0f00 	cmp.w	fp, #0
 800cdea:	4604      	mov	r4, r0
 800cdec:	460d      	mov	r5, r1
 800cdee:	f6bf aed6 	bge.w	800cb9e <atan+0x3e>
 800cdf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdf6:	461d      	mov	r5, r3
 800cdf8:	e6d1      	b.n	800cb9e <atan+0x3e>
 800cdfa:	a51d      	add	r5, pc, #116	; (adr r5, 800ce70 <atan+0x310>)
 800cdfc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ce00:	e6cd      	b.n	800cb9e <atan+0x3e>
 800ce02:	bf00      	nop
 800ce04:	f3af 8000 	nop.w
 800ce08:	54442d18 	.word	0x54442d18
 800ce0c:	3ff921fb 	.word	0x3ff921fb
 800ce10:	8800759c 	.word	0x8800759c
 800ce14:	7e37e43c 	.word	0x7e37e43c
 800ce18:	e322da11 	.word	0xe322da11
 800ce1c:	3f90ad3a 	.word	0x3f90ad3a
 800ce20:	24760deb 	.word	0x24760deb
 800ce24:	3fa97b4b 	.word	0x3fa97b4b
 800ce28:	a0d03d51 	.word	0xa0d03d51
 800ce2c:	3fb10d66 	.word	0x3fb10d66
 800ce30:	c54c206e 	.word	0xc54c206e
 800ce34:	3fb745cd 	.word	0x3fb745cd
 800ce38:	920083ff 	.word	0x920083ff
 800ce3c:	3fc24924 	.word	0x3fc24924
 800ce40:	5555550d 	.word	0x5555550d
 800ce44:	3fd55555 	.word	0x3fd55555
 800ce48:	2c6a6c2f 	.word	0x2c6a6c2f
 800ce4c:	bfa2b444 	.word	0xbfa2b444
 800ce50:	52defd9a 	.word	0x52defd9a
 800ce54:	3fadde2d 	.word	0x3fadde2d
 800ce58:	af749a6d 	.word	0xaf749a6d
 800ce5c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ce60:	fe231671 	.word	0xfe231671
 800ce64:	3fbc71c6 	.word	0x3fbc71c6
 800ce68:	9998ebc4 	.word	0x9998ebc4
 800ce6c:	3fc99999 	.word	0x3fc99999
 800ce70:	54442d18 	.word	0x54442d18
 800ce74:	bff921fb 	.word	0xbff921fb
 800ce78:	440fffff 	.word	0x440fffff
 800ce7c:	7ff00000 	.word	0x7ff00000
 800ce80:	3fdbffff 	.word	0x3fdbffff
 800ce84:	3ff00000 	.word	0x3ff00000
 800ce88:	3ff2ffff 	.word	0x3ff2ffff
 800ce8c:	40037fff 	.word	0x40037fff
 800ce90:	3ff80000 	.word	0x3ff80000
 800ce94:	bff00000 	.word	0xbff00000
 800ce98:	0800da70 	.word	0x0800da70
 800ce9c:	0800da50 	.word	0x0800da50

0800cea0 <fabs>:
 800cea0:	ec51 0b10 	vmov	r0, r1, d0
 800cea4:	ee10 2a10 	vmov	r2, s0
 800cea8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ceac:	ec43 2b10 	vmov	d0, r2, r3
 800ceb0:	4770      	bx	lr
 800ceb2:	0000      	movs	r0, r0
 800ceb4:	0000      	movs	r0, r0
	...

0800ceb8 <floor>:
 800ceb8:	ec51 0b10 	vmov	r0, r1, d0
 800cebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cec4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cec8:	2e13      	cmp	r6, #19
 800ceca:	460c      	mov	r4, r1
 800cecc:	ee10 5a10 	vmov	r5, s0
 800ced0:	4680      	mov	r8, r0
 800ced2:	dc34      	bgt.n	800cf3e <floor+0x86>
 800ced4:	2e00      	cmp	r6, #0
 800ced6:	da16      	bge.n	800cf06 <floor+0x4e>
 800ced8:	a335      	add	r3, pc, #212	; (adr r3, 800cfb0 <floor+0xf8>)
 800ceda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cede:	f7f3 f9d5 	bl	800028c <__adddf3>
 800cee2:	2200      	movs	r2, #0
 800cee4:	2300      	movs	r3, #0
 800cee6:	f7f3 fe17 	bl	8000b18 <__aeabi_dcmpgt>
 800ceea:	b148      	cbz	r0, 800cf00 <floor+0x48>
 800ceec:	2c00      	cmp	r4, #0
 800ceee:	da59      	bge.n	800cfa4 <floor+0xec>
 800cef0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cef4:	4a30      	ldr	r2, [pc, #192]	; (800cfb8 <floor+0x100>)
 800cef6:	432b      	orrs	r3, r5
 800cef8:	2500      	movs	r5, #0
 800cefa:	42ab      	cmp	r3, r5
 800cefc:	bf18      	it	ne
 800cefe:	4614      	movne	r4, r2
 800cf00:	4621      	mov	r1, r4
 800cf02:	4628      	mov	r0, r5
 800cf04:	e025      	b.n	800cf52 <floor+0x9a>
 800cf06:	4f2d      	ldr	r7, [pc, #180]	; (800cfbc <floor+0x104>)
 800cf08:	4137      	asrs	r7, r6
 800cf0a:	ea01 0307 	and.w	r3, r1, r7
 800cf0e:	4303      	orrs	r3, r0
 800cf10:	d01f      	beq.n	800cf52 <floor+0x9a>
 800cf12:	a327      	add	r3, pc, #156	; (adr r3, 800cfb0 <floor+0xf8>)
 800cf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf18:	f7f3 f9b8 	bl	800028c <__adddf3>
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	2300      	movs	r3, #0
 800cf20:	f7f3 fdfa 	bl	8000b18 <__aeabi_dcmpgt>
 800cf24:	2800      	cmp	r0, #0
 800cf26:	d0eb      	beq.n	800cf00 <floor+0x48>
 800cf28:	2c00      	cmp	r4, #0
 800cf2a:	bfbe      	ittt	lt
 800cf2c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cf30:	fa43 f606 	asrlt.w	r6, r3, r6
 800cf34:	19a4      	addlt	r4, r4, r6
 800cf36:	ea24 0407 	bic.w	r4, r4, r7
 800cf3a:	2500      	movs	r5, #0
 800cf3c:	e7e0      	b.n	800cf00 <floor+0x48>
 800cf3e:	2e33      	cmp	r6, #51	; 0x33
 800cf40:	dd0b      	ble.n	800cf5a <floor+0xa2>
 800cf42:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cf46:	d104      	bne.n	800cf52 <floor+0x9a>
 800cf48:	ee10 2a10 	vmov	r2, s0
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	f7f3 f99d 	bl	800028c <__adddf3>
 800cf52:	ec41 0b10 	vmov	d0, r0, r1
 800cf56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf5a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800cf5e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf62:	fa23 f707 	lsr.w	r7, r3, r7
 800cf66:	4207      	tst	r7, r0
 800cf68:	d0f3      	beq.n	800cf52 <floor+0x9a>
 800cf6a:	a311      	add	r3, pc, #68	; (adr r3, 800cfb0 <floor+0xf8>)
 800cf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf70:	f7f3 f98c 	bl	800028c <__adddf3>
 800cf74:	2200      	movs	r2, #0
 800cf76:	2300      	movs	r3, #0
 800cf78:	f7f3 fdce 	bl	8000b18 <__aeabi_dcmpgt>
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	d0bf      	beq.n	800cf00 <floor+0x48>
 800cf80:	2c00      	cmp	r4, #0
 800cf82:	da02      	bge.n	800cf8a <floor+0xd2>
 800cf84:	2e14      	cmp	r6, #20
 800cf86:	d103      	bne.n	800cf90 <floor+0xd8>
 800cf88:	3401      	adds	r4, #1
 800cf8a:	ea25 0507 	bic.w	r5, r5, r7
 800cf8e:	e7b7      	b.n	800cf00 <floor+0x48>
 800cf90:	2301      	movs	r3, #1
 800cf92:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cf96:	fa03 f606 	lsl.w	r6, r3, r6
 800cf9a:	4435      	add	r5, r6
 800cf9c:	4545      	cmp	r5, r8
 800cf9e:	bf38      	it	cc
 800cfa0:	18e4      	addcc	r4, r4, r3
 800cfa2:	e7f2      	b.n	800cf8a <floor+0xd2>
 800cfa4:	2500      	movs	r5, #0
 800cfa6:	462c      	mov	r4, r5
 800cfa8:	e7aa      	b.n	800cf00 <floor+0x48>
 800cfaa:	bf00      	nop
 800cfac:	f3af 8000 	nop.w
 800cfb0:	8800759c 	.word	0x8800759c
 800cfb4:	7e37e43c 	.word	0x7e37e43c
 800cfb8:	bff00000 	.word	0xbff00000
 800cfbc:	000fffff 	.word	0x000fffff

0800cfc0 <matherr>:
 800cfc0:	2000      	movs	r0, #0
 800cfc2:	4770      	bx	lr
 800cfc4:	0000      	movs	r0, r0
	...

0800cfc8 <scalbn>:
 800cfc8:	b570      	push	{r4, r5, r6, lr}
 800cfca:	ec55 4b10 	vmov	r4, r5, d0
 800cfce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cfd2:	4606      	mov	r6, r0
 800cfd4:	462b      	mov	r3, r5
 800cfd6:	b9aa      	cbnz	r2, 800d004 <scalbn+0x3c>
 800cfd8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cfdc:	4323      	orrs	r3, r4
 800cfde:	d03b      	beq.n	800d058 <scalbn+0x90>
 800cfe0:	4b31      	ldr	r3, [pc, #196]	; (800d0a8 <scalbn+0xe0>)
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	ee10 0a10 	vmov	r0, s0
 800cfea:	f7f3 fb05 	bl	80005f8 <__aeabi_dmul>
 800cfee:	4b2f      	ldr	r3, [pc, #188]	; (800d0ac <scalbn+0xe4>)
 800cff0:	429e      	cmp	r6, r3
 800cff2:	4604      	mov	r4, r0
 800cff4:	460d      	mov	r5, r1
 800cff6:	da12      	bge.n	800d01e <scalbn+0x56>
 800cff8:	a327      	add	r3, pc, #156	; (adr r3, 800d098 <scalbn+0xd0>)
 800cffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffe:	f7f3 fafb 	bl	80005f8 <__aeabi_dmul>
 800d002:	e009      	b.n	800d018 <scalbn+0x50>
 800d004:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d008:	428a      	cmp	r2, r1
 800d00a:	d10c      	bne.n	800d026 <scalbn+0x5e>
 800d00c:	ee10 2a10 	vmov	r2, s0
 800d010:	4620      	mov	r0, r4
 800d012:	4629      	mov	r1, r5
 800d014:	f7f3 f93a 	bl	800028c <__adddf3>
 800d018:	4604      	mov	r4, r0
 800d01a:	460d      	mov	r5, r1
 800d01c:	e01c      	b.n	800d058 <scalbn+0x90>
 800d01e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d022:	460b      	mov	r3, r1
 800d024:	3a36      	subs	r2, #54	; 0x36
 800d026:	4432      	add	r2, r6
 800d028:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d02c:	428a      	cmp	r2, r1
 800d02e:	dd0b      	ble.n	800d048 <scalbn+0x80>
 800d030:	ec45 4b11 	vmov	d1, r4, r5
 800d034:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d0a0 <scalbn+0xd8>
 800d038:	f000 f917 	bl	800d26a <copysign>
 800d03c:	a318      	add	r3, pc, #96	; (adr r3, 800d0a0 <scalbn+0xd8>)
 800d03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d042:	ec51 0b10 	vmov	r0, r1, d0
 800d046:	e7da      	b.n	800cffe <scalbn+0x36>
 800d048:	2a00      	cmp	r2, #0
 800d04a:	dd08      	ble.n	800d05e <scalbn+0x96>
 800d04c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d050:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d054:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d058:	ec45 4b10 	vmov	d0, r4, r5
 800d05c:	bd70      	pop	{r4, r5, r6, pc}
 800d05e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d062:	da0d      	bge.n	800d080 <scalbn+0xb8>
 800d064:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d068:	429e      	cmp	r6, r3
 800d06a:	ec45 4b11 	vmov	d1, r4, r5
 800d06e:	dce1      	bgt.n	800d034 <scalbn+0x6c>
 800d070:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800d098 <scalbn+0xd0>
 800d074:	f000 f8f9 	bl	800d26a <copysign>
 800d078:	a307      	add	r3, pc, #28	; (adr r3, 800d098 <scalbn+0xd0>)
 800d07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07e:	e7e0      	b.n	800d042 <scalbn+0x7a>
 800d080:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d084:	3236      	adds	r2, #54	; 0x36
 800d086:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d08a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d08e:	4620      	mov	r0, r4
 800d090:	4629      	mov	r1, r5
 800d092:	2200      	movs	r2, #0
 800d094:	4b06      	ldr	r3, [pc, #24]	; (800d0b0 <scalbn+0xe8>)
 800d096:	e7b2      	b.n	800cffe <scalbn+0x36>
 800d098:	c2f8f359 	.word	0xc2f8f359
 800d09c:	01a56e1f 	.word	0x01a56e1f
 800d0a0:	8800759c 	.word	0x8800759c
 800d0a4:	7e37e43c 	.word	0x7e37e43c
 800d0a8:	43500000 	.word	0x43500000
 800d0ac:	ffff3cb0 	.word	0xffff3cb0
 800d0b0:	3c900000 	.word	0x3c900000

0800d0b4 <atanf>:
 800d0b4:	b538      	push	{r3, r4, r5, lr}
 800d0b6:	ee10 5a10 	vmov	r5, s0
 800d0ba:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d0be:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800d0c2:	eef0 7a40 	vmov.f32	s15, s0
 800d0c6:	db10      	blt.n	800d0ea <atanf+0x36>
 800d0c8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d0cc:	dd04      	ble.n	800d0d8 <atanf+0x24>
 800d0ce:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d0d2:	eeb0 0a67 	vmov.f32	s0, s15
 800d0d6:	bd38      	pop	{r3, r4, r5, pc}
 800d0d8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800d210 <atanf+0x15c>
 800d0dc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800d214 <atanf+0x160>
 800d0e0:	2d00      	cmp	r5, #0
 800d0e2:	bfd8      	it	le
 800d0e4:	eef0 7a47 	vmovle.f32	s15, s14
 800d0e8:	e7f3      	b.n	800d0d2 <atanf+0x1e>
 800d0ea:	4b4b      	ldr	r3, [pc, #300]	; (800d218 <atanf+0x164>)
 800d0ec:	429c      	cmp	r4, r3
 800d0ee:	dc10      	bgt.n	800d112 <atanf+0x5e>
 800d0f0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800d0f4:	da0a      	bge.n	800d10c <atanf+0x58>
 800d0f6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800d21c <atanf+0x168>
 800d0fa:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d0fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d102:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d10a:	dce2      	bgt.n	800d0d2 <atanf+0x1e>
 800d10c:	f04f 33ff 	mov.w	r3, #4294967295
 800d110:	e013      	b.n	800d13a <atanf+0x86>
 800d112:	f000 f8a3 	bl	800d25c <fabsf>
 800d116:	4b42      	ldr	r3, [pc, #264]	; (800d220 <atanf+0x16c>)
 800d118:	429c      	cmp	r4, r3
 800d11a:	dc4f      	bgt.n	800d1bc <atanf+0x108>
 800d11c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800d120:	429c      	cmp	r4, r3
 800d122:	dc41      	bgt.n	800d1a8 <atanf+0xf4>
 800d124:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800d128:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d12c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d130:	2300      	movs	r3, #0
 800d132:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d136:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d13a:	1c5a      	adds	r2, r3, #1
 800d13c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d140:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d224 <atanf+0x170>
 800d144:	eddf 5a38 	vldr	s11, [pc, #224]	; 800d228 <atanf+0x174>
 800d148:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800d22c <atanf+0x178>
 800d14c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d150:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d154:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d230 <atanf+0x17c>
 800d158:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d15c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800d234 <atanf+0x180>
 800d160:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d164:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d238 <atanf+0x184>
 800d168:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d16c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d23c <atanf+0x188>
 800d170:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d174:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800d240 <atanf+0x18c>
 800d178:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d17c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800d244 <atanf+0x190>
 800d180:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d184:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800d248 <atanf+0x194>
 800d188:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d18c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800d24c <atanf+0x198>
 800d190:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d194:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d198:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d19c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1a0:	d121      	bne.n	800d1e6 <atanf+0x132>
 800d1a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d1a6:	e794      	b.n	800d0d2 <atanf+0x1e>
 800d1a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d1ac:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d1b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d1ba:	e7be      	b.n	800d13a <atanf+0x86>
 800d1bc:	4b24      	ldr	r3, [pc, #144]	; (800d250 <atanf+0x19c>)
 800d1be:	429c      	cmp	r4, r3
 800d1c0:	dc0b      	bgt.n	800d1da <atanf+0x126>
 800d1c2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800d1c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1ca:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d1ce:	2302      	movs	r3, #2
 800d1d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d1d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1d8:	e7af      	b.n	800d13a <atanf+0x86>
 800d1da:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d1de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d1e2:	2303      	movs	r3, #3
 800d1e4:	e7a9      	b.n	800d13a <atanf+0x86>
 800d1e6:	4a1b      	ldr	r2, [pc, #108]	; (800d254 <atanf+0x1a0>)
 800d1e8:	491b      	ldr	r1, [pc, #108]	; (800d258 <atanf+0x1a4>)
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	441a      	add	r2, r3
 800d1ee:	440b      	add	r3, r1
 800d1f0:	edd3 6a00 	vldr	s13, [r3]
 800d1f4:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d1f8:	2d00      	cmp	r5, #0
 800d1fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1fe:	ed92 7a00 	vldr	s14, [r2]
 800d202:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d206:	bfb8      	it	lt
 800d208:	eef1 7a67 	vneglt.f32	s15, s15
 800d20c:	e761      	b.n	800d0d2 <atanf+0x1e>
 800d20e:	bf00      	nop
 800d210:	bfc90fdb 	.word	0xbfc90fdb
 800d214:	3fc90fdb 	.word	0x3fc90fdb
 800d218:	3edfffff 	.word	0x3edfffff
 800d21c:	7149f2ca 	.word	0x7149f2ca
 800d220:	3f97ffff 	.word	0x3f97ffff
 800d224:	3c8569d7 	.word	0x3c8569d7
 800d228:	3d4bda59 	.word	0x3d4bda59
 800d22c:	bd6ef16b 	.word	0xbd6ef16b
 800d230:	3d886b35 	.word	0x3d886b35
 800d234:	3dba2e6e 	.word	0x3dba2e6e
 800d238:	3e124925 	.word	0x3e124925
 800d23c:	3eaaaaab 	.word	0x3eaaaaab
 800d240:	bd15a221 	.word	0xbd15a221
 800d244:	bd9d8795 	.word	0xbd9d8795
 800d248:	bde38e38 	.word	0xbde38e38
 800d24c:	be4ccccd 	.word	0xbe4ccccd
 800d250:	401bffff 	.word	0x401bffff
 800d254:	0800da90 	.word	0x0800da90
 800d258:	0800daa0 	.word	0x0800daa0

0800d25c <fabsf>:
 800d25c:	ee10 3a10 	vmov	r3, s0
 800d260:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d264:	ee00 3a10 	vmov	s0, r3
 800d268:	4770      	bx	lr

0800d26a <copysign>:
 800d26a:	ec51 0b10 	vmov	r0, r1, d0
 800d26e:	ee11 0a90 	vmov	r0, s3
 800d272:	ee10 2a10 	vmov	r2, s0
 800d276:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d27a:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800d27e:	ea41 0300 	orr.w	r3, r1, r0
 800d282:	ec43 2b10 	vmov	d0, r2, r3
 800d286:	4770      	bx	lr

0800d288 <_init>:
 800d288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28a:	bf00      	nop
 800d28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d28e:	bc08      	pop	{r3}
 800d290:	469e      	mov	lr, r3
 800d292:	4770      	bx	lr

0800d294 <_fini>:
 800d294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d296:	bf00      	nop
 800d298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d29a:	bc08      	pop	{r3}
 800d29c:	469e      	mov	lr, r3
 800d29e:	4770      	bx	lr
