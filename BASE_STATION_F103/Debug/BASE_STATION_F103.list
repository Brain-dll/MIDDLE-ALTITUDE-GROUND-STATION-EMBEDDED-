
BASE_STATION_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000828c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  080083a0  080083a0  000183a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008688  08008688  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08008688  08008688  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008688  08008688  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008688  08008688  00018688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001e8  08008878  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  08008878  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd5e  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fd3  00000000  00000000  0002ff6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f90  00000000  00000000  00031f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef0  00000000  00000000  00032ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000209b  00000000  00000000  00033dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bf4e  00000000  00000000  00035e63  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008df76  00000000  00000000  00041db1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cfd27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f20  00000000  00000000  000cfda4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008384 	.word	0x08008384

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008384 	.word	0x08008384

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_f2iz>:
 8000d84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d8c:	d30f      	bcc.n	8000dae <__aeabi_f2iz+0x2a>
 8000d8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d96:	d90d      	bls.n	8000db4 <__aeabi_f2iz+0x30>
 8000d98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000da0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000da4:	fa23 f002 	lsr.w	r0, r3, r2
 8000da8:	bf18      	it	ne
 8000daa:	4240      	negne	r0, r0
 8000dac:	4770      	bx	lr
 8000dae:	f04f 0000 	mov.w	r0, #0
 8000db2:	4770      	bx	lr
 8000db4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000db8:	d101      	bne.n	8000dbe <__aeabi_f2iz+0x3a>
 8000dba:	0242      	lsls	r2, r0, #9
 8000dbc:	d105      	bne.n	8000dca <__aeabi_f2iz+0x46>
 8000dbe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000dc2:	bf08      	it	eq
 8000dc4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	4770      	bx	lr

08000dd0 <MPU6050_Init>:
uint8_t CONFIG_RATE = 0x02;
uint8_t ACCEL_CONFIG_RATE = 0x10;
uint8_t PWR_MGMT_1_RATE = 0x00;

void MPU6050_Init()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU_6050_WRITE_ADRESS, 1, MPU_6050_TIMEOUT) != HAL_OK)
 8000dd4:	2364      	movs	r3, #100	; 0x64
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	21d0      	movs	r1, #208	; 0xd0
 8000dda:	4808      	ldr	r0, [pc, #32]	; (8000dfc <MPU6050_Init+0x2c>)
 8000ddc:	f001 fe90 	bl	8002b00 <HAL_I2C_IsDeviceReady>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d005      	beq.n	8000df2 <MPU6050_Init+0x22>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);  // ONEMLI
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MPU6050_Init+0x30>)
 8000dee:	f001 fc23 	bl	8002638 <HAL_GPIO_WritePin>
	}

	MPU6050_SetCalibration();
 8000df2:	f000 f807 	bl	8000e04 <MPU6050_SetCalibration>
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000032c 	.word	0x2000032c
 8000e00:	40011000 	.word	0x40011000

08000e04 <MPU6050_SetCalibration>:

void MPU6050_SetCalibration()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af04      	add	r7, sp, #16
	// This register allows the user to configure the power mode and clock source.
	HAL_I2C_Mem_Write(&hi2c1, MPU_6050_WRITE_ADRESS, PWR_MGMT_1, 1, &PWR_MGMT_1_RATE, 1, MPU_6050_TIMEOUT);
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <MPU6050_SetCalibration+0x84>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	2364      	movs	r3, #100	; 0x64
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	2301      	movs	r3, #1
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <MPU6050_SetCalibration+0x88>)
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	21d0      	movs	r1, #208	; 0xd0
 8000e20:	481b      	ldr	r0, [pc, #108]	; (8000e90 <MPU6050_SetCalibration+0x8c>)
 8000e22:	f001 fd73 	bl	800290c <HAL_I2C_Mem_Write>

	// The Sample Rate is determined by dividing the gyroscope output rate by this value.
	HAL_I2C_Mem_Write(&hi2c1, MPU_6050_WRITE_ADRESS, SMPRT_DIV, 1, &SMPRT_DIV_RATE, 1, MPU_6050_TIMEOUT);
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MPU6050_SetCalibration+0x90>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	9302      	str	r3, [sp, #8]
 8000e30:	2301      	movs	r3, #1
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <MPU6050_SetCalibration+0x94>)
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	21d0      	movs	r1, #208	; 0xd0
 8000e3c:	4814      	ldr	r0, [pc, #80]	; (8000e90 <MPU6050_SetCalibration+0x8c>)
 8000e3e:	f001 fd65 	bl	800290c <HAL_I2C_Mem_Write>

	// This register is used to trigger gyroscope self-test and configure the gyroscopes’ full scale range.
	HAL_I2C_Mem_Write(&hi2c1, MPU_6050_WRITE_ADRESS, GYRO_CONFIG, 1, &GYRO_CONFIG_RATE, 1, MPU_6050_TIMEOUT);
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <MPU6050_SetCalibration+0x98>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	2364      	movs	r3, #100	; 0x64
 8000e4a:	9302      	str	r3, [sp, #8]
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	9301      	str	r3, [sp, #4]
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <MPU6050_SetCalibration+0x9c>)
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2301      	movs	r3, #1
 8000e56:	21d0      	movs	r1, #208	; 0xd0
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <MPU6050_SetCalibration+0x8c>)
 8000e5a:	f001 fd57 	bl	800290c <HAL_I2C_Mem_Write>

	// This register is used to trigger accelerometer self test and configure the accelerometer full scale range.
	HAL_I2C_Mem_Write(&hi2c1, MPU_6050_WRITE_ADRESS, ACCEL_CONFIG, 1, &ACCEL_CONFIG_RATE, 1, MPU_6050_TIMEOUT);
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MPU6050_SetCalibration+0xa0>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	2364      	movs	r3, #100	; 0x64
 8000e66:	9302      	str	r3, [sp, #8]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	9301      	str	r3, [sp, #4]
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MPU6050_SetCalibration+0xa4>)
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2301      	movs	r3, #1
 8000e72:	21d0      	movs	r1, #208	; 0xd0
 8000e74:	4806      	ldr	r0, [pc, #24]	; (8000e90 <MPU6050_SetCalibration+0x8c>)
 8000e76:	f001 fd49 	bl	800290c <HAL_I2C_Mem_Write>

	HAL_Delay(50);
 8000e7a:	2032      	movs	r0, #50	; 0x32
 8000e7c:	f001 f8a2 	bl	8001fc4 <HAL_Delay>

}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000003 	.word	0x20000003
 8000e8c:	20000204 	.word	0x20000204
 8000e90:	2000032c 	.word	0x2000032c
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000004 	.word	0x20000004
 8000e9c:	20000001 	.word	0x20000001
 8000ea0:	20000005 	.word	0x20000005
 8000ea4:	20000002 	.word	0x20000002
 8000ea8:	20000006 	.word	0x20000006

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f001 f825 	bl	8001f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f8d7 	bl	8001068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f000 fa13 	bl	80012e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ebe:	f000 f919 	bl	80010f4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ec2:	f000 f991 	bl	80011e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ec6:	f000 f9b9 	bl	800123c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000eca:	f000 f9e1 	bl	8001290 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000ece:	f000 f93f 	bl	8001150 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  LORA_READ_PARAMETER();
 8000ed2:	f000 fae5 	bl	80014a0 <LORA_READ_PARAMETER>
  LORA_CONFG( ADDH, ADDL, CHN, MODE); // HIGH ADDRESS, LOW ADDRESS, CHANNEL, MODE (0 : TRANSPARENT, 1 : FIXED)
 8000ed6:	4b58      	ldr	r3, [pc, #352]	; (8001038 <main+0x18c>)
 8000ed8:	7818      	ldrb	r0, [r3, #0]
 8000eda:	4b58      	ldr	r3, [pc, #352]	; (800103c <main+0x190>)
 8000edc:	7819      	ldrb	r1, [r3, #0]
 8000ede:	4b58      	ldr	r3, [pc, #352]	; (8001040 <main+0x194>)
 8000ee0:	781a      	ldrb	r2, [r3, #0]
 8000ee2:	4b58      	ldr	r3, [pc, #352]	; (8001044 <main+0x198>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	f000 fa7f 	bl	80013e8 <LORA_CONFG>
  MPU6050_Init();
 8000eea:	f7ff ff71 	bl	8000dd0 <MPU6050_Init>
  for(uint8_t i = 0 ; i < 8 ; i++){
 8000eee:	2300      	movs	r3, #0
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	e009      	b.n	8000f08 <main+0x5c>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	4854      	ldr	r0, [pc, #336]	; (8001048 <main+0x19c>)
 8000ef8:	f001 fbb6 	bl	8002668 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8000efc:	2032      	movs	r0, #50	; 0x32
 8000efe:	f001 f861 	bl	8001fc4 <HAL_Delay>
  for(uint8_t i = 0 ; i < 8 ; i++){
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	3301      	adds	r3, #1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b07      	cmp	r3, #7
 8000f0c:	d9f2      	bls.n	8000ef4 <main+0x48>
  }
  //magneto_Init(cal_num);
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000f0e:	4b4f      	ldr	r3, [pc, #316]	; (800104c <main+0x1a0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	4b4d      	ldr	r3, [pc, #308]	; (800104c <main+0x1a0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f042 0220 	orr.w	r2, r2, #32
 8000f1c:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim2);
 8000f1e:	484c      	ldr	r0, [pc, #304]	; (8001050 <main+0x1a4>)
 8000f20:	f002 fda4 	bl	8003a6c <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000f24:	4b4b      	ldr	r3, [pc, #300]	; (8001054 <main+0x1a8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68da      	ldr	r2, [r3, #12]
 8000f2a:	4b4a      	ldr	r3, [pc, #296]	; (8001054 <main+0x1a8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0220 	orr.w	r2, r2, #32
 8000f32:	60da      	str	r2, [r3, #12]
 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000f34:	4b48      	ldr	r3, [pc, #288]	; (8001058 <main+0x1ac>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	4b47      	ldr	r3, [pc, #284]	; (8001058 <main+0x1ac>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0220 	orr.w	r2, r2, #32
 8000f42:	60da      	str	r2, [r3, #12]
//		}
//		if (recal == 1) {
//			magneto_Init(cal_num);
//			recal = 0;
//		}
		if (RX2 == 1) {
 8000f44:	4b45      	ldr	r3, [pc, #276]	; (800105c <main+0x1b0>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d1fb      	bne.n	8000f44 <main+0x98>

			RX2 = 0;
 8000f4c:	4b43      	ldr	r3, [pc, #268]	; (800105c <main+0x1b0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
			uint8_t m = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	71bb      	strb	r3, [r7, #6]
			uint8_t go = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	717b      	strb	r3, [r7, #5]
			for (uint8_t k = 0; k < sizeof(RX2_BUF); k++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	713b      	strb	r3, [r7, #4]
 8000f5e:	e021      	b.n	8000fa4 <main+0xf8>
				if (RX2_BUF[k] == ':' && go == 0) {
 8000f60:	793b      	ldrb	r3, [r7, #4]
 8000f62:	4a3f      	ldr	r2, [pc, #252]	; (8001060 <main+0x1b4>)
 8000f64:	5cd3      	ldrb	r3, [r2, r3]
 8000f66:	2b3a      	cmp	r3, #58	; 0x3a
 8000f68:	d104      	bne.n	8000f74 <main+0xc8>
 8000f6a:	797b      	ldrb	r3, [r7, #5]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <main+0xc8>
					go = 1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	717b      	strb	r3, [r7, #5]
				}
				if (go == 1) {
 8000f74:	797b      	ldrb	r3, [r7, #5]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d109      	bne.n	8000f8e <main+0xe2>
					NEXT_BUFF[m] = RX2_BUF[k - 1];
 8000f7a:	793b      	ldrb	r3, [r7, #4]
 8000f7c:	1e5a      	subs	r2, r3, #1
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	4937      	ldr	r1, [pc, #220]	; (8001060 <main+0x1b4>)
 8000f82:	5c89      	ldrb	r1, [r1, r2]
 8000f84:	4a37      	ldr	r2, [pc, #220]	; (8001064 <main+0x1b8>)
 8000f86:	54d1      	strb	r1, [r2, r3]
					m++;
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	71bb      	strb	r3, [r7, #6]
				}
				if (go == 1 && RX2_BUF[k] == '\0')
 8000f8e:	797b      	ldrb	r3, [r7, #5]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d104      	bne.n	8000f9e <main+0xf2>
 8000f94:	793b      	ldrb	r3, [r7, #4]
 8000f96:	4a32      	ldr	r2, [pc, #200]	; (8001060 <main+0x1b4>)
 8000f98:	5cd3      	ldrb	r3, [r2, r3]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d006      	beq.n	8000fac <main+0x100>
			for (uint8_t k = 0; k < sizeof(RX2_BUF); k++) {
 8000f9e:	793b      	ldrb	r3, [r7, #4]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	713b      	strb	r3, [r7, #4]
 8000fa4:	793b      	ldrb	r3, [r7, #4]
 8000fa6:	2b4f      	cmp	r3, #79	; 0x4f
 8000fa8:	d9da      	bls.n	8000f60 <main+0xb4>
 8000faa:	e000      	b.n	8000fae <main+0x102>
					break;
 8000fac:	bf00      	nop
			}

			for (uint8_t j = 0; j < sizeof(NEXT_BUFF) + 2; j++) {
 8000fae:	2300      	movs	r3, #0
 8000fb0:	70fb      	strb	r3, [r7, #3]
 8000fb2:	e00d      	b.n	8000fd0 <main+0x124>
				uint8_t h = sizeof(NEXT_BUFF) + 2 - j;
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	f1c3 0366 	rsb	r3, r3, #102	; 0x66
 8000fba:	703b      	strb	r3, [r7, #0]
				NEXT_BUFF[h] = NEXT_BUFF[h - 2];
 8000fbc:	783b      	ldrb	r3, [r7, #0]
 8000fbe:	1e9a      	subs	r2, r3, #2
 8000fc0:	783b      	ldrb	r3, [r7, #0]
 8000fc2:	4928      	ldr	r1, [pc, #160]	; (8001064 <main+0x1b8>)
 8000fc4:	5c89      	ldrb	r1, [r1, r2]
 8000fc6:	4a27      	ldr	r2, [pc, #156]	; (8001064 <main+0x1b8>)
 8000fc8:	54d1      	strb	r1, [r2, r3]
			for (uint8_t j = 0; j < sizeof(NEXT_BUFF) + 2; j++) {
 8000fca:	78fb      	ldrb	r3, [r7, #3]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	70fb      	strb	r3, [r7, #3]
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b65      	cmp	r3, #101	; 0x65
 8000fd4:	d9ee      	bls.n	8000fb4 <main+0x108>
				//NEXT_BUFF[j] >> 16;
			}
			NEXT_BUFF[0] = 'A';
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <main+0x1b8>)
 8000fd8:	2241      	movs	r2, #65	; 0x41
 8000fda:	701a      	strb	r2, [r3, #0]
			NEXT_BUFF[1] = ':';
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <main+0x1b8>)
 8000fde:	223a      	movs	r2, #58	; 0x3a
 8000fe0:	705a      	strb	r2, [r3, #1]
			uint8_t dev = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	70bb      	strb	r3, [r7, #2]
			for(uint8_t i = 0; i < sizeof(NEXT_BUFF); i++){
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	707b      	strb	r3, [r7, #1]
 8000fea:	e01a      	b.n	8001022 <main+0x176>
				if(NEXT_BUFF[i] == '\n'){
 8000fec:	787b      	ldrb	r3, [r7, #1]
 8000fee:	4a1d      	ldr	r2, [pc, #116]	; (8001064 <main+0x1b8>)
 8000ff0:	5cd3      	ldrb	r3, [r2, r3]
 8000ff2:	2b0a      	cmp	r3, #10
 8000ff4:	d10a      	bne.n	800100c <main+0x160>
					NEXT_BUFF[i] = ':';
 8000ff6:	787b      	ldrb	r3, [r7, #1]
 8000ff8:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <main+0x1b8>)
 8000ffa:	213a      	movs	r1, #58	; 0x3a
 8000ffc:	54d1      	strb	r1, [r2, r3]
					NEXT_BUFF[i + 1] = 'B';
 8000ffe:	787b      	ldrb	r3, [r7, #1]
 8001000:	3301      	adds	r3, #1
 8001002:	4a18      	ldr	r2, [pc, #96]	; (8001064 <main+0x1b8>)
 8001004:	2142      	movs	r1, #66	; 0x42
 8001006:	54d1      	strb	r1, [r2, r3]
					//NEXT_BUFF[i + 2] = '\n';
					dev = 1;
 8001008:	2301      	movs	r3, #1
 800100a:	70bb      	strb	r3, [r7, #2]
				}
				if(dev == 1){
 800100c:	78bb      	ldrb	r3, [r7, #2]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d104      	bne.n	800101c <main+0x170>
					NEXT_BUFF[i + 2] = '\0';
 8001012:	787b      	ldrb	r3, [r7, #1]
 8001014:	3302      	adds	r3, #2
 8001016:	4a13      	ldr	r2, [pc, #76]	; (8001064 <main+0x1b8>)
 8001018:	2100      	movs	r1, #0
 800101a:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < sizeof(NEXT_BUFF); i++){
 800101c:	787b      	ldrb	r3, [r7, #1]
 800101e:	3301      	adds	r3, #1
 8001020:	707b      	strb	r3, [r7, #1]
 8001022:	787b      	ldrb	r3, [r7, #1]
 8001024:	2b63      	cmp	r3, #99	; 0x63
 8001026:	d9e1      	bls.n	8000fec <main+0x140>
				}
			}

			//sprintf(NEXT_BUFF, "%s:B\n", NEXT_BUFF);
			HAL_UART_Transmit(&huart3, (uint8_t*) NEXT_BUFF, sizeof(NEXT_BUFF),
 8001028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102c:	2264      	movs	r2, #100	; 0x64
 800102e:	490d      	ldr	r1, [pc, #52]	; (8001064 <main+0x1b8>)
 8001030:	4806      	ldr	r0, [pc, #24]	; (800104c <main+0x1a0>)
 8001032:	f003 f90e 	bl	8004252 <HAL_UART_Transmit>
		if (RX2 == 1) {
 8001036:	e785      	b.n	8000f44 <main+0x98>
 8001038:	20000007 	.word	0x20000007
 800103c:	20000008 	.word	0x20000008
 8001040:	20000009 	.word	0x20000009
 8001044:	2000000a 	.word	0x2000000a
 8001048:	40010c00 	.word	0x40010c00
 800104c:	200002e8 	.word	0x200002e8
 8001050:	200003c4 	.word	0x200003c4
 8001054:	2000040c 	.word	0x2000040c
 8001058:	20000380 	.word	0x20000380
 800105c:	200002c0 	.word	0x200002c0
 8001060:	2000020c 	.word	0x2000020c
 8001064:	2000025c 	.word	0x2000025c

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b090      	sub	sp, #64	; 0x40
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0318 	add.w	r3, r7, #24
 8001072:	2228      	movs	r2, #40	; 0x28
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f003 feb2 	bl	8004de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108a:	2301      	movs	r3, #1
 800108c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800108e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001092:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001098:	2301      	movs	r3, #1
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109c:	2302      	movs	r3, #2
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ac:	f107 0318 	add.w	r3, r7, #24
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 f86f 	bl	8003194 <HAL_RCC_OscConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010bc:	f000 fa30 	bl	8001520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c0:	230f      	movs	r3, #15
 80010c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c4:	2302      	movs	r3, #2
 80010c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2102      	movs	r1, #2
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 fada 	bl	8003694 <HAL_RCC_ClockConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010e6:	f000 fa1b 	bl	8001520 <Error_Handler>
  }
}
 80010ea:	bf00      	nop
 80010ec:	3740      	adds	r7, #64	; 0x40
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_I2C1_Init+0x50>)
 80010fa:	4a13      	ldr	r2, [pc, #76]	; (8001148 <MX_I2C1_Init+0x54>)
 80010fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_I2C1_Init+0x50>)
 8001100:	4a12      	ldr	r2, [pc, #72]	; (800114c <MX_I2C1_Init+0x58>)
 8001102:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_I2C1_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_I2C1_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_I2C1_Init+0x50>)
 8001112:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001116:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <MX_I2C1_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_I2C1_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MX_I2C1_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_I2C1_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_I2C1_Init+0x50>)
 8001132:	f001 fab3 	bl	800269c <HAL_I2C_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800113c:	f000 f9f0 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000032c 	.word	0x2000032c
 8001148:	40005400 	.word	0x40005400
 800114c:	000186a0 	.word	0x000186a0

08001150 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	463b      	mov	r3, r7
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_TIM2_Init+0x94>)
 800116e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001172:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001176:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800117a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_TIM2_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 69;
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001184:	2245      	movs	r2, #69	; 0x45
 8001186:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_TIM2_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001194:	4813      	ldr	r0, [pc, #76]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001196:	f002 fc19 	bl	80039cc <HAL_TIM_Base_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011a0:	f000 f9be 	bl	8001520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	4619      	mov	r1, r3
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <MX_TIM2_Init+0x94>)
 80011b2:	f002 fdb5 	bl	8003d20 <HAL_TIM_ConfigClockSource>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011bc:	f000 f9b0 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c0:	2300      	movs	r3, #0
 80011c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c8:	463b      	mov	r3, r7
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_TIM2_Init+0x94>)
 80011ce:	f002 ff83 	bl	80040d8 <HAL_TIMEx_MasterConfigSynchronization>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011d8:	f000 f9a2 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200003c4 	.word	0x200003c4

080011e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <MX_USART1_UART_Init+0x50>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 80011f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_USART1_UART_Init+0x4c>)
 8001220:	f002 ffca 	bl	80041b8 <HAL_UART_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800122a:	f000 f979 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000380 	.word	0x20000380
 8001238:	40013800 	.word	0x40013800

0800123c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <MX_USART2_UART_Init+0x50>)
 8001244:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001248:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800124c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001274:	f002 ffa0 	bl	80041b8 <HAL_UART_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800127e:	f000 f94f 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000040c 	.word	0x2000040c
 800128c:	40004400 	.word	0x40004400

08001290 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_USART3_UART_Init+0x4c>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <MX_USART3_UART_Init+0x50>)
 8001298:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_USART3_UART_Init+0x4c>)
 800129c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_USART3_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_USART3_UART_Init+0x4c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_USART3_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_USART3_UART_Init+0x4c>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_USART3_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_USART3_UART_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_USART3_UART_Init+0x4c>)
 80012c8:	f002 ff76 	bl	80041b8 <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012d2:	f000 f925 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200002e8 	.word	0x200002e8
 80012e0:	40004800 	.word	0x40004800

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f8:	4b37      	ldr	r3, [pc, #220]	; (80013d8 <MX_GPIO_Init+0xf4>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a36      	ldr	r2, [pc, #216]	; (80013d8 <MX_GPIO_Init+0xf4>)
 80012fe:	f043 0310 	orr.w	r3, r3, #16
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <MX_GPIO_Init+0xf4>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0310 	and.w	r3, r3, #16
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001310:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <MX_GPIO_Init+0xf4>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a30      	ldr	r2, [pc, #192]	; (80013d8 <MX_GPIO_Init+0xf4>)
 8001316:	f043 0320 	orr.w	r3, r3, #32
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <MX_GPIO_Init+0xf4>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0320 	and.w	r3, r3, #32
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4b2b      	ldr	r3, [pc, #172]	; (80013d8 <MX_GPIO_Init+0xf4>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a2a      	ldr	r2, [pc, #168]	; (80013d8 <MX_GPIO_Init+0xf4>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <MX_GPIO_Init+0xf4>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <MX_GPIO_Init+0xf4>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a24      	ldr	r2, [pc, #144]	; (80013d8 <MX_GPIO_Init+0xf4>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <MX_GPIO_Init+0xf4>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135e:	481f      	ldr	r0, [pc, #124]	; (80013dc <MX_GPIO_Init+0xf8>)
 8001360:	f001 f96a 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LED2_Pin, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	2183      	movs	r1, #131	; 0x83
 8001368:	481d      	ldr	r0, [pc, #116]	; (80013e0 <MX_GPIO_Init+0xfc>)
 800136a:	f001 f965 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2111      	movs	r1, #17
 8001372:	481c      	ldr	r0, [pc, #112]	; (80013e4 <MX_GPIO_Init+0x100>)
 8001374:	f001 f960 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800137e:	2311      	movs	r3, #17
 8001380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2302      	movs	r3, #2
 8001388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	4619      	mov	r1, r3
 8001390:	4812      	ldr	r0, [pc, #72]	; (80013dc <MX_GPIO_Init+0xf8>)
 8001392:	f000 fff7 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LED2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LED2_Pin;
 8001396:	2383      	movs	r3, #131	; 0x83
 8001398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	4619      	mov	r1, r3
 80013ac:	480c      	ldr	r0, [pc, #48]	; (80013e0 <MX_GPIO_Init+0xfc>)
 80013ae:	f000 ffe9 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BUZZER_Pin;
 80013b2:	2311      	movs	r3, #17
 80013b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2302      	movs	r3, #2
 80013c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	4619      	mov	r1, r3
 80013c8:	4806      	ldr	r0, [pc, #24]	; (80013e4 <MX_GPIO_Init+0x100>)
 80013ca:	f000 ffdb 	bl	8002384 <HAL_GPIO_Init>

}
 80013ce:	bf00      	nop
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40011000 	.word	0x40011000
 80013e0:	40010800 	.word	0x40010800
 80013e4:	40010c00 	.word	0x40010c00

080013e8 <LORA_CONFG>:

/* USER CODE BEGIN 4 */
void LORA_CONFG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4604      	mov	r4, r0
 80013f0:	4608      	mov	r0, r1
 80013f2:	4611      	mov	r1, r2
 80013f4:	461a      	mov	r2, r3
 80013f6:	4623      	mov	r3, r4
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	4603      	mov	r3, r0
 80013fc:	71bb      	strb	r3, [r7, #6]
 80013fe:	460b      	mov	r3, r1
 8001400:	717b      	strb	r3, [r7, #5]
 8001402:	4613      	mov	r3, r2
 8001404:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 8001406:	2201      	movs	r2, #1
 8001408:	2101      	movs	r1, #1
 800140a:	4823      	ldr	r0, [pc, #140]	; (8001498 <LORA_CONFG+0xb0>)
 800140c:	f001 f914 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8001410:	2201      	movs	r2, #1
 8001412:	2102      	movs	r1, #2
 8001414:	4820      	ldr	r0, [pc, #128]	; (8001498 <LORA_CONFG+0xb0>)
 8001416:	f001 f90f 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800141a:	2032      	movs	r0, #50	; 0x32
 800141c:	f000 fdd2 	bl	8001fc4 <HAL_Delay>

	char cfg_buff[6] = {0};
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	809a      	strh	r2, [r3, #4]
	enum lora{Transparent, Fixed} mode;
	mode = MODE;
 800142a:	793b      	ldrb	r3, [r7, #4]
 800142c:	73fb      	strb	r3, [r7, #15]

	cfg_buff[0] = 0xC0;  // header for saving paramater when power down C0
 800142e:	23c0      	movs	r3, #192	; 0xc0
 8001430:	723b      	strb	r3, [r7, #8]
	cfg_buff[1] = ADDH;  // high address
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	727b      	strb	r3, [r7, #9]
	cfg_buff[2] = ADDL;  // low address
 8001436:	79bb      	ldrb	r3, [r7, #6]
 8001438:	72bb      	strb	r3, [r7, #10]
	cfg_buff[3] = 0x19;  // SPED (parity, baud, data rate)
 800143a:	2319      	movs	r3, #25
 800143c:	72fb      	strb	r3, [r7, #11]
	cfg_buff[4] = CHN;   // channel
 800143e:	797b      	ldrb	r3, [r7, #5]
 8001440:	733b      	strb	r3, [r7, #12]

	switch(mode){
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <LORA_CONFG+0x66>
 8001448:	2b01      	cmp	r3, #1
 800144a:	d003      	beq.n	8001454 <LORA_CONFG+0x6c>
 800144c:	e005      	b.n	800145a <LORA_CONFG+0x72>
	case Transparent:
		cfg_buff[5] = 0x44;  // option
 800144e:	2344      	movs	r3, #68	; 0x44
 8001450:	737b      	strb	r3, [r7, #13]
		break;
 8001452:	e004      	b.n	800145e <LORA_CONFG+0x76>
	case Fixed:
		cfg_buff[5] = 0xC4;  // option
 8001454:	23c4      	movs	r3, #196	; 0xc4
 8001456:	737b      	strb	r3, [r7, #13]
		break;
 8001458:	e001      	b.n	800145e <LORA_CONFG+0x76>
	default:
		cfg_buff[5] = 0x44;  // option
 800145a:	2344      	movs	r3, #68	; 0x44
 800145c:	737b      	strb	r3, [r7, #13]
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) cfg_buff, 6, 1000);
 800145e:	f107 0108 	add.w	r1, r7, #8
 8001462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001466:	2206      	movs	r2, #6
 8001468:	480c      	ldr	r0, [pc, #48]	; (800149c <LORA_CONFG+0xb4>)
 800146a:	f002 fef2 	bl	8004252 <HAL_UART_Transmit>

	HAL_Delay(25);
 800146e:	2019      	movs	r0, #25
 8001470:	f000 fda8 	bl	8001fc4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2101      	movs	r1, #1
 8001478:	4807      	ldr	r0, [pc, #28]	; (8001498 <LORA_CONFG+0xb0>)
 800147a:	f001 f8dd 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	2102      	movs	r1, #2
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <LORA_CONFG+0xb0>)
 8001484:	f001 f8d8 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_Delay(25);
 8001488:	2019      	movs	r0, #25
 800148a:	f000 fd9b 	bl	8001fc4 <HAL_Delay>
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}
 8001496:	bf00      	nop
 8001498:	40010800 	.word	0x40010800
 800149c:	2000040c 	.word	0x2000040c

080014a0 <LORA_READ_PARAMETER>:

void LORA_READ_PARAMETER()
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	2101      	movs	r1, #1
 80014aa:	481b      	ldr	r0, [pc, #108]	; (8001518 <LORA_READ_PARAMETER+0x78>)
 80014ac:	f001 f8c4 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	2102      	movs	r1, #2
 80014b4:	4818      	ldr	r0, [pc, #96]	; (8001518 <LORA_READ_PARAMETER+0x78>)
 80014b6:	f001 f8bf 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80014ba:	2032      	movs	r0, #50	; 0x32
 80014bc:	f000 fd82 	bl	8001fc4 <HAL_Delay>

	char buff_read[6] = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	809a      	strh	r2, [r3, #4]
	buff_read[0] = 0xC1;
 80014c8:	23c1      	movs	r3, #193	; 0xc1
 80014ca:	703b      	strb	r3, [r7, #0]
	buff_read[1] = 0xC1;
 80014cc:	23c1      	movs	r3, #193	; 0xc1
 80014ce:	707b      	strb	r3, [r7, #1]
	buff_read[2] = 0xC1;
 80014d0:	23c1      	movs	r3, #193	; 0xc1
 80014d2:	70bb      	strb	r3, [r7, #2]

	HAL_UART_Transmit(&huart2, (uint8_t*) buff_read, 3, 1000);
 80014d4:	4639      	mov	r1, r7
 80014d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014da:	2203      	movs	r2, #3
 80014dc:	480f      	ldr	r0, [pc, #60]	; (800151c <LORA_READ_PARAMETER+0x7c>)
 80014de:	f002 feb8 	bl	8004252 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*) buff_read, 6, 1000);
 80014e2:	4639      	mov	r1, r7
 80014e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e8:	2206      	movs	r2, #6
 80014ea:	480c      	ldr	r0, [pc, #48]	; (800151c <LORA_READ_PARAMETER+0x7c>)
 80014ec:	f002 ff43 	bl	8004376 <HAL_UART_Receive>

	HAL_Delay(25);
 80014f0:	2019      	movs	r0, #25
 80014f2:	f000 fd67 	bl	8001fc4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2101      	movs	r1, #1
 80014fa:	4807      	ldr	r0, [pc, #28]	; (8001518 <LORA_READ_PARAMETER+0x78>)
 80014fc:	f001 f89c 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	2102      	movs	r1, #2
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <LORA_READ_PARAMETER+0x78>)
 8001506:	f001 f897 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_Delay(25);
 800150a:	2019      	movs	r0, #25
 800150c:	f000 fd5a 	bl	8001fc4 <HAL_Delay>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40010800 	.word	0x40010800
 800151c:	2000040c 	.word	0x2000040c

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_MspInit+0x5c>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	4a14      	ldr	r2, [pc, #80]	; (8001588 <HAL_MspInit+0x5c>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6193      	str	r3, [r2, #24]
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_MspInit+0x5c>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_MspInit+0x5c>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <HAL_MspInit+0x5c>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	61d3      	str	r3, [r2, #28]
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_MspInit+0x5c>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_MspInit+0x60>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_MspInit+0x60>)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157e:	bf00      	nop
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000

08001590 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a15      	ldr	r2, [pc, #84]	; (8001600 <HAL_I2C_MspInit+0x70>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d123      	bne.n	80015f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <HAL_I2C_MspInit+0x74>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a13      	ldr	r2, [pc, #76]	; (8001604 <HAL_I2C_MspInit+0x74>)
 80015b6:	f043 0308 	orr.w	r3, r3, #8
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_I2C_MspInit+0x74>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015c8:	23c0      	movs	r3, #192	; 0xc0
 80015ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015cc:	2312      	movs	r3, #18
 80015ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	4619      	mov	r1, r3
 80015da:	480b      	ldr	r0, [pc, #44]	; (8001608 <HAL_I2C_MspInit+0x78>)
 80015dc:	f000 fed2 	bl	8002384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_I2C_MspInit+0x74>)
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_I2C_MspInit+0x74>)
 80015e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ea:	61d3      	str	r3, [r2, #28]
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_I2C_MspInit+0x74>)
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015f8:	bf00      	nop
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40005400 	.word	0x40005400
 8001604:	40021000 	.word	0x40021000
 8001608:	40010c00 	.word	0x40010c00

0800160c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800161c:	d113      	bne.n	8001646 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_TIM_Base_MspInit+0x44>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <HAL_TIM_Base_MspInit+0x44>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_TIM_Base_MspInit+0x44>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2103      	movs	r1, #3
 800163a:	201c      	movs	r0, #28
 800163c:	f000 fdbb 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001640:	201c      	movs	r0, #28
 8001642:	f000 fdd4 	bl	80021ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000

08001654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	; 0x30
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0320 	add.w	r3, r7, #32
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a5f      	ldr	r2, [pc, #380]	; (80017ec <HAL_UART_MspInit+0x198>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d13a      	bne.n	80016ea <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001674:	4b5e      	ldr	r3, [pc, #376]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a5d      	ldr	r2, [pc, #372]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 800167a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b5b      	ldr	r3, [pc, #364]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b58      	ldr	r3, [pc, #352]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a57      	ldr	r2, [pc, #348]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b55      	ldr	r3, [pc, #340]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
 80016a2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	4619      	mov	r1, r3
 80016b8:	484e      	ldr	r0, [pc, #312]	; (80017f4 <HAL_UART_MspInit+0x1a0>)
 80016ba:	f000 fe63 	bl	8002384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 0320 	add.w	r3, r7, #32
 80016d0:	4619      	mov	r1, r3
 80016d2:	4848      	ldr	r0, [pc, #288]	; (80017f4 <HAL_UART_MspInit+0x1a0>)
 80016d4:	f000 fe56 	bl	8002384 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2101      	movs	r1, #1
 80016dc:	2025      	movs	r0, #37	; 0x25
 80016de:	f000 fd6a 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016e2:	2025      	movs	r0, #37	; 0x25
 80016e4:	f000 fd83 	bl	80021ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016e8:	e07c      	b.n	80017e4 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a42      	ldr	r2, [pc, #264]	; (80017f8 <HAL_UART_MspInit+0x1a4>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d138      	bne.n	8001766 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f4:	4b3e      	ldr	r3, [pc, #248]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	4a3d      	ldr	r2, [pc, #244]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 80016fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fe:	61d3      	str	r3, [r2, #28]
 8001700:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170c:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a37      	ldr	r2, [pc, #220]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001724:	2304      	movs	r3, #4
 8001726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0320 	add.w	r3, r7, #32
 8001734:	4619      	mov	r1, r3
 8001736:	482f      	ldr	r0, [pc, #188]	; (80017f4 <HAL_UART_MspInit+0x1a0>)
 8001738:	f000 fe24 	bl	8002384 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800173c:	2308      	movs	r3, #8
 800173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001740:	2300      	movs	r3, #0
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001748:	f107 0320 	add.w	r3, r7, #32
 800174c:	4619      	mov	r1, r3
 800174e:	4829      	ldr	r0, [pc, #164]	; (80017f4 <HAL_UART_MspInit+0x1a0>)
 8001750:	f000 fe18 	bl	8002384 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	2026      	movs	r0, #38	; 0x26
 800175a:	f000 fd2c 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800175e:	2026      	movs	r0, #38	; 0x26
 8001760:	f000 fd45 	bl	80021ee <HAL_NVIC_EnableIRQ>
}
 8001764:	e03e      	b.n	80017e4 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a24      	ldr	r2, [pc, #144]	; (80017fc <HAL_UART_MspInit+0x1a8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d139      	bne.n	80017e4 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	4a1e      	ldr	r2, [pc, #120]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 8001776:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800177a:	61d3      	str	r3, [r2, #28]
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 800178e:	f043 0308 	orr.w	r3, r3, #8
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HAL_UART_MspInit+0x19c>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	f107 0320 	add.w	r3, r7, #32
 80017b2:	4619      	mov	r1, r3
 80017b4:	4812      	ldr	r0, [pc, #72]	; (8001800 <HAL_UART_MspInit+0x1ac>)
 80017b6:	f000 fde5 	bl	8002384 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	f107 0320 	add.w	r3, r7, #32
 80017cc:	4619      	mov	r1, r3
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <HAL_UART_MspInit+0x1ac>)
 80017d0:	f000 fdd8 	bl	8002384 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2102      	movs	r1, #2
 80017d8:	2027      	movs	r0, #39	; 0x27
 80017da:	f000 fcec 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017de:	2027      	movs	r0, #39	; 0x27
 80017e0:	f000 fd05 	bl	80021ee <HAL_NVIC_EnableIRQ>
}
 80017e4:	bf00      	nop
 80017e6:	3730      	adds	r7, #48	; 0x30
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40013800 	.word	0x40013800
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010800 	.word	0x40010800
 80017f8:	40004400 	.word	0x40004400
 80017fc:	40004800 	.word	0x40004800
 8001800:	40010c00 	.word	0x40010c00

08001804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */


  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <HardFault_Handler+0x4>

08001816 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <MemManage_Handler+0x4>

0800181c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <BusFault_Handler+0x4>

08001822 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <UsageFault_Handler+0x4>

08001828 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
  /* USER CODE END SVCall_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001850:	f000 fb9c 	bl	8001f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800185c:	4808      	ldr	r0, [pc, #32]	; (8001880 <TIM2_IRQHandler+0x28>)
 800185e:	f002 f957 	bl	8003b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  mgn = 1;
 8001862:	4b08      	ldr	r3, [pc, #32]	; (8001884 <TIM2_IRQHandler+0x2c>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001868:	2101      	movs	r1, #1
 800186a:	4807      	ldr	r0, [pc, #28]	; (8001888 <TIM2_IRQHandler+0x30>)
 800186c:	f000 fefc 	bl	8002668 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001870:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <TIM2_IRQHandler+0x34>)
 8001876:	f000 fef7 	bl	8002668 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200003c4 	.word	0x200003c4
 8001884:	20000205 	.word	0x20000205
 8001888:	40010c00 	.word	0x40010c00
 800188c:	40011000 	.word	0x40011000

08001890 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001896:	48b2      	ldr	r0, [pc, #712]	; (8001b60 <USART1_IRQHandler+0x2d0>)
 8001898:	f002 fe40 	bl	800451c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	HAL_UART_Receive_IT(&huart1, (uint8_t*) &buff1, 1);
 800189c:	2201      	movs	r2, #1
 800189e:	49b1      	ldr	r1, [pc, #708]	; (8001b64 <USART1_IRQHandler+0x2d4>)
 80018a0:	48af      	ldr	r0, [pc, #700]	; (8001b60 <USART1_IRQHandler+0x2d0>)
 80018a2:	f002 fe0a 	bl	80044ba <HAL_UART_Receive_IT>
	RX1_BUF[c1] = buff1;
 80018a6:	4bb0      	ldr	r3, [pc, #704]	; (8001b68 <USART1_IRQHandler+0x2d8>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	4bad      	ldr	r3, [pc, #692]	; (8001b64 <USART1_IRQHandler+0x2d4>)
 80018ae:	7819      	ldrb	r1, [r3, #0]
 80018b0:	4bae      	ldr	r3, [pc, #696]	; (8001b6c <USART1_IRQHandler+0x2dc>)
 80018b2:	5499      	strb	r1, [r3, r2]
	if (RX1_BUF[c1] == '\n') {
 80018b4:	4bac      	ldr	r3, [pc, #688]	; (8001b68 <USART1_IRQHandler+0x2d8>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4bac      	ldr	r3, [pc, #688]	; (8001b6c <USART1_IRQHandler+0x2dc>)
 80018bc:	5c9b      	ldrb	r3, [r3, r2]
 80018be:	2b0a      	cmp	r3, #10
 80018c0:	f040 8174 	bne.w	8001bac <USART1_IRQHandler+0x31c>
		for (uint8_t i = 0; i < c1; i++) {
 80018c4:	2300      	movs	r3, #0
 80018c6:	75fb      	strb	r3, [r7, #23]
 80018c8:	e167      	b.n	8001b9a <USART1_IRQHandler+0x30a>
			if (RX1_BUF[i] == '$' && RX1_BUF[i + 1] == 'G'
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
 80018cc:	4aa7      	ldr	r2, [pc, #668]	; (8001b6c <USART1_IRQHandler+0x2dc>)
 80018ce:	5cd3      	ldrb	r3, [r2, r3]
 80018d0:	2b24      	cmp	r3, #36	; 0x24
 80018d2:	f040 815f 	bne.w	8001b94 <USART1_IRQHandler+0x304>
 80018d6:	7dfb      	ldrb	r3, [r7, #23]
 80018d8:	3301      	adds	r3, #1
 80018da:	4aa4      	ldr	r2, [pc, #656]	; (8001b6c <USART1_IRQHandler+0x2dc>)
 80018dc:	5cd3      	ldrb	r3, [r2, r3]
 80018de:	2b47      	cmp	r3, #71	; 0x47
 80018e0:	f040 8158 	bne.w	8001b94 <USART1_IRQHandler+0x304>
					&& RX1_BUF[i + 2] == 'P' && RX1_BUF[i + 3] == 'G'
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	3302      	adds	r3, #2
 80018e8:	4aa0      	ldr	r2, [pc, #640]	; (8001b6c <USART1_IRQHandler+0x2dc>)
 80018ea:	5cd3      	ldrb	r3, [r2, r3]
 80018ec:	2b50      	cmp	r3, #80	; 0x50
 80018ee:	f040 8151 	bne.w	8001b94 <USART1_IRQHandler+0x304>
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	3303      	adds	r3, #3
 80018f6:	4a9d      	ldr	r2, [pc, #628]	; (8001b6c <USART1_IRQHandler+0x2dc>)
 80018f8:	5cd3      	ldrb	r3, [r2, r3]
 80018fa:	2b47      	cmp	r3, #71	; 0x47
 80018fc:	f040 814a 	bne.w	8001b94 <USART1_IRQHandler+0x304>
					&& RX1_BUF[i + 4] == 'G' && RX1_BUF[i + 5] == 'A'
 8001900:	7dfb      	ldrb	r3, [r7, #23]
 8001902:	3304      	adds	r3, #4
 8001904:	4a99      	ldr	r2, [pc, #612]	; (8001b6c <USART1_IRQHandler+0x2dc>)
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	2b47      	cmp	r3, #71	; 0x47
 800190a:	f040 8143 	bne.w	8001b94 <USART1_IRQHandler+0x304>
 800190e:	7dfb      	ldrb	r3, [r7, #23]
 8001910:	3305      	adds	r3, #5
 8001912:	4a96      	ldr	r2, [pc, #600]	; (8001b6c <USART1_IRQHandler+0x2dc>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	2b41      	cmp	r3, #65	; 0x41
 8001918:	f040 813c 	bne.w	8001b94 <USART1_IRQHandler+0x304>
					&& RX1_BUF[i + 6] == ',') {
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	3306      	adds	r3, #6
 8001920:	4a92      	ldr	r2, [pc, #584]	; (8001b6c <USART1_IRQHandler+0x2dc>)
 8001922:	5cd3      	ldrb	r3, [r2, r3]
 8001924:	2b2c      	cmp	r3, #44	; 0x2c
 8001926:	f040 8135 	bne.w	8001b94 <USART1_IRQHandler+0x304>
				uint8_t v = 0, pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0, pos5 = 0,
 800192a:	2300      	movs	r3, #0
 800192c:	75bb      	strb	r3, [r7, #22]
 800192e:	2300      	movs	r3, #0
 8001930:	757b      	strb	r3, [r7, #21]
 8001932:	2300      	movs	r3, #0
 8001934:	753b      	strb	r3, [r7, #20]
 8001936:	2300      	movs	r3, #0
 8001938:	727b      	strb	r3, [r7, #9]
 800193a:	2300      	movs	r3, #0
 800193c:	74fb      	strb	r3, [r7, #19]
 800193e:	2300      	movs	r3, #0
 8001940:	723b      	strb	r3, [r7, #8]
						ok1 = 0, ok2 = 0, ok3 = 0, ok4 = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	74bb      	strb	r3, [r7, #18]
 8001946:	2300      	movs	r3, #0
 8001948:	747b      	strb	r3, [r7, #17]
 800194a:	2300      	movs	r3, #0
 800194c:	743b      	strb	r3, [r7, #16]
 800194e:	2300      	movs	r3, #0
 8001950:	73fb      	strb	r3, [r7, #15]
				for (uint8_t n = 0; n < sizeof(RX1_BUF); n++) {
 8001952:	2300      	movs	r3, #0
 8001954:	73bb      	strb	r3, [r7, #14]
 8001956:	e0f7      	b.n	8001b48 <USART1_IRQHandler+0x2b8>
					if (RX1_BUF[n] == ',' && n > i + 5)
 8001958:	7bbb      	ldrb	r3, [r7, #14]
 800195a:	4a84      	ldr	r2, [pc, #528]	; (8001b6c <USART1_IRQHandler+0x2dc>)
 800195c:	5cd3      	ldrb	r3, [r2, r3]
 800195e:	2b2c      	cmp	r3, #44	; 0x2c
 8001960:	d107      	bne.n	8001972 <USART1_IRQHandler+0xe2>
 8001962:	7bba      	ldrb	r2, [r7, #14]
 8001964:	7dfb      	ldrb	r3, [r7, #23]
 8001966:	3305      	adds	r3, #5
 8001968:	429a      	cmp	r2, r3
 800196a:	dd02      	ble.n	8001972 <USART1_IRQHandler+0xe2>
						v++;
 800196c:	7dbb      	ldrb	r3, [r7, #22]
 800196e:	3301      	adds	r3, #1
 8001970:	75bb      	strb	r3, [r7, #22]
					if (v == 1 && ok1 == 0) {
 8001972:	7dbb      	ldrb	r3, [r7, #22]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d106      	bne.n	8001986 <USART1_IRQHandler+0xf6>
 8001978:	7cbb      	ldrb	r3, [r7, #18]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d103      	bne.n	8001986 <USART1_IRQHandler+0xf6>
						pos1 = n;
 800197e:	7bbb      	ldrb	r3, [r7, #14]
 8001980:	757b      	strb	r3, [r7, #21]
						ok1 = 1;
 8001982:	2301      	movs	r3, #1
 8001984:	74bb      	strb	r3, [r7, #18]
					}
					if (v == 2 && ok2 == 0) {
 8001986:	7dbb      	ldrb	r3, [r7, #22]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d11b      	bne.n	80019c4 <USART1_IRQHandler+0x134>
 800198c:	7c7b      	ldrb	r3, [r7, #17]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d118      	bne.n	80019c4 <USART1_IRQHandler+0x134>
						pos2 = n;
 8001992:	7bbb      	ldrb	r3, [r7, #14]
 8001994:	753b      	strb	r3, [r7, #20]
						for (uint8_t count = 0; count < pos2 - pos1; count++)
 8001996:	2300      	movs	r3, #0
 8001998:	737b      	strb	r3, [r7, #13]
 800199a:	e00b      	b.n	80019b4 <USART1_IRQHandler+0x124>
							TIME[count] = RX1_BUF[pos1 + count + 1];
 800199c:	7d7a      	ldrb	r2, [r7, #21]
 800199e:	7b7b      	ldrb	r3, [r7, #13]
 80019a0:	4413      	add	r3, r2
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	7b7b      	ldrb	r3, [r7, #13]
 80019a6:	4971      	ldr	r1, [pc, #452]	; (8001b6c <USART1_IRQHandler+0x2dc>)
 80019a8:	5c89      	ldrb	r1, [r1, r2]
 80019aa:	4a71      	ldr	r2, [pc, #452]	; (8001b70 <USART1_IRQHandler+0x2e0>)
 80019ac:	54d1      	strb	r1, [r2, r3]
						for (uint8_t count = 0; count < pos2 - pos1; count++)
 80019ae:	7b7b      	ldrb	r3, [r7, #13]
 80019b0:	3301      	adds	r3, #1
 80019b2:	737b      	strb	r3, [r7, #13]
 80019b4:	7b7a      	ldrb	r2, [r7, #13]
 80019b6:	7d39      	ldrb	r1, [r7, #20]
 80019b8:	7d7b      	ldrb	r3, [r7, #21]
 80019ba:	1acb      	subs	r3, r1, r3
 80019bc:	429a      	cmp	r2, r3
 80019be:	dbed      	blt.n	800199c <USART1_IRQHandler+0x10c>
						ok2 = 1;
 80019c0:	2301      	movs	r3, #1
 80019c2:	747b      	strb	r3, [r7, #17]
					}
					if (v == 3 && ok3 == 0) {
 80019c4:	7dbb      	ldrb	r3, [r7, #22]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d11b      	bne.n	8001a02 <USART1_IRQHandler+0x172>
 80019ca:	7c3b      	ldrb	r3, [r7, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d118      	bne.n	8001a02 <USART1_IRQHandler+0x172>
						pos3 = n;
 80019d0:	7bbb      	ldrb	r3, [r7, #14]
 80019d2:	727b      	strb	r3, [r7, #9]
						for (uint8_t count = 0; count < pos3 - pos2; count++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	733b      	strb	r3, [r7, #12]
 80019d8:	e00b      	b.n	80019f2 <USART1_IRQHandler+0x162>
							LAT[count] = RX1_BUF[pos2 + count + 1];
 80019da:	7d3a      	ldrb	r2, [r7, #20]
 80019dc:	7b3b      	ldrb	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	7b3b      	ldrb	r3, [r7, #12]
 80019e4:	4961      	ldr	r1, [pc, #388]	; (8001b6c <USART1_IRQHandler+0x2dc>)
 80019e6:	5c89      	ldrb	r1, [r1, r2]
 80019e8:	4a62      	ldr	r2, [pc, #392]	; (8001b74 <USART1_IRQHandler+0x2e4>)
 80019ea:	54d1      	strb	r1, [r2, r3]
						for (uint8_t count = 0; count < pos3 - pos2; count++)
 80019ec:	7b3b      	ldrb	r3, [r7, #12]
 80019ee:	3301      	adds	r3, #1
 80019f0:	733b      	strb	r3, [r7, #12]
 80019f2:	7b3a      	ldrb	r2, [r7, #12]
 80019f4:	7a79      	ldrb	r1, [r7, #9]
 80019f6:	7d3b      	ldrb	r3, [r7, #20]
 80019f8:	1acb      	subs	r3, r1, r3
 80019fa:	429a      	cmp	r2, r3
 80019fc:	dbed      	blt.n	80019da <USART1_IRQHandler+0x14a>
						ok3 = 1;
 80019fe:	2301      	movs	r3, #1
 8001a00:	743b      	strb	r3, [r7, #16]
					}
					if (v == 4 && ok4 == 0) {
 8001a02:	7dbb      	ldrb	r3, [r7, #22]
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d106      	bne.n	8001a16 <USART1_IRQHandler+0x186>
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d103      	bne.n	8001a16 <USART1_IRQHandler+0x186>
						pos4 = n;
 8001a0e:	7bbb      	ldrb	r3, [r7, #14]
 8001a10:	74fb      	strb	r3, [r7, #19]
						ok4 = 1;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
					}
					if (v == 5) {
 8001a16:	7dbb      	ldrb	r3, [r7, #22]
 8001a18:	2b05      	cmp	r3, #5
 8001a1a:	f040 8092 	bne.w	8001b42 <USART1_IRQHandler+0x2b2>
						pos5 = n;
 8001a1e:	7bbb      	ldrb	r3, [r7, #14]
 8001a20:	723b      	strb	r3, [r7, #8]
						for (uint8_t count2 = 0; count2 < pos5 - pos4; count2++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	72fb      	strb	r3, [r7, #11]
 8001a26:	e00b      	b.n	8001a40 <USART1_IRQHandler+0x1b0>
							LONG[count2] = RX1_BUF[pos4 + count2 + 1];
 8001a28:	7cfa      	ldrb	r2, [r7, #19]
 8001a2a:	7afb      	ldrb	r3, [r7, #11]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	7afb      	ldrb	r3, [r7, #11]
 8001a32:	494e      	ldr	r1, [pc, #312]	; (8001b6c <USART1_IRQHandler+0x2dc>)
 8001a34:	5c89      	ldrb	r1, [r1, r2]
 8001a36:	4a50      	ldr	r2, [pc, #320]	; (8001b78 <USART1_IRQHandler+0x2e8>)
 8001a38:	54d1      	strb	r1, [r2, r3]
						for (uint8_t count2 = 0; count2 < pos5 - pos4; count2++)
 8001a3a:	7afb      	ldrb	r3, [r7, #11]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	72fb      	strb	r3, [r7, #11]
 8001a40:	7afa      	ldrb	r2, [r7, #11]
 8001a42:	7a39      	ldrb	r1, [r7, #8]
 8001a44:	7cfb      	ldrb	r3, [r7, #19]
 8001a46:	1acb      	subs	r3, r1, r3
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	dbed      	blt.n	8001a28 <USART1_IRQHandler+0x198>

						strcpy(TIME, TIME);
						strcpy(LAT, LAT);
						strcpy(LONG, LONG);
						time = atof(TIME);
 8001a4c:	4848      	ldr	r0, [pc, #288]	; (8001b70 <USART1_IRQHandler+0x2e0>)
 8001a4e:	f003 f999 	bl	8004d84 <atof>
 8001a52:	4603      	mov	r3, r0
 8001a54:	460c      	mov	r4, r1
 8001a56:	4618      	mov	r0, r3
 8001a58:	4621      	mov	r1, r4
 8001a5a:	f7fe ffed 	bl	8000a38 <__aeabi_d2iz>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <USART1_IRQHandler+0x2ec>)
 8001a62:	601a      	str	r2, [r3, #0]
						ground_lat = calcoor(atof(LAT));
 8001a64:	4843      	ldr	r0, [pc, #268]	; (8001b74 <USART1_IRQHandler+0x2e4>)
 8001a66:	f003 f98d 	bl	8004d84 <atof>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	460c      	mov	r4, r1
 8001a6e:	4618      	mov	r0, r3
 8001a70:	4621      	mov	r1, r4
 8001a72:	f7ff f829 	bl	8000ac8 <__aeabi_d2f>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 f999 	bl	8001db0 <calcoor>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <USART1_IRQHandler+0x2f0>)
 8001a82:	601a      	str	r2, [r3, #0]
						ground_lng = calcoor(atof(LONG));
 8001a84:	483c      	ldr	r0, [pc, #240]	; (8001b78 <USART1_IRQHandler+0x2e8>)
 8001a86:	f003 f97d 	bl	8004d84 <atof>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	460c      	mov	r4, r1
 8001a8e:	4618      	mov	r0, r3
 8001a90:	4621      	mov	r1, r4
 8001a92:	f7ff f819 	bl	8000ac8 <__aeabi_d2f>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 f989 	bl	8001db0 <calcoor>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <USART1_IRQHandler+0x2f4>)
 8001aa2:	601a      	str	r2, [r3, #0]
						sprintf(COOR, ":%2.7f:%2.7f\n", ground_lat, ground_lng);
 8001aa4:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <USART1_IRQHandler+0x2f0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fcbd 	bl	8000428 <__aeabi_f2d>
 8001aae:	4605      	mov	r5, r0
 8001ab0:	460e      	mov	r6, r1
 8001ab2:	4b34      	ldr	r3, [pc, #208]	; (8001b84 <USART1_IRQHandler+0x2f4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fcb6 	bl	8000428 <__aeabi_f2d>
 8001abc:	4603      	mov	r3, r0
 8001abe:	460c      	mov	r4, r1
 8001ac0:	e9cd 3400 	strd	r3, r4, [sp]
 8001ac4:	462a      	mov	r2, r5
 8001ac6:	4633      	mov	r3, r6
 8001ac8:	492f      	ldr	r1, [pc, #188]	; (8001b88 <USART1_IRQHandler+0x2f8>)
 8001aca:	4830      	ldr	r0, [pc, #192]	; (8001b8c <USART1_IRQHandler+0x2fc>)
 8001acc:	f003 fde0 	bl	8005690 <siprintf>
						/*HAL_UART_Transmit(&huart3, (uint8_t*) COOR,
						 sizeof(COOR), 1000);*/
						uint32_t lat0next = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	607b      	str	r3, [r7, #4]
						uint32_t lng0next = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	603b      	str	r3, [r7, #0]
						lat0next = (uint32_t) (ground_lat * 10000000.0);
 8001ad8:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <USART1_IRQHandler+0x2f0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fca3 	bl	8000428 <__aeabi_f2d>
 8001ae2:	a31d      	add	r3, pc, #116	; (adr r3, 8001b58 <USART1_IRQHandler+0x2c8>)
 8001ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae8:	f7fe fcf6 	bl	80004d8 <__aeabi_dmul>
 8001aec:	4603      	mov	r3, r0
 8001aee:	460c      	mov	r4, r1
 8001af0:	4618      	mov	r0, r3
 8001af2:	4621      	mov	r1, r4
 8001af4:	f7fe ffc8 	bl	8000a88 <__aeabi_d2uiz>
 8001af8:	4603      	mov	r3, r0
 8001afa:	607b      	str	r3, [r7, #4]
						lng0next = (uint32_t) (ground_lng * 10000000.0);
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <USART1_IRQHandler+0x2f4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fc91 	bl	8000428 <__aeabi_f2d>
 8001b06:	a314      	add	r3, pc, #80	; (adr r3, 8001b58 <USART1_IRQHandler+0x2c8>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	f7fe fce4 	bl	80004d8 <__aeabi_dmul>
 8001b10:	4603      	mov	r3, r0
 8001b12:	460c      	mov	r4, r1
 8001b14:	4618      	mov	r0, r3
 8001b16:	4621      	mov	r1, r4
 8001b18:	f7fe ffb6 	bl	8000a88 <__aeabi_d2uiz>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	603b      	str	r3, [r7, #0]
//						NXT_SEND_VAL("page1.x8.val", lat0next);
//						NXT_SEND_VAL("page1.x9.val", lng0next);
						cal_dis = 1;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <USART1_IRQHandler+0x300>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
						for (uint8_t c = 0; c < sizeof(RX1_BUF); c++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	72bb      	strb	r3, [r7, #10]
 8001b2a:	e006      	b.n	8001b3a <USART1_IRQHandler+0x2aa>
							RX1_BUF[c] = '\0';
 8001b2c:	7abb      	ldrb	r3, [r7, #10]
 8001b2e:	4a0f      	ldr	r2, [pc, #60]	; (8001b6c <USART1_IRQHandler+0x2dc>)
 8001b30:	2100      	movs	r1, #0
 8001b32:	54d1      	strb	r1, [r2, r3]
						for (uint8_t c = 0; c < sizeof(RX1_BUF); c++)
 8001b34:	7abb      	ldrb	r3, [r7, #10]
 8001b36:	3301      	adds	r3, #1
 8001b38:	72bb      	strb	r3, [r7, #10]
 8001b3a:	7abb      	ldrb	r3, [r7, #10]
 8001b3c:	2b63      	cmp	r3, #99	; 0x63
 8001b3e:	d9f5      	bls.n	8001b2c <USART1_IRQHandler+0x29c>
						break;
 8001b40:	e007      	b.n	8001b52 <USART1_IRQHandler+0x2c2>
				for (uint8_t n = 0; n < sizeof(RX1_BUF); n++) {
 8001b42:	7bbb      	ldrb	r3, [r7, #14]
 8001b44:	3301      	adds	r3, #1
 8001b46:	73bb      	strb	r3, [r7, #14]
 8001b48:	7bbb      	ldrb	r3, [r7, #14]
 8001b4a:	2b63      	cmp	r3, #99	; 0x63
 8001b4c:	f67f af04 	bls.w	8001958 <USART1_IRQHandler+0xc8>
					}
				}
				break;
 8001b50:	e029      	b.n	8001ba6 <USART1_IRQHandler+0x316>
 8001b52:	e028      	b.n	8001ba6 <USART1_IRQHandler+0x316>
 8001b54:	f3af 8000 	nop.w
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	416312d0 	.word	0x416312d0
 8001b60:	20000380 	.word	0x20000380
 8001b64:	200002c1 	.word	0x200002c1
 8001b68:	200002d0 	.word	0x200002d0
 8001b6c:	20000484 	.word	0x20000484
 8001b70:	20000450 	.word	0x20000450
 8001b74:	200004e8 	.word	0x200004e8
 8001b78:	2000045c 	.word	0x2000045c
 8001b7c:	200002cc 	.word	0x200002cc
 8001b80:	200002c4 	.word	0x200002c4
 8001b84:	200002c8 	.word	0x200002c8
 8001b88:	080083a0 	.word	0x080083a0
 8001b8c:	20000468 	.word	0x20000468
 8001b90:	2000020a 	.word	0x2000020a
		for (uint8_t i = 0; i < c1; i++) {
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	3301      	adds	r3, #1
 8001b98:	75fb      	strb	r3, [r7, #23]
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <USART1_IRQHandler+0x330>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	7dfa      	ldrb	r2, [r7, #23]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	f4ff ae92 	bcc.w	80018ca <USART1_IRQHandler+0x3a>
			}
		}
		c1 = 0;
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <USART1_IRQHandler+0x330>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
	}
	c1++;
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <USART1_IRQHandler+0x330>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b02      	ldr	r3, [pc, #8]	; (8001bc0 <USART1_IRQHandler+0x330>)
 8001bb6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	371c      	adds	r7, #28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc0:	200002d0 	.word	0x200002d0

08001bc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bca:	482a      	ldr	r0, [pc, #168]	; (8001c74 <USART2_IRQHandler+0xb0>)
 8001bcc:	f002 fca6 	bl	800451c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &buff2, 1);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4929      	ldr	r1, [pc, #164]	; (8001c78 <USART2_IRQHandler+0xb4>)
 8001bd4:	4827      	ldr	r0, [pc, #156]	; (8001c74 <USART2_IRQHandler+0xb0>)
 8001bd6:	f002 fc70 	bl	80044ba <HAL_UART_Receive_IT>
	if (buff2 != '\n' && buff2 != '\0' ) {
 8001bda:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <USART2_IRQHandler+0xb4>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b0a      	cmp	r3, #10
 8001be0:	d016      	beq.n	8001c10 <USART2_IRQHandler+0x4c>
 8001be2:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <USART2_IRQHandler+0xb4>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d012      	beq.n	8001c10 <USART2_IRQHandler+0x4c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001bea:	2201      	movs	r2, #1
 8001bec:	2180      	movs	r1, #128	; 0x80
 8001bee:	4823      	ldr	r0, [pc, #140]	; (8001c7c <USART2_IRQHandler+0xb8>)
 8001bf0:	f000 fd22 	bl	8002638 <HAL_GPIO_WritePin>
		RX2_BUF[n] = buff2;
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <USART2_IRQHandler+0xbc>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <USART2_IRQHandler+0xb4>)
 8001bfc:	7819      	ldrb	r1, [r3, #0]
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <USART2_IRQHandler+0xc0>)
 8001c00:	5499      	strb	r1, [r3, r2]
		n++;
 8001c02:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <USART2_IRQHandler+0xbc>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	3301      	adds	r3, #1
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <USART2_IRQHandler+0xbc>)
 8001c0c:	701a      	strb	r2, [r3, #0]
		n = 0;
		//HAL_UART_Transmit(&huart3, (uint8_t*) RX2_BUF, sizeof(RX2_BUF), 1000);  // For hard fault interrupt, you have to assign priority UART ports
		RX2 = 1;
  	}
  /* USER CODE END USART2_IRQn 1 */
}
 8001c0e:	e02d      	b.n	8001c6c <USART2_IRQHandler+0xa8>
	} else if(buff2 == '\n') {
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <USART2_IRQHandler+0xb4>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b0a      	cmp	r3, #10
 8001c16:	d129      	bne.n	8001c6c <USART2_IRQHandler+0xa8>
		uint8_t A = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2180      	movs	r1, #128	; 0x80
 8001c20:	4816      	ldr	r0, [pc, #88]	; (8001c7c <USART2_IRQHandler+0xb8>)
 8001c22:	f000 fd09 	bl	8002638 <HAL_GPIO_WritePin>
		for (n; n < sizeof(RX2_BUF); n++) {
 8001c26:	e015      	b.n	8001c54 <USART2_IRQHandler+0x90>
			RX2_BUF[n] = COOR[A];
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <USART2_IRQHandler+0xbc>)
 8001c2c:	7812      	ldrb	r2, [r2, #0]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <USART2_IRQHandler+0xc4>)
 8001c32:	5cd2      	ldrb	r2, [r2, r3]
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <USART2_IRQHandler+0xc0>)
 8001c36:	545a      	strb	r2, [r3, r1]
			if (COOR[A] == '\0') {
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <USART2_IRQHandler+0xc4>)
 8001c3c:	5cd3      	ldrb	r3, [r2, r3]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00d      	beq.n	8001c5e <USART2_IRQHandler+0x9a>
			A++;
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	3301      	adds	r3, #1
 8001c46:	71fb      	strb	r3, [r7, #7]
		for (n; n < sizeof(RX2_BUF); n++) {
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <USART2_IRQHandler+0xbc>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <USART2_IRQHandler+0xbc>)
 8001c52:	701a      	strb	r2, [r3, #0]
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <USART2_IRQHandler+0xbc>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b4f      	cmp	r3, #79	; 0x4f
 8001c5a:	d9e5      	bls.n	8001c28 <USART2_IRQHandler+0x64>
 8001c5c:	e000      	b.n	8001c60 <USART2_IRQHandler+0x9c>
				break;
 8001c5e:	bf00      	nop
		n = 0;
 8001c60:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <USART2_IRQHandler+0xbc>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
		RX2 = 1;
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <USART2_IRQHandler+0xc8>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	2000040c 	.word	0x2000040c
 8001c78:	200002c2 	.word	0x200002c2
 8001c7c:	40010800 	.word	0x40010800
 8001c80:	200002d1 	.word	0x200002d1
 8001c84:	2000020c 	.word	0x2000020c
 8001c88:	20000468 	.word	0x20000468
 8001c8c:	200002c0 	.word	0x200002c0

08001c90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c96:	483d      	ldr	r0, [pc, #244]	; (8001d8c <USART3_IRQHandler+0xfc>)
 8001c98:	f002 fc40 	bl	800451c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*) &buff, 1);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	493c      	ldr	r1, [pc, #240]	; (8001d90 <USART3_IRQHandler+0x100>)
 8001ca0:	483a      	ldr	r0, [pc, #232]	; (8001d8c <USART3_IRQHandler+0xfc>)
 8001ca2:	f002 fc0a 	bl	80044ba <HAL_UART_Receive_IT>

  	if (buff == '$')
 8001ca6:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <USART3_IRQHandler+0x100>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b24      	cmp	r3, #36	; 0x24
 8001cac:	d103      	bne.n	8001cb6 <USART3_IRQHandler+0x26>
  		run = 1;
 8001cae:	4b39      	ldr	r3, [pc, #228]	; (8001d94 <USART3_IRQHandler+0x104>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	e002      	b.n	8001cbc <USART3_IRQHandler+0x2c>
  	else if(buff == 0x00){
 8001cb6:	4b36      	ldr	r3, [pc, #216]	; (8001d90 <USART3_IRQHandler+0x100>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
  		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
  	}
  	else if(buff == 0x1A){
  	  		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  	}
  	if (run == 1) {
 8001cbc:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <USART3_IRQHandler+0x104>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d15e      	bne.n	8001d82 <USART3_IRQHandler+0xf2>
  		RX3_buff[count1] = buff;
 8001cc4:	4b34      	ldr	r3, [pc, #208]	; (8001d98 <USART3_IRQHandler+0x108>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <USART3_IRQHandler+0x100>)
 8001ccc:	7819      	ldrb	r1, [r3, #0]
 8001cce:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <USART3_IRQHandler+0x10c>)
 8001cd0:	5499      	strb	r1, [r3, r2]
  		count1++;
 8001cd2:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <USART3_IRQHandler+0x108>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <USART3_IRQHandler+0x108>)
 8001cdc:	701a      	strb	r2, [r3, #0]
  		if (buff == '&') {
 8001cde:	4b2c      	ldr	r3, [pc, #176]	; (8001d90 <USART3_IRQHandler+0x100>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b26      	cmp	r3, #38	; 0x26
 8001ce4:	d146      	bne.n	8001d74 <USART3_IRQHandler+0xe4>
  			count1 = 0;
 8001ce6:	4b2c      	ldr	r3, [pc, #176]	; (8001d98 <USART3_IRQHandler+0x108>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
  			if (RX3_buff[1] == '0' && RX3_buff[2] == 0x02)
 8001cec:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <USART3_IRQHandler+0x10c>)
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	2b30      	cmp	r3, #48	; 0x30
 8001cf2:	d107      	bne.n	8001d04 <USART3_IRQHandler+0x74>
 8001cf4:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <USART3_IRQHandler+0x10c>)
 8001cf6:	789b      	ldrb	r3, [r3, #2]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d103      	bne.n	8001d04 <USART3_IRQHandler+0x74>
  				recal = 1;
 8001cfc:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <USART3_IRQHandler+0x110>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
 8001d02:	e02a      	b.n	8001d5a <USART3_IRQHandler+0xca>
  			else if (RX3_buff[1] == '0' && RX3_buff[2] == 0x05)
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <USART3_IRQHandler+0x10c>)
 8001d06:	785b      	ldrb	r3, [r3, #1]
 8001d08:	2b30      	cmp	r3, #48	; 0x30
 8001d0a:	d107      	bne.n	8001d1c <USART3_IRQHandler+0x8c>
 8001d0c:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <USART3_IRQHandler+0x10c>)
 8001d0e:	789b      	ldrb	r3, [r3, #2]
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d103      	bne.n	8001d1c <USART3_IRQHandler+0x8c>
  				newrecord = 1;
 8001d14:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <USART3_IRQHandler+0x114>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]
 8001d1a:	e01e      	b.n	8001d5a <USART3_IRQHandler+0xca>
  			else if (RX3_buff[1] == '0' && RX3_buff[2] == 0x03){
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <USART3_IRQHandler+0x10c>)
 8001d1e:	785b      	ldrb	r3, [r3, #1]
 8001d20:	2b30      	cmp	r3, #48	; 0x30
 8001d22:	d10f      	bne.n	8001d44 <USART3_IRQHandler+0xb4>
 8001d24:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <USART3_IRQHandler+0x10c>)
 8001d26:	789b      	ldrb	r3, [r3, #2]
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d10b      	bne.n	8001d44 <USART3_IRQHandler+0xb4>
  				if(pause == 0)
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <USART3_IRQHandler+0x118>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d103      	bne.n	8001d3c <USART3_IRQHandler+0xac>
  					pause = 1;
 8001d34:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <USART3_IRQHandler+0x118>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
  				if(pause == 0)
 8001d3a:	e00e      	b.n	8001d5a <USART3_IRQHandler+0xca>
  				else
  					pause = 0;
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <USART3_IRQHandler+0x118>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
  				if(pause == 0)
 8001d42:	e00a      	b.n	8001d5a <USART3_IRQHandler+0xca>
  			}
  			else if (RX3_buff[1] == '0' && RX3_buff[2] == 0x04)
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <USART3_IRQHandler+0x10c>)
 8001d46:	785b      	ldrb	r3, [r3, #1]
 8001d48:	2b30      	cmp	r3, #48	; 0x30
 8001d4a:	d106      	bne.n	8001d5a <USART3_IRQHandler+0xca>
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <USART3_IRQHandler+0x10c>)
 8001d4e:	789b      	ldrb	r3, [r3, #2]
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d102      	bne.n	8001d5a <USART3_IRQHandler+0xca>
  				stop = 1;
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <USART3_IRQHandler+0x11c>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
  			for (uint8_t i = 0; i < sizeof(RX3_buff); i++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	71fb      	strb	r3, [r7, #7]
 8001d5e:	e006      	b.n	8001d6e <USART3_IRQHandler+0xde>
  				RX3_buff[i] = '\0';
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <USART3_IRQHandler+0x10c>)
 8001d64:	2100      	movs	r1, #0
 8001d66:	54d1      	strb	r1, [r2, r3]
  			for (uint8_t i = 0; i < sizeof(RX3_buff); i++)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d9f5      	bls.n	8001d60 <USART3_IRQHandler+0xd0>
  		}
  		if (buff == '&')
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <USART3_IRQHandler+0x100>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b26      	cmp	r3, #38	; 0x26
 8001d7a:	d102      	bne.n	8001d82 <USART3_IRQHandler+0xf2>
  			run = 0;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <USART3_IRQHandler+0x104>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
  	}
  /* USER CODE END USART3_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200002e8 	.word	0x200002e8
 8001d90:	200002d8 	.word	0x200002d8
 8001d94:	200002da 	.word	0x200002da
 8001d98:	200002d9 	.word	0x200002d9
 8001d9c:	200002d4 	.word	0x200002d4
 8001da0:	20000206 	.word	0x20000206
 8001da4:	20000208 	.word	0x20000208
 8001da8:	20000209 	.word	0x20000209
 8001dac:	20000207 	.word	0x20000207

08001db0 <calcoor>:

/* USER CODE BEGIN 1 */
float calcoor(float x)
{
 8001db0:	b5b0      	push	{r4, r5, r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	float a = (int)x / 100;
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7fe ffe3 	bl	8000d84 <__aeabi_f2iz>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <calcoor+0x80>)
 8001dc2:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc6:	1152      	asrs	r2, r2, #5
 8001dc8:	17db      	asrs	r3, r3, #31
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe ff85 	bl	8000cdc <__aeabi_i2f>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	60fb      	str	r3, [r7, #12]
	float b = (x - (a * 100.0)) / 60.0;
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7fe fb26 	bl	8000428 <__aeabi_f2d>
 8001ddc:	4604      	mov	r4, r0
 8001dde:	460d      	mov	r5, r1
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f7fe fb21 	bl	8000428 <__aeabi_f2d>
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <calcoor+0x84>)
 8001dec:	f7fe fb74 	bl	80004d8 <__aeabi_dmul>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4620      	mov	r0, r4
 8001df6:	4629      	mov	r1, r5
 8001df8:	f7fe f9b6 	bl	8000168 <__aeabi_dsub>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	460c      	mov	r4, r1
 8001e00:	4618      	mov	r0, r3
 8001e02:	4621      	mov	r1, r4
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <calcoor+0x88>)
 8001e0a:	f7fe fc8f 	bl	800072c <__aeabi_ddiv>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	460c      	mov	r4, r1
 8001e12:	4618      	mov	r0, r3
 8001e14:	4621      	mov	r1, r4
 8001e16:	f7fe fe57 	bl	8000ac8 <__aeabi_d2f>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	60bb      	str	r3, [r7, #8]
	return a+b;
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7fe fea7 	bl	8000b74 <__addsf3>
 8001e26:	4603      	mov	r3, r0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e30:	51eb851f 	.word	0x51eb851f
 8001e34:	40590000 	.word	0x40590000
 8001e38:	404e0000 	.word	0x404e0000

08001e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e44:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <_sbrk+0x5c>)
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <_sbrk+0x60>)
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <_sbrk+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <_sbrk+0x64>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <_sbrk+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d207      	bcs.n	8001e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e6c:	f002 ff8e 	bl	8004d8c <__errno>
 8001e70:	4602      	mov	r2, r0
 8001e72:	230c      	movs	r3, #12
 8001e74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e009      	b.n	8001e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e82:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <_sbrk+0x64>)
 8001e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20005000 	.word	0x20005000
 8001e9c:	00000400 	.word	0x00000400
 8001ea0:	200002dc 	.word	0x200002dc
 8001ea4:	20000500 	.word	0x20000500

08001ea8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb4:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eb6:	490d      	ldr	r1, [pc, #52]	; (8001eec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001eb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ef0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ebc:	e002      	b.n	8001ec4 <LoopCopyDataInit>

08001ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec2:	3304      	adds	r3, #4

08001ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec8:	d3f9      	bcc.n	8001ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eca:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ecc:	4c0a      	ldr	r4, [pc, #40]	; (8001ef8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed0:	e001      	b.n	8001ed6 <LoopFillZerobss>

08001ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed4:	3204      	adds	r2, #4

08001ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed8:	d3fb      	bcc.n	8001ed2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001eda:	f7ff ffe5 	bl	8001ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ede:	f002 ff5b 	bl	8004d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ee2:	f7fe ffe3 	bl	8000eac <main>
  bx lr
 8001ee6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eec:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001ef0:	08008690 	.word	0x08008690
  ldr r2, =_sbss
 8001ef4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001ef8:	200004fc 	.word	0x200004fc

08001efc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001efc:	e7fe      	b.n	8001efc <ADC1_2_IRQHandler>
	...

08001f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <HAL_Init+0x28>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a07      	ldr	r2, [pc, #28]	; (8001f28 <HAL_Init+0x28>)
 8001f0a:	f043 0310 	orr.w	r3, r3, #16
 8001f0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f10:	2003      	movs	r0, #3
 8001f12:	f000 f945 	bl	80021a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f000 f808 	bl	8001f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f1c:	f7ff fb06 	bl	800152c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40022000 	.word	0x40022000

08001f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_InitTick+0x54>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_InitTick+0x58>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f95d 	bl	800220a <HAL_SYSTICK_Config>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00e      	b.n	8001f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b0f      	cmp	r3, #15
 8001f5e:	d80a      	bhi.n	8001f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f60:	2200      	movs	r2, #0
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f000 f925 	bl	80021b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f6c:	4a06      	ldr	r2, [pc, #24]	; (8001f88 <HAL_InitTick+0x5c>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e000      	b.n	8001f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	2000000c 	.word	0x2000000c
 8001f84:	20000014 	.word	0x20000014
 8001f88:	20000010 	.word	0x20000010

08001f8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_IncTick+0x1c>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_IncTick+0x20>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a03      	ldr	r2, [pc, #12]	; (8001fac <HAL_IncTick+0x20>)
 8001f9e:	6013      	str	r3, [r2, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	20000014 	.word	0x20000014
 8001fac:	200004f4 	.word	0x200004f4

08001fb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb4:	4b02      	ldr	r3, [pc, #8]	; (8001fc0 <HAL_GetTick+0x10>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	200004f4 	.word	0x200004f4

08001fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fcc:	f7ff fff0 	bl	8001fb0 <HAL_GetTick>
 8001fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d005      	beq.n	8001fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_Delay+0x40>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fea:	bf00      	nop
 8001fec:	f7ff ffe0 	bl	8001fb0 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d8f7      	bhi.n	8001fec <HAL_Delay+0x28>
  {
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000014 	.word	0x20000014

08002008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	2b00      	cmp	r3, #0
 800207c:	db0b      	blt.n	8002096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4906      	ldr	r1, [pc, #24]	; (80020a0 <__NVIC_EnableIRQ+0x34>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	2001      	movs	r0, #1
 800208e:	fa00 f202 	lsl.w	r2, r0, r2
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	e000e100 	.word	0xe000e100

080020a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	6039      	str	r1, [r7, #0]
 80020ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	db0a      	blt.n	80020ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	490c      	ldr	r1, [pc, #48]	; (80020f0 <__NVIC_SetPriority+0x4c>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	0112      	lsls	r2, r2, #4
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	440b      	add	r3, r1
 80020c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020cc:	e00a      	b.n	80020e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4908      	ldr	r1, [pc, #32]	; (80020f4 <__NVIC_SetPriority+0x50>)
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	3b04      	subs	r3, #4
 80020dc:	0112      	lsls	r2, r2, #4
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	440b      	add	r3, r1
 80020e2:	761a      	strb	r2, [r3, #24]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000e100 	.word	0xe000e100
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	; 0x24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f1c3 0307 	rsb	r3, r3, #7
 8002112:	2b04      	cmp	r3, #4
 8002114:	bf28      	it	cs
 8002116:	2304      	movcs	r3, #4
 8002118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3304      	adds	r3, #4
 800211e:	2b06      	cmp	r3, #6
 8002120:	d902      	bls.n	8002128 <NVIC_EncodePriority+0x30>
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3b03      	subs	r3, #3
 8002126:	e000      	b.n	800212a <NVIC_EncodePriority+0x32>
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	401a      	ands	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002140:	f04f 31ff 	mov.w	r1, #4294967295
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	43d9      	mvns	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	4313      	orrs	r3, r2
         );
}
 8002152:	4618      	mov	r0, r3
 8002154:	3724      	adds	r7, #36	; 0x24
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800216c:	d301      	bcc.n	8002172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216e:	2301      	movs	r3, #1
 8002170:	e00f      	b.n	8002192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <SysTick_Config+0x40>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217a:	210f      	movs	r1, #15
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f7ff ff90 	bl	80020a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <SysTick_Config+0x40>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <SysTick_Config+0x40>)
 800218c:	2207      	movs	r2, #7
 800218e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	e000e010 	.word	0xe000e010

080021a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ff2d 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c8:	f7ff ff42 	bl	8002050 <__NVIC_GetPriorityGrouping>
 80021cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	6978      	ldr	r0, [r7, #20]
 80021d4:	f7ff ff90 	bl	80020f8 <NVIC_EncodePriority>
 80021d8:	4602      	mov	r2, r0
 80021da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021de:	4611      	mov	r1, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff5f 	bl	80020a4 <__NVIC_SetPriority>
}
 80021e6:	bf00      	nop
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff35 	bl	800206c <__NVIC_EnableIRQ>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ffa2 	bl	800215c <SysTick_Config>
 8002218:	4603      	mov	r3, r0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002222:	b480      	push	{r7}
 8002224:	b085      	sub	sp, #20
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002234:	2b02      	cmp	r3, #2
 8002236:	d008      	beq.n	800224a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2204      	movs	r2, #4
 800223c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e020      	b.n	800228c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 020e 	bic.w	r2, r2, #14
 8002258:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0201 	bic.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f202 	lsl.w	r2, r1, r2
 8002278:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800228a:	7bfb      	ldrb	r3, [r7, #15]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
	...

08002298 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d005      	beq.n	80022ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2204      	movs	r2, #4
 80022b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
 80022b8:	e051      	b.n	800235e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 020e 	bic.w	r2, r2, #14
 80022c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0201 	bic.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a22      	ldr	r2, [pc, #136]	; (8002368 <HAL_DMA_Abort_IT+0xd0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d029      	beq.n	8002338 <HAL_DMA_Abort_IT+0xa0>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a20      	ldr	r2, [pc, #128]	; (800236c <HAL_DMA_Abort_IT+0xd4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d022      	beq.n	8002334 <HAL_DMA_Abort_IT+0x9c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <HAL_DMA_Abort_IT+0xd8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d01a      	beq.n	800232e <HAL_DMA_Abort_IT+0x96>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <HAL_DMA_Abort_IT+0xdc>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d012      	beq.n	8002328 <HAL_DMA_Abort_IT+0x90>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <HAL_DMA_Abort_IT+0xe0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d00a      	beq.n	8002322 <HAL_DMA_Abort_IT+0x8a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a1a      	ldr	r2, [pc, #104]	; (800237c <HAL_DMA_Abort_IT+0xe4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d102      	bne.n	800231c <HAL_DMA_Abort_IT+0x84>
 8002316:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800231a:	e00e      	b.n	800233a <HAL_DMA_Abort_IT+0xa2>
 800231c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002320:	e00b      	b.n	800233a <HAL_DMA_Abort_IT+0xa2>
 8002322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002326:	e008      	b.n	800233a <HAL_DMA_Abort_IT+0xa2>
 8002328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232c:	e005      	b.n	800233a <HAL_DMA_Abort_IT+0xa2>
 800232e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002332:	e002      	b.n	800233a <HAL_DMA_Abort_IT+0xa2>
 8002334:	2310      	movs	r3, #16
 8002336:	e000      	b.n	800233a <HAL_DMA_Abort_IT+0xa2>
 8002338:	2301      	movs	r3, #1
 800233a:	4a11      	ldr	r2, [pc, #68]	; (8002380 <HAL_DMA_Abort_IT+0xe8>)
 800233c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	4798      	blx	r3
    } 
  }
  return status;
 800235e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40020008 	.word	0x40020008
 800236c:	4002001c 	.word	0x4002001c
 8002370:	40020030 	.word	0x40020030
 8002374:	40020044 	.word	0x40020044
 8002378:	40020058 	.word	0x40020058
 800237c:	4002006c 	.word	0x4002006c
 8002380:	40020000 	.word	0x40020000

08002384 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002384:	b480      	push	{r7}
 8002386:	b08b      	sub	sp, #44	; 0x2c
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800238e:	2300      	movs	r3, #0
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002396:	e127      	b.n	80025e8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002398:	2201      	movs	r2, #1
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69fa      	ldr	r2, [r7, #28]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	f040 8116 	bne.w	80025e2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b12      	cmp	r3, #18
 80023bc:	d034      	beq.n	8002428 <HAL_GPIO_Init+0xa4>
 80023be:	2b12      	cmp	r3, #18
 80023c0:	d80d      	bhi.n	80023de <HAL_GPIO_Init+0x5a>
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d02b      	beq.n	800241e <HAL_GPIO_Init+0x9a>
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d804      	bhi.n	80023d4 <HAL_GPIO_Init+0x50>
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d031      	beq.n	8002432 <HAL_GPIO_Init+0xae>
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d01c      	beq.n	800240c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023d2:	e048      	b.n	8002466 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d043      	beq.n	8002460 <HAL_GPIO_Init+0xdc>
 80023d8:	2b11      	cmp	r3, #17
 80023da:	d01b      	beq.n	8002414 <HAL_GPIO_Init+0x90>
          break;
 80023dc:	e043      	b.n	8002466 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023de:	4a89      	ldr	r2, [pc, #548]	; (8002604 <HAL_GPIO_Init+0x280>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d026      	beq.n	8002432 <HAL_GPIO_Init+0xae>
 80023e4:	4a87      	ldr	r2, [pc, #540]	; (8002604 <HAL_GPIO_Init+0x280>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d806      	bhi.n	80023f8 <HAL_GPIO_Init+0x74>
 80023ea:	4a87      	ldr	r2, [pc, #540]	; (8002608 <HAL_GPIO_Init+0x284>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d020      	beq.n	8002432 <HAL_GPIO_Init+0xae>
 80023f0:	4a86      	ldr	r2, [pc, #536]	; (800260c <HAL_GPIO_Init+0x288>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01d      	beq.n	8002432 <HAL_GPIO_Init+0xae>
          break;
 80023f6:	e036      	b.n	8002466 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023f8:	4a85      	ldr	r2, [pc, #532]	; (8002610 <HAL_GPIO_Init+0x28c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d019      	beq.n	8002432 <HAL_GPIO_Init+0xae>
 80023fe:	4a85      	ldr	r2, [pc, #532]	; (8002614 <HAL_GPIO_Init+0x290>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d016      	beq.n	8002432 <HAL_GPIO_Init+0xae>
 8002404:	4a84      	ldr	r2, [pc, #528]	; (8002618 <HAL_GPIO_Init+0x294>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0xae>
          break;
 800240a:	e02c      	b.n	8002466 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	623b      	str	r3, [r7, #32]
          break;
 8002412:	e028      	b.n	8002466 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	3304      	adds	r3, #4
 800241a:	623b      	str	r3, [r7, #32]
          break;
 800241c:	e023      	b.n	8002466 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	3308      	adds	r3, #8
 8002424:	623b      	str	r3, [r7, #32]
          break;
 8002426:	e01e      	b.n	8002466 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	330c      	adds	r3, #12
 800242e:	623b      	str	r3, [r7, #32]
          break;
 8002430:	e019      	b.n	8002466 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d102      	bne.n	8002440 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800243a:	2304      	movs	r3, #4
 800243c:	623b      	str	r3, [r7, #32]
          break;
 800243e:	e012      	b.n	8002466 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d105      	bne.n	8002454 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002448:	2308      	movs	r3, #8
 800244a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	611a      	str	r2, [r3, #16]
          break;
 8002452:	e008      	b.n	8002466 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002454:	2308      	movs	r3, #8
 8002456:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	615a      	str	r2, [r3, #20]
          break;
 800245e:	e002      	b.n	8002466 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002460:	2300      	movs	r3, #0
 8002462:	623b      	str	r3, [r7, #32]
          break;
 8002464:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	2bff      	cmp	r3, #255	; 0xff
 800246a:	d801      	bhi.n	8002470 <HAL_GPIO_Init+0xec>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	e001      	b.n	8002474 <HAL_GPIO_Init+0xf0>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3304      	adds	r3, #4
 8002474:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	2bff      	cmp	r3, #255	; 0xff
 800247a:	d802      	bhi.n	8002482 <HAL_GPIO_Init+0xfe>
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	e002      	b.n	8002488 <HAL_GPIO_Init+0x104>
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	3b08      	subs	r3, #8
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	210f      	movs	r1, #15
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	401a      	ands	r2, r3
 800249a:	6a39      	ldr	r1, [r7, #32]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	431a      	orrs	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 8096 	beq.w	80025e2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024b6:	4b59      	ldr	r3, [pc, #356]	; (800261c <HAL_GPIO_Init+0x298>)
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	4a58      	ldr	r2, [pc, #352]	; (800261c <HAL_GPIO_Init+0x298>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6193      	str	r3, [r2, #24]
 80024c2:	4b56      	ldr	r3, [pc, #344]	; (800261c <HAL_GPIO_Init+0x298>)
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024ce:	4a54      	ldr	r2, [pc, #336]	; (8002620 <HAL_GPIO_Init+0x29c>)
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	3302      	adds	r3, #2
 80024d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024da:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	220f      	movs	r2, #15
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	4013      	ands	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4b      	ldr	r2, [pc, #300]	; (8002624 <HAL_GPIO_Init+0x2a0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_Init+0x19e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4a      	ldr	r2, [pc, #296]	; (8002628 <HAL_GPIO_Init+0x2a4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_GPIO_Init+0x19a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a49      	ldr	r2, [pc, #292]	; (800262c <HAL_GPIO_Init+0x2a8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_Init+0x196>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a48      	ldr	r2, [pc, #288]	; (8002630 <HAL_GPIO_Init+0x2ac>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_GPIO_Init+0x192>
 8002512:	2303      	movs	r3, #3
 8002514:	e006      	b.n	8002524 <HAL_GPIO_Init+0x1a0>
 8002516:	2304      	movs	r3, #4
 8002518:	e004      	b.n	8002524 <HAL_GPIO_Init+0x1a0>
 800251a:	2302      	movs	r3, #2
 800251c:	e002      	b.n	8002524 <HAL_GPIO_Init+0x1a0>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_GPIO_Init+0x1a0>
 8002522:	2300      	movs	r3, #0
 8002524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002526:	f002 0203 	and.w	r2, r2, #3
 800252a:	0092      	lsls	r2, r2, #2
 800252c:	4093      	lsls	r3, r2
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4313      	orrs	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002534:	493a      	ldr	r1, [pc, #232]	; (8002620 <HAL_GPIO_Init+0x29c>)
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	3302      	adds	r3, #2
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d006      	beq.n	800255c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800254e:	4b39      	ldr	r3, [pc, #228]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4938      	ldr	r1, [pc, #224]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]
 800255a:	e006      	b.n	800256a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800255c:	4b35      	ldr	r3, [pc, #212]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	43db      	mvns	r3, r3
 8002564:	4933      	ldr	r1, [pc, #204]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 8002566:	4013      	ands	r3, r2
 8002568:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d006      	beq.n	8002584 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002576:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	492e      	ldr	r1, [pc, #184]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]
 8002582:	e006      	b.n	8002592 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002584:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	43db      	mvns	r3, r3
 800258c:	4929      	ldr	r1, [pc, #164]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 800258e:	4013      	ands	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d006      	beq.n	80025ac <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800259e:	4b25      	ldr	r3, [pc, #148]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	4924      	ldr	r1, [pc, #144]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
 80025aa:	e006      	b.n	80025ba <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025ac:	4b21      	ldr	r3, [pc, #132]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	491f      	ldr	r1, [pc, #124]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d006      	beq.n	80025d4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025c6:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	491a      	ldr	r1, [pc, #104]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60cb      	str	r3, [r1, #12]
 80025d2:	e006      	b.n	80025e2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025d4:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	43db      	mvns	r3, r3
 80025dc:	4915      	ldr	r1, [pc, #84]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 80025de:	4013      	ands	r3, r2
 80025e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	3301      	adds	r3, #1
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f47f aed0 	bne.w	8002398 <HAL_GPIO_Init+0x14>
  }
}
 80025f8:	bf00      	nop
 80025fa:	372c      	adds	r7, #44	; 0x2c
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	10210000 	.word	0x10210000
 8002608:	10110000 	.word	0x10110000
 800260c:	10120000 	.word	0x10120000
 8002610:	10310000 	.word	0x10310000
 8002614:	10320000 	.word	0x10320000
 8002618:	10220000 	.word	0x10220000
 800261c:	40021000 	.word	0x40021000
 8002620:	40010000 	.word	0x40010000
 8002624:	40010800 	.word	0x40010800
 8002628:	40010c00 	.word	0x40010c00
 800262c:	40011000 	.word	0x40011000
 8002630:	40011400 	.word	0x40011400
 8002634:	40010400 	.word	0x40010400

08002638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]
 8002644:	4613      	mov	r3, r2
 8002646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002648:	787b      	ldrb	r3, [r7, #1]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002654:	e003      	b.n	800265e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	041a      	lsls	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	611a      	str	r2, [r3, #16]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800267a:	887a      	ldrh	r2, [r7, #2]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4013      	ands	r3, r2
 8002680:	041a      	lsls	r2, r3, #16
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	43d9      	mvns	r1, r3
 8002686:	887b      	ldrh	r3, [r7, #2]
 8002688:	400b      	ands	r3, r1
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	611a      	str	r2, [r3, #16]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
	...

0800269c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e11f      	b.n	80028ee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7fe ff64 	bl	8001590 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2224      	movs	r2, #36	; 0x24
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002700:	f001 f91e 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8002704:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4a7b      	ldr	r2, [pc, #492]	; (80028f8 <HAL_I2C_Init+0x25c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d807      	bhi.n	8002720 <HAL_I2C_Init+0x84>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4a7a      	ldr	r2, [pc, #488]	; (80028fc <HAL_I2C_Init+0x260>)
 8002714:	4293      	cmp	r3, r2
 8002716:	bf94      	ite	ls
 8002718:	2301      	movls	r3, #1
 800271a:	2300      	movhi	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	e006      	b.n	800272e <HAL_I2C_Init+0x92>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4a77      	ldr	r2, [pc, #476]	; (8002900 <HAL_I2C_Init+0x264>)
 8002724:	4293      	cmp	r3, r2
 8002726:	bf94      	ite	ls
 8002728:	2301      	movls	r3, #1
 800272a:	2300      	movhi	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e0db      	b.n	80028ee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4a72      	ldr	r2, [pc, #456]	; (8002904 <HAL_I2C_Init+0x268>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	0c9b      	lsrs	r3, r3, #18
 8002740:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	430a      	orrs	r2, r1
 8002754:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	4a64      	ldr	r2, [pc, #400]	; (80028f8 <HAL_I2C_Init+0x25c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d802      	bhi.n	8002770 <HAL_I2C_Init+0xd4>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	3301      	adds	r3, #1
 800276e:	e009      	b.n	8002784 <HAL_I2C_Init+0xe8>
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002776:	fb02 f303 	mul.w	r3, r2, r3
 800277a:	4a63      	ldr	r2, [pc, #396]	; (8002908 <HAL_I2C_Init+0x26c>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	099b      	lsrs	r3, r3, #6
 8002782:	3301      	adds	r3, #1
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	430b      	orrs	r3, r1
 800278a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002796:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4956      	ldr	r1, [pc, #344]	; (80028f8 <HAL_I2C_Init+0x25c>)
 80027a0:	428b      	cmp	r3, r1
 80027a2:	d80d      	bhi.n	80027c0 <HAL_I2C_Init+0x124>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	1e59      	subs	r1, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80027b2:	3301      	adds	r3, #1
 80027b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	bf38      	it	cc
 80027bc:	2304      	movcc	r3, #4
 80027be:	e04f      	b.n	8002860 <HAL_I2C_Init+0x1c4>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d111      	bne.n	80027ec <HAL_I2C_Init+0x150>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1e58      	subs	r0, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6859      	ldr	r1, [r3, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	440b      	add	r3, r1
 80027d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027da:	3301      	adds	r3, #1
 80027dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	e012      	b.n	8002812 <HAL_I2C_Init+0x176>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1e58      	subs	r0, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6859      	ldr	r1, [r3, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	0099      	lsls	r1, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002802:	3301      	adds	r3, #1
 8002804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_I2C_Init+0x17e>
 8002816:	2301      	movs	r3, #1
 8002818:	e022      	b.n	8002860 <HAL_I2C_Init+0x1c4>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10e      	bne.n	8002840 <HAL_I2C_Init+0x1a4>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1e58      	subs	r0, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6859      	ldr	r1, [r3, #4]
 800282a:	460b      	mov	r3, r1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	440b      	add	r3, r1
 8002830:	fbb0 f3f3 	udiv	r3, r0, r3
 8002834:	3301      	adds	r3, #1
 8002836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283e:	e00f      	b.n	8002860 <HAL_I2C_Init+0x1c4>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1e58      	subs	r0, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	0099      	lsls	r1, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	fbb0 f3f3 	udiv	r3, r0, r3
 8002856:	3301      	adds	r3, #1
 8002858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	6809      	ldr	r1, [r1, #0]
 8002864:	4313      	orrs	r3, r2
 8002866:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800288e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6911      	ldr	r1, [r2, #16]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68d2      	ldr	r2, [r2, #12]
 800289a:	4311      	orrs	r1, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	430b      	orrs	r3, r1
 80028a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	000186a0 	.word	0x000186a0
 80028fc:	001e847f 	.word	0x001e847f
 8002900:	003d08ff 	.word	0x003d08ff
 8002904:	431bde83 	.word	0x431bde83
 8002908:	10624dd3 	.word	0x10624dd3

0800290c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af02      	add	r7, sp, #8
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	4608      	mov	r0, r1
 8002916:	4611      	mov	r1, r2
 8002918:	461a      	mov	r2, r3
 800291a:	4603      	mov	r3, r0
 800291c:	817b      	strh	r3, [r7, #10]
 800291e:	460b      	mov	r3, r1
 8002920:	813b      	strh	r3, [r7, #8]
 8002922:	4613      	mov	r3, r2
 8002924:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002926:	f7ff fb43 	bl	8001fb0 <HAL_GetTick>
 800292a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b20      	cmp	r3, #32
 8002936:	f040 80d9 	bne.w	8002aec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2319      	movs	r3, #25
 8002940:	2201      	movs	r2, #1
 8002942:	496d      	ldr	r1, [pc, #436]	; (8002af8 <HAL_I2C_Mem_Write+0x1ec>)
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 fa9f 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002950:	2302      	movs	r3, #2
 8002952:	e0cc      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_I2C_Mem_Write+0x56>
 800295e:	2302      	movs	r3, #2
 8002960:	e0c5      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b01      	cmp	r3, #1
 8002976:	d007      	beq.n	8002988 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002996:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2221      	movs	r2, #33	; 0x21
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2240      	movs	r2, #64	; 0x40
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a3a      	ldr	r2, [r7, #32]
 80029b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4a4d      	ldr	r2, [pc, #308]	; (8002afc <HAL_I2C_Mem_Write+0x1f0>)
 80029c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029ca:	88f8      	ldrh	r0, [r7, #6]
 80029cc:	893a      	ldrh	r2, [r7, #8]
 80029ce:	8979      	ldrh	r1, [r7, #10]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	4603      	mov	r3, r0
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f9be 	bl	8002d5c <I2C_RequestMemoryWrite>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d052      	beq.n	8002a8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e081      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fb20 	bl	8003034 <I2C_WaitOnTXEFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00d      	beq.n	8002a16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d107      	bne.n	8002a12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e06b      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	781a      	ldrb	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d11b      	bne.n	8002a8c <HAL_I2C_Mem_Write+0x180>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d017      	beq.n	8002a8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1aa      	bne.n	80029ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fb0c 	bl	80030b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00d      	beq.n	8002ac0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d107      	bne.n	8002abc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e016      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e000      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
  }
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	00100002 	.word	0x00100002
 8002afc:	ffff0000 	.word	0xffff0000

08002b00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b10:	f7ff fa4e 	bl	8001fb0 <HAL_GetTick>
 8002b14:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002b16:	2301      	movs	r3, #1
 8002b18:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	f040 8111 	bne.w	8002d4a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2319      	movs	r3, #25
 8002b2e:	2201      	movs	r2, #1
 8002b30:	4988      	ldr	r1, [pc, #544]	; (8002d54 <HAL_I2C_IsDeviceReady+0x254>)
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f9a8 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e104      	b.n	8002d4c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_I2C_IsDeviceReady+0x50>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e0fd      	b.n	8002d4c <HAL_I2C_IsDeviceReady+0x24c>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d007      	beq.n	8002b76 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0201 	orr.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2224      	movs	r2, #36	; 0x24
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4a70      	ldr	r2, [pc, #448]	; (8002d58 <HAL_I2C_IsDeviceReady+0x258>)
 8002b98:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f966 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00d      	beq.n	8002bde <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd0:	d103      	bne.n	8002bda <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0b6      	b.n	8002d4c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bde:	897b      	ldrh	r3, [r7, #10]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002bee:	f7ff f9df 	bl	8001fb0 <HAL_GetTick>
 8002bf2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	bf0c      	ite	eq
 8002c02:	2301      	moveq	r3, #1
 8002c04:	2300      	movne	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c18:	bf0c      	ite	eq
 8002c1a:	2301      	moveq	r3, #1
 8002c1c:	2300      	movne	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c22:	e025      	b.n	8002c70 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c24:	f7ff f9c4 	bl	8001fb0 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d302      	bcc.n	8002c3a <HAL_I2C_IsDeviceReady+0x13a>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	22a0      	movs	r2, #160	; 0xa0
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2ba0      	cmp	r3, #160	; 0xa0
 8002c7a:	d005      	beq.n	8002c88 <HAL_I2C_IsDeviceReady+0x188>
 8002c7c:	7dfb      	ldrb	r3, [r7, #23]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d102      	bne.n	8002c88 <HAL_I2C_IsDeviceReady+0x188>
 8002c82:	7dbb      	ldrb	r3, [r7, #22]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0cd      	beq.n	8002c24 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d129      	bne.n	8002cf2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	2319      	movs	r3, #25
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4921      	ldr	r1, [pc, #132]	; (8002d54 <HAL_I2C_IsDeviceReady+0x254>)
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f8da 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e036      	b.n	8002d4c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e02c      	b.n	8002d4c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d00:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d0a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	2319      	movs	r3, #25
 8002d12:	2201      	movs	r2, #1
 8002d14:	490f      	ldr	r1, [pc, #60]	; (8002d54 <HAL_I2C_IsDeviceReady+0x254>)
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f8b6 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e012      	b.n	8002d4c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	f4ff af32 	bcc.w	8002b9a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002d4a:	2302      	movs	r3, #2
  }
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	00100002 	.word	0x00100002
 8002d58:	ffff0000 	.word	0xffff0000

08002d5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	4608      	mov	r0, r1
 8002d66:	4611      	mov	r1, r2
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	817b      	strh	r3, [r7, #10]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	813b      	strh	r3, [r7, #8]
 8002d72:	4613      	mov	r3, r2
 8002d74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f878 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00d      	beq.n	8002dba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dac:	d103      	bne.n	8002db6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e05f      	b.n	8002e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dba:	897b      	ldrh	r3, [r7, #10]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	6a3a      	ldr	r2, [r7, #32]
 8002dce:	492d      	ldr	r1, [pc, #180]	; (8002e84 <I2C_RequestMemoryWrite+0x128>)
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f8b0 	bl	8002f36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e04c      	b.n	8002e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df8:	6a39      	ldr	r1, [r7, #32]
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f91a 	bl	8003034 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00d      	beq.n	8002e22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d107      	bne.n	8002e1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e02b      	b.n	8002e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d105      	bne.n	8002e34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e28:	893b      	ldrh	r3, [r7, #8]
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	611a      	str	r2, [r3, #16]
 8002e32:	e021      	b.n	8002e78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e34:	893b      	ldrh	r3, [r7, #8]
 8002e36:	0a1b      	lsrs	r3, r3, #8
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e44:	6a39      	ldr	r1, [r7, #32]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f8f4 	bl	8003034 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d107      	bne.n	8002e6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e005      	b.n	8002e7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e6e:	893b      	ldrh	r3, [r7, #8]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	00010002 	.word	0x00010002

08002e88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	4613      	mov	r3, r2
 8002e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e98:	e025      	b.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea0:	d021      	beq.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea2:	f7ff f885 	bl	8001fb0 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d302      	bcc.n	8002eb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d116      	bne.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f043 0220 	orr.w	r2, r3, #32
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e023      	b.n	8002f2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	0c1b      	lsrs	r3, r3, #16
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d10d      	bne.n	8002f0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4013      	ands	r3, r2
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bf0c      	ite	eq
 8002f02:	2301      	moveq	r3, #1
 8002f04:	2300      	movne	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	461a      	mov	r2, r3
 8002f0a:	e00c      	b.n	8002f26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	43da      	mvns	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4013      	ands	r3, r2
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	bf0c      	ite	eq
 8002f1e:	2301      	moveq	r3, #1
 8002f20:	2300      	movne	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	461a      	mov	r2, r3
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d0b6      	beq.n	8002e9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f44:	e051      	b.n	8002fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f54:	d123      	bne.n	8002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f043 0204 	orr.w	r2, r3, #4
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e046      	b.n	800302c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d021      	beq.n	8002fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7ff f803 	bl	8001fb0 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d116      	bne.n	8002fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f043 0220 	orr.w	r2, r3, #32
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e020      	b.n	800302c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	0c1b      	lsrs	r3, r3, #16
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d10c      	bne.n	800300e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4013      	ands	r3, r2
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	bf14      	ite	ne
 8003006:	2301      	movne	r3, #1
 8003008:	2300      	moveq	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	e00b      	b.n	8003026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	43da      	mvns	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	4013      	ands	r3, r2
 800301a:	b29b      	uxth	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf14      	ite	ne
 8003020:	2301      	movne	r3, #1
 8003022:	2300      	moveq	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d18d      	bne.n	8002f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003040:	e02d      	b.n	800309e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f878 	bl	8003138 <I2C_IsAcknowledgeFailed>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e02d      	b.n	80030ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003058:	d021      	beq.n	800309e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305a:	f7fe ffa9 	bl	8001fb0 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	429a      	cmp	r2, r3
 8003068:	d302      	bcc.n	8003070 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d116      	bne.n	800309e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f043 0220 	orr.w	r2, r3, #32
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e007      	b.n	80030ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a8:	2b80      	cmp	r3, #128	; 0x80
 80030aa:	d1ca      	bne.n	8003042 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030c2:	e02d      	b.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f837 	bl	8003138 <I2C_IsAcknowledgeFailed>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e02d      	b.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030da:	d021      	beq.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030dc:	f7fe ff68 	bl	8001fb0 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d302      	bcc.n	80030f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d116      	bne.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	f043 0220 	orr.w	r2, r3, #32
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e007      	b.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b04      	cmp	r3, #4
 800312c:	d1ca      	bne.n	80030c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800314e:	d11b      	bne.n	8003188 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003158:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	f043 0204 	orr.w	r2, r3, #4
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e26c      	b.n	8003680 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 8087 	beq.w	80032c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031b4:	4b92      	ldr	r3, [pc, #584]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 030c 	and.w	r3, r3, #12
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d00c      	beq.n	80031da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031c0:	4b8f      	ldr	r3, [pc, #572]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 030c 	and.w	r3, r3, #12
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d112      	bne.n	80031f2 <HAL_RCC_OscConfig+0x5e>
 80031cc:	4b8c      	ldr	r3, [pc, #560]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d8:	d10b      	bne.n	80031f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031da:	4b89      	ldr	r3, [pc, #548]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d06c      	beq.n	80032c0 <HAL_RCC_OscConfig+0x12c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d168      	bne.n	80032c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e246      	b.n	8003680 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fa:	d106      	bne.n	800320a <HAL_RCC_OscConfig+0x76>
 80031fc:	4b80      	ldr	r3, [pc, #512]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a7f      	ldr	r2, [pc, #508]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 8003202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	e02e      	b.n	8003268 <HAL_RCC_OscConfig+0xd4>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10c      	bne.n	800322c <HAL_RCC_OscConfig+0x98>
 8003212:	4b7b      	ldr	r3, [pc, #492]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a7a      	ldr	r2, [pc, #488]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 8003218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	4b78      	ldr	r3, [pc, #480]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a77      	ldr	r2, [pc, #476]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 8003224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e01d      	b.n	8003268 <HAL_RCC_OscConfig+0xd4>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003234:	d10c      	bne.n	8003250 <HAL_RCC_OscConfig+0xbc>
 8003236:	4b72      	ldr	r3, [pc, #456]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a71      	ldr	r2, [pc, #452]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 800323c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	4b6f      	ldr	r3, [pc, #444]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a6e      	ldr	r2, [pc, #440]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 8003248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	e00b      	b.n	8003268 <HAL_RCC_OscConfig+0xd4>
 8003250:	4b6b      	ldr	r3, [pc, #428]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a6a      	ldr	r2, [pc, #424]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 8003256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	4b68      	ldr	r3, [pc, #416]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a67      	ldr	r2, [pc, #412]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 8003262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003266:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d013      	beq.n	8003298 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fe fe9e 	bl	8001fb0 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003278:	f7fe fe9a 	bl	8001fb0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b64      	cmp	r3, #100	; 0x64
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e1fa      	b.n	8003680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	4b5d      	ldr	r3, [pc, #372]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0xe4>
 8003296:	e014      	b.n	80032c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fe fe8a 	bl	8001fb0 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fe fe86 	bl	8001fb0 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	; 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e1e6      	b.n	8003680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b2:	4b53      	ldr	r3, [pc, #332]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x10c>
 80032be:	e000      	b.n	80032c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d063      	beq.n	8003396 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ce:	4b4c      	ldr	r3, [pc, #304]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 030c 	and.w	r3, r3, #12
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00b      	beq.n	80032f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032da:	4b49      	ldr	r3, [pc, #292]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d11c      	bne.n	8003320 <HAL_RCC_OscConfig+0x18c>
 80032e6:	4b46      	ldr	r3, [pc, #280]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d116      	bne.n	8003320 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f2:	4b43      	ldr	r3, [pc, #268]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <HAL_RCC_OscConfig+0x176>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d001      	beq.n	800330a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e1ba      	b.n	8003680 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330a:	4b3d      	ldr	r3, [pc, #244]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4939      	ldr	r1, [pc, #228]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331e:	e03a      	b.n	8003396 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d020      	beq.n	800336a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003328:	4b36      	ldr	r3, [pc, #216]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800332a:	2201      	movs	r2, #1
 800332c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332e:	f7fe fe3f 	bl	8001fb0 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003336:	f7fe fe3b 	bl	8001fb0 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e19b      	b.n	8003680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003348:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003354:	4b2a      	ldr	r3, [pc, #168]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4927      	ldr	r1, [pc, #156]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 8003364:	4313      	orrs	r3, r2
 8003366:	600b      	str	r3, [r1, #0]
 8003368:	e015      	b.n	8003396 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336a:	4b26      	ldr	r3, [pc, #152]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003370:	f7fe fe1e 	bl	8001fb0 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003378:	f7fe fe1a 	bl	8001fb0 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e17a      	b.n	8003680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338a:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d03a      	beq.n	8003418 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d019      	beq.n	80033de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033aa:	4b17      	ldr	r3, [pc, #92]	; (8003408 <HAL_RCC_OscConfig+0x274>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b0:	f7fe fdfe 	bl	8001fb0 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b8:	f7fe fdfa 	bl	8001fb0 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e15a      	b.n	8003680 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ca:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033d6:	2001      	movs	r0, #1
 80033d8:	f000 fada 	bl	8003990 <RCC_Delay>
 80033dc:	e01c      	b.n	8003418 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033de:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <HAL_RCC_OscConfig+0x274>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e4:	f7fe fde4 	bl	8001fb0 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ea:	e00f      	b.n	800340c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ec:	f7fe fde0 	bl	8001fb0 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d908      	bls.n	800340c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e140      	b.n	8003680 <HAL_RCC_OscConfig+0x4ec>
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000
 8003404:	42420000 	.word	0x42420000
 8003408:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340c:	4b9e      	ldr	r3, [pc, #632]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1e9      	bne.n	80033ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80a6 	beq.w	8003572 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342a:	4b97      	ldr	r3, [pc, #604]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10d      	bne.n	8003452 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003436:	4b94      	ldr	r3, [pc, #592]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	4a93      	ldr	r2, [pc, #588]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 800343c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003440:	61d3      	str	r3, [r2, #28]
 8003442:	4b91      	ldr	r3, [pc, #580]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344e:	2301      	movs	r3, #1
 8003450:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003452:	4b8e      	ldr	r3, [pc, #568]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d118      	bne.n	8003490 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800345e:	4b8b      	ldr	r3, [pc, #556]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a8a      	ldr	r2, [pc, #552]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346a:	f7fe fda1 	bl	8001fb0 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003472:	f7fe fd9d 	bl	8001fb0 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b64      	cmp	r3, #100	; 0x64
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e0fd      	b.n	8003680 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003484:	4b81      	ldr	r3, [pc, #516]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d106      	bne.n	80034a6 <HAL_RCC_OscConfig+0x312>
 8003498:	4b7b      	ldr	r3, [pc, #492]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	4a7a      	ldr	r2, [pc, #488]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6213      	str	r3, [r2, #32]
 80034a4:	e02d      	b.n	8003502 <HAL_RCC_OscConfig+0x36e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x334>
 80034ae:	4b76      	ldr	r3, [pc, #472]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	4a75      	ldr	r2, [pc, #468]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	6213      	str	r3, [r2, #32]
 80034ba:	4b73      	ldr	r3, [pc, #460]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	4a72      	ldr	r2, [pc, #456]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 80034c0:	f023 0304 	bic.w	r3, r3, #4
 80034c4:	6213      	str	r3, [r2, #32]
 80034c6:	e01c      	b.n	8003502 <HAL_RCC_OscConfig+0x36e>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b05      	cmp	r3, #5
 80034ce:	d10c      	bne.n	80034ea <HAL_RCC_OscConfig+0x356>
 80034d0:	4b6d      	ldr	r3, [pc, #436]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	4a6c      	ldr	r2, [pc, #432]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 80034d6:	f043 0304 	orr.w	r3, r3, #4
 80034da:	6213      	str	r3, [r2, #32]
 80034dc:	4b6a      	ldr	r3, [pc, #424]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	4a69      	ldr	r2, [pc, #420]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	6213      	str	r3, [r2, #32]
 80034e8:	e00b      	b.n	8003502 <HAL_RCC_OscConfig+0x36e>
 80034ea:	4b67      	ldr	r3, [pc, #412]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	4a66      	ldr	r2, [pc, #408]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	6213      	str	r3, [r2, #32]
 80034f6:	4b64      	ldr	r3, [pc, #400]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	4a63      	ldr	r2, [pc, #396]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 80034fc:	f023 0304 	bic.w	r3, r3, #4
 8003500:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d015      	beq.n	8003536 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350a:	f7fe fd51 	bl	8001fb0 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003510:	e00a      	b.n	8003528 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003512:	f7fe fd4d 	bl	8001fb0 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e0ab      	b.n	8003680 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003528:	4b57      	ldr	r3, [pc, #348]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0ee      	beq.n	8003512 <HAL_RCC_OscConfig+0x37e>
 8003534:	e014      	b.n	8003560 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003536:	f7fe fd3b 	bl	8001fb0 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353c:	e00a      	b.n	8003554 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353e:	f7fe fd37 	bl	8001fb0 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	f241 3288 	movw	r2, #5000	; 0x1388
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e095      	b.n	8003680 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003554:	4b4c      	ldr	r3, [pc, #304]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1ee      	bne.n	800353e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d105      	bne.n	8003572 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003566:	4b48      	ldr	r3, [pc, #288]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	4a47      	ldr	r2, [pc, #284]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 800356c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003570:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 8081 	beq.w	800367e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800357c:	4b42      	ldr	r3, [pc, #264]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 030c 	and.w	r3, r3, #12
 8003584:	2b08      	cmp	r3, #8
 8003586:	d061      	beq.n	800364c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d146      	bne.n	800361e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003590:	4b3f      	ldr	r3, [pc, #252]	; (8003690 <HAL_RCC_OscConfig+0x4fc>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7fe fd0b 	bl	8001fb0 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359e:	f7fe fd07 	bl	8001fb0 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e067      	b.n	8003680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b0:	4b35      	ldr	r3, [pc, #212]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f0      	bne.n	800359e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c4:	d108      	bne.n	80035d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035c6:	4b30      	ldr	r3, [pc, #192]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	492d      	ldr	r1, [pc, #180]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d8:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a19      	ldr	r1, [r3, #32]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	430b      	orrs	r3, r1
 80035ea:	4927      	ldr	r1, [pc, #156]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f0:	4b27      	ldr	r3, [pc, #156]	; (8003690 <HAL_RCC_OscConfig+0x4fc>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f6:	f7fe fcdb 	bl	8001fb0 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fe:	f7fe fcd7 	bl	8001fb0 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e037      	b.n	8003680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003610:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x46a>
 800361c:	e02f      	b.n	800367e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361e:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HAL_RCC_OscConfig+0x4fc>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003624:	f7fe fcc4 	bl	8001fb0 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362c:	f7fe fcc0 	bl	8001fb0 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e020      	b.n	8003680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x498>
 800364a:	e018      	b.n	800367e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e013      	b.n	8003680 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_OscConfig+0x4f4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	429a      	cmp	r2, r3
 800366a:	d106      	bne.n	800367a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d001      	beq.n	800367e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000
 800368c:	40007000 	.word	0x40007000
 8003690:	42420060 	.word	0x42420060

08003694 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0d0      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a8:	4b6a      	ldr	r3, [pc, #424]	; (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d910      	bls.n	80036d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b67      	ldr	r3, [pc, #412]	; (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 0207 	bic.w	r2, r3, #7
 80036be:	4965      	ldr	r1, [pc, #404]	; (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b63      	ldr	r3, [pc, #396]	; (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0b8      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d020      	beq.n	8003726 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f0:	4b59      	ldr	r3, [pc, #356]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4a58      	ldr	r2, [pc, #352]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 80036f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003708:	4b53      	ldr	r3, [pc, #332]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4a52      	ldr	r2, [pc, #328]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003712:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003714:	4b50      	ldr	r3, [pc, #320]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	494d      	ldr	r1, [pc, #308]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d040      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	4b47      	ldr	r3, [pc, #284]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d115      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e07f      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003752:	4b41      	ldr	r3, [pc, #260]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e073      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003762:	4b3d      	ldr	r3, [pc, #244]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e06b      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003772:	4b39      	ldr	r3, [pc, #228]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f023 0203 	bic.w	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4936      	ldr	r1, [pc, #216]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003784:	f7fe fc14 	bl	8001fb0 <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378c:	f7fe fc10 	bl	8001fb0 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	; 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e053      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	4b2d      	ldr	r3, [pc, #180]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 020c 	and.w	r2, r3, #12
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d1eb      	bne.n	800378c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037b4:	4b27      	ldr	r3, [pc, #156]	; (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d210      	bcs.n	80037e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c2:	4b24      	ldr	r3, [pc, #144]	; (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 0207 	bic.w	r2, r3, #7
 80037ca:	4922      	ldr	r1, [pc, #136]	; (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b20      	ldr	r3, [pc, #128]	; (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e032      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f0:	4b19      	ldr	r3, [pc, #100]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4916      	ldr	r1, [pc, #88]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800380e:	4b12      	ldr	r3, [pc, #72]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	490e      	ldr	r1, [pc, #56]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 800381e:	4313      	orrs	r3, r2
 8003820:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003822:	f000 f821 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8003826:	4601      	mov	r1, r0
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	4a0a      	ldr	r2, [pc, #40]	; (800385c <HAL_RCC_ClockConfig+0x1c8>)
 8003834:	5cd3      	ldrb	r3, [r2, r3]
 8003836:	fa21 f303 	lsr.w	r3, r1, r3
 800383a:	4a09      	ldr	r2, [pc, #36]	; (8003860 <HAL_RCC_ClockConfig+0x1cc>)
 800383c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800383e:	4b09      	ldr	r3, [pc, #36]	; (8003864 <HAL_RCC_ClockConfig+0x1d0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe fb72 	bl	8001f2c <HAL_InitTick>

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40022000 	.word	0x40022000
 8003858:	40021000 	.word	0x40021000
 800385c:	080083c4 	.word	0x080083c4
 8003860:	2000000c 	.word	0x2000000c
 8003864:	20000010 	.word	0x20000010

08003868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003868:	b490      	push	{r4, r7}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800386e:	4b2a      	ldr	r3, [pc, #168]	; (8003918 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003870:	1d3c      	adds	r4, r7, #4
 8003872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003878:	4b28      	ldr	r3, [pc, #160]	; (800391c <HAL_RCC_GetSysClockFreq+0xb4>)
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
 8003882:	2300      	movs	r3, #0
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	2300      	movs	r3, #0
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003892:	4b23      	ldr	r3, [pc, #140]	; (8003920 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d002      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x40>
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d003      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0x46>
 80038a6:	e02d      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038a8:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038aa:	623b      	str	r3, [r7, #32]
      break;
 80038ac:	e02d      	b.n	800390a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	0c9b      	lsrs	r3, r3, #18
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038ba:	4413      	add	r3, r2
 80038bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d013      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038cc:	4b14      	ldr	r3, [pc, #80]	; (8003920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	0c5b      	lsrs	r3, r3, #17
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038da:	4413      	add	r3, r2
 80038dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	4a0f      	ldr	r2, [pc, #60]	; (8003924 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038e6:	fb02 f203 	mul.w	r2, r2, r3
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
 80038f2:	e004      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	4a0c      	ldr	r2, [pc, #48]	; (8003928 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038f8:	fb02 f303 	mul.w	r3, r2, r3
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	623b      	str	r3, [r7, #32]
      break;
 8003902:	e002      	b.n	800390a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003904:	4b07      	ldr	r3, [pc, #28]	; (8003924 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003906:	623b      	str	r3, [r7, #32]
      break;
 8003908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390a:	6a3b      	ldr	r3, [r7, #32]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3728      	adds	r7, #40	; 0x28
 8003910:	46bd      	mov	sp, r7
 8003912:	bc90      	pop	{r4, r7}
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	080083b0 	.word	0x080083b0
 800391c:	080083c0 	.word	0x080083c0
 8003920:	40021000 	.word	0x40021000
 8003924:	007a1200 	.word	0x007a1200
 8003928:	003d0900 	.word	0x003d0900

0800392c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003930:	4b02      	ldr	r3, [pc, #8]	; (800393c <HAL_RCC_GetHCLKFreq+0x10>)
 8003932:	681b      	ldr	r3, [r3, #0]
}
 8003934:	4618      	mov	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr
 800393c:	2000000c 	.word	0x2000000c

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003944:	f7ff fff2 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8003948:	4601      	mov	r1, r0
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4a03      	ldr	r2, [pc, #12]	; (8003964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003956:	5cd3      	ldrb	r3, [r2, r3]
 8003958:	fa21 f303 	lsr.w	r3, r1, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40021000 	.word	0x40021000
 8003964:	080083d4 	.word	0x080083d4

08003968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800396c:	f7ff ffde 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8003970:	4601      	mov	r1, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	0adb      	lsrs	r3, r3, #11
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4a03      	ldr	r2, [pc, #12]	; (800398c <HAL_RCC_GetPCLK2Freq+0x24>)
 800397e:	5cd3      	ldrb	r3, [r2, r3]
 8003980:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000
 800398c:	080083d4 	.word	0x080083d4

08003990 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <RCC_Delay+0x34>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <RCC_Delay+0x38>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	0a5b      	lsrs	r3, r3, #9
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	fb02 f303 	mul.w	r3, r2, r3
 80039aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039ac:	bf00      	nop
  }
  while (Delay --);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1e5a      	subs	r2, r3, #1
 80039b2:	60fa      	str	r2, [r7, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f9      	bne.n	80039ac <RCC_Delay+0x1c>
}
 80039b8:	bf00      	nop
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	2000000c 	.word	0x2000000c
 80039c8:	10624dd3 	.word	0x10624dd3

080039cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e041      	b.n	8003a62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fd fe0a 	bl	800160c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	f000 fa6c 	bl	8003ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d001      	beq.n	8003a84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e03a      	b.n	8003afa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a18      	ldr	r2, [pc, #96]	; (8003b04 <HAL_TIM_Base_Start_IT+0x98>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00e      	beq.n	8003ac4 <HAL_TIM_Base_Start_IT+0x58>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aae:	d009      	beq.n	8003ac4 <HAL_TIM_Base_Start_IT+0x58>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a14      	ldr	r2, [pc, #80]	; (8003b08 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d004      	beq.n	8003ac4 <HAL_TIM_Base_Start_IT+0x58>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a13      	ldr	r2, [pc, #76]	; (8003b0c <HAL_TIM_Base_Start_IT+0xa0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d111      	bne.n	8003ae8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b06      	cmp	r3, #6
 8003ad4:	d010      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0201 	orr.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae6:	e007      	b.n	8003af8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	40012c00 	.word	0x40012c00
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40000800 	.word	0x40000800

08003b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d122      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d11b      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0202 	mvn.w	r2, #2
 8003b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f9ad 	bl	8003eb2 <HAL_TIM_IC_CaptureCallback>
 8003b58:	e005      	b.n	8003b66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f9a0 	bl	8003ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f9af 	bl	8003ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d122      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d11b      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0204 	mvn.w	r2, #4
 8003b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2202      	movs	r2, #2
 8003b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f983 	bl	8003eb2 <HAL_TIM_IC_CaptureCallback>
 8003bac:	e005      	b.n	8003bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f976 	bl	8003ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f985 	bl	8003ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d122      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d11b      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0208 	mvn.w	r2, #8
 8003be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2204      	movs	r2, #4
 8003bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f959 	bl	8003eb2 <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f94c 	bl	8003ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f95b 	bl	8003ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0310 	and.w	r3, r3, #16
 8003c1e:	2b10      	cmp	r3, #16
 8003c20:	d122      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d11b      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0210 	mvn.w	r2, #16
 8003c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f92f 	bl	8003eb2 <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f922 	bl	8003ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f931 	bl	8003ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d10e      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d107      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0201 	mvn.w	r2, #1
 8003c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f8fd 	bl	8003e8e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9e:	2b80      	cmp	r3, #128	; 0x80
 8003ca0:	d10e      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cac:	2b80      	cmp	r3, #128	; 0x80
 8003cae:	d107      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fa73 	bl	80041a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	d10e      	bne.n	8003cec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd8:	2b40      	cmp	r3, #64	; 0x40
 8003cda:	d107      	bne.n	8003cec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f8f5 	bl	8003ed6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d10e      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d107      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0220 	mvn.w	r2, #32
 8003d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fa3e 	bl	8004194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_TIM_ConfigClockSource+0x18>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e0a6      	b.n	8003e86 <HAL_TIM_ConfigClockSource+0x166>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b40      	cmp	r3, #64	; 0x40
 8003d6e:	d067      	beq.n	8003e40 <HAL_TIM_ConfigClockSource+0x120>
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d80b      	bhi.n	8003d8c <HAL_TIM_ConfigClockSource+0x6c>
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	d073      	beq.n	8003e60 <HAL_TIM_ConfigClockSource+0x140>
 8003d78:	2b10      	cmp	r3, #16
 8003d7a:	d802      	bhi.n	8003d82 <HAL_TIM_ConfigClockSource+0x62>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d06f      	beq.n	8003e60 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d80:	e078      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d06c      	beq.n	8003e60 <HAL_TIM_ConfigClockSource+0x140>
 8003d86:	2b30      	cmp	r3, #48	; 0x30
 8003d88:	d06a      	beq.n	8003e60 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d8a:	e073      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d8c:	2b70      	cmp	r3, #112	; 0x70
 8003d8e:	d00d      	beq.n	8003dac <HAL_TIM_ConfigClockSource+0x8c>
 8003d90:	2b70      	cmp	r3, #112	; 0x70
 8003d92:	d804      	bhi.n	8003d9e <HAL_TIM_ConfigClockSource+0x7e>
 8003d94:	2b50      	cmp	r3, #80	; 0x50
 8003d96:	d033      	beq.n	8003e00 <HAL_TIM_ConfigClockSource+0xe0>
 8003d98:	2b60      	cmp	r3, #96	; 0x60
 8003d9a:	d041      	beq.n	8003e20 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d9c:	e06a      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da2:	d066      	beq.n	8003e72 <HAL_TIM_ConfigClockSource+0x152>
 8003da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da8:	d017      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003daa:	e063      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	6899      	ldr	r1, [r3, #8]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f000 f96d 	bl	800409a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	609a      	str	r2, [r3, #8]
      break;
 8003dd8:	e04c      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6899      	ldr	r1, [r3, #8]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f000 f956 	bl	800409a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dfc:	609a      	str	r2, [r3, #8]
      break;
 8003dfe:	e039      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	6859      	ldr	r1, [r3, #4]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f000 f8cd 	bl	8003fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2150      	movs	r1, #80	; 0x50
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 f924 	bl	8004066 <TIM_ITRx_SetConfig>
      break;
 8003e1e:	e029      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6859      	ldr	r1, [r3, #4]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f000 f8eb 	bl	8004008 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2160      	movs	r1, #96	; 0x60
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 f914 	bl	8004066 <TIM_ITRx_SetConfig>
      break;
 8003e3e:	e019      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6818      	ldr	r0, [r3, #0]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	6859      	ldr	r1, [r3, #4]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f000 f8ad 	bl	8003fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2140      	movs	r1, #64	; 0x40
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 f904 	bl	8004066 <TIM_ITRx_SetConfig>
      break;
 8003e5e:	e009      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	f000 f8fb 	bl	8004066 <TIM_ITRx_SetConfig>
        break;
 8003e70:	e000      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a29      	ldr	r2, [pc, #164]	; (8003fa0 <TIM_Base_SetConfig+0xb8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00b      	beq.n	8003f18 <TIM_Base_SetConfig+0x30>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f06:	d007      	beq.n	8003f18 <TIM_Base_SetConfig+0x30>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a26      	ldr	r2, [pc, #152]	; (8003fa4 <TIM_Base_SetConfig+0xbc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <TIM_Base_SetConfig+0x30>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a25      	ldr	r2, [pc, #148]	; (8003fa8 <TIM_Base_SetConfig+0xc0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d108      	bne.n	8003f2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <TIM_Base_SetConfig+0xb8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00b      	beq.n	8003f4a <TIM_Base_SetConfig+0x62>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f38:	d007      	beq.n	8003f4a <TIM_Base_SetConfig+0x62>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a19      	ldr	r2, [pc, #100]	; (8003fa4 <TIM_Base_SetConfig+0xbc>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d003      	beq.n	8003f4a <TIM_Base_SetConfig+0x62>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <TIM_Base_SetConfig+0xc0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d108      	bne.n	8003f5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a07      	ldr	r2, [pc, #28]	; (8003fa0 <TIM_Base_SetConfig+0xb8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d103      	bne.n	8003f90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	615a      	str	r2, [r3, #20]
}
 8003f96:	bf00      	nop
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40000800 	.word	0x40000800

08003fac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f023 0201 	bic.w	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f023 030a 	bic.w	r3, r3, #10
 8003fe8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	621a      	str	r2, [r3, #32]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr

08004008 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f023 0210 	bic.w	r2, r3, #16
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004032:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	031b      	lsls	r3, r3, #12
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004044:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	621a      	str	r2, [r3, #32]
}
 800405c:	bf00      	nop
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr

08004066 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004066:	b480      	push	{r7}
 8004068:	b085      	sub	sp, #20
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	f043 0307 	orr.w	r3, r3, #7
 8004088:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	609a      	str	r2, [r3, #8]
}
 8004090:	bf00      	nop
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	4770      	bx	lr

0800409a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800409a:	b480      	push	{r7}
 800409c:	b087      	sub	sp, #28
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	021a      	lsls	r2, r3, #8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	431a      	orrs	r2, r3
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	609a      	str	r2, [r3, #8]
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e046      	b.n	800417e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a16      	ldr	r2, [pc, #88]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00e      	beq.n	8004152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413c:	d009      	beq.n	8004152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a12      	ldr	r2, [pc, #72]	; (800418c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d004      	beq.n	8004152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a10      	ldr	r2, [pc, #64]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d10c      	bne.n	800416c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	4313      	orrs	r3, r2
 8004162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr
 8004188:	40012c00 	.word	0x40012c00
 800418c:	40000400 	.word	0x40000400
 8004190:	40000800 	.word	0x40000800

08004194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e03f      	b.n	800424a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d106      	bne.n	80041e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7fd fa38 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2224      	movs	r2, #36	; 0x24
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fd33 	bl	8004c68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b08a      	sub	sp, #40	; 0x28
 8004256:	af02      	add	r7, sp, #8
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	4613      	mov	r3, r2
 8004260:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b20      	cmp	r3, #32
 8004270:	d17c      	bne.n	800436c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <HAL_UART_Transmit+0x2c>
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e075      	b.n	800436e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_UART_Transmit+0x3e>
 800428c:	2302      	movs	r3, #2
 800428e:	e06e      	b.n	800436e <HAL_UART_Transmit+0x11c>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2221      	movs	r2, #33	; 0x21
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042a6:	f7fd fe83 	bl	8001fb0 <HAL_GetTick>
 80042aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	88fa      	ldrh	r2, [r7, #6]
 80042b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	88fa      	ldrh	r2, [r7, #6]
 80042b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c0:	d108      	bne.n	80042d4 <HAL_UART_Transmit+0x82>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d104      	bne.n	80042d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	61bb      	str	r3, [r7, #24]
 80042d2:	e003      	b.n	80042dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042e4:	e02a      	b.n	800433c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2200      	movs	r2, #0
 80042ee:	2180      	movs	r1, #128	; 0x80
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 fae5 	bl	80048c0 <UART_WaitOnFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e036      	b.n	800436e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10b      	bne.n	800431e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004314:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	3302      	adds	r3, #2
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	e007      	b.n	800432e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	781a      	ldrb	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	3301      	adds	r3, #1
 800432c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1cf      	bne.n	80042e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2200      	movs	r2, #0
 800434e:	2140      	movs	r1, #64	; 0x40
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 fab5 	bl	80048c0 <UART_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e006      	b.n	800436e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	e000      	b.n	800436e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800436c:	2302      	movs	r3, #2
  }
}
 800436e:	4618      	mov	r0, r3
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b08a      	sub	sp, #40	; 0x28
 800437a:	af02      	add	r7, sp, #8
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	603b      	str	r3, [r7, #0]
 8004382:	4613      	mov	r3, r2
 8004384:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b20      	cmp	r3, #32
 8004394:	f040 808c 	bne.w	80044b0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_UART_Receive+0x2e>
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e084      	b.n	80044b2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_UART_Receive+0x40>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e07d      	b.n	80044b2 <HAL_UART_Receive+0x13c>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2222      	movs	r2, #34	; 0x22
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043d2:	f7fd fded 	bl	8001fb0 <HAL_GetTick>
 80043d6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	88fa      	ldrh	r2, [r7, #6]
 80043e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ec:	d108      	bne.n	8004400 <HAL_UART_Receive+0x8a>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d104      	bne.n	8004400 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	e003      	b.n	8004408 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004404:	2300      	movs	r3, #0
 8004406:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004410:	e043      	b.n	800449a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2200      	movs	r2, #0
 800441a:	2120      	movs	r1, #32
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fa4f 	bl	80048c0 <UART_WaitOnFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e042      	b.n	80044b2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10c      	bne.n	800444c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	b29b      	uxth	r3, r3
 800443a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443e:	b29a      	uxth	r2, r3
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	3302      	adds	r3, #2
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	e01f      	b.n	800448c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004454:	d007      	beq.n	8004466 <HAL_UART_Receive+0xf0>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10a      	bne.n	8004474 <HAL_UART_Receive+0xfe>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	b2da      	uxtb	r2, r3
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	e008      	b.n	8004486 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004480:	b2da      	uxtb	r2, r3
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	3301      	adds	r3, #1
 800448a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1b6      	bne.n	8004412 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	e000      	b.n	80044b2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80044b0:	2302      	movs	r3, #2
  }
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3720      	adds	r7, #32
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	4613      	mov	r3, r2
 80044c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d11d      	bne.n	8004510 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <HAL_UART_Receive_IT+0x26>
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e016      	b.n	8004512 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_UART_Receive_IT+0x38>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e00f      	b.n	8004512 <HAL_UART_Receive_IT+0x58>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	461a      	mov	r2, r3
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fa24 	bl	8004954 <UART_Start_Receive_IT>
 800450c:	4603      	mov	r3, r0
 800450e:	e000      	b.n	8004512 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004510:	2302      	movs	r3, #2
  }
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800453c:	2300      	movs	r3, #0
 800453e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10d      	bne.n	800456e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	d008      	beq.n	800456e <HAL_UART_IRQHandler+0x52>
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fad4 	bl	8004b14 <UART_Receive_IT>
      return;
 800456c:	e17c      	b.n	8004868 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80b1 	beq.w	80046d8 <HAL_UART_IRQHandler+0x1bc>
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d105      	bne.n	800458c <HAL_UART_IRQHandler+0x70>
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 80a6 	beq.w	80046d8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_UART_IRQHandler+0x90>
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	f043 0201 	orr.w	r2, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_UART_IRQHandler+0xb0>
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	f043 0202 	orr.w	r2, r3, #2
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_UART_IRQHandler+0xd0>
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	f043 0204 	orr.w	r2, r3, #4
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00f      	beq.n	8004616 <HAL_UART_IRQHandler+0xfa>
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	f003 0320 	and.w	r3, r3, #32
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <HAL_UART_IRQHandler+0xee>
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	f043 0208 	orr.w	r2, r3, #8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 811f 	beq.w	800485e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <HAL_UART_IRQHandler+0x11e>
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fa6d 	bl	8004b14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	bf14      	ite	ne
 8004648:	2301      	movne	r3, #1
 800464a:	2300      	moveq	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d102      	bne.n	8004662 <HAL_UART_IRQHandler+0x146>
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d031      	beq.n	80046c6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f9af 	bl	80049c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	d023      	beq.n	80046be <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004684:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	2b00      	cmp	r3, #0
 800468c:	d013      	beq.n	80046b6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	4a77      	ldr	r2, [pc, #476]	; (8004870 <HAL_UART_IRQHandler+0x354>)
 8004694:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	4618      	mov	r0, r3
 800469c:	f7fd fdfc 	bl	8002298 <HAL_DMA_Abort_IT>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d016      	beq.n	80046d4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046b0:	4610      	mov	r0, r2
 80046b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b4:	e00e      	b.n	80046d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f8ee 	bl	8004898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046bc:	e00a      	b.n	80046d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f8ea 	bl	8004898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c4:	e006      	b.n	80046d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f8e6 	bl	8004898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80046d2:	e0c4      	b.n	800485e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d4:	bf00      	nop
    return;
 80046d6:	e0c2      	b.n	800485e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	2b01      	cmp	r3, #1
 80046de:	f040 80a1 	bne.w	8004824 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	f003 0310 	and.w	r3, r3, #16
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 809b 	beq.w	8004824 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8095 	beq.w	8004824 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d04e      	beq.n	80047bc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004728:	8a3b      	ldrh	r3, [r7, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 8099 	beq.w	8004862 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004734:	8a3a      	ldrh	r2, [r7, #16]
 8004736:	429a      	cmp	r2, r3
 8004738:	f080 8093 	bcs.w	8004862 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8a3a      	ldrh	r2, [r7, #16]
 8004740:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	2b20      	cmp	r3, #32
 800474a:	d02b      	beq.n	80047a4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800475a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695a      	ldr	r2, [r3, #20]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695a      	ldr	r2, [r3, #20]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800477a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0210 	bic.w	r2, r2, #16
 8004798:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fd fd3f 	bl	8002222 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	4619      	mov	r1, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f878 	bl	80048aa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80047ba:	e052      	b.n	8004862 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d048      	beq.n	8004866 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80047d4:	8a7b      	ldrh	r3, [r7, #18]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d045      	beq.n	8004866 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047e8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695a      	ldr	r2, [r3, #20]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0201 	bic.w	r2, r2, #1
 80047f8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0210 	bic.w	r2, r2, #16
 8004816:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004818:	8a7b      	ldrh	r3, [r7, #18]
 800481a:	4619      	mov	r1, r3
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f844 	bl	80048aa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004822:	e020      	b.n	8004866 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482a:	2b00      	cmp	r3, #0
 800482c:	d008      	beq.n	8004840 <HAL_UART_IRQHandler+0x324>
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f904 	bl	8004a46 <UART_Transmit_IT>
    return;
 800483e:	e013      	b.n	8004868 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00e      	beq.n	8004868 <HAL_UART_IRQHandler+0x34c>
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004850:	2b00      	cmp	r3, #0
 8004852:	d009      	beq.n	8004868 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f945 	bl	8004ae4 <UART_EndTransmit_IT>
    return;
 800485a:	bf00      	nop
 800485c:	e004      	b.n	8004868 <HAL_UART_IRQHandler+0x34c>
    return;
 800485e:	bf00      	nop
 8004860:	e002      	b.n	8004868 <HAL_UART_IRQHandler+0x34c>
      return;
 8004862:	bf00      	nop
 8004864:	e000      	b.n	8004868 <HAL_UART_IRQHandler+0x34c>
      return;
 8004866:	bf00      	nop
  }
}
 8004868:	3728      	adds	r7, #40	; 0x28
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	08004a1f 	.word	0x08004a1f

08004874 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr

08004886 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr

080048aa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	460b      	mov	r3, r1
 80048b4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	603b      	str	r3, [r7, #0]
 80048cc:	4613      	mov	r3, r2
 80048ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d0:	e02c      	b.n	800492c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d028      	beq.n	800492c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d007      	beq.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80048e0:	f7fd fb66 	bl	8001fb0 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d21d      	bcs.n	800492c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e00f      	b.n	800494c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	4013      	ands	r3, r2
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	429a      	cmp	r2, r3
 800493a:	bf0c      	ite	eq
 800493c:	2301      	moveq	r3, #1
 800493e:	2300      	movne	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	429a      	cmp	r2, r3
 8004948:	d0c3      	beq.n	80048d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	4613      	mov	r3, r2
 8004960:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	88fa      	ldrh	r2, [r7, #6]
 800496c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	88fa      	ldrh	r2, [r7, #6]
 8004972:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2222      	movs	r2, #34	; 0x22
 800497e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004998:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695a      	ldr	r2, [r3, #20]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0201 	orr.w	r2, r2, #1
 80049a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0220 	orr.w	r2, r2, #32
 80049b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr

080049c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049dc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695a      	ldr	r2, [r3, #20]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0201 	bic.w	r2, r2, #1
 80049ec:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d107      	bne.n	8004a06 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0210 	bic.w	r2, r2, #16
 8004a04:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr

08004a1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f7ff ff2d 	bl	8004898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a3e:	bf00      	nop
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b21      	cmp	r3, #33	; 0x21
 8004a58:	d13e      	bne.n	8004ad8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a62:	d114      	bne.n	8004a8e <UART_Transmit_IT+0x48>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d110      	bne.n	8004a8e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	1c9a      	adds	r2, r3, #2
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	621a      	str	r2, [r3, #32]
 8004a8c:	e008      	b.n	8004aa0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	1c59      	adds	r1, r3, #1
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6211      	str	r1, [r2, #32]
 8004a98:	781a      	ldrb	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	4619      	mov	r1, r3
 8004aae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10f      	bne.n	8004ad4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ac2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ad2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e000      	b.n	8004ada <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ad8:	2302      	movs	r3, #2
  }
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr

08004ae4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004afa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff feb5 	bl	8004874 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b22      	cmp	r3, #34	; 0x22
 8004b26:	f040 8099 	bne.w	8004c5c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b32:	d117      	bne.n	8004b64 <UART_Receive_IT+0x50>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d113      	bne.n	8004b64 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b44:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5c:	1c9a      	adds	r2, r3, #2
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	629a      	str	r2, [r3, #40]	; 0x28
 8004b62:	e026      	b.n	8004bb2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b68:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b76:	d007      	beq.n	8004b88 <UART_Receive_IT+0x74>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <UART_Receive_IT+0x82>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d106      	bne.n	8004b96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	701a      	strb	r2, [r3, #0]
 8004b94:	e008      	b.n	8004ba8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d148      	bne.n	8004c58 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0220 	bic.w	r2, r2, #32
 8004bd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004be4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695a      	ldr	r2, [r3, #20]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0201 	bic.w	r2, r2, #1
 8004bf4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d123      	bne.n	8004c4e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0210 	bic.w	r2, r2, #16
 8004c1a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0310 	and.w	r3, r3, #16
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d10a      	bne.n	8004c40 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c44:	4619      	mov	r1, r3
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff fe2f 	bl	80048aa <HAL_UARTEx_RxEventCallback>
 8004c4c:	e002      	b.n	8004c54 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff fe19 	bl	8004886 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	e002      	b.n	8004c5e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e000      	b.n	8004c5e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004c5c:	2302      	movs	r3, #2
  }
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ca2:	f023 030c 	bic.w	r3, r3, #12
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a2c      	ldr	r2, [pc, #176]	; (8004d7c <UART_SetConfig+0x114>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d103      	bne.n	8004cd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cd0:	f7fe fe4a 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	e002      	b.n	8004cde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004cd8:	f7fe fe32 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8004cdc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009a      	lsls	r2, r3, #2
 8004ce8:	441a      	add	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	4a22      	ldr	r2, [pc, #136]	; (8004d80 <UART_SetConfig+0x118>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	0119      	lsls	r1, r3, #4
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	009a      	lsls	r2, r3, #2
 8004d08:	441a      	add	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d14:	4b1a      	ldr	r3, [pc, #104]	; (8004d80 <UART_SetConfig+0x118>)
 8004d16:	fba3 0302 	umull	r0, r3, r3, r2
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	2064      	movs	r0, #100	; 0x64
 8004d1e:	fb00 f303 	mul.w	r3, r0, r3
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	3332      	adds	r3, #50	; 0x32
 8004d28:	4a15      	ldr	r2, [pc, #84]	; (8004d80 <UART_SetConfig+0x118>)
 8004d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d34:	4419      	add	r1, r3
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009a      	lsls	r2, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <UART_SetConfig+0x118>)
 8004d4e:	fba3 0302 	umull	r0, r3, r3, r2
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	2064      	movs	r0, #100	; 0x64
 8004d56:	fb00 f303 	mul.w	r3, r0, r3
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	3332      	adds	r3, #50	; 0x32
 8004d60:	4a07      	ldr	r2, [pc, #28]	; (8004d80 <UART_SetConfig+0x118>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	095b      	lsrs	r3, r3, #5
 8004d68:	f003 020f 	and.w	r2, r3, #15
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	440a      	add	r2, r1
 8004d72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d74:	bf00      	nop
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40013800 	.word	0x40013800
 8004d80:	51eb851f 	.word	0x51eb851f

08004d84 <atof>:
 8004d84:	2100      	movs	r1, #0
 8004d86:	f001 bac7 	b.w	8006318 <strtod>
	...

08004d8c <__errno>:
 8004d8c:	4b01      	ldr	r3, [pc, #4]	; (8004d94 <__errno+0x8>)
 8004d8e:	6818      	ldr	r0, [r3, #0]
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000018 	.word	0x20000018

08004d98 <__libc_init_array>:
 8004d98:	b570      	push	{r4, r5, r6, lr}
 8004d9a:	2500      	movs	r5, #0
 8004d9c:	4e0c      	ldr	r6, [pc, #48]	; (8004dd0 <__libc_init_array+0x38>)
 8004d9e:	4c0d      	ldr	r4, [pc, #52]	; (8004dd4 <__libc_init_array+0x3c>)
 8004da0:	1ba4      	subs	r4, r4, r6
 8004da2:	10a4      	asrs	r4, r4, #2
 8004da4:	42a5      	cmp	r5, r4
 8004da6:	d109      	bne.n	8004dbc <__libc_init_array+0x24>
 8004da8:	f003 faec 	bl	8008384 <_init>
 8004dac:	2500      	movs	r5, #0
 8004dae:	4e0a      	ldr	r6, [pc, #40]	; (8004dd8 <__libc_init_array+0x40>)
 8004db0:	4c0a      	ldr	r4, [pc, #40]	; (8004ddc <__libc_init_array+0x44>)
 8004db2:	1ba4      	subs	r4, r4, r6
 8004db4:	10a4      	asrs	r4, r4, #2
 8004db6:	42a5      	cmp	r5, r4
 8004db8:	d105      	bne.n	8004dc6 <__libc_init_array+0x2e>
 8004dba:	bd70      	pop	{r4, r5, r6, pc}
 8004dbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dc0:	4798      	blx	r3
 8004dc2:	3501      	adds	r5, #1
 8004dc4:	e7ee      	b.n	8004da4 <__libc_init_array+0xc>
 8004dc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dca:	4798      	blx	r3
 8004dcc:	3501      	adds	r5, #1
 8004dce:	e7f2      	b.n	8004db6 <__libc_init_array+0x1e>
 8004dd0:	08008688 	.word	0x08008688
 8004dd4:	08008688 	.word	0x08008688
 8004dd8:	08008688 	.word	0x08008688
 8004ddc:	0800868c 	.word	0x0800868c

08004de0 <memset>:
 8004de0:	4603      	mov	r3, r0
 8004de2:	4402      	add	r2, r0
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d100      	bne.n	8004dea <memset+0xa>
 8004de8:	4770      	bx	lr
 8004dea:	f803 1b01 	strb.w	r1, [r3], #1
 8004dee:	e7f9      	b.n	8004de4 <memset+0x4>

08004df0 <__cvt>:
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df6:	461e      	mov	r6, r3
 8004df8:	bfbb      	ittet	lt
 8004dfa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004dfe:	461e      	movlt	r6, r3
 8004e00:	2300      	movge	r3, #0
 8004e02:	232d      	movlt	r3, #45	; 0x2d
 8004e04:	b088      	sub	sp, #32
 8004e06:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004e08:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004e0c:	f027 0720 	bic.w	r7, r7, #32
 8004e10:	2f46      	cmp	r7, #70	; 0x46
 8004e12:	4614      	mov	r4, r2
 8004e14:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004e16:	700b      	strb	r3, [r1, #0]
 8004e18:	d004      	beq.n	8004e24 <__cvt+0x34>
 8004e1a:	2f45      	cmp	r7, #69	; 0x45
 8004e1c:	d100      	bne.n	8004e20 <__cvt+0x30>
 8004e1e:	3501      	adds	r5, #1
 8004e20:	2302      	movs	r3, #2
 8004e22:	e000      	b.n	8004e26 <__cvt+0x36>
 8004e24:	2303      	movs	r3, #3
 8004e26:	aa07      	add	r2, sp, #28
 8004e28:	9204      	str	r2, [sp, #16]
 8004e2a:	aa06      	add	r2, sp, #24
 8004e2c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004e30:	e9cd 3500 	strd	r3, r5, [sp]
 8004e34:	4622      	mov	r2, r4
 8004e36:	4633      	mov	r3, r6
 8004e38:	f001 fb0e 	bl	8006458 <_dtoa_r>
 8004e3c:	2f47      	cmp	r7, #71	; 0x47
 8004e3e:	4680      	mov	r8, r0
 8004e40:	d102      	bne.n	8004e48 <__cvt+0x58>
 8004e42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e44:	07db      	lsls	r3, r3, #31
 8004e46:	d526      	bpl.n	8004e96 <__cvt+0xa6>
 8004e48:	2f46      	cmp	r7, #70	; 0x46
 8004e4a:	eb08 0905 	add.w	r9, r8, r5
 8004e4e:	d111      	bne.n	8004e74 <__cvt+0x84>
 8004e50:	f898 3000 	ldrb.w	r3, [r8]
 8004e54:	2b30      	cmp	r3, #48	; 0x30
 8004e56:	d10a      	bne.n	8004e6e <__cvt+0x7e>
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	4631      	mov	r1, r6
 8004e60:	f7fb fda2 	bl	80009a8 <__aeabi_dcmpeq>
 8004e64:	b918      	cbnz	r0, 8004e6e <__cvt+0x7e>
 8004e66:	f1c5 0501 	rsb	r5, r5, #1
 8004e6a:	f8ca 5000 	str.w	r5, [sl]
 8004e6e:	f8da 3000 	ldr.w	r3, [sl]
 8004e72:	4499      	add	r9, r3
 8004e74:	2200      	movs	r2, #0
 8004e76:	2300      	movs	r3, #0
 8004e78:	4620      	mov	r0, r4
 8004e7a:	4631      	mov	r1, r6
 8004e7c:	f7fb fd94 	bl	80009a8 <__aeabi_dcmpeq>
 8004e80:	b938      	cbnz	r0, 8004e92 <__cvt+0xa2>
 8004e82:	2230      	movs	r2, #48	; 0x30
 8004e84:	9b07      	ldr	r3, [sp, #28]
 8004e86:	454b      	cmp	r3, r9
 8004e88:	d205      	bcs.n	8004e96 <__cvt+0xa6>
 8004e8a:	1c59      	adds	r1, r3, #1
 8004e8c:	9107      	str	r1, [sp, #28]
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	e7f8      	b.n	8004e84 <__cvt+0x94>
 8004e92:	f8cd 901c 	str.w	r9, [sp, #28]
 8004e96:	4640      	mov	r0, r8
 8004e98:	9b07      	ldr	r3, [sp, #28]
 8004e9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004e9c:	eba3 0308 	sub.w	r3, r3, r8
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	b008      	add	sp, #32
 8004ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004ea8 <__exponent>:
 8004ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004eaa:	2900      	cmp	r1, #0
 8004eac:	bfb4      	ite	lt
 8004eae:	232d      	movlt	r3, #45	; 0x2d
 8004eb0:	232b      	movge	r3, #43	; 0x2b
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	bfb8      	it	lt
 8004eb6:	4249      	neglt	r1, r1
 8004eb8:	2909      	cmp	r1, #9
 8004eba:	f804 2b02 	strb.w	r2, [r4], #2
 8004ebe:	7043      	strb	r3, [r0, #1]
 8004ec0:	dd21      	ble.n	8004f06 <__exponent+0x5e>
 8004ec2:	f10d 0307 	add.w	r3, sp, #7
 8004ec6:	461f      	mov	r7, r3
 8004ec8:	260a      	movs	r6, #10
 8004eca:	fb91 f5f6 	sdiv	r5, r1, r6
 8004ece:	fb06 1115 	mls	r1, r6, r5, r1
 8004ed2:	2d09      	cmp	r5, #9
 8004ed4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004ed8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004edc:	f103 32ff 	add.w	r2, r3, #4294967295
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	dc09      	bgt.n	8004ef8 <__exponent+0x50>
 8004ee4:	3130      	adds	r1, #48	; 0x30
 8004ee6:	3b02      	subs	r3, #2
 8004ee8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004eec:	42bb      	cmp	r3, r7
 8004eee:	4622      	mov	r2, r4
 8004ef0:	d304      	bcc.n	8004efc <__exponent+0x54>
 8004ef2:	1a10      	subs	r0, r2, r0
 8004ef4:	b003      	add	sp, #12
 8004ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef8:	4613      	mov	r3, r2
 8004efa:	e7e6      	b.n	8004eca <__exponent+0x22>
 8004efc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f00:	f804 2b01 	strb.w	r2, [r4], #1
 8004f04:	e7f2      	b.n	8004eec <__exponent+0x44>
 8004f06:	2330      	movs	r3, #48	; 0x30
 8004f08:	4419      	add	r1, r3
 8004f0a:	7083      	strb	r3, [r0, #2]
 8004f0c:	1d02      	adds	r2, r0, #4
 8004f0e:	70c1      	strb	r1, [r0, #3]
 8004f10:	e7ef      	b.n	8004ef2 <__exponent+0x4a>
	...

08004f14 <_printf_float>:
 8004f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f18:	b091      	sub	sp, #68	; 0x44
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004f1e:	4693      	mov	fp, r2
 8004f20:	461e      	mov	r6, r3
 8004f22:	4605      	mov	r5, r0
 8004f24:	f002 fb76 	bl	8007614 <_localeconv_r>
 8004f28:	6803      	ldr	r3, [r0, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f2e:	f7fb f90f 	bl	8000150 <strlen>
 8004f32:	2300      	movs	r3, #0
 8004f34:	930e      	str	r3, [sp, #56]	; 0x38
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	900a      	str	r0, [sp, #40]	; 0x28
 8004f3a:	3307      	adds	r3, #7
 8004f3c:	f023 0307 	bic.w	r3, r3, #7
 8004f40:	f103 0208 	add.w	r2, r3, #8
 8004f44:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004f48:	f8d4 a000 	ldr.w	sl, [r4]
 8004f4c:	603a      	str	r2, [r7, #0]
 8004f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004f56:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004f5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f60:	f04f 32ff 	mov.w	r2, #4294967295
 8004f64:	4ba6      	ldr	r3, [pc, #664]	; (8005200 <_printf_float+0x2ec>)
 8004f66:	4638      	mov	r0, r7
 8004f68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f6a:	f7fb fd4f 	bl	8000a0c <__aeabi_dcmpun>
 8004f6e:	bb68      	cbnz	r0, 8004fcc <_printf_float+0xb8>
 8004f70:	f04f 32ff 	mov.w	r2, #4294967295
 8004f74:	4ba2      	ldr	r3, [pc, #648]	; (8005200 <_printf_float+0x2ec>)
 8004f76:	4638      	mov	r0, r7
 8004f78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f7a:	f7fb fd29 	bl	80009d0 <__aeabi_dcmple>
 8004f7e:	bb28      	cbnz	r0, 8004fcc <_printf_float+0xb8>
 8004f80:	2200      	movs	r2, #0
 8004f82:	2300      	movs	r3, #0
 8004f84:	4638      	mov	r0, r7
 8004f86:	4649      	mov	r1, r9
 8004f88:	f7fb fd18 	bl	80009bc <__aeabi_dcmplt>
 8004f8c:	b110      	cbz	r0, 8004f94 <_printf_float+0x80>
 8004f8e:	232d      	movs	r3, #45	; 0x2d
 8004f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f94:	4f9b      	ldr	r7, [pc, #620]	; (8005204 <_printf_float+0x2f0>)
 8004f96:	4b9c      	ldr	r3, [pc, #624]	; (8005208 <_printf_float+0x2f4>)
 8004f98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f9c:	bf98      	it	ls
 8004f9e:	461f      	movls	r7, r3
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	f04f 0900 	mov.w	r9, #0
 8004fa6:	6123      	str	r3, [r4, #16]
 8004fa8:	f02a 0304 	bic.w	r3, sl, #4
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	9600      	str	r6, [sp, #0]
 8004fb0:	465b      	mov	r3, fp
 8004fb2:	aa0f      	add	r2, sp, #60	; 0x3c
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f000 f9e2 	bl	8005380 <_printf_common>
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	f040 8090 	bne.w	80050e2 <_printf_float+0x1ce>
 8004fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc6:	b011      	add	sp, #68	; 0x44
 8004fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fcc:	463a      	mov	r2, r7
 8004fce:	464b      	mov	r3, r9
 8004fd0:	4638      	mov	r0, r7
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	f7fb fd1a 	bl	8000a0c <__aeabi_dcmpun>
 8004fd8:	b110      	cbz	r0, 8004fe0 <_printf_float+0xcc>
 8004fda:	4f8c      	ldr	r7, [pc, #560]	; (800520c <_printf_float+0x2f8>)
 8004fdc:	4b8c      	ldr	r3, [pc, #560]	; (8005210 <_printf_float+0x2fc>)
 8004fde:	e7db      	b.n	8004f98 <_printf_float+0x84>
 8004fe0:	6863      	ldr	r3, [r4, #4]
 8004fe2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004fe6:	1c59      	adds	r1, r3, #1
 8004fe8:	a80d      	add	r0, sp, #52	; 0x34
 8004fea:	a90e      	add	r1, sp, #56	; 0x38
 8004fec:	d140      	bne.n	8005070 <_printf_float+0x15c>
 8004fee:	2306      	movs	r3, #6
 8004ff0:	6063      	str	r3, [r4, #4]
 8004ff2:	f04f 0c00 	mov.w	ip, #0
 8004ff6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004ffa:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004ffe:	6863      	ldr	r3, [r4, #4]
 8005000:	6022      	str	r2, [r4, #0]
 8005002:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	463a      	mov	r2, r7
 800500a:	464b      	mov	r3, r9
 800500c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005010:	4628      	mov	r0, r5
 8005012:	f7ff feed 	bl	8004df0 <__cvt>
 8005016:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800501a:	2b47      	cmp	r3, #71	; 0x47
 800501c:	4607      	mov	r7, r0
 800501e:	d109      	bne.n	8005034 <_printf_float+0x120>
 8005020:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005022:	1cd8      	adds	r0, r3, #3
 8005024:	db02      	blt.n	800502c <_printf_float+0x118>
 8005026:	6862      	ldr	r2, [r4, #4]
 8005028:	4293      	cmp	r3, r2
 800502a:	dd47      	ble.n	80050bc <_printf_float+0x1a8>
 800502c:	f1a8 0802 	sub.w	r8, r8, #2
 8005030:	fa5f f888 	uxtb.w	r8, r8
 8005034:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005038:	990d      	ldr	r1, [sp, #52]	; 0x34
 800503a:	d824      	bhi.n	8005086 <_printf_float+0x172>
 800503c:	3901      	subs	r1, #1
 800503e:	4642      	mov	r2, r8
 8005040:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005044:	910d      	str	r1, [sp, #52]	; 0x34
 8005046:	f7ff ff2f 	bl	8004ea8 <__exponent>
 800504a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800504c:	4681      	mov	r9, r0
 800504e:	1813      	adds	r3, r2, r0
 8005050:	2a01      	cmp	r2, #1
 8005052:	6123      	str	r3, [r4, #16]
 8005054:	dc02      	bgt.n	800505c <_printf_float+0x148>
 8005056:	6822      	ldr	r2, [r4, #0]
 8005058:	07d1      	lsls	r1, r2, #31
 800505a:	d501      	bpl.n	8005060 <_printf_float+0x14c>
 800505c:	3301      	adds	r3, #1
 800505e:	6123      	str	r3, [r4, #16]
 8005060:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0a2      	beq.n	8004fae <_printf_float+0x9a>
 8005068:	232d      	movs	r3, #45	; 0x2d
 800506a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800506e:	e79e      	b.n	8004fae <_printf_float+0x9a>
 8005070:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005074:	f000 816e 	beq.w	8005354 <_printf_float+0x440>
 8005078:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800507c:	d1b9      	bne.n	8004ff2 <_printf_float+0xde>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1b7      	bne.n	8004ff2 <_printf_float+0xde>
 8005082:	2301      	movs	r3, #1
 8005084:	e7b4      	b.n	8004ff0 <_printf_float+0xdc>
 8005086:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800508a:	d119      	bne.n	80050c0 <_printf_float+0x1ac>
 800508c:	2900      	cmp	r1, #0
 800508e:	6863      	ldr	r3, [r4, #4]
 8005090:	dd0c      	ble.n	80050ac <_printf_float+0x198>
 8005092:	6121      	str	r1, [r4, #16]
 8005094:	b913      	cbnz	r3, 800509c <_printf_float+0x188>
 8005096:	6822      	ldr	r2, [r4, #0]
 8005098:	07d2      	lsls	r2, r2, #31
 800509a:	d502      	bpl.n	80050a2 <_printf_float+0x18e>
 800509c:	3301      	adds	r3, #1
 800509e:	440b      	add	r3, r1
 80050a0:	6123      	str	r3, [r4, #16]
 80050a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050a4:	f04f 0900 	mov.w	r9, #0
 80050a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80050aa:	e7d9      	b.n	8005060 <_printf_float+0x14c>
 80050ac:	b913      	cbnz	r3, 80050b4 <_printf_float+0x1a0>
 80050ae:	6822      	ldr	r2, [r4, #0]
 80050b0:	07d0      	lsls	r0, r2, #31
 80050b2:	d501      	bpl.n	80050b8 <_printf_float+0x1a4>
 80050b4:	3302      	adds	r3, #2
 80050b6:	e7f3      	b.n	80050a0 <_printf_float+0x18c>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e7f1      	b.n	80050a0 <_printf_float+0x18c>
 80050bc:	f04f 0867 	mov.w	r8, #103	; 0x67
 80050c0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80050c4:	4293      	cmp	r3, r2
 80050c6:	db05      	blt.n	80050d4 <_printf_float+0x1c0>
 80050c8:	6822      	ldr	r2, [r4, #0]
 80050ca:	6123      	str	r3, [r4, #16]
 80050cc:	07d1      	lsls	r1, r2, #31
 80050ce:	d5e8      	bpl.n	80050a2 <_printf_float+0x18e>
 80050d0:	3301      	adds	r3, #1
 80050d2:	e7e5      	b.n	80050a0 <_printf_float+0x18c>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bfcc      	ite	gt
 80050d8:	2301      	movgt	r3, #1
 80050da:	f1c3 0302 	rsble	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	e7de      	b.n	80050a0 <_printf_float+0x18c>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	055a      	lsls	r2, r3, #21
 80050e6:	d407      	bmi.n	80050f8 <_printf_float+0x1e4>
 80050e8:	6923      	ldr	r3, [r4, #16]
 80050ea:	463a      	mov	r2, r7
 80050ec:	4659      	mov	r1, fp
 80050ee:	4628      	mov	r0, r5
 80050f0:	47b0      	blx	r6
 80050f2:	3001      	adds	r0, #1
 80050f4:	d129      	bne.n	800514a <_printf_float+0x236>
 80050f6:	e764      	b.n	8004fc2 <_printf_float+0xae>
 80050f8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80050fc:	f240 80d7 	bls.w	80052ae <_printf_float+0x39a>
 8005100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005104:	2200      	movs	r2, #0
 8005106:	2300      	movs	r3, #0
 8005108:	f7fb fc4e 	bl	80009a8 <__aeabi_dcmpeq>
 800510c:	b388      	cbz	r0, 8005172 <_printf_float+0x25e>
 800510e:	2301      	movs	r3, #1
 8005110:	4a40      	ldr	r2, [pc, #256]	; (8005214 <_printf_float+0x300>)
 8005112:	4659      	mov	r1, fp
 8005114:	4628      	mov	r0, r5
 8005116:	47b0      	blx	r6
 8005118:	3001      	adds	r0, #1
 800511a:	f43f af52 	beq.w	8004fc2 <_printf_float+0xae>
 800511e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005122:	429a      	cmp	r2, r3
 8005124:	db02      	blt.n	800512c <_printf_float+0x218>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	07d8      	lsls	r0, r3, #31
 800512a:	d50e      	bpl.n	800514a <_printf_float+0x236>
 800512c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005130:	4659      	mov	r1, fp
 8005132:	4628      	mov	r0, r5
 8005134:	47b0      	blx	r6
 8005136:	3001      	adds	r0, #1
 8005138:	f43f af43 	beq.w	8004fc2 <_printf_float+0xae>
 800513c:	2700      	movs	r7, #0
 800513e:	f104 081a 	add.w	r8, r4, #26
 8005142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005144:	3b01      	subs	r3, #1
 8005146:	42bb      	cmp	r3, r7
 8005148:	dc09      	bgt.n	800515e <_printf_float+0x24a>
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	079f      	lsls	r7, r3, #30
 800514e:	f100 80fd 	bmi.w	800534c <_printf_float+0x438>
 8005152:	68e0      	ldr	r0, [r4, #12]
 8005154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005156:	4298      	cmp	r0, r3
 8005158:	bfb8      	it	lt
 800515a:	4618      	movlt	r0, r3
 800515c:	e733      	b.n	8004fc6 <_printf_float+0xb2>
 800515e:	2301      	movs	r3, #1
 8005160:	4642      	mov	r2, r8
 8005162:	4659      	mov	r1, fp
 8005164:	4628      	mov	r0, r5
 8005166:	47b0      	blx	r6
 8005168:	3001      	adds	r0, #1
 800516a:	f43f af2a 	beq.w	8004fc2 <_printf_float+0xae>
 800516e:	3701      	adds	r7, #1
 8005170:	e7e7      	b.n	8005142 <_printf_float+0x22e>
 8005172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005174:	2b00      	cmp	r3, #0
 8005176:	dc2b      	bgt.n	80051d0 <_printf_float+0x2bc>
 8005178:	2301      	movs	r3, #1
 800517a:	4a26      	ldr	r2, [pc, #152]	; (8005214 <_printf_float+0x300>)
 800517c:	4659      	mov	r1, fp
 800517e:	4628      	mov	r0, r5
 8005180:	47b0      	blx	r6
 8005182:	3001      	adds	r0, #1
 8005184:	f43f af1d 	beq.w	8004fc2 <_printf_float+0xae>
 8005188:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800518a:	b923      	cbnz	r3, 8005196 <_printf_float+0x282>
 800518c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800518e:	b913      	cbnz	r3, 8005196 <_printf_float+0x282>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	07d9      	lsls	r1, r3, #31
 8005194:	d5d9      	bpl.n	800514a <_printf_float+0x236>
 8005196:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800519a:	4659      	mov	r1, fp
 800519c:	4628      	mov	r0, r5
 800519e:	47b0      	blx	r6
 80051a0:	3001      	adds	r0, #1
 80051a2:	f43f af0e 	beq.w	8004fc2 <_printf_float+0xae>
 80051a6:	f04f 0800 	mov.w	r8, #0
 80051aa:	f104 091a 	add.w	r9, r4, #26
 80051ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051b0:	425b      	negs	r3, r3
 80051b2:	4543      	cmp	r3, r8
 80051b4:	dc01      	bgt.n	80051ba <_printf_float+0x2a6>
 80051b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051b8:	e797      	b.n	80050ea <_printf_float+0x1d6>
 80051ba:	2301      	movs	r3, #1
 80051bc:	464a      	mov	r2, r9
 80051be:	4659      	mov	r1, fp
 80051c0:	4628      	mov	r0, r5
 80051c2:	47b0      	blx	r6
 80051c4:	3001      	adds	r0, #1
 80051c6:	f43f aefc 	beq.w	8004fc2 <_printf_float+0xae>
 80051ca:	f108 0801 	add.w	r8, r8, #1
 80051ce:	e7ee      	b.n	80051ae <_printf_float+0x29a>
 80051d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051d4:	429a      	cmp	r2, r3
 80051d6:	bfa8      	it	ge
 80051d8:	461a      	movge	r2, r3
 80051da:	2a00      	cmp	r2, #0
 80051dc:	4690      	mov	r8, r2
 80051de:	dd07      	ble.n	80051f0 <_printf_float+0x2dc>
 80051e0:	4613      	mov	r3, r2
 80051e2:	4659      	mov	r1, fp
 80051e4:	463a      	mov	r2, r7
 80051e6:	4628      	mov	r0, r5
 80051e8:	47b0      	blx	r6
 80051ea:	3001      	adds	r0, #1
 80051ec:	f43f aee9 	beq.w	8004fc2 <_printf_float+0xae>
 80051f0:	f104 031a 	add.w	r3, r4, #26
 80051f4:	f04f 0a00 	mov.w	sl, #0
 80051f8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80051fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80051fe:	e015      	b.n	800522c <_printf_float+0x318>
 8005200:	7fefffff 	.word	0x7fefffff
 8005204:	080083e0 	.word	0x080083e0
 8005208:	080083dc 	.word	0x080083dc
 800520c:	080083e8 	.word	0x080083e8
 8005210:	080083e4 	.word	0x080083e4
 8005214:	080083ec 	.word	0x080083ec
 8005218:	2301      	movs	r3, #1
 800521a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800521c:	4659      	mov	r1, fp
 800521e:	4628      	mov	r0, r5
 8005220:	47b0      	blx	r6
 8005222:	3001      	adds	r0, #1
 8005224:	f43f aecd 	beq.w	8004fc2 <_printf_float+0xae>
 8005228:	f10a 0a01 	add.w	sl, sl, #1
 800522c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005230:	eba9 0308 	sub.w	r3, r9, r8
 8005234:	4553      	cmp	r3, sl
 8005236:	dcef      	bgt.n	8005218 <_printf_float+0x304>
 8005238:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800523c:	429a      	cmp	r2, r3
 800523e:	444f      	add	r7, r9
 8005240:	db14      	blt.n	800526c <_printf_float+0x358>
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	07da      	lsls	r2, r3, #31
 8005246:	d411      	bmi.n	800526c <_printf_float+0x358>
 8005248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800524a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800524c:	eba3 0209 	sub.w	r2, r3, r9
 8005250:	eba3 0901 	sub.w	r9, r3, r1
 8005254:	4591      	cmp	r9, r2
 8005256:	bfa8      	it	ge
 8005258:	4691      	movge	r9, r2
 800525a:	f1b9 0f00 	cmp.w	r9, #0
 800525e:	dc0d      	bgt.n	800527c <_printf_float+0x368>
 8005260:	2700      	movs	r7, #0
 8005262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005266:	f104 081a 	add.w	r8, r4, #26
 800526a:	e018      	b.n	800529e <_printf_float+0x38a>
 800526c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005270:	4659      	mov	r1, fp
 8005272:	4628      	mov	r0, r5
 8005274:	47b0      	blx	r6
 8005276:	3001      	adds	r0, #1
 8005278:	d1e6      	bne.n	8005248 <_printf_float+0x334>
 800527a:	e6a2      	b.n	8004fc2 <_printf_float+0xae>
 800527c:	464b      	mov	r3, r9
 800527e:	463a      	mov	r2, r7
 8005280:	4659      	mov	r1, fp
 8005282:	4628      	mov	r0, r5
 8005284:	47b0      	blx	r6
 8005286:	3001      	adds	r0, #1
 8005288:	d1ea      	bne.n	8005260 <_printf_float+0x34c>
 800528a:	e69a      	b.n	8004fc2 <_printf_float+0xae>
 800528c:	2301      	movs	r3, #1
 800528e:	4642      	mov	r2, r8
 8005290:	4659      	mov	r1, fp
 8005292:	4628      	mov	r0, r5
 8005294:	47b0      	blx	r6
 8005296:	3001      	adds	r0, #1
 8005298:	f43f ae93 	beq.w	8004fc2 <_printf_float+0xae>
 800529c:	3701      	adds	r7, #1
 800529e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	eba3 0309 	sub.w	r3, r3, r9
 80052a8:	42bb      	cmp	r3, r7
 80052aa:	dcef      	bgt.n	800528c <_printf_float+0x378>
 80052ac:	e74d      	b.n	800514a <_printf_float+0x236>
 80052ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052b0:	2a01      	cmp	r2, #1
 80052b2:	dc01      	bgt.n	80052b8 <_printf_float+0x3a4>
 80052b4:	07db      	lsls	r3, r3, #31
 80052b6:	d538      	bpl.n	800532a <_printf_float+0x416>
 80052b8:	2301      	movs	r3, #1
 80052ba:	463a      	mov	r2, r7
 80052bc:	4659      	mov	r1, fp
 80052be:	4628      	mov	r0, r5
 80052c0:	47b0      	blx	r6
 80052c2:	3001      	adds	r0, #1
 80052c4:	f43f ae7d 	beq.w	8004fc2 <_printf_float+0xae>
 80052c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052cc:	4659      	mov	r1, fp
 80052ce:	4628      	mov	r0, r5
 80052d0:	47b0      	blx	r6
 80052d2:	3001      	adds	r0, #1
 80052d4:	f107 0701 	add.w	r7, r7, #1
 80052d8:	f43f ae73 	beq.w	8004fc2 <_printf_float+0xae>
 80052dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052e2:	2200      	movs	r2, #0
 80052e4:	f103 38ff 	add.w	r8, r3, #4294967295
 80052e8:	2300      	movs	r3, #0
 80052ea:	f7fb fb5d 	bl	80009a8 <__aeabi_dcmpeq>
 80052ee:	b9c0      	cbnz	r0, 8005322 <_printf_float+0x40e>
 80052f0:	4643      	mov	r3, r8
 80052f2:	463a      	mov	r2, r7
 80052f4:	4659      	mov	r1, fp
 80052f6:	4628      	mov	r0, r5
 80052f8:	47b0      	blx	r6
 80052fa:	3001      	adds	r0, #1
 80052fc:	d10d      	bne.n	800531a <_printf_float+0x406>
 80052fe:	e660      	b.n	8004fc2 <_printf_float+0xae>
 8005300:	2301      	movs	r3, #1
 8005302:	4642      	mov	r2, r8
 8005304:	4659      	mov	r1, fp
 8005306:	4628      	mov	r0, r5
 8005308:	47b0      	blx	r6
 800530a:	3001      	adds	r0, #1
 800530c:	f43f ae59 	beq.w	8004fc2 <_printf_float+0xae>
 8005310:	3701      	adds	r7, #1
 8005312:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005314:	3b01      	subs	r3, #1
 8005316:	42bb      	cmp	r3, r7
 8005318:	dcf2      	bgt.n	8005300 <_printf_float+0x3ec>
 800531a:	464b      	mov	r3, r9
 800531c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005320:	e6e4      	b.n	80050ec <_printf_float+0x1d8>
 8005322:	2700      	movs	r7, #0
 8005324:	f104 081a 	add.w	r8, r4, #26
 8005328:	e7f3      	b.n	8005312 <_printf_float+0x3fe>
 800532a:	2301      	movs	r3, #1
 800532c:	e7e1      	b.n	80052f2 <_printf_float+0x3de>
 800532e:	2301      	movs	r3, #1
 8005330:	4642      	mov	r2, r8
 8005332:	4659      	mov	r1, fp
 8005334:	4628      	mov	r0, r5
 8005336:	47b0      	blx	r6
 8005338:	3001      	adds	r0, #1
 800533a:	f43f ae42 	beq.w	8004fc2 <_printf_float+0xae>
 800533e:	3701      	adds	r7, #1
 8005340:	68e3      	ldr	r3, [r4, #12]
 8005342:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	42bb      	cmp	r3, r7
 8005348:	dcf1      	bgt.n	800532e <_printf_float+0x41a>
 800534a:	e702      	b.n	8005152 <_printf_float+0x23e>
 800534c:	2700      	movs	r7, #0
 800534e:	f104 0819 	add.w	r8, r4, #25
 8005352:	e7f5      	b.n	8005340 <_printf_float+0x42c>
 8005354:	2b00      	cmp	r3, #0
 8005356:	f43f ae94 	beq.w	8005082 <_printf_float+0x16e>
 800535a:	f04f 0c00 	mov.w	ip, #0
 800535e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005362:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005366:	6022      	str	r2, [r4, #0]
 8005368:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800536c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	463a      	mov	r2, r7
 8005374:	464b      	mov	r3, r9
 8005376:	4628      	mov	r0, r5
 8005378:	f7ff fd3a 	bl	8004df0 <__cvt>
 800537c:	4607      	mov	r7, r0
 800537e:	e64f      	b.n	8005020 <_printf_float+0x10c>

08005380 <_printf_common>:
 8005380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005384:	4691      	mov	r9, r2
 8005386:	461f      	mov	r7, r3
 8005388:	688a      	ldr	r2, [r1, #8]
 800538a:	690b      	ldr	r3, [r1, #16]
 800538c:	4606      	mov	r6, r0
 800538e:	4293      	cmp	r3, r2
 8005390:	bfb8      	it	lt
 8005392:	4613      	movlt	r3, r2
 8005394:	f8c9 3000 	str.w	r3, [r9]
 8005398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800539c:	460c      	mov	r4, r1
 800539e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053a2:	b112      	cbz	r2, 80053aa <_printf_common+0x2a>
 80053a4:	3301      	adds	r3, #1
 80053a6:	f8c9 3000 	str.w	r3, [r9]
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	0699      	lsls	r1, r3, #26
 80053ae:	bf42      	ittt	mi
 80053b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80053b4:	3302      	addmi	r3, #2
 80053b6:	f8c9 3000 	strmi.w	r3, [r9]
 80053ba:	6825      	ldr	r5, [r4, #0]
 80053bc:	f015 0506 	ands.w	r5, r5, #6
 80053c0:	d107      	bne.n	80053d2 <_printf_common+0x52>
 80053c2:	f104 0a19 	add.w	sl, r4, #25
 80053c6:	68e3      	ldr	r3, [r4, #12]
 80053c8:	f8d9 2000 	ldr.w	r2, [r9]
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	42ab      	cmp	r3, r5
 80053d0:	dc29      	bgt.n	8005426 <_printf_common+0xa6>
 80053d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80053d6:	6822      	ldr	r2, [r4, #0]
 80053d8:	3300      	adds	r3, #0
 80053da:	bf18      	it	ne
 80053dc:	2301      	movne	r3, #1
 80053de:	0692      	lsls	r2, r2, #26
 80053e0:	d42e      	bmi.n	8005440 <_printf_common+0xc0>
 80053e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053e6:	4639      	mov	r1, r7
 80053e8:	4630      	mov	r0, r6
 80053ea:	47c0      	blx	r8
 80053ec:	3001      	adds	r0, #1
 80053ee:	d021      	beq.n	8005434 <_printf_common+0xb4>
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	68e5      	ldr	r5, [r4, #12]
 80053f4:	f003 0306 	and.w	r3, r3, #6
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	bf18      	it	ne
 80053fc:	2500      	movne	r5, #0
 80053fe:	f8d9 2000 	ldr.w	r2, [r9]
 8005402:	f04f 0900 	mov.w	r9, #0
 8005406:	bf08      	it	eq
 8005408:	1aad      	subeq	r5, r5, r2
 800540a:	68a3      	ldr	r3, [r4, #8]
 800540c:	6922      	ldr	r2, [r4, #16]
 800540e:	bf08      	it	eq
 8005410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005414:	4293      	cmp	r3, r2
 8005416:	bfc4      	itt	gt
 8005418:	1a9b      	subgt	r3, r3, r2
 800541a:	18ed      	addgt	r5, r5, r3
 800541c:	341a      	adds	r4, #26
 800541e:	454d      	cmp	r5, r9
 8005420:	d11a      	bne.n	8005458 <_printf_common+0xd8>
 8005422:	2000      	movs	r0, #0
 8005424:	e008      	b.n	8005438 <_printf_common+0xb8>
 8005426:	2301      	movs	r3, #1
 8005428:	4652      	mov	r2, sl
 800542a:	4639      	mov	r1, r7
 800542c:	4630      	mov	r0, r6
 800542e:	47c0      	blx	r8
 8005430:	3001      	adds	r0, #1
 8005432:	d103      	bne.n	800543c <_printf_common+0xbc>
 8005434:	f04f 30ff 	mov.w	r0, #4294967295
 8005438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543c:	3501      	adds	r5, #1
 800543e:	e7c2      	b.n	80053c6 <_printf_common+0x46>
 8005440:	2030      	movs	r0, #48	; 0x30
 8005442:	18e1      	adds	r1, r4, r3
 8005444:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800544e:	4422      	add	r2, r4
 8005450:	3302      	adds	r3, #2
 8005452:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005456:	e7c4      	b.n	80053e2 <_printf_common+0x62>
 8005458:	2301      	movs	r3, #1
 800545a:	4622      	mov	r2, r4
 800545c:	4639      	mov	r1, r7
 800545e:	4630      	mov	r0, r6
 8005460:	47c0      	blx	r8
 8005462:	3001      	adds	r0, #1
 8005464:	d0e6      	beq.n	8005434 <_printf_common+0xb4>
 8005466:	f109 0901 	add.w	r9, r9, #1
 800546a:	e7d8      	b.n	800541e <_printf_common+0x9e>

0800546c <_printf_i>:
 800546c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005470:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005474:	460c      	mov	r4, r1
 8005476:	7e09      	ldrb	r1, [r1, #24]
 8005478:	b085      	sub	sp, #20
 800547a:	296e      	cmp	r1, #110	; 0x6e
 800547c:	4617      	mov	r7, r2
 800547e:	4606      	mov	r6, r0
 8005480:	4698      	mov	r8, r3
 8005482:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005484:	f000 80b3 	beq.w	80055ee <_printf_i+0x182>
 8005488:	d822      	bhi.n	80054d0 <_printf_i+0x64>
 800548a:	2963      	cmp	r1, #99	; 0x63
 800548c:	d036      	beq.n	80054fc <_printf_i+0x90>
 800548e:	d80a      	bhi.n	80054a6 <_printf_i+0x3a>
 8005490:	2900      	cmp	r1, #0
 8005492:	f000 80b9 	beq.w	8005608 <_printf_i+0x19c>
 8005496:	2958      	cmp	r1, #88	; 0x58
 8005498:	f000 8083 	beq.w	80055a2 <_printf_i+0x136>
 800549c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80054a4:	e032      	b.n	800550c <_printf_i+0xa0>
 80054a6:	2964      	cmp	r1, #100	; 0x64
 80054a8:	d001      	beq.n	80054ae <_printf_i+0x42>
 80054aa:	2969      	cmp	r1, #105	; 0x69
 80054ac:	d1f6      	bne.n	800549c <_printf_i+0x30>
 80054ae:	6820      	ldr	r0, [r4, #0]
 80054b0:	6813      	ldr	r3, [r2, #0]
 80054b2:	0605      	lsls	r5, r0, #24
 80054b4:	f103 0104 	add.w	r1, r3, #4
 80054b8:	d52a      	bpl.n	8005510 <_printf_i+0xa4>
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6011      	str	r1, [r2, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	da03      	bge.n	80054ca <_printf_i+0x5e>
 80054c2:	222d      	movs	r2, #45	; 0x2d
 80054c4:	425b      	negs	r3, r3
 80054c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80054ca:	486f      	ldr	r0, [pc, #444]	; (8005688 <_printf_i+0x21c>)
 80054cc:	220a      	movs	r2, #10
 80054ce:	e039      	b.n	8005544 <_printf_i+0xd8>
 80054d0:	2973      	cmp	r1, #115	; 0x73
 80054d2:	f000 809d 	beq.w	8005610 <_printf_i+0x1a4>
 80054d6:	d808      	bhi.n	80054ea <_printf_i+0x7e>
 80054d8:	296f      	cmp	r1, #111	; 0x6f
 80054da:	d020      	beq.n	800551e <_printf_i+0xb2>
 80054dc:	2970      	cmp	r1, #112	; 0x70
 80054de:	d1dd      	bne.n	800549c <_printf_i+0x30>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	f043 0320 	orr.w	r3, r3, #32
 80054e6:	6023      	str	r3, [r4, #0]
 80054e8:	e003      	b.n	80054f2 <_printf_i+0x86>
 80054ea:	2975      	cmp	r1, #117	; 0x75
 80054ec:	d017      	beq.n	800551e <_printf_i+0xb2>
 80054ee:	2978      	cmp	r1, #120	; 0x78
 80054f0:	d1d4      	bne.n	800549c <_printf_i+0x30>
 80054f2:	2378      	movs	r3, #120	; 0x78
 80054f4:	4865      	ldr	r0, [pc, #404]	; (800568c <_printf_i+0x220>)
 80054f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054fa:	e055      	b.n	80055a8 <_printf_i+0x13c>
 80054fc:	6813      	ldr	r3, [r2, #0]
 80054fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005502:	1d19      	adds	r1, r3, #4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6011      	str	r1, [r2, #0]
 8005508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800550c:	2301      	movs	r3, #1
 800550e:	e08c      	b.n	800562a <_printf_i+0x1be>
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005516:	6011      	str	r1, [r2, #0]
 8005518:	bf18      	it	ne
 800551a:	b21b      	sxthne	r3, r3
 800551c:	e7cf      	b.n	80054be <_printf_i+0x52>
 800551e:	6813      	ldr	r3, [r2, #0]
 8005520:	6825      	ldr	r5, [r4, #0]
 8005522:	1d18      	adds	r0, r3, #4
 8005524:	6010      	str	r0, [r2, #0]
 8005526:	0628      	lsls	r0, r5, #24
 8005528:	d501      	bpl.n	800552e <_printf_i+0xc2>
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	e002      	b.n	8005534 <_printf_i+0xc8>
 800552e:	0668      	lsls	r0, r5, #25
 8005530:	d5fb      	bpl.n	800552a <_printf_i+0xbe>
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	296f      	cmp	r1, #111	; 0x6f
 8005536:	bf14      	ite	ne
 8005538:	220a      	movne	r2, #10
 800553a:	2208      	moveq	r2, #8
 800553c:	4852      	ldr	r0, [pc, #328]	; (8005688 <_printf_i+0x21c>)
 800553e:	2100      	movs	r1, #0
 8005540:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005544:	6865      	ldr	r5, [r4, #4]
 8005546:	2d00      	cmp	r5, #0
 8005548:	60a5      	str	r5, [r4, #8]
 800554a:	f2c0 8095 	blt.w	8005678 <_printf_i+0x20c>
 800554e:	6821      	ldr	r1, [r4, #0]
 8005550:	f021 0104 	bic.w	r1, r1, #4
 8005554:	6021      	str	r1, [r4, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d13d      	bne.n	80055d6 <_printf_i+0x16a>
 800555a:	2d00      	cmp	r5, #0
 800555c:	f040 808e 	bne.w	800567c <_printf_i+0x210>
 8005560:	4665      	mov	r5, ip
 8005562:	2a08      	cmp	r2, #8
 8005564:	d10b      	bne.n	800557e <_printf_i+0x112>
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	07db      	lsls	r3, r3, #31
 800556a:	d508      	bpl.n	800557e <_printf_i+0x112>
 800556c:	6923      	ldr	r3, [r4, #16]
 800556e:	6862      	ldr	r2, [r4, #4]
 8005570:	429a      	cmp	r2, r3
 8005572:	bfde      	ittt	le
 8005574:	2330      	movle	r3, #48	; 0x30
 8005576:	f805 3c01 	strble.w	r3, [r5, #-1]
 800557a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800557e:	ebac 0305 	sub.w	r3, ip, r5
 8005582:	6123      	str	r3, [r4, #16]
 8005584:	f8cd 8000 	str.w	r8, [sp]
 8005588:	463b      	mov	r3, r7
 800558a:	aa03      	add	r2, sp, #12
 800558c:	4621      	mov	r1, r4
 800558e:	4630      	mov	r0, r6
 8005590:	f7ff fef6 	bl	8005380 <_printf_common>
 8005594:	3001      	adds	r0, #1
 8005596:	d14d      	bne.n	8005634 <_printf_i+0x1c8>
 8005598:	f04f 30ff 	mov.w	r0, #4294967295
 800559c:	b005      	add	sp, #20
 800559e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055a2:	4839      	ldr	r0, [pc, #228]	; (8005688 <_printf_i+0x21c>)
 80055a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80055a8:	6813      	ldr	r3, [r2, #0]
 80055aa:	6821      	ldr	r1, [r4, #0]
 80055ac:	1d1d      	adds	r5, r3, #4
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6015      	str	r5, [r2, #0]
 80055b2:	060a      	lsls	r2, r1, #24
 80055b4:	d50b      	bpl.n	80055ce <_printf_i+0x162>
 80055b6:	07ca      	lsls	r2, r1, #31
 80055b8:	bf44      	itt	mi
 80055ba:	f041 0120 	orrmi.w	r1, r1, #32
 80055be:	6021      	strmi	r1, [r4, #0]
 80055c0:	b91b      	cbnz	r3, 80055ca <_printf_i+0x15e>
 80055c2:	6822      	ldr	r2, [r4, #0]
 80055c4:	f022 0220 	bic.w	r2, r2, #32
 80055c8:	6022      	str	r2, [r4, #0]
 80055ca:	2210      	movs	r2, #16
 80055cc:	e7b7      	b.n	800553e <_printf_i+0xd2>
 80055ce:	064d      	lsls	r5, r1, #25
 80055d0:	bf48      	it	mi
 80055d2:	b29b      	uxthmi	r3, r3
 80055d4:	e7ef      	b.n	80055b6 <_printf_i+0x14a>
 80055d6:	4665      	mov	r5, ip
 80055d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80055dc:	fb02 3311 	mls	r3, r2, r1, r3
 80055e0:	5cc3      	ldrb	r3, [r0, r3]
 80055e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80055e6:	460b      	mov	r3, r1
 80055e8:	2900      	cmp	r1, #0
 80055ea:	d1f5      	bne.n	80055d8 <_printf_i+0x16c>
 80055ec:	e7b9      	b.n	8005562 <_printf_i+0xf6>
 80055ee:	6813      	ldr	r3, [r2, #0]
 80055f0:	6825      	ldr	r5, [r4, #0]
 80055f2:	1d18      	adds	r0, r3, #4
 80055f4:	6961      	ldr	r1, [r4, #20]
 80055f6:	6010      	str	r0, [r2, #0]
 80055f8:	0628      	lsls	r0, r5, #24
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	d501      	bpl.n	8005602 <_printf_i+0x196>
 80055fe:	6019      	str	r1, [r3, #0]
 8005600:	e002      	b.n	8005608 <_printf_i+0x19c>
 8005602:	066a      	lsls	r2, r5, #25
 8005604:	d5fb      	bpl.n	80055fe <_printf_i+0x192>
 8005606:	8019      	strh	r1, [r3, #0]
 8005608:	2300      	movs	r3, #0
 800560a:	4665      	mov	r5, ip
 800560c:	6123      	str	r3, [r4, #16]
 800560e:	e7b9      	b.n	8005584 <_printf_i+0x118>
 8005610:	6813      	ldr	r3, [r2, #0]
 8005612:	1d19      	adds	r1, r3, #4
 8005614:	6011      	str	r1, [r2, #0]
 8005616:	681d      	ldr	r5, [r3, #0]
 8005618:	6862      	ldr	r2, [r4, #4]
 800561a:	2100      	movs	r1, #0
 800561c:	4628      	mov	r0, r5
 800561e:	f002 f821 	bl	8007664 <memchr>
 8005622:	b108      	cbz	r0, 8005628 <_printf_i+0x1bc>
 8005624:	1b40      	subs	r0, r0, r5
 8005626:	6060      	str	r0, [r4, #4]
 8005628:	6863      	ldr	r3, [r4, #4]
 800562a:	6123      	str	r3, [r4, #16]
 800562c:	2300      	movs	r3, #0
 800562e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005632:	e7a7      	b.n	8005584 <_printf_i+0x118>
 8005634:	6923      	ldr	r3, [r4, #16]
 8005636:	462a      	mov	r2, r5
 8005638:	4639      	mov	r1, r7
 800563a:	4630      	mov	r0, r6
 800563c:	47c0      	blx	r8
 800563e:	3001      	adds	r0, #1
 8005640:	d0aa      	beq.n	8005598 <_printf_i+0x12c>
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	079b      	lsls	r3, r3, #30
 8005646:	d413      	bmi.n	8005670 <_printf_i+0x204>
 8005648:	68e0      	ldr	r0, [r4, #12]
 800564a:	9b03      	ldr	r3, [sp, #12]
 800564c:	4298      	cmp	r0, r3
 800564e:	bfb8      	it	lt
 8005650:	4618      	movlt	r0, r3
 8005652:	e7a3      	b.n	800559c <_printf_i+0x130>
 8005654:	2301      	movs	r3, #1
 8005656:	464a      	mov	r2, r9
 8005658:	4639      	mov	r1, r7
 800565a:	4630      	mov	r0, r6
 800565c:	47c0      	blx	r8
 800565e:	3001      	adds	r0, #1
 8005660:	d09a      	beq.n	8005598 <_printf_i+0x12c>
 8005662:	3501      	adds	r5, #1
 8005664:	68e3      	ldr	r3, [r4, #12]
 8005666:	9a03      	ldr	r2, [sp, #12]
 8005668:	1a9b      	subs	r3, r3, r2
 800566a:	42ab      	cmp	r3, r5
 800566c:	dcf2      	bgt.n	8005654 <_printf_i+0x1e8>
 800566e:	e7eb      	b.n	8005648 <_printf_i+0x1dc>
 8005670:	2500      	movs	r5, #0
 8005672:	f104 0919 	add.w	r9, r4, #25
 8005676:	e7f5      	b.n	8005664 <_printf_i+0x1f8>
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1ac      	bne.n	80055d6 <_printf_i+0x16a>
 800567c:	7803      	ldrb	r3, [r0, #0]
 800567e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005682:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005686:	e76c      	b.n	8005562 <_printf_i+0xf6>
 8005688:	080083ee 	.word	0x080083ee
 800568c:	080083ff 	.word	0x080083ff

08005690 <siprintf>:
 8005690:	b40e      	push	{r1, r2, r3}
 8005692:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005696:	b500      	push	{lr}
 8005698:	b09c      	sub	sp, #112	; 0x70
 800569a:	ab1d      	add	r3, sp, #116	; 0x74
 800569c:	9002      	str	r0, [sp, #8]
 800569e:	9006      	str	r0, [sp, #24]
 80056a0:	9107      	str	r1, [sp, #28]
 80056a2:	9104      	str	r1, [sp, #16]
 80056a4:	4808      	ldr	r0, [pc, #32]	; (80056c8 <siprintf+0x38>)
 80056a6:	4909      	ldr	r1, [pc, #36]	; (80056cc <siprintf+0x3c>)
 80056a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ac:	9105      	str	r1, [sp, #20]
 80056ae:	6800      	ldr	r0, [r0, #0]
 80056b0:	a902      	add	r1, sp, #8
 80056b2:	9301      	str	r3, [sp, #4]
 80056b4:	f002 fcf6 	bl	80080a4 <_svfiprintf_r>
 80056b8:	2200      	movs	r2, #0
 80056ba:	9b02      	ldr	r3, [sp, #8]
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	b01c      	add	sp, #112	; 0x70
 80056c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056c4:	b003      	add	sp, #12
 80056c6:	4770      	bx	lr
 80056c8:	20000018 	.word	0x20000018
 80056cc:	ffff0208 	.word	0xffff0208

080056d0 <sulp>:
 80056d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d4:	460f      	mov	r7, r1
 80056d6:	4690      	mov	r8, r2
 80056d8:	f002 faa8 	bl	8007c2c <__ulp>
 80056dc:	4604      	mov	r4, r0
 80056de:	460d      	mov	r5, r1
 80056e0:	f1b8 0f00 	cmp.w	r8, #0
 80056e4:	d011      	beq.n	800570a <sulp+0x3a>
 80056e6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80056ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	dd0b      	ble.n	800570a <sulp+0x3a>
 80056f2:	2400      	movs	r4, #0
 80056f4:	051b      	lsls	r3, r3, #20
 80056f6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80056fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80056fe:	4622      	mov	r2, r4
 8005700:	462b      	mov	r3, r5
 8005702:	f7fa fee9 	bl	80004d8 <__aeabi_dmul>
 8005706:	4604      	mov	r4, r0
 8005708:	460d      	mov	r5, r1
 800570a:	4620      	mov	r0, r4
 800570c:	4629      	mov	r1, r5
 800570e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005712:	0000      	movs	r0, r0
 8005714:	0000      	movs	r0, r0
	...

08005718 <_strtod_l>:
 8005718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	461f      	mov	r7, r3
 800571e:	2300      	movs	r3, #0
 8005720:	b0a1      	sub	sp, #132	; 0x84
 8005722:	4683      	mov	fp, r0
 8005724:	4638      	mov	r0, r7
 8005726:	460e      	mov	r6, r1
 8005728:	9217      	str	r2, [sp, #92]	; 0x5c
 800572a:	931c      	str	r3, [sp, #112]	; 0x70
 800572c:	f001 ff70 	bl	8007610 <__localeconv_l>
 8005730:	4680      	mov	r8, r0
 8005732:	6800      	ldr	r0, [r0, #0]
 8005734:	f7fa fd0c 	bl	8000150 <strlen>
 8005738:	f04f 0900 	mov.w	r9, #0
 800573c:	4604      	mov	r4, r0
 800573e:	f04f 0a00 	mov.w	sl, #0
 8005742:	961b      	str	r6, [sp, #108]	; 0x6c
 8005744:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005746:	781a      	ldrb	r2, [r3, #0]
 8005748:	2a0d      	cmp	r2, #13
 800574a:	d832      	bhi.n	80057b2 <_strtod_l+0x9a>
 800574c:	2a09      	cmp	r2, #9
 800574e:	d236      	bcs.n	80057be <_strtod_l+0xa6>
 8005750:	2a00      	cmp	r2, #0
 8005752:	d03e      	beq.n	80057d2 <_strtod_l+0xba>
 8005754:	2300      	movs	r3, #0
 8005756:	930d      	str	r3, [sp, #52]	; 0x34
 8005758:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800575a:	782b      	ldrb	r3, [r5, #0]
 800575c:	2b30      	cmp	r3, #48	; 0x30
 800575e:	f040 80ac 	bne.w	80058ba <_strtod_l+0x1a2>
 8005762:	786b      	ldrb	r3, [r5, #1]
 8005764:	2b58      	cmp	r3, #88	; 0x58
 8005766:	d001      	beq.n	800576c <_strtod_l+0x54>
 8005768:	2b78      	cmp	r3, #120	; 0x78
 800576a:	d167      	bne.n	800583c <_strtod_l+0x124>
 800576c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800576e:	9702      	str	r7, [sp, #8]
 8005770:	9301      	str	r3, [sp, #4]
 8005772:	ab1c      	add	r3, sp, #112	; 0x70
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	4a89      	ldr	r2, [pc, #548]	; (800599c <_strtod_l+0x284>)
 8005778:	ab1d      	add	r3, sp, #116	; 0x74
 800577a:	a91b      	add	r1, sp, #108	; 0x6c
 800577c:	4658      	mov	r0, fp
 800577e:	f001 fc6f 	bl	8007060 <__gethex>
 8005782:	f010 0407 	ands.w	r4, r0, #7
 8005786:	4606      	mov	r6, r0
 8005788:	d005      	beq.n	8005796 <_strtod_l+0x7e>
 800578a:	2c06      	cmp	r4, #6
 800578c:	d12b      	bne.n	80057e6 <_strtod_l+0xce>
 800578e:	2300      	movs	r3, #0
 8005790:	3501      	adds	r5, #1
 8005792:	951b      	str	r5, [sp, #108]	; 0x6c
 8005794:	930d      	str	r3, [sp, #52]	; 0x34
 8005796:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005798:	2b00      	cmp	r3, #0
 800579a:	f040 85a6 	bne.w	80062ea <_strtod_l+0xbd2>
 800579e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057a0:	b1e3      	cbz	r3, 80057dc <_strtod_l+0xc4>
 80057a2:	464a      	mov	r2, r9
 80057a4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80057a8:	4610      	mov	r0, r2
 80057aa:	4619      	mov	r1, r3
 80057ac:	b021      	add	sp, #132	; 0x84
 80057ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b2:	2a2b      	cmp	r2, #43	; 0x2b
 80057b4:	d015      	beq.n	80057e2 <_strtod_l+0xca>
 80057b6:	2a2d      	cmp	r2, #45	; 0x2d
 80057b8:	d004      	beq.n	80057c4 <_strtod_l+0xac>
 80057ba:	2a20      	cmp	r2, #32
 80057bc:	d1ca      	bne.n	8005754 <_strtod_l+0x3c>
 80057be:	3301      	adds	r3, #1
 80057c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80057c2:	e7bf      	b.n	8005744 <_strtod_l+0x2c>
 80057c4:	2201      	movs	r2, #1
 80057c6:	920d      	str	r2, [sp, #52]	; 0x34
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1c2      	bne.n	8005758 <_strtod_l+0x40>
 80057d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f040 8585 	bne.w	80062e6 <_strtod_l+0xbce>
 80057dc:	464a      	mov	r2, r9
 80057de:	4653      	mov	r3, sl
 80057e0:	e7e2      	b.n	80057a8 <_strtod_l+0x90>
 80057e2:	2200      	movs	r2, #0
 80057e4:	e7ef      	b.n	80057c6 <_strtod_l+0xae>
 80057e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80057e8:	b13a      	cbz	r2, 80057fa <_strtod_l+0xe2>
 80057ea:	2135      	movs	r1, #53	; 0x35
 80057ec:	a81e      	add	r0, sp, #120	; 0x78
 80057ee:	f002 fb10 	bl	8007e12 <__copybits>
 80057f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80057f4:	4658      	mov	r0, fp
 80057f6:	f001 ff82 	bl	80076fe <_Bfree>
 80057fa:	3c01      	subs	r4, #1
 80057fc:	2c04      	cmp	r4, #4
 80057fe:	d806      	bhi.n	800580e <_strtod_l+0xf6>
 8005800:	e8df f004 	tbb	[pc, r4]
 8005804:	1714030a 	.word	0x1714030a
 8005808:	0a          	.byte	0x0a
 8005809:	00          	.byte	0x00
 800580a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800580e:	0731      	lsls	r1, r6, #28
 8005810:	d5c1      	bpl.n	8005796 <_strtod_l+0x7e>
 8005812:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8005816:	e7be      	b.n	8005796 <_strtod_l+0x7e>
 8005818:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800581a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800581e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005822:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005826:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800582a:	e7f0      	b.n	800580e <_strtod_l+0xf6>
 800582c:	f8df a170 	ldr.w	sl, [pc, #368]	; 80059a0 <_strtod_l+0x288>
 8005830:	e7ed      	b.n	800580e <_strtod_l+0xf6>
 8005832:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8005836:	f04f 39ff 	mov.w	r9, #4294967295
 800583a:	e7e8      	b.n	800580e <_strtod_l+0xf6>
 800583c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	921b      	str	r2, [sp, #108]	; 0x6c
 8005842:	785b      	ldrb	r3, [r3, #1]
 8005844:	2b30      	cmp	r3, #48	; 0x30
 8005846:	d0f9      	beq.n	800583c <_strtod_l+0x124>
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0a4      	beq.n	8005796 <_strtod_l+0x7e>
 800584c:	2301      	movs	r3, #1
 800584e:	2500      	movs	r5, #0
 8005850:	220a      	movs	r2, #10
 8005852:	9307      	str	r3, [sp, #28]
 8005854:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005856:	9506      	str	r5, [sp, #24]
 8005858:	9308      	str	r3, [sp, #32]
 800585a:	9504      	str	r5, [sp, #16]
 800585c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800585e:	7807      	ldrb	r7, [r0, #0]
 8005860:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005864:	b2d9      	uxtb	r1, r3
 8005866:	2909      	cmp	r1, #9
 8005868:	d929      	bls.n	80058be <_strtod_l+0x1a6>
 800586a:	4622      	mov	r2, r4
 800586c:	f8d8 1000 	ldr.w	r1, [r8]
 8005870:	f002 fd20 	bl	80082b4 <strncmp>
 8005874:	2800      	cmp	r0, #0
 8005876:	d031      	beq.n	80058dc <_strtod_l+0x1c4>
 8005878:	2000      	movs	r0, #0
 800587a:	463b      	mov	r3, r7
 800587c:	4602      	mov	r2, r0
 800587e:	9c04      	ldr	r4, [sp, #16]
 8005880:	9005      	str	r0, [sp, #20]
 8005882:	2b65      	cmp	r3, #101	; 0x65
 8005884:	d001      	beq.n	800588a <_strtod_l+0x172>
 8005886:	2b45      	cmp	r3, #69	; 0x45
 8005888:	d114      	bne.n	80058b4 <_strtod_l+0x19c>
 800588a:	b924      	cbnz	r4, 8005896 <_strtod_l+0x17e>
 800588c:	b910      	cbnz	r0, 8005894 <_strtod_l+0x17c>
 800588e:	9b07      	ldr	r3, [sp, #28]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d09e      	beq.n	80057d2 <_strtod_l+0xba>
 8005894:	2400      	movs	r4, #0
 8005896:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005898:	1c73      	adds	r3, r6, #1
 800589a:	931b      	str	r3, [sp, #108]	; 0x6c
 800589c:	7873      	ldrb	r3, [r6, #1]
 800589e:	2b2b      	cmp	r3, #43	; 0x2b
 80058a0:	d078      	beq.n	8005994 <_strtod_l+0x27c>
 80058a2:	2b2d      	cmp	r3, #45	; 0x2d
 80058a4:	d070      	beq.n	8005988 <_strtod_l+0x270>
 80058a6:	f04f 0c00 	mov.w	ip, #0
 80058aa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80058ae:	2f09      	cmp	r7, #9
 80058b0:	d97c      	bls.n	80059ac <_strtod_l+0x294>
 80058b2:	961b      	str	r6, [sp, #108]	; 0x6c
 80058b4:	f04f 0e00 	mov.w	lr, #0
 80058b8:	e09a      	b.n	80059f0 <_strtod_l+0x2d8>
 80058ba:	2300      	movs	r3, #0
 80058bc:	e7c7      	b.n	800584e <_strtod_l+0x136>
 80058be:	9904      	ldr	r1, [sp, #16]
 80058c0:	3001      	adds	r0, #1
 80058c2:	2908      	cmp	r1, #8
 80058c4:	bfd7      	itett	le
 80058c6:	9906      	ldrle	r1, [sp, #24]
 80058c8:	fb02 3505 	mlagt	r5, r2, r5, r3
 80058cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80058d0:	9306      	strle	r3, [sp, #24]
 80058d2:	9b04      	ldr	r3, [sp, #16]
 80058d4:	901b      	str	r0, [sp, #108]	; 0x6c
 80058d6:	3301      	adds	r3, #1
 80058d8:	9304      	str	r3, [sp, #16]
 80058da:	e7bf      	b.n	800585c <_strtod_l+0x144>
 80058dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058de:	191a      	adds	r2, r3, r4
 80058e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80058e2:	9a04      	ldr	r2, [sp, #16]
 80058e4:	5d1b      	ldrb	r3, [r3, r4]
 80058e6:	2a00      	cmp	r2, #0
 80058e8:	d037      	beq.n	800595a <_strtod_l+0x242>
 80058ea:	4602      	mov	r2, r0
 80058ec:	9c04      	ldr	r4, [sp, #16]
 80058ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80058f2:	2909      	cmp	r1, #9
 80058f4:	d913      	bls.n	800591e <_strtod_l+0x206>
 80058f6:	2101      	movs	r1, #1
 80058f8:	9105      	str	r1, [sp, #20]
 80058fa:	e7c2      	b.n	8005882 <_strtod_l+0x16a>
 80058fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058fe:	3001      	adds	r0, #1
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	921b      	str	r2, [sp, #108]	; 0x6c
 8005904:	785b      	ldrb	r3, [r3, #1]
 8005906:	2b30      	cmp	r3, #48	; 0x30
 8005908:	d0f8      	beq.n	80058fc <_strtod_l+0x1e4>
 800590a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800590e:	2a08      	cmp	r2, #8
 8005910:	f200 84f0 	bhi.w	80062f4 <_strtod_l+0xbdc>
 8005914:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005916:	9208      	str	r2, [sp, #32]
 8005918:	4602      	mov	r2, r0
 800591a:	2000      	movs	r0, #0
 800591c:	4604      	mov	r4, r0
 800591e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005922:	f100 0101 	add.w	r1, r0, #1
 8005926:	d012      	beq.n	800594e <_strtod_l+0x236>
 8005928:	440a      	add	r2, r1
 800592a:	270a      	movs	r7, #10
 800592c:	4621      	mov	r1, r4
 800592e:	eb00 0c04 	add.w	ip, r0, r4
 8005932:	458c      	cmp	ip, r1
 8005934:	d113      	bne.n	800595e <_strtod_l+0x246>
 8005936:	1821      	adds	r1, r4, r0
 8005938:	2908      	cmp	r1, #8
 800593a:	f104 0401 	add.w	r4, r4, #1
 800593e:	4404      	add	r4, r0
 8005940:	dc19      	bgt.n	8005976 <_strtod_l+0x25e>
 8005942:	210a      	movs	r1, #10
 8005944:	9b06      	ldr	r3, [sp, #24]
 8005946:	fb01 e303 	mla	r3, r1, r3, lr
 800594a:	9306      	str	r3, [sp, #24]
 800594c:	2100      	movs	r1, #0
 800594e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005950:	1c58      	adds	r0, r3, #1
 8005952:	901b      	str	r0, [sp, #108]	; 0x6c
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	4608      	mov	r0, r1
 8005958:	e7c9      	b.n	80058ee <_strtod_l+0x1d6>
 800595a:	9804      	ldr	r0, [sp, #16]
 800595c:	e7d3      	b.n	8005906 <_strtod_l+0x1ee>
 800595e:	2908      	cmp	r1, #8
 8005960:	f101 0101 	add.w	r1, r1, #1
 8005964:	dc03      	bgt.n	800596e <_strtod_l+0x256>
 8005966:	9b06      	ldr	r3, [sp, #24]
 8005968:	437b      	muls	r3, r7
 800596a:	9306      	str	r3, [sp, #24]
 800596c:	e7e1      	b.n	8005932 <_strtod_l+0x21a>
 800596e:	2910      	cmp	r1, #16
 8005970:	bfd8      	it	le
 8005972:	437d      	mulle	r5, r7
 8005974:	e7dd      	b.n	8005932 <_strtod_l+0x21a>
 8005976:	2c10      	cmp	r4, #16
 8005978:	bfdc      	itt	le
 800597a:	210a      	movle	r1, #10
 800597c:	fb01 e505 	mlale	r5, r1, r5, lr
 8005980:	e7e4      	b.n	800594c <_strtod_l+0x234>
 8005982:	2301      	movs	r3, #1
 8005984:	9305      	str	r3, [sp, #20]
 8005986:	e781      	b.n	800588c <_strtod_l+0x174>
 8005988:	f04f 0c01 	mov.w	ip, #1
 800598c:	1cb3      	adds	r3, r6, #2
 800598e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005990:	78b3      	ldrb	r3, [r6, #2]
 8005992:	e78a      	b.n	80058aa <_strtod_l+0x192>
 8005994:	f04f 0c00 	mov.w	ip, #0
 8005998:	e7f8      	b.n	800598c <_strtod_l+0x274>
 800599a:	bf00      	nop
 800599c:	08008410 	.word	0x08008410
 80059a0:	7ff00000 	.word	0x7ff00000
 80059a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059a6:	1c5f      	adds	r7, r3, #1
 80059a8:	971b      	str	r7, [sp, #108]	; 0x6c
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	2b30      	cmp	r3, #48	; 0x30
 80059ae:	d0f9      	beq.n	80059a4 <_strtod_l+0x28c>
 80059b0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80059b4:	2f08      	cmp	r7, #8
 80059b6:	f63f af7d 	bhi.w	80058b4 <_strtod_l+0x19c>
 80059ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80059be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059c0:	9309      	str	r3, [sp, #36]	; 0x24
 80059c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059c4:	1c5f      	adds	r7, r3, #1
 80059c6:	971b      	str	r7, [sp, #108]	; 0x6c
 80059c8:	785b      	ldrb	r3, [r3, #1]
 80059ca:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80059ce:	f1b8 0f09 	cmp.w	r8, #9
 80059d2:	d937      	bls.n	8005a44 <_strtod_l+0x32c>
 80059d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059d6:	1a7f      	subs	r7, r7, r1
 80059d8:	2f08      	cmp	r7, #8
 80059da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80059de:	dc37      	bgt.n	8005a50 <_strtod_l+0x338>
 80059e0:	45be      	cmp	lr, r7
 80059e2:	bfa8      	it	ge
 80059e4:	46be      	movge	lr, r7
 80059e6:	f1bc 0f00 	cmp.w	ip, #0
 80059ea:	d001      	beq.n	80059f0 <_strtod_l+0x2d8>
 80059ec:	f1ce 0e00 	rsb	lr, lr, #0
 80059f0:	2c00      	cmp	r4, #0
 80059f2:	d151      	bne.n	8005a98 <_strtod_l+0x380>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	f47f aece 	bne.w	8005796 <_strtod_l+0x7e>
 80059fa:	9a07      	ldr	r2, [sp, #28]
 80059fc:	2a00      	cmp	r2, #0
 80059fe:	f47f aeca 	bne.w	8005796 <_strtod_l+0x7e>
 8005a02:	9a05      	ldr	r2, [sp, #20]
 8005a04:	2a00      	cmp	r2, #0
 8005a06:	f47f aee4 	bne.w	80057d2 <_strtod_l+0xba>
 8005a0a:	2b4e      	cmp	r3, #78	; 0x4e
 8005a0c:	d027      	beq.n	8005a5e <_strtod_l+0x346>
 8005a0e:	dc21      	bgt.n	8005a54 <_strtod_l+0x33c>
 8005a10:	2b49      	cmp	r3, #73	; 0x49
 8005a12:	f47f aede 	bne.w	80057d2 <_strtod_l+0xba>
 8005a16:	49a4      	ldr	r1, [pc, #656]	; (8005ca8 <_strtod_l+0x590>)
 8005a18:	a81b      	add	r0, sp, #108	; 0x6c
 8005a1a:	f001 fd55 	bl	80074c8 <__match>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	f43f aed7 	beq.w	80057d2 <_strtod_l+0xba>
 8005a24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a26:	49a1      	ldr	r1, [pc, #644]	; (8005cac <_strtod_l+0x594>)
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	a81b      	add	r0, sp, #108	; 0x6c
 8005a2c:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a2e:	f001 fd4b 	bl	80074c8 <__match>
 8005a32:	b910      	cbnz	r0, 8005a3a <_strtod_l+0x322>
 8005a34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a36:	3301      	adds	r3, #1
 8005a38:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a3a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005cc0 <_strtod_l+0x5a8>
 8005a3e:	f04f 0900 	mov.w	r9, #0
 8005a42:	e6a8      	b.n	8005796 <_strtod_l+0x7e>
 8005a44:	210a      	movs	r1, #10
 8005a46:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005a4a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005a4e:	e7b8      	b.n	80059c2 <_strtod_l+0x2aa>
 8005a50:	46be      	mov	lr, r7
 8005a52:	e7c8      	b.n	80059e6 <_strtod_l+0x2ce>
 8005a54:	2b69      	cmp	r3, #105	; 0x69
 8005a56:	d0de      	beq.n	8005a16 <_strtod_l+0x2fe>
 8005a58:	2b6e      	cmp	r3, #110	; 0x6e
 8005a5a:	f47f aeba 	bne.w	80057d2 <_strtod_l+0xba>
 8005a5e:	4994      	ldr	r1, [pc, #592]	; (8005cb0 <_strtod_l+0x598>)
 8005a60:	a81b      	add	r0, sp, #108	; 0x6c
 8005a62:	f001 fd31 	bl	80074c8 <__match>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	f43f aeb3 	beq.w	80057d2 <_strtod_l+0xba>
 8005a6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b28      	cmp	r3, #40	; 0x28
 8005a72:	d10e      	bne.n	8005a92 <_strtod_l+0x37a>
 8005a74:	aa1e      	add	r2, sp, #120	; 0x78
 8005a76:	498f      	ldr	r1, [pc, #572]	; (8005cb4 <_strtod_l+0x59c>)
 8005a78:	a81b      	add	r0, sp, #108	; 0x6c
 8005a7a:	f001 fd39 	bl	80074f0 <__hexnan>
 8005a7e:	2805      	cmp	r0, #5
 8005a80:	d107      	bne.n	8005a92 <_strtod_l+0x37a>
 8005a82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a84:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005a88:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8005a8c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005a90:	e681      	b.n	8005796 <_strtod_l+0x7e>
 8005a92:	f8df a234 	ldr.w	sl, [pc, #564]	; 8005cc8 <_strtod_l+0x5b0>
 8005a96:	e7d2      	b.n	8005a3e <_strtod_l+0x326>
 8005a98:	ebae 0302 	sub.w	r3, lr, r2
 8005a9c:	9307      	str	r3, [sp, #28]
 8005a9e:	9b04      	ldr	r3, [sp, #16]
 8005aa0:	9806      	ldr	r0, [sp, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bf08      	it	eq
 8005aa6:	4623      	moveq	r3, r4
 8005aa8:	2c10      	cmp	r4, #16
 8005aaa:	9304      	str	r3, [sp, #16]
 8005aac:	46a0      	mov	r8, r4
 8005aae:	bfa8      	it	ge
 8005ab0:	f04f 0810 	movge.w	r8, #16
 8005ab4:	f7fa fc96 	bl	80003e4 <__aeabi_ui2d>
 8005ab8:	2c09      	cmp	r4, #9
 8005aba:	4681      	mov	r9, r0
 8005abc:	468a      	mov	sl, r1
 8005abe:	dc13      	bgt.n	8005ae8 <_strtod_l+0x3d0>
 8005ac0:	9b07      	ldr	r3, [sp, #28]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f43f ae67 	beq.w	8005796 <_strtod_l+0x7e>
 8005ac8:	9b07      	ldr	r3, [sp, #28]
 8005aca:	dd7e      	ble.n	8005bca <_strtod_l+0x4b2>
 8005acc:	2b16      	cmp	r3, #22
 8005ace:	dc65      	bgt.n	8005b9c <_strtod_l+0x484>
 8005ad0:	4a79      	ldr	r2, [pc, #484]	; (8005cb8 <_strtod_l+0x5a0>)
 8005ad2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005ad6:	464a      	mov	r2, r9
 8005ad8:	e9de 0100 	ldrd	r0, r1, [lr]
 8005adc:	4653      	mov	r3, sl
 8005ade:	f7fa fcfb 	bl	80004d8 <__aeabi_dmul>
 8005ae2:	4681      	mov	r9, r0
 8005ae4:	468a      	mov	sl, r1
 8005ae6:	e656      	b.n	8005796 <_strtod_l+0x7e>
 8005ae8:	4b73      	ldr	r3, [pc, #460]	; (8005cb8 <_strtod_l+0x5a0>)
 8005aea:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005aee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005af2:	f7fa fcf1 	bl	80004d8 <__aeabi_dmul>
 8005af6:	4606      	mov	r6, r0
 8005af8:	4628      	mov	r0, r5
 8005afa:	460f      	mov	r7, r1
 8005afc:	f7fa fc72 	bl	80003e4 <__aeabi_ui2d>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4630      	mov	r0, r6
 8005b06:	4639      	mov	r1, r7
 8005b08:	f7fa fb30 	bl	800016c <__adddf3>
 8005b0c:	2c0f      	cmp	r4, #15
 8005b0e:	4681      	mov	r9, r0
 8005b10:	468a      	mov	sl, r1
 8005b12:	ddd5      	ble.n	8005ac0 <_strtod_l+0x3a8>
 8005b14:	9b07      	ldr	r3, [sp, #28]
 8005b16:	eba4 0808 	sub.w	r8, r4, r8
 8005b1a:	4498      	add	r8, r3
 8005b1c:	f1b8 0f00 	cmp.w	r8, #0
 8005b20:	f340 809a 	ble.w	8005c58 <_strtod_l+0x540>
 8005b24:	f018 030f 	ands.w	r3, r8, #15
 8005b28:	d00a      	beq.n	8005b40 <_strtod_l+0x428>
 8005b2a:	4963      	ldr	r1, [pc, #396]	; (8005cb8 <_strtod_l+0x5a0>)
 8005b2c:	464a      	mov	r2, r9
 8005b2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b36:	4653      	mov	r3, sl
 8005b38:	f7fa fcce 	bl	80004d8 <__aeabi_dmul>
 8005b3c:	4681      	mov	r9, r0
 8005b3e:	468a      	mov	sl, r1
 8005b40:	f038 080f 	bics.w	r8, r8, #15
 8005b44:	d077      	beq.n	8005c36 <_strtod_l+0x51e>
 8005b46:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005b4a:	dd4b      	ble.n	8005be4 <_strtod_l+0x4cc>
 8005b4c:	f04f 0800 	mov.w	r8, #0
 8005b50:	f8cd 8010 	str.w	r8, [sp, #16]
 8005b54:	f8cd 8020 	str.w	r8, [sp, #32]
 8005b58:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b5c:	2322      	movs	r3, #34	; 0x22
 8005b5e:	f04f 0900 	mov.w	r9, #0
 8005b62:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005cc0 <_strtod_l+0x5a8>
 8005b66:	f8cb 3000 	str.w	r3, [fp]
 8005b6a:	9b08      	ldr	r3, [sp, #32]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f43f ae12 	beq.w	8005796 <_strtod_l+0x7e>
 8005b72:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005b74:	4658      	mov	r0, fp
 8005b76:	f001 fdc2 	bl	80076fe <_Bfree>
 8005b7a:	9906      	ldr	r1, [sp, #24]
 8005b7c:	4658      	mov	r0, fp
 8005b7e:	f001 fdbe 	bl	80076fe <_Bfree>
 8005b82:	9904      	ldr	r1, [sp, #16]
 8005b84:	4658      	mov	r0, fp
 8005b86:	f001 fdba 	bl	80076fe <_Bfree>
 8005b8a:	9908      	ldr	r1, [sp, #32]
 8005b8c:	4658      	mov	r0, fp
 8005b8e:	f001 fdb6 	bl	80076fe <_Bfree>
 8005b92:	4641      	mov	r1, r8
 8005b94:	4658      	mov	r0, fp
 8005b96:	f001 fdb2 	bl	80076fe <_Bfree>
 8005b9a:	e5fc      	b.n	8005796 <_strtod_l+0x7e>
 8005b9c:	9a07      	ldr	r2, [sp, #28]
 8005b9e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	dbb6      	blt.n	8005b14 <_strtod_l+0x3fc>
 8005ba6:	4d44      	ldr	r5, [pc, #272]	; (8005cb8 <_strtod_l+0x5a0>)
 8005ba8:	f1c4 040f 	rsb	r4, r4, #15
 8005bac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005bb0:	464a      	mov	r2, r9
 8005bb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bb6:	4653      	mov	r3, sl
 8005bb8:	f7fa fc8e 	bl	80004d8 <__aeabi_dmul>
 8005bbc:	9b07      	ldr	r3, [sp, #28]
 8005bbe:	1b1c      	subs	r4, r3, r4
 8005bc0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005bc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bc8:	e789      	b.n	8005ade <_strtod_l+0x3c6>
 8005bca:	f113 0f16 	cmn.w	r3, #22
 8005bce:	dba1      	blt.n	8005b14 <_strtod_l+0x3fc>
 8005bd0:	4a39      	ldr	r2, [pc, #228]	; (8005cb8 <_strtod_l+0x5a0>)
 8005bd2:	4648      	mov	r0, r9
 8005bd4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005bd8:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005bdc:	4651      	mov	r1, sl
 8005bde:	f7fa fda5 	bl	800072c <__aeabi_ddiv>
 8005be2:	e77e      	b.n	8005ae2 <_strtod_l+0x3ca>
 8005be4:	2300      	movs	r3, #0
 8005be6:	4648      	mov	r0, r9
 8005be8:	4651      	mov	r1, sl
 8005bea:	461d      	mov	r5, r3
 8005bec:	4e33      	ldr	r6, [pc, #204]	; (8005cbc <_strtod_l+0x5a4>)
 8005bee:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005bf2:	f1b8 0f01 	cmp.w	r8, #1
 8005bf6:	dc21      	bgt.n	8005c3c <_strtod_l+0x524>
 8005bf8:	b10b      	cbz	r3, 8005bfe <_strtod_l+0x4e6>
 8005bfa:	4681      	mov	r9, r0
 8005bfc:	468a      	mov	sl, r1
 8005bfe:	4b2f      	ldr	r3, [pc, #188]	; (8005cbc <_strtod_l+0x5a4>)
 8005c00:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8005c04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005c08:	464a      	mov	r2, r9
 8005c0a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005c0e:	4653      	mov	r3, sl
 8005c10:	f7fa fc62 	bl	80004d8 <__aeabi_dmul>
 8005c14:	4b2a      	ldr	r3, [pc, #168]	; (8005cc0 <_strtod_l+0x5a8>)
 8005c16:	460a      	mov	r2, r1
 8005c18:	400b      	ands	r3, r1
 8005c1a:	492a      	ldr	r1, [pc, #168]	; (8005cc4 <_strtod_l+0x5ac>)
 8005c1c:	4681      	mov	r9, r0
 8005c1e:	428b      	cmp	r3, r1
 8005c20:	d894      	bhi.n	8005b4c <_strtod_l+0x434>
 8005c22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005c26:	428b      	cmp	r3, r1
 8005c28:	bf86      	itte	hi
 8005c2a:	f04f 39ff 	movhi.w	r9, #4294967295
 8005c2e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8005ccc <_strtod_l+0x5b4>
 8005c32:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8005c36:	2300      	movs	r3, #0
 8005c38:	9305      	str	r3, [sp, #20]
 8005c3a:	e07b      	b.n	8005d34 <_strtod_l+0x61c>
 8005c3c:	f018 0f01 	tst.w	r8, #1
 8005c40:	d006      	beq.n	8005c50 <_strtod_l+0x538>
 8005c42:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	f7fa fc45 	bl	80004d8 <__aeabi_dmul>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	3501      	adds	r5, #1
 8005c52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005c56:	e7cc      	b.n	8005bf2 <_strtod_l+0x4da>
 8005c58:	d0ed      	beq.n	8005c36 <_strtod_l+0x51e>
 8005c5a:	f1c8 0800 	rsb	r8, r8, #0
 8005c5e:	f018 020f 	ands.w	r2, r8, #15
 8005c62:	d00a      	beq.n	8005c7a <_strtod_l+0x562>
 8005c64:	4b14      	ldr	r3, [pc, #80]	; (8005cb8 <_strtod_l+0x5a0>)
 8005c66:	4648      	mov	r0, r9
 8005c68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c6c:	4651      	mov	r1, sl
 8005c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c72:	f7fa fd5b 	bl	800072c <__aeabi_ddiv>
 8005c76:	4681      	mov	r9, r0
 8005c78:	468a      	mov	sl, r1
 8005c7a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005c7e:	d0da      	beq.n	8005c36 <_strtod_l+0x51e>
 8005c80:	f1b8 0f1f 	cmp.w	r8, #31
 8005c84:	dd24      	ble.n	8005cd0 <_strtod_l+0x5b8>
 8005c86:	f04f 0800 	mov.w	r8, #0
 8005c8a:	f8cd 8010 	str.w	r8, [sp, #16]
 8005c8e:	f8cd 8020 	str.w	r8, [sp, #32]
 8005c92:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c96:	2322      	movs	r3, #34	; 0x22
 8005c98:	f04f 0900 	mov.w	r9, #0
 8005c9c:	f04f 0a00 	mov.w	sl, #0
 8005ca0:	f8cb 3000 	str.w	r3, [fp]
 8005ca4:	e761      	b.n	8005b6a <_strtod_l+0x452>
 8005ca6:	bf00      	nop
 8005ca8:	080083e1 	.word	0x080083e1
 8005cac:	08008463 	.word	0x08008463
 8005cb0:	080083e9 	.word	0x080083e9
 8005cb4:	08008424 	.word	0x08008424
 8005cb8:	080084a0 	.word	0x080084a0
 8005cbc:	08008478 	.word	0x08008478
 8005cc0:	7ff00000 	.word	0x7ff00000
 8005cc4:	7ca00000 	.word	0x7ca00000
 8005cc8:	fff80000 	.word	0xfff80000
 8005ccc:	7fefffff 	.word	0x7fefffff
 8005cd0:	f018 0310 	ands.w	r3, r8, #16
 8005cd4:	bf18      	it	ne
 8005cd6:	236a      	movne	r3, #106	; 0x6a
 8005cd8:	4648      	mov	r0, r9
 8005cda:	9305      	str	r3, [sp, #20]
 8005cdc:	4651      	mov	r1, sl
 8005cde:	2300      	movs	r3, #0
 8005ce0:	4da1      	ldr	r5, [pc, #644]	; (8005f68 <_strtod_l+0x850>)
 8005ce2:	f1b8 0f00 	cmp.w	r8, #0
 8005ce6:	f300 8113 	bgt.w	8005f10 <_strtod_l+0x7f8>
 8005cea:	b10b      	cbz	r3, 8005cf0 <_strtod_l+0x5d8>
 8005cec:	4681      	mov	r9, r0
 8005cee:	468a      	mov	sl, r1
 8005cf0:	9b05      	ldr	r3, [sp, #20]
 8005cf2:	b1bb      	cbz	r3, 8005d24 <_strtod_l+0x60c>
 8005cf4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005cf8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	4651      	mov	r1, sl
 8005d00:	dd10      	ble.n	8005d24 <_strtod_l+0x60c>
 8005d02:	2b1f      	cmp	r3, #31
 8005d04:	f340 8110 	ble.w	8005f28 <_strtod_l+0x810>
 8005d08:	2b34      	cmp	r3, #52	; 0x34
 8005d0a:	bfd8      	it	le
 8005d0c:	f04f 32ff 	movle.w	r2, #4294967295
 8005d10:	f04f 0900 	mov.w	r9, #0
 8005d14:	bfcf      	iteee	gt
 8005d16:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8005d1a:	3b20      	suble	r3, #32
 8005d1c:	fa02 f303 	lslle.w	r3, r2, r3
 8005d20:	ea03 0a01 	andle.w	sl, r3, r1
 8005d24:	2200      	movs	r2, #0
 8005d26:	2300      	movs	r3, #0
 8005d28:	4648      	mov	r0, r9
 8005d2a:	4651      	mov	r1, sl
 8005d2c:	f7fa fe3c 	bl	80009a8 <__aeabi_dcmpeq>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d1a8      	bne.n	8005c86 <_strtod_l+0x56e>
 8005d34:	9b06      	ldr	r3, [sp, #24]
 8005d36:	9a04      	ldr	r2, [sp, #16]
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	9908      	ldr	r1, [sp, #32]
 8005d3c:	4623      	mov	r3, r4
 8005d3e:	4658      	mov	r0, fp
 8005d40:	f001 fd2f 	bl	80077a2 <__s2b>
 8005d44:	9008      	str	r0, [sp, #32]
 8005d46:	2800      	cmp	r0, #0
 8005d48:	f43f af00 	beq.w	8005b4c <_strtod_l+0x434>
 8005d4c:	9a07      	ldr	r2, [sp, #28]
 8005d4e:	9b07      	ldr	r3, [sp, #28]
 8005d50:	2a00      	cmp	r2, #0
 8005d52:	f1c3 0300 	rsb	r3, r3, #0
 8005d56:	bfa8      	it	ge
 8005d58:	2300      	movge	r3, #0
 8005d5a:	f04f 0800 	mov.w	r8, #0
 8005d5e:	930e      	str	r3, [sp, #56]	; 0x38
 8005d60:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005d64:	9316      	str	r3, [sp, #88]	; 0x58
 8005d66:	f8cd 8010 	str.w	r8, [sp, #16]
 8005d6a:	9b08      	ldr	r3, [sp, #32]
 8005d6c:	4658      	mov	r0, fp
 8005d6e:	6859      	ldr	r1, [r3, #4]
 8005d70:	f001 fc91 	bl	8007696 <_Balloc>
 8005d74:	9006      	str	r0, [sp, #24]
 8005d76:	2800      	cmp	r0, #0
 8005d78:	f43f aef0 	beq.w	8005b5c <_strtod_l+0x444>
 8005d7c:	9b08      	ldr	r3, [sp, #32]
 8005d7e:	300c      	adds	r0, #12
 8005d80:	691a      	ldr	r2, [r3, #16]
 8005d82:	f103 010c 	add.w	r1, r3, #12
 8005d86:	3202      	adds	r2, #2
 8005d88:	0092      	lsls	r2, r2, #2
 8005d8a:	f001 fc79 	bl	8007680 <memcpy>
 8005d8e:	ab1e      	add	r3, sp, #120	; 0x78
 8005d90:	9301      	str	r3, [sp, #4]
 8005d92:	ab1d      	add	r3, sp, #116	; 0x74
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	464a      	mov	r2, r9
 8005d98:	4653      	mov	r3, sl
 8005d9a:	4658      	mov	r0, fp
 8005d9c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005da0:	f001 ffba 	bl	8007d18 <__d2b>
 8005da4:	901c      	str	r0, [sp, #112]	; 0x70
 8005da6:	2800      	cmp	r0, #0
 8005da8:	f43f aed8 	beq.w	8005b5c <_strtod_l+0x444>
 8005dac:	2101      	movs	r1, #1
 8005dae:	4658      	mov	r0, fp
 8005db0:	f001 fd83 	bl	80078ba <__i2b>
 8005db4:	9004      	str	r0, [sp, #16]
 8005db6:	4603      	mov	r3, r0
 8005db8:	2800      	cmp	r0, #0
 8005dba:	f43f aecf 	beq.w	8005b5c <_strtod_l+0x444>
 8005dbe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005dc0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005dc2:	2d00      	cmp	r5, #0
 8005dc4:	bfab      	itete	ge
 8005dc6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005dc8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005dca:	18ee      	addge	r6, r5, r3
 8005dcc:	1b5c      	sublt	r4, r3, r5
 8005dce:	9b05      	ldr	r3, [sp, #20]
 8005dd0:	bfa8      	it	ge
 8005dd2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005dd4:	eba5 0503 	sub.w	r5, r5, r3
 8005dd8:	4415      	add	r5, r2
 8005dda:	4b64      	ldr	r3, [pc, #400]	; (8005f6c <_strtod_l+0x854>)
 8005ddc:	f105 35ff 	add.w	r5, r5, #4294967295
 8005de0:	bfb8      	it	lt
 8005de2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005de4:	429d      	cmp	r5, r3
 8005de6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005dea:	f280 80af 	bge.w	8005f4c <_strtod_l+0x834>
 8005dee:	1b5b      	subs	r3, r3, r5
 8005df0:	2b1f      	cmp	r3, #31
 8005df2:	eba2 0203 	sub.w	r2, r2, r3
 8005df6:	f04f 0701 	mov.w	r7, #1
 8005dfa:	f300 809c 	bgt.w	8005f36 <_strtod_l+0x81e>
 8005dfe:	2500      	movs	r5, #0
 8005e00:	fa07 f303 	lsl.w	r3, r7, r3
 8005e04:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e06:	18b7      	adds	r7, r6, r2
 8005e08:	9b05      	ldr	r3, [sp, #20]
 8005e0a:	42be      	cmp	r6, r7
 8005e0c:	4414      	add	r4, r2
 8005e0e:	441c      	add	r4, r3
 8005e10:	4633      	mov	r3, r6
 8005e12:	bfa8      	it	ge
 8005e14:	463b      	movge	r3, r7
 8005e16:	42a3      	cmp	r3, r4
 8005e18:	bfa8      	it	ge
 8005e1a:	4623      	movge	r3, r4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	bfc2      	ittt	gt
 8005e20:	1aff      	subgt	r7, r7, r3
 8005e22:	1ae4      	subgt	r4, r4, r3
 8005e24:	1af6      	subgt	r6, r6, r3
 8005e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e28:	b1bb      	cbz	r3, 8005e5a <_strtod_l+0x742>
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	9904      	ldr	r1, [sp, #16]
 8005e2e:	4658      	mov	r0, fp
 8005e30:	f001 fde2 	bl	80079f8 <__pow5mult>
 8005e34:	9004      	str	r0, [sp, #16]
 8005e36:	2800      	cmp	r0, #0
 8005e38:	f43f ae90 	beq.w	8005b5c <_strtod_l+0x444>
 8005e3c:	4601      	mov	r1, r0
 8005e3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005e40:	4658      	mov	r0, fp
 8005e42:	f001 fd43 	bl	80078cc <__multiply>
 8005e46:	9009      	str	r0, [sp, #36]	; 0x24
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	f43f ae87 	beq.w	8005b5c <_strtod_l+0x444>
 8005e4e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005e50:	4658      	mov	r0, fp
 8005e52:	f001 fc54 	bl	80076fe <_Bfree>
 8005e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e58:	931c      	str	r3, [sp, #112]	; 0x70
 8005e5a:	2f00      	cmp	r7, #0
 8005e5c:	dc7a      	bgt.n	8005f54 <_strtod_l+0x83c>
 8005e5e:	9b07      	ldr	r3, [sp, #28]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	dd08      	ble.n	8005e76 <_strtod_l+0x75e>
 8005e64:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005e66:	9906      	ldr	r1, [sp, #24]
 8005e68:	4658      	mov	r0, fp
 8005e6a:	f001 fdc5 	bl	80079f8 <__pow5mult>
 8005e6e:	9006      	str	r0, [sp, #24]
 8005e70:	2800      	cmp	r0, #0
 8005e72:	f43f ae73 	beq.w	8005b5c <_strtod_l+0x444>
 8005e76:	2c00      	cmp	r4, #0
 8005e78:	dd08      	ble.n	8005e8c <_strtod_l+0x774>
 8005e7a:	4622      	mov	r2, r4
 8005e7c:	9906      	ldr	r1, [sp, #24]
 8005e7e:	4658      	mov	r0, fp
 8005e80:	f001 fe08 	bl	8007a94 <__lshift>
 8005e84:	9006      	str	r0, [sp, #24]
 8005e86:	2800      	cmp	r0, #0
 8005e88:	f43f ae68 	beq.w	8005b5c <_strtod_l+0x444>
 8005e8c:	2e00      	cmp	r6, #0
 8005e8e:	dd08      	ble.n	8005ea2 <_strtod_l+0x78a>
 8005e90:	4632      	mov	r2, r6
 8005e92:	9904      	ldr	r1, [sp, #16]
 8005e94:	4658      	mov	r0, fp
 8005e96:	f001 fdfd 	bl	8007a94 <__lshift>
 8005e9a:	9004      	str	r0, [sp, #16]
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	f43f ae5d 	beq.w	8005b5c <_strtod_l+0x444>
 8005ea2:	9a06      	ldr	r2, [sp, #24]
 8005ea4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005ea6:	4658      	mov	r0, fp
 8005ea8:	f001 fe62 	bl	8007b70 <__mdiff>
 8005eac:	4680      	mov	r8, r0
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	f43f ae54 	beq.w	8005b5c <_strtod_l+0x444>
 8005eb4:	2400      	movs	r4, #0
 8005eb6:	68c3      	ldr	r3, [r0, #12]
 8005eb8:	9904      	ldr	r1, [sp, #16]
 8005eba:	60c4      	str	r4, [r0, #12]
 8005ebc:	930c      	str	r3, [sp, #48]	; 0x30
 8005ebe:	f001 fe3d 	bl	8007b3c <__mcmp>
 8005ec2:	42a0      	cmp	r0, r4
 8005ec4:	da54      	bge.n	8005f70 <_strtod_l+0x858>
 8005ec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ec8:	b9f3      	cbnz	r3, 8005f08 <_strtod_l+0x7f0>
 8005eca:	f1b9 0f00 	cmp.w	r9, #0
 8005ece:	d11b      	bne.n	8005f08 <_strtod_l+0x7f0>
 8005ed0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005ed4:	b9c3      	cbnz	r3, 8005f08 <_strtod_l+0x7f0>
 8005ed6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005eda:	0d1b      	lsrs	r3, r3, #20
 8005edc:	051b      	lsls	r3, r3, #20
 8005ede:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005ee2:	d911      	bls.n	8005f08 <_strtod_l+0x7f0>
 8005ee4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005ee8:	b91b      	cbnz	r3, 8005ef2 <_strtod_l+0x7da>
 8005eea:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	dd0a      	ble.n	8005f08 <_strtod_l+0x7f0>
 8005ef2:	4641      	mov	r1, r8
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	4658      	mov	r0, fp
 8005ef8:	f001 fdcc 	bl	8007a94 <__lshift>
 8005efc:	9904      	ldr	r1, [sp, #16]
 8005efe:	4680      	mov	r8, r0
 8005f00:	f001 fe1c 	bl	8007b3c <__mcmp>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	dc68      	bgt.n	8005fda <_strtod_l+0x8c2>
 8005f08:	9b05      	ldr	r3, [sp, #20]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d172      	bne.n	8005ff4 <_strtod_l+0x8dc>
 8005f0e:	e630      	b.n	8005b72 <_strtod_l+0x45a>
 8005f10:	f018 0f01 	tst.w	r8, #1
 8005f14:	d004      	beq.n	8005f20 <_strtod_l+0x808>
 8005f16:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f1a:	f7fa fadd 	bl	80004d8 <__aeabi_dmul>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005f24:	3508      	adds	r5, #8
 8005f26:	e6dc      	b.n	8005ce2 <_strtod_l+0x5ca>
 8005f28:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	ea03 0909 	and.w	r9, r3, r9
 8005f34:	e6f6      	b.n	8005d24 <_strtod_l+0x60c>
 8005f36:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005f3a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005f3e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005f42:	35e2      	adds	r5, #226	; 0xe2
 8005f44:	fa07 f505 	lsl.w	r5, r7, r5
 8005f48:	970f      	str	r7, [sp, #60]	; 0x3c
 8005f4a:	e75c      	b.n	8005e06 <_strtod_l+0x6ee>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	2500      	movs	r5, #0
 8005f50:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f52:	e758      	b.n	8005e06 <_strtod_l+0x6ee>
 8005f54:	463a      	mov	r2, r7
 8005f56:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005f58:	4658      	mov	r0, fp
 8005f5a:	f001 fd9b 	bl	8007a94 <__lshift>
 8005f5e:	901c      	str	r0, [sp, #112]	; 0x70
 8005f60:	2800      	cmp	r0, #0
 8005f62:	f47f af7c 	bne.w	8005e5e <_strtod_l+0x746>
 8005f66:	e5f9      	b.n	8005b5c <_strtod_l+0x444>
 8005f68:	08008438 	.word	0x08008438
 8005f6c:	fffffc02 	.word	0xfffffc02
 8005f70:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005f74:	f040 8089 	bne.w	800608a <_strtod_l+0x972>
 8005f78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f7a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005f7e:	b342      	cbz	r2, 8005fd2 <_strtod_l+0x8ba>
 8005f80:	4aaf      	ldr	r2, [pc, #700]	; (8006240 <_strtod_l+0xb28>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d156      	bne.n	8006034 <_strtod_l+0x91c>
 8005f86:	9b05      	ldr	r3, [sp, #20]
 8005f88:	4648      	mov	r0, r9
 8005f8a:	b1eb      	cbz	r3, 8005fc8 <_strtod_l+0x8b0>
 8005f8c:	4653      	mov	r3, sl
 8005f8e:	4aad      	ldr	r2, [pc, #692]	; (8006244 <_strtod_l+0xb2c>)
 8005f90:	f04f 31ff 	mov.w	r1, #4294967295
 8005f94:	401a      	ands	r2, r3
 8005f96:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005f9a:	d818      	bhi.n	8005fce <_strtod_l+0x8b6>
 8005f9c:	0d12      	lsrs	r2, r2, #20
 8005f9e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa6:	4298      	cmp	r0, r3
 8005fa8:	d144      	bne.n	8006034 <_strtod_l+0x91c>
 8005faa:	4ba7      	ldr	r3, [pc, #668]	; (8006248 <_strtod_l+0xb30>)
 8005fac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d102      	bne.n	8005fb8 <_strtod_l+0x8a0>
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	f43f add2 	beq.w	8005b5c <_strtod_l+0x444>
 8005fb8:	4ba2      	ldr	r3, [pc, #648]	; (8006244 <_strtod_l+0xb2c>)
 8005fba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fbc:	f04f 0900 	mov.w	r9, #0
 8005fc0:	401a      	ands	r2, r3
 8005fc2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8005fc6:	e79f      	b.n	8005f08 <_strtod_l+0x7f0>
 8005fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fcc:	e7eb      	b.n	8005fa6 <_strtod_l+0x88e>
 8005fce:	460b      	mov	r3, r1
 8005fd0:	e7e9      	b.n	8005fa6 <_strtod_l+0x88e>
 8005fd2:	bb7b      	cbnz	r3, 8006034 <_strtod_l+0x91c>
 8005fd4:	f1b9 0f00 	cmp.w	r9, #0
 8005fd8:	d12c      	bne.n	8006034 <_strtod_l+0x91c>
 8005fda:	9905      	ldr	r1, [sp, #20]
 8005fdc:	4653      	mov	r3, sl
 8005fde:	4a99      	ldr	r2, [pc, #612]	; (8006244 <_strtod_l+0xb2c>)
 8005fe0:	b1f1      	cbz	r1, 8006020 <_strtod_l+0x908>
 8005fe2:	ea02 010a 	and.w	r1, r2, sl
 8005fe6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005fea:	dc19      	bgt.n	8006020 <_strtod_l+0x908>
 8005fec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005ff0:	f77f ae51 	ble.w	8005c96 <_strtod_l+0x57e>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	4a95      	ldr	r2, [pc, #596]	; (800624c <_strtod_l+0xb34>)
 8005ff8:	4648      	mov	r0, r9
 8005ffa:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005ffe:	4651      	mov	r1, sl
 8006000:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006004:	f7fa fa68 	bl	80004d8 <__aeabi_dmul>
 8006008:	4681      	mov	r9, r0
 800600a:	468a      	mov	sl, r1
 800600c:	2900      	cmp	r1, #0
 800600e:	f47f adb0 	bne.w	8005b72 <_strtod_l+0x45a>
 8006012:	2800      	cmp	r0, #0
 8006014:	f47f adad 	bne.w	8005b72 <_strtod_l+0x45a>
 8006018:	2322      	movs	r3, #34	; 0x22
 800601a:	f8cb 3000 	str.w	r3, [fp]
 800601e:	e5a8      	b.n	8005b72 <_strtod_l+0x45a>
 8006020:	4013      	ands	r3, r2
 8006022:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006026:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800602a:	f04f 39ff 	mov.w	r9, #4294967295
 800602e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8006032:	e769      	b.n	8005f08 <_strtod_l+0x7f0>
 8006034:	b19d      	cbz	r5, 800605e <_strtod_l+0x946>
 8006036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006038:	421d      	tst	r5, r3
 800603a:	f43f af65 	beq.w	8005f08 <_strtod_l+0x7f0>
 800603e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006040:	9a05      	ldr	r2, [sp, #20]
 8006042:	4648      	mov	r0, r9
 8006044:	4651      	mov	r1, sl
 8006046:	b173      	cbz	r3, 8006066 <_strtod_l+0x94e>
 8006048:	f7ff fb42 	bl	80056d0 <sulp>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006054:	f7fa f88a 	bl	800016c <__adddf3>
 8006058:	4681      	mov	r9, r0
 800605a:	468a      	mov	sl, r1
 800605c:	e754      	b.n	8005f08 <_strtod_l+0x7f0>
 800605e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006060:	ea13 0f09 	tst.w	r3, r9
 8006064:	e7e9      	b.n	800603a <_strtod_l+0x922>
 8006066:	f7ff fb33 	bl	80056d0 <sulp>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006072:	f7fa f879 	bl	8000168 <__aeabi_dsub>
 8006076:	2200      	movs	r2, #0
 8006078:	2300      	movs	r3, #0
 800607a:	4681      	mov	r9, r0
 800607c:	468a      	mov	sl, r1
 800607e:	f7fa fc93 	bl	80009a8 <__aeabi_dcmpeq>
 8006082:	2800      	cmp	r0, #0
 8006084:	f47f ae07 	bne.w	8005c96 <_strtod_l+0x57e>
 8006088:	e73e      	b.n	8005f08 <_strtod_l+0x7f0>
 800608a:	9904      	ldr	r1, [sp, #16]
 800608c:	4640      	mov	r0, r8
 800608e:	f001 fe92 	bl	8007db6 <__ratio>
 8006092:	2200      	movs	r2, #0
 8006094:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006098:	4606      	mov	r6, r0
 800609a:	460f      	mov	r7, r1
 800609c:	f7fa fc98 	bl	80009d0 <__aeabi_dcmple>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	d075      	beq.n	8006190 <_strtod_l+0xa78>
 80060a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d047      	beq.n	800613a <_strtod_l+0xa22>
 80060aa:	2600      	movs	r6, #0
 80060ac:	4f68      	ldr	r7, [pc, #416]	; (8006250 <_strtod_l+0xb38>)
 80060ae:	4d68      	ldr	r5, [pc, #416]	; (8006250 <_strtod_l+0xb38>)
 80060b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060b6:	0d1b      	lsrs	r3, r3, #20
 80060b8:	051b      	lsls	r3, r3, #20
 80060ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80060bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060be:	4b65      	ldr	r3, [pc, #404]	; (8006254 <_strtod_l+0xb3c>)
 80060c0:	429a      	cmp	r2, r3
 80060c2:	f040 80cf 	bne.w	8006264 <_strtod_l+0xb4c>
 80060c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80060ca:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80060ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d0:	4648      	mov	r0, r9
 80060d2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80060d6:	4651      	mov	r1, sl
 80060d8:	f001 fda8 	bl	8007c2c <__ulp>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4630      	mov	r0, r6
 80060e2:	4639      	mov	r1, r7
 80060e4:	f7fa f9f8 	bl	80004d8 <__aeabi_dmul>
 80060e8:	464a      	mov	r2, r9
 80060ea:	4653      	mov	r3, sl
 80060ec:	f7fa f83e 	bl	800016c <__adddf3>
 80060f0:	460b      	mov	r3, r1
 80060f2:	4954      	ldr	r1, [pc, #336]	; (8006244 <_strtod_l+0xb2c>)
 80060f4:	4a58      	ldr	r2, [pc, #352]	; (8006258 <_strtod_l+0xb40>)
 80060f6:	4019      	ands	r1, r3
 80060f8:	4291      	cmp	r1, r2
 80060fa:	4681      	mov	r9, r0
 80060fc:	d95e      	bls.n	80061bc <_strtod_l+0xaa4>
 80060fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006100:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006104:	4293      	cmp	r3, r2
 8006106:	d103      	bne.n	8006110 <_strtod_l+0x9f8>
 8006108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800610a:	3301      	adds	r3, #1
 800610c:	f43f ad26 	beq.w	8005b5c <_strtod_l+0x444>
 8006110:	f04f 39ff 	mov.w	r9, #4294967295
 8006114:	f8df a130 	ldr.w	sl, [pc, #304]	; 8006248 <_strtod_l+0xb30>
 8006118:	991c      	ldr	r1, [sp, #112]	; 0x70
 800611a:	4658      	mov	r0, fp
 800611c:	f001 faef 	bl	80076fe <_Bfree>
 8006120:	9906      	ldr	r1, [sp, #24]
 8006122:	4658      	mov	r0, fp
 8006124:	f001 faeb 	bl	80076fe <_Bfree>
 8006128:	9904      	ldr	r1, [sp, #16]
 800612a:	4658      	mov	r0, fp
 800612c:	f001 fae7 	bl	80076fe <_Bfree>
 8006130:	4641      	mov	r1, r8
 8006132:	4658      	mov	r0, fp
 8006134:	f001 fae3 	bl	80076fe <_Bfree>
 8006138:	e617      	b.n	8005d6a <_strtod_l+0x652>
 800613a:	f1b9 0f00 	cmp.w	r9, #0
 800613e:	d119      	bne.n	8006174 <_strtod_l+0xa5c>
 8006140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006142:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006146:	b9e3      	cbnz	r3, 8006182 <_strtod_l+0xa6a>
 8006148:	2200      	movs	r2, #0
 800614a:	4b41      	ldr	r3, [pc, #260]	; (8006250 <_strtod_l+0xb38>)
 800614c:	4630      	mov	r0, r6
 800614e:	4639      	mov	r1, r7
 8006150:	f7fa fc34 	bl	80009bc <__aeabi_dcmplt>
 8006154:	b9c8      	cbnz	r0, 800618a <_strtod_l+0xa72>
 8006156:	2200      	movs	r2, #0
 8006158:	4b40      	ldr	r3, [pc, #256]	; (800625c <_strtod_l+0xb44>)
 800615a:	4630      	mov	r0, r6
 800615c:	4639      	mov	r1, r7
 800615e:	f7fa f9bb 	bl	80004d8 <__aeabi_dmul>
 8006162:	4604      	mov	r4, r0
 8006164:	460d      	mov	r5, r1
 8006166:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800616a:	9418      	str	r4, [sp, #96]	; 0x60
 800616c:	9319      	str	r3, [sp, #100]	; 0x64
 800616e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006172:	e79d      	b.n	80060b0 <_strtod_l+0x998>
 8006174:	f1b9 0f01 	cmp.w	r9, #1
 8006178:	d103      	bne.n	8006182 <_strtod_l+0xa6a>
 800617a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800617c:	2b00      	cmp	r3, #0
 800617e:	f43f ad8a 	beq.w	8005c96 <_strtod_l+0x57e>
 8006182:	2600      	movs	r6, #0
 8006184:	4f36      	ldr	r7, [pc, #216]	; (8006260 <_strtod_l+0xb48>)
 8006186:	2400      	movs	r4, #0
 8006188:	e791      	b.n	80060ae <_strtod_l+0x996>
 800618a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800618c:	4d33      	ldr	r5, [pc, #204]	; (800625c <_strtod_l+0xb44>)
 800618e:	e7ea      	b.n	8006166 <_strtod_l+0xa4e>
 8006190:	4b32      	ldr	r3, [pc, #200]	; (800625c <_strtod_l+0xb44>)
 8006192:	2200      	movs	r2, #0
 8006194:	4630      	mov	r0, r6
 8006196:	4639      	mov	r1, r7
 8006198:	f7fa f99e 	bl	80004d8 <__aeabi_dmul>
 800619c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800619e:	4604      	mov	r4, r0
 80061a0:	460d      	mov	r5, r1
 80061a2:	b933      	cbnz	r3, 80061b2 <_strtod_l+0xa9a>
 80061a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061a8:	9010      	str	r0, [sp, #64]	; 0x40
 80061aa:	9311      	str	r3, [sp, #68]	; 0x44
 80061ac:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80061b0:	e77e      	b.n	80060b0 <_strtod_l+0x998>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80061ba:	e7f7      	b.n	80061ac <_strtod_l+0xa94>
 80061bc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80061c0:	9b05      	ldr	r3, [sp, #20]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1a8      	bne.n	8006118 <_strtod_l+0xa00>
 80061c6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80061ca:	0d1b      	lsrs	r3, r3, #20
 80061cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061ce:	051b      	lsls	r3, r3, #20
 80061d0:	429a      	cmp	r2, r3
 80061d2:	4656      	mov	r6, sl
 80061d4:	d1a0      	bne.n	8006118 <_strtod_l+0xa00>
 80061d6:	4629      	mov	r1, r5
 80061d8:	4620      	mov	r0, r4
 80061da:	f7fa fc2d 	bl	8000a38 <__aeabi_d2iz>
 80061de:	f7fa f911 	bl	8000404 <__aeabi_i2d>
 80061e2:	460b      	mov	r3, r1
 80061e4:	4602      	mov	r2, r0
 80061e6:	4629      	mov	r1, r5
 80061e8:	4620      	mov	r0, r4
 80061ea:	f7f9 ffbd 	bl	8000168 <__aeabi_dsub>
 80061ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061f0:	4604      	mov	r4, r0
 80061f2:	460d      	mov	r5, r1
 80061f4:	b933      	cbnz	r3, 8006204 <_strtod_l+0xaec>
 80061f6:	f1b9 0f00 	cmp.w	r9, #0
 80061fa:	d103      	bne.n	8006204 <_strtod_l+0xaec>
 80061fc:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8006200:	2e00      	cmp	r6, #0
 8006202:	d06a      	beq.n	80062da <_strtod_l+0xbc2>
 8006204:	a30a      	add	r3, pc, #40	; (adr r3, 8006230 <_strtod_l+0xb18>)
 8006206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620a:	4620      	mov	r0, r4
 800620c:	4629      	mov	r1, r5
 800620e:	f7fa fbd5 	bl	80009bc <__aeabi_dcmplt>
 8006212:	2800      	cmp	r0, #0
 8006214:	f47f acad 	bne.w	8005b72 <_strtod_l+0x45a>
 8006218:	a307      	add	r3, pc, #28	; (adr r3, 8006238 <_strtod_l+0xb20>)
 800621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621e:	4620      	mov	r0, r4
 8006220:	4629      	mov	r1, r5
 8006222:	f7fa fbe9 	bl	80009f8 <__aeabi_dcmpgt>
 8006226:	2800      	cmp	r0, #0
 8006228:	f43f af76 	beq.w	8006118 <_strtod_l+0xa00>
 800622c:	e4a1      	b.n	8005b72 <_strtod_l+0x45a>
 800622e:	bf00      	nop
 8006230:	94a03595 	.word	0x94a03595
 8006234:	3fdfffff 	.word	0x3fdfffff
 8006238:	35afe535 	.word	0x35afe535
 800623c:	3fe00000 	.word	0x3fe00000
 8006240:	000fffff 	.word	0x000fffff
 8006244:	7ff00000 	.word	0x7ff00000
 8006248:	7fefffff 	.word	0x7fefffff
 800624c:	39500000 	.word	0x39500000
 8006250:	3ff00000 	.word	0x3ff00000
 8006254:	7fe00000 	.word	0x7fe00000
 8006258:	7c9fffff 	.word	0x7c9fffff
 800625c:	3fe00000 	.word	0x3fe00000
 8006260:	bff00000 	.word	0xbff00000
 8006264:	9b05      	ldr	r3, [sp, #20]
 8006266:	b313      	cbz	r3, 80062ae <_strtod_l+0xb96>
 8006268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800626a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800626e:	d81e      	bhi.n	80062ae <_strtod_l+0xb96>
 8006270:	a325      	add	r3, pc, #148	; (adr r3, 8006308 <_strtod_l+0xbf0>)
 8006272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006276:	4620      	mov	r0, r4
 8006278:	4629      	mov	r1, r5
 800627a:	f7fa fba9 	bl	80009d0 <__aeabi_dcmple>
 800627e:	b190      	cbz	r0, 80062a6 <_strtod_l+0xb8e>
 8006280:	4629      	mov	r1, r5
 8006282:	4620      	mov	r0, r4
 8006284:	f7fa fc00 	bl	8000a88 <__aeabi_d2uiz>
 8006288:	2800      	cmp	r0, #0
 800628a:	bf08      	it	eq
 800628c:	2001      	moveq	r0, #1
 800628e:	f7fa f8a9 	bl	80003e4 <__aeabi_ui2d>
 8006292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006294:	4604      	mov	r4, r0
 8006296:	460d      	mov	r5, r1
 8006298:	b9d3      	cbnz	r3, 80062d0 <_strtod_l+0xbb8>
 800629a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800629e:	9012      	str	r0, [sp, #72]	; 0x48
 80062a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80062a2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80062a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062a8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80062ac:	1a9f      	subs	r7, r3, r2
 80062ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062b2:	f001 fcbb 	bl	8007c2c <__ulp>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4630      	mov	r0, r6
 80062bc:	4639      	mov	r1, r7
 80062be:	f7fa f90b 	bl	80004d8 <__aeabi_dmul>
 80062c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062c6:	f7f9 ff51 	bl	800016c <__adddf3>
 80062ca:	4681      	mov	r9, r0
 80062cc:	468a      	mov	sl, r1
 80062ce:	e777      	b.n	80061c0 <_strtod_l+0xaa8>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80062d8:	e7e3      	b.n	80062a2 <_strtod_l+0xb8a>
 80062da:	a30d      	add	r3, pc, #52	; (adr r3, 8006310 <_strtod_l+0xbf8>)
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	f7fa fb6c 	bl	80009bc <__aeabi_dcmplt>
 80062e4:	e79f      	b.n	8006226 <_strtod_l+0xb0e>
 80062e6:	2300      	movs	r3, #0
 80062e8:	930d      	str	r3, [sp, #52]	; 0x34
 80062ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	f7ff ba55 	b.w	800579e <_strtod_l+0x86>
 80062f4:	2b65      	cmp	r3, #101	; 0x65
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	f43f ab42 	beq.w	8005982 <_strtod_l+0x26a>
 80062fe:	2101      	movs	r1, #1
 8006300:	4614      	mov	r4, r2
 8006302:	9105      	str	r1, [sp, #20]
 8006304:	f7ff babf 	b.w	8005886 <_strtod_l+0x16e>
 8006308:	ffc00000 	.word	0xffc00000
 800630c:	41dfffff 	.word	0x41dfffff
 8006310:	94a03595 	.word	0x94a03595
 8006314:	3fcfffff 	.word	0x3fcfffff

08006318 <strtod>:
 8006318:	4b06      	ldr	r3, [pc, #24]	; (8006334 <strtod+0x1c>)
 800631a:	b410      	push	{r4}
 800631c:	681c      	ldr	r4, [r3, #0]
 800631e:	4a06      	ldr	r2, [pc, #24]	; (8006338 <strtod+0x20>)
 8006320:	6a23      	ldr	r3, [r4, #32]
 8006322:	2b00      	cmp	r3, #0
 8006324:	bf08      	it	eq
 8006326:	4613      	moveq	r3, r2
 8006328:	460a      	mov	r2, r1
 800632a:	4601      	mov	r1, r0
 800632c:	4620      	mov	r0, r4
 800632e:	bc10      	pop	{r4}
 8006330:	f7ff b9f2 	b.w	8005718 <_strtod_l>
 8006334:	20000018 	.word	0x20000018
 8006338:	2000007c 	.word	0x2000007c

0800633c <quorem>:
 800633c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006340:	6903      	ldr	r3, [r0, #16]
 8006342:	690c      	ldr	r4, [r1, #16]
 8006344:	4680      	mov	r8, r0
 8006346:	42a3      	cmp	r3, r4
 8006348:	f2c0 8084 	blt.w	8006454 <quorem+0x118>
 800634c:	3c01      	subs	r4, #1
 800634e:	f101 0714 	add.w	r7, r1, #20
 8006352:	f100 0614 	add.w	r6, r0, #20
 8006356:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800635a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800635e:	3501      	adds	r5, #1
 8006360:	fbb0 f5f5 	udiv	r5, r0, r5
 8006364:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006368:	eb06 030c 	add.w	r3, r6, ip
 800636c:	eb07 090c 	add.w	r9, r7, ip
 8006370:	9301      	str	r3, [sp, #4]
 8006372:	b39d      	cbz	r5, 80063dc <quorem+0xa0>
 8006374:	f04f 0a00 	mov.w	sl, #0
 8006378:	4638      	mov	r0, r7
 800637a:	46b6      	mov	lr, r6
 800637c:	46d3      	mov	fp, sl
 800637e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006382:	b293      	uxth	r3, r2
 8006384:	fb05 a303 	mla	r3, r5, r3, sl
 8006388:	0c12      	lsrs	r2, r2, #16
 800638a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800638e:	fb05 a202 	mla	r2, r5, r2, sl
 8006392:	b29b      	uxth	r3, r3
 8006394:	ebab 0303 	sub.w	r3, fp, r3
 8006398:	f8de b000 	ldr.w	fp, [lr]
 800639c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80063a0:	fa1f fb8b 	uxth.w	fp, fp
 80063a4:	445b      	add	r3, fp
 80063a6:	fa1f fb82 	uxth.w	fp, r2
 80063aa:	f8de 2000 	ldr.w	r2, [lr]
 80063ae:	4581      	cmp	r9, r0
 80063b0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80063b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063be:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80063c2:	f84e 3b04 	str.w	r3, [lr], #4
 80063c6:	d2da      	bcs.n	800637e <quorem+0x42>
 80063c8:	f856 300c 	ldr.w	r3, [r6, ip]
 80063cc:	b933      	cbnz	r3, 80063dc <quorem+0xa0>
 80063ce:	9b01      	ldr	r3, [sp, #4]
 80063d0:	3b04      	subs	r3, #4
 80063d2:	429e      	cmp	r6, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	d331      	bcc.n	800643c <quorem+0x100>
 80063d8:	f8c8 4010 	str.w	r4, [r8, #16]
 80063dc:	4640      	mov	r0, r8
 80063de:	f001 fbad 	bl	8007b3c <__mcmp>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	db26      	blt.n	8006434 <quorem+0xf8>
 80063e6:	4630      	mov	r0, r6
 80063e8:	f04f 0c00 	mov.w	ip, #0
 80063ec:	3501      	adds	r5, #1
 80063ee:	f857 1b04 	ldr.w	r1, [r7], #4
 80063f2:	f8d0 e000 	ldr.w	lr, [r0]
 80063f6:	b28b      	uxth	r3, r1
 80063f8:	ebac 0303 	sub.w	r3, ip, r3
 80063fc:	fa1f f28e 	uxth.w	r2, lr
 8006400:	4413      	add	r3, r2
 8006402:	0c0a      	lsrs	r2, r1, #16
 8006404:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006408:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800640c:	b29b      	uxth	r3, r3
 800640e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006412:	45b9      	cmp	r9, r7
 8006414:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006418:	f840 3b04 	str.w	r3, [r0], #4
 800641c:	d2e7      	bcs.n	80063ee <quorem+0xb2>
 800641e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006422:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006426:	b92a      	cbnz	r2, 8006434 <quorem+0xf8>
 8006428:	3b04      	subs	r3, #4
 800642a:	429e      	cmp	r6, r3
 800642c:	461a      	mov	r2, r3
 800642e:	d30b      	bcc.n	8006448 <quorem+0x10c>
 8006430:	f8c8 4010 	str.w	r4, [r8, #16]
 8006434:	4628      	mov	r0, r5
 8006436:	b003      	add	sp, #12
 8006438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643c:	6812      	ldr	r2, [r2, #0]
 800643e:	3b04      	subs	r3, #4
 8006440:	2a00      	cmp	r2, #0
 8006442:	d1c9      	bne.n	80063d8 <quorem+0x9c>
 8006444:	3c01      	subs	r4, #1
 8006446:	e7c4      	b.n	80063d2 <quorem+0x96>
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	3b04      	subs	r3, #4
 800644c:	2a00      	cmp	r2, #0
 800644e:	d1ef      	bne.n	8006430 <quorem+0xf4>
 8006450:	3c01      	subs	r4, #1
 8006452:	e7ea      	b.n	800642a <quorem+0xee>
 8006454:	2000      	movs	r0, #0
 8006456:	e7ee      	b.n	8006436 <quorem+0xfa>

08006458 <_dtoa_r>:
 8006458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645c:	4616      	mov	r6, r2
 800645e:	461f      	mov	r7, r3
 8006460:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006462:	b095      	sub	sp, #84	; 0x54
 8006464:	4604      	mov	r4, r0
 8006466:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800646a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800646e:	b93d      	cbnz	r5, 8006480 <_dtoa_r+0x28>
 8006470:	2010      	movs	r0, #16
 8006472:	f001 f8dd 	bl	8007630 <malloc>
 8006476:	6260      	str	r0, [r4, #36]	; 0x24
 8006478:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800647c:	6005      	str	r5, [r0, #0]
 800647e:	60c5      	str	r5, [r0, #12]
 8006480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006482:	6819      	ldr	r1, [r3, #0]
 8006484:	b151      	cbz	r1, 800649c <_dtoa_r+0x44>
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	2301      	movs	r3, #1
 800648a:	4093      	lsls	r3, r2
 800648c:	604a      	str	r2, [r1, #4]
 800648e:	608b      	str	r3, [r1, #8]
 8006490:	4620      	mov	r0, r4
 8006492:	f001 f934 	bl	80076fe <_Bfree>
 8006496:	2200      	movs	r2, #0
 8006498:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	1e3b      	subs	r3, r7, #0
 800649e:	bfaf      	iteee	ge
 80064a0:	2300      	movge	r3, #0
 80064a2:	2201      	movlt	r2, #1
 80064a4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064a8:	9303      	strlt	r3, [sp, #12]
 80064aa:	bfac      	ite	ge
 80064ac:	f8c8 3000 	strge.w	r3, [r8]
 80064b0:	f8c8 2000 	strlt.w	r2, [r8]
 80064b4:	4bae      	ldr	r3, [pc, #696]	; (8006770 <_dtoa_r+0x318>)
 80064b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80064ba:	ea33 0308 	bics.w	r3, r3, r8
 80064be:	d11b      	bne.n	80064f8 <_dtoa_r+0xa0>
 80064c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80064c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	9b02      	ldr	r3, [sp, #8]
 80064ca:	b923      	cbnz	r3, 80064d6 <_dtoa_r+0x7e>
 80064cc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80064d0:	2800      	cmp	r0, #0
 80064d2:	f000 8545 	beq.w	8006f60 <_dtoa_r+0xb08>
 80064d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064d8:	b953      	cbnz	r3, 80064f0 <_dtoa_r+0x98>
 80064da:	4ba6      	ldr	r3, [pc, #664]	; (8006774 <_dtoa_r+0x31c>)
 80064dc:	e021      	b.n	8006522 <_dtoa_r+0xca>
 80064de:	4ba6      	ldr	r3, [pc, #664]	; (8006778 <_dtoa_r+0x320>)
 80064e0:	9306      	str	r3, [sp, #24]
 80064e2:	3308      	adds	r3, #8
 80064e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	9806      	ldr	r0, [sp, #24]
 80064ea:	b015      	add	sp, #84	; 0x54
 80064ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f0:	4ba0      	ldr	r3, [pc, #640]	; (8006774 <_dtoa_r+0x31c>)
 80064f2:	9306      	str	r3, [sp, #24]
 80064f4:	3303      	adds	r3, #3
 80064f6:	e7f5      	b.n	80064e4 <_dtoa_r+0x8c>
 80064f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80064fc:	2200      	movs	r2, #0
 80064fe:	2300      	movs	r3, #0
 8006500:	4630      	mov	r0, r6
 8006502:	4639      	mov	r1, r7
 8006504:	f7fa fa50 	bl	80009a8 <__aeabi_dcmpeq>
 8006508:	4682      	mov	sl, r0
 800650a:	b160      	cbz	r0, 8006526 <_dtoa_r+0xce>
 800650c:	2301      	movs	r3, #1
 800650e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006510:	6013      	str	r3, [r2, #0]
 8006512:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 8520 	beq.w	8006f5a <_dtoa_r+0xb02>
 800651a:	4b98      	ldr	r3, [pc, #608]	; (800677c <_dtoa_r+0x324>)
 800651c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800651e:	6013      	str	r3, [r2, #0]
 8006520:	3b01      	subs	r3, #1
 8006522:	9306      	str	r3, [sp, #24]
 8006524:	e7e0      	b.n	80064e8 <_dtoa_r+0x90>
 8006526:	ab12      	add	r3, sp, #72	; 0x48
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	ab13      	add	r3, sp, #76	; 0x4c
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	4632      	mov	r2, r6
 8006530:	463b      	mov	r3, r7
 8006532:	4620      	mov	r0, r4
 8006534:	f001 fbf0 	bl	8007d18 <__d2b>
 8006538:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800653c:	4683      	mov	fp, r0
 800653e:	2d00      	cmp	r5, #0
 8006540:	d07d      	beq.n	800663e <_dtoa_r+0x1e6>
 8006542:	46b0      	mov	r8, r6
 8006544:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006548:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800654c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006550:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006554:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006558:	2200      	movs	r2, #0
 800655a:	4b89      	ldr	r3, [pc, #548]	; (8006780 <_dtoa_r+0x328>)
 800655c:	4640      	mov	r0, r8
 800655e:	4649      	mov	r1, r9
 8006560:	f7f9 fe02 	bl	8000168 <__aeabi_dsub>
 8006564:	a37c      	add	r3, pc, #496	; (adr r3, 8006758 <_dtoa_r+0x300>)
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	f7f9 ffb5 	bl	80004d8 <__aeabi_dmul>
 800656e:	a37c      	add	r3, pc, #496	; (adr r3, 8006760 <_dtoa_r+0x308>)
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	f7f9 fdfa 	bl	800016c <__adddf3>
 8006578:	4606      	mov	r6, r0
 800657a:	4628      	mov	r0, r5
 800657c:	460f      	mov	r7, r1
 800657e:	f7f9 ff41 	bl	8000404 <__aeabi_i2d>
 8006582:	a379      	add	r3, pc, #484	; (adr r3, 8006768 <_dtoa_r+0x310>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f7f9 ffa6 	bl	80004d8 <__aeabi_dmul>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4630      	mov	r0, r6
 8006592:	4639      	mov	r1, r7
 8006594:	f7f9 fdea 	bl	800016c <__adddf3>
 8006598:	4606      	mov	r6, r0
 800659a:	460f      	mov	r7, r1
 800659c:	f7fa fa4c 	bl	8000a38 <__aeabi_d2iz>
 80065a0:	2200      	movs	r2, #0
 80065a2:	4682      	mov	sl, r0
 80065a4:	2300      	movs	r3, #0
 80065a6:	4630      	mov	r0, r6
 80065a8:	4639      	mov	r1, r7
 80065aa:	f7fa fa07 	bl	80009bc <__aeabi_dcmplt>
 80065ae:	b148      	cbz	r0, 80065c4 <_dtoa_r+0x16c>
 80065b0:	4650      	mov	r0, sl
 80065b2:	f7f9 ff27 	bl	8000404 <__aeabi_i2d>
 80065b6:	4632      	mov	r2, r6
 80065b8:	463b      	mov	r3, r7
 80065ba:	f7fa f9f5 	bl	80009a8 <__aeabi_dcmpeq>
 80065be:	b908      	cbnz	r0, 80065c4 <_dtoa_r+0x16c>
 80065c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065c4:	f1ba 0f16 	cmp.w	sl, #22
 80065c8:	d85a      	bhi.n	8006680 <_dtoa_r+0x228>
 80065ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065ce:	496d      	ldr	r1, [pc, #436]	; (8006784 <_dtoa_r+0x32c>)
 80065d0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80065d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065d8:	f7fa fa0e 	bl	80009f8 <__aeabi_dcmpgt>
 80065dc:	2800      	cmp	r0, #0
 80065de:	d051      	beq.n	8006684 <_dtoa_r+0x22c>
 80065e0:	2300      	movs	r3, #0
 80065e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065e6:	930d      	str	r3, [sp, #52]	; 0x34
 80065e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065ea:	1b5d      	subs	r5, r3, r5
 80065ec:	1e6b      	subs	r3, r5, #1
 80065ee:	9307      	str	r3, [sp, #28]
 80065f0:	bf43      	ittte	mi
 80065f2:	2300      	movmi	r3, #0
 80065f4:	f1c5 0901 	rsbmi	r9, r5, #1
 80065f8:	9307      	strmi	r3, [sp, #28]
 80065fa:	f04f 0900 	movpl.w	r9, #0
 80065fe:	f1ba 0f00 	cmp.w	sl, #0
 8006602:	db41      	blt.n	8006688 <_dtoa_r+0x230>
 8006604:	9b07      	ldr	r3, [sp, #28]
 8006606:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800660a:	4453      	add	r3, sl
 800660c:	9307      	str	r3, [sp, #28]
 800660e:	2300      	movs	r3, #0
 8006610:	9308      	str	r3, [sp, #32]
 8006612:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006614:	2b09      	cmp	r3, #9
 8006616:	f200 808f 	bhi.w	8006738 <_dtoa_r+0x2e0>
 800661a:	2b05      	cmp	r3, #5
 800661c:	bfc4      	itt	gt
 800661e:	3b04      	subgt	r3, #4
 8006620:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006622:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006624:	bfc8      	it	gt
 8006626:	2500      	movgt	r5, #0
 8006628:	f1a3 0302 	sub.w	r3, r3, #2
 800662c:	bfd8      	it	le
 800662e:	2501      	movle	r5, #1
 8006630:	2b03      	cmp	r3, #3
 8006632:	f200 808d 	bhi.w	8006750 <_dtoa_r+0x2f8>
 8006636:	e8df f003 	tbb	[pc, r3]
 800663a:	7d7b      	.short	0x7d7b
 800663c:	6f2f      	.short	0x6f2f
 800663e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006642:	441d      	add	r5, r3
 8006644:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006648:	2820      	cmp	r0, #32
 800664a:	dd13      	ble.n	8006674 <_dtoa_r+0x21c>
 800664c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006650:	9b02      	ldr	r3, [sp, #8]
 8006652:	fa08 f800 	lsl.w	r8, r8, r0
 8006656:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800665a:	fa23 f000 	lsr.w	r0, r3, r0
 800665e:	ea48 0000 	orr.w	r0, r8, r0
 8006662:	f7f9 febf 	bl	80003e4 <__aeabi_ui2d>
 8006666:	2301      	movs	r3, #1
 8006668:	4680      	mov	r8, r0
 800666a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800666e:	3d01      	subs	r5, #1
 8006670:	9310      	str	r3, [sp, #64]	; 0x40
 8006672:	e771      	b.n	8006558 <_dtoa_r+0x100>
 8006674:	9b02      	ldr	r3, [sp, #8]
 8006676:	f1c0 0020 	rsb	r0, r0, #32
 800667a:	fa03 f000 	lsl.w	r0, r3, r0
 800667e:	e7f0      	b.n	8006662 <_dtoa_r+0x20a>
 8006680:	2301      	movs	r3, #1
 8006682:	e7b0      	b.n	80065e6 <_dtoa_r+0x18e>
 8006684:	900d      	str	r0, [sp, #52]	; 0x34
 8006686:	e7af      	b.n	80065e8 <_dtoa_r+0x190>
 8006688:	f1ca 0300 	rsb	r3, sl, #0
 800668c:	9308      	str	r3, [sp, #32]
 800668e:	2300      	movs	r3, #0
 8006690:	eba9 090a 	sub.w	r9, r9, sl
 8006694:	930c      	str	r3, [sp, #48]	; 0x30
 8006696:	e7bc      	b.n	8006612 <_dtoa_r+0x1ba>
 8006698:	2301      	movs	r3, #1
 800669a:	9309      	str	r3, [sp, #36]	; 0x24
 800669c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	dd74      	ble.n	800678c <_dtoa_r+0x334>
 80066a2:	4698      	mov	r8, r3
 80066a4:	9304      	str	r3, [sp, #16]
 80066a6:	2200      	movs	r2, #0
 80066a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80066aa:	6072      	str	r2, [r6, #4]
 80066ac:	2204      	movs	r2, #4
 80066ae:	f102 0014 	add.w	r0, r2, #20
 80066b2:	4298      	cmp	r0, r3
 80066b4:	6871      	ldr	r1, [r6, #4]
 80066b6:	d96e      	bls.n	8006796 <_dtoa_r+0x33e>
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 ffec 	bl	8007696 <_Balloc>
 80066be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066c0:	6030      	str	r0, [r6, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f1b8 0f0e 	cmp.w	r8, #14
 80066c8:	9306      	str	r3, [sp, #24]
 80066ca:	f200 80ed 	bhi.w	80068a8 <_dtoa_r+0x450>
 80066ce:	2d00      	cmp	r5, #0
 80066d0:	f000 80ea 	beq.w	80068a8 <_dtoa_r+0x450>
 80066d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066d8:	f1ba 0f00 	cmp.w	sl, #0
 80066dc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80066e0:	dd77      	ble.n	80067d2 <_dtoa_r+0x37a>
 80066e2:	4a28      	ldr	r2, [pc, #160]	; (8006784 <_dtoa_r+0x32c>)
 80066e4:	f00a 030f 	and.w	r3, sl, #15
 80066e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80066ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066f0:	06f0      	lsls	r0, r6, #27
 80066f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80066fa:	d568      	bpl.n	80067ce <_dtoa_r+0x376>
 80066fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006700:	4b21      	ldr	r3, [pc, #132]	; (8006788 <_dtoa_r+0x330>)
 8006702:	2503      	movs	r5, #3
 8006704:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006708:	f7fa f810 	bl	800072c <__aeabi_ddiv>
 800670c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006710:	f006 060f 	and.w	r6, r6, #15
 8006714:	4f1c      	ldr	r7, [pc, #112]	; (8006788 <_dtoa_r+0x330>)
 8006716:	e04f      	b.n	80067b8 <_dtoa_r+0x360>
 8006718:	2301      	movs	r3, #1
 800671a:	9309      	str	r3, [sp, #36]	; 0x24
 800671c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800671e:	4453      	add	r3, sl
 8006720:	f103 0801 	add.w	r8, r3, #1
 8006724:	9304      	str	r3, [sp, #16]
 8006726:	4643      	mov	r3, r8
 8006728:	2b01      	cmp	r3, #1
 800672a:	bfb8      	it	lt
 800672c:	2301      	movlt	r3, #1
 800672e:	e7ba      	b.n	80066a6 <_dtoa_r+0x24e>
 8006730:	2300      	movs	r3, #0
 8006732:	e7b2      	b.n	800669a <_dtoa_r+0x242>
 8006734:	2300      	movs	r3, #0
 8006736:	e7f0      	b.n	800671a <_dtoa_r+0x2c2>
 8006738:	2501      	movs	r5, #1
 800673a:	2300      	movs	r3, #0
 800673c:	9509      	str	r5, [sp, #36]	; 0x24
 800673e:	931e      	str	r3, [sp, #120]	; 0x78
 8006740:	f04f 33ff 	mov.w	r3, #4294967295
 8006744:	2200      	movs	r2, #0
 8006746:	9304      	str	r3, [sp, #16]
 8006748:	4698      	mov	r8, r3
 800674a:	2312      	movs	r3, #18
 800674c:	921f      	str	r2, [sp, #124]	; 0x7c
 800674e:	e7aa      	b.n	80066a6 <_dtoa_r+0x24e>
 8006750:	2301      	movs	r3, #1
 8006752:	9309      	str	r3, [sp, #36]	; 0x24
 8006754:	e7f4      	b.n	8006740 <_dtoa_r+0x2e8>
 8006756:	bf00      	nop
 8006758:	636f4361 	.word	0x636f4361
 800675c:	3fd287a7 	.word	0x3fd287a7
 8006760:	8b60c8b3 	.word	0x8b60c8b3
 8006764:	3fc68a28 	.word	0x3fc68a28
 8006768:	509f79fb 	.word	0x509f79fb
 800676c:	3fd34413 	.word	0x3fd34413
 8006770:	7ff00000 	.word	0x7ff00000
 8006774:	08008469 	.word	0x08008469
 8006778:	08008460 	.word	0x08008460
 800677c:	080083ed 	.word	0x080083ed
 8006780:	3ff80000 	.word	0x3ff80000
 8006784:	080084a0 	.word	0x080084a0
 8006788:	08008478 	.word	0x08008478
 800678c:	2301      	movs	r3, #1
 800678e:	9304      	str	r3, [sp, #16]
 8006790:	4698      	mov	r8, r3
 8006792:	461a      	mov	r2, r3
 8006794:	e7da      	b.n	800674c <_dtoa_r+0x2f4>
 8006796:	3101      	adds	r1, #1
 8006798:	6071      	str	r1, [r6, #4]
 800679a:	0052      	lsls	r2, r2, #1
 800679c:	e787      	b.n	80066ae <_dtoa_r+0x256>
 800679e:	07f1      	lsls	r1, r6, #31
 80067a0:	d508      	bpl.n	80067b4 <_dtoa_r+0x35c>
 80067a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067aa:	f7f9 fe95 	bl	80004d8 <__aeabi_dmul>
 80067ae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80067b2:	3501      	adds	r5, #1
 80067b4:	1076      	asrs	r6, r6, #1
 80067b6:	3708      	adds	r7, #8
 80067b8:	2e00      	cmp	r6, #0
 80067ba:	d1f0      	bne.n	800679e <_dtoa_r+0x346>
 80067bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80067c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067c4:	f7f9 ffb2 	bl	800072c <__aeabi_ddiv>
 80067c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067cc:	e01b      	b.n	8006806 <_dtoa_r+0x3ae>
 80067ce:	2502      	movs	r5, #2
 80067d0:	e7a0      	b.n	8006714 <_dtoa_r+0x2bc>
 80067d2:	f000 80a4 	beq.w	800691e <_dtoa_r+0x4c6>
 80067d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80067da:	f1ca 0600 	rsb	r6, sl, #0
 80067de:	4ba0      	ldr	r3, [pc, #640]	; (8006a60 <_dtoa_r+0x608>)
 80067e0:	f006 020f 	and.w	r2, r6, #15
 80067e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f7f9 fe74 	bl	80004d8 <__aeabi_dmul>
 80067f0:	2502      	movs	r5, #2
 80067f2:	2300      	movs	r3, #0
 80067f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067f8:	4f9a      	ldr	r7, [pc, #616]	; (8006a64 <_dtoa_r+0x60c>)
 80067fa:	1136      	asrs	r6, r6, #4
 80067fc:	2e00      	cmp	r6, #0
 80067fe:	f040 8083 	bne.w	8006908 <_dtoa_r+0x4b0>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e0      	bne.n	80067c8 <_dtoa_r+0x370>
 8006806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 808a 	beq.w	8006922 <_dtoa_r+0x4ca>
 800680e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006812:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006816:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800681a:	2200      	movs	r2, #0
 800681c:	4b92      	ldr	r3, [pc, #584]	; (8006a68 <_dtoa_r+0x610>)
 800681e:	f7fa f8cd 	bl	80009bc <__aeabi_dcmplt>
 8006822:	2800      	cmp	r0, #0
 8006824:	d07d      	beq.n	8006922 <_dtoa_r+0x4ca>
 8006826:	f1b8 0f00 	cmp.w	r8, #0
 800682a:	d07a      	beq.n	8006922 <_dtoa_r+0x4ca>
 800682c:	9b04      	ldr	r3, [sp, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	dd36      	ble.n	80068a0 <_dtoa_r+0x448>
 8006832:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006836:	2200      	movs	r2, #0
 8006838:	4b8c      	ldr	r3, [pc, #560]	; (8006a6c <_dtoa_r+0x614>)
 800683a:	f7f9 fe4d 	bl	80004d8 <__aeabi_dmul>
 800683e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006842:	9e04      	ldr	r6, [sp, #16]
 8006844:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006848:	3501      	adds	r5, #1
 800684a:	4628      	mov	r0, r5
 800684c:	f7f9 fdda 	bl	8000404 <__aeabi_i2d>
 8006850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006854:	f7f9 fe40 	bl	80004d8 <__aeabi_dmul>
 8006858:	2200      	movs	r2, #0
 800685a:	4b85      	ldr	r3, [pc, #532]	; (8006a70 <_dtoa_r+0x618>)
 800685c:	f7f9 fc86 	bl	800016c <__adddf3>
 8006860:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006864:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006868:	950b      	str	r5, [sp, #44]	; 0x2c
 800686a:	2e00      	cmp	r6, #0
 800686c:	d15c      	bne.n	8006928 <_dtoa_r+0x4d0>
 800686e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006872:	2200      	movs	r2, #0
 8006874:	4b7f      	ldr	r3, [pc, #508]	; (8006a74 <_dtoa_r+0x61c>)
 8006876:	f7f9 fc77 	bl	8000168 <__aeabi_dsub>
 800687a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800687c:	462b      	mov	r3, r5
 800687e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006882:	f7fa f8b9 	bl	80009f8 <__aeabi_dcmpgt>
 8006886:	2800      	cmp	r0, #0
 8006888:	f040 8281 	bne.w	8006d8e <_dtoa_r+0x936>
 800688c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006892:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006896:	f7fa f891 	bl	80009bc <__aeabi_dcmplt>
 800689a:	2800      	cmp	r0, #0
 800689c:	f040 8275 	bne.w	8006d8a <_dtoa_r+0x932>
 80068a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80068a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f2c0 814b 	blt.w	8006b46 <_dtoa_r+0x6ee>
 80068b0:	f1ba 0f0e 	cmp.w	sl, #14
 80068b4:	f300 8147 	bgt.w	8006b46 <_dtoa_r+0x6ee>
 80068b8:	4b69      	ldr	r3, [pc, #420]	; (8006a60 <_dtoa_r+0x608>)
 80068ba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f280 80d7 	bge.w	8006a7c <_dtoa_r+0x624>
 80068ce:	f1b8 0f00 	cmp.w	r8, #0
 80068d2:	f300 80d3 	bgt.w	8006a7c <_dtoa_r+0x624>
 80068d6:	f040 8257 	bne.w	8006d88 <_dtoa_r+0x930>
 80068da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068de:	2200      	movs	r2, #0
 80068e0:	4b64      	ldr	r3, [pc, #400]	; (8006a74 <_dtoa_r+0x61c>)
 80068e2:	f7f9 fdf9 	bl	80004d8 <__aeabi_dmul>
 80068e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068ea:	f7fa f87b 	bl	80009e4 <__aeabi_dcmpge>
 80068ee:	4646      	mov	r6, r8
 80068f0:	4647      	mov	r7, r8
 80068f2:	2800      	cmp	r0, #0
 80068f4:	f040 822d 	bne.w	8006d52 <_dtoa_r+0x8fa>
 80068f8:	9b06      	ldr	r3, [sp, #24]
 80068fa:	9a06      	ldr	r2, [sp, #24]
 80068fc:	1c5d      	adds	r5, r3, #1
 80068fe:	2331      	movs	r3, #49	; 0x31
 8006900:	f10a 0a01 	add.w	sl, sl, #1
 8006904:	7013      	strb	r3, [r2, #0]
 8006906:	e228      	b.n	8006d5a <_dtoa_r+0x902>
 8006908:	07f2      	lsls	r2, r6, #31
 800690a:	d505      	bpl.n	8006918 <_dtoa_r+0x4c0>
 800690c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006910:	f7f9 fde2 	bl	80004d8 <__aeabi_dmul>
 8006914:	2301      	movs	r3, #1
 8006916:	3501      	adds	r5, #1
 8006918:	1076      	asrs	r6, r6, #1
 800691a:	3708      	adds	r7, #8
 800691c:	e76e      	b.n	80067fc <_dtoa_r+0x3a4>
 800691e:	2502      	movs	r5, #2
 8006920:	e771      	b.n	8006806 <_dtoa_r+0x3ae>
 8006922:	4657      	mov	r7, sl
 8006924:	4646      	mov	r6, r8
 8006926:	e790      	b.n	800684a <_dtoa_r+0x3f2>
 8006928:	4b4d      	ldr	r3, [pc, #308]	; (8006a60 <_dtoa_r+0x608>)
 800692a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800692e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006934:	2b00      	cmp	r3, #0
 8006936:	d048      	beq.n	80069ca <_dtoa_r+0x572>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	2000      	movs	r0, #0
 800693e:	494e      	ldr	r1, [pc, #312]	; (8006a78 <_dtoa_r+0x620>)
 8006940:	f7f9 fef4 	bl	800072c <__aeabi_ddiv>
 8006944:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006948:	f7f9 fc0e 	bl	8000168 <__aeabi_dsub>
 800694c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006950:	9d06      	ldr	r5, [sp, #24]
 8006952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006956:	f7fa f86f 	bl	8000a38 <__aeabi_d2iz>
 800695a:	9011      	str	r0, [sp, #68]	; 0x44
 800695c:	f7f9 fd52 	bl	8000404 <__aeabi_i2d>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006968:	f7f9 fbfe 	bl	8000168 <__aeabi_dsub>
 800696c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800696e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006972:	3330      	adds	r3, #48	; 0x30
 8006974:	f805 3b01 	strb.w	r3, [r5], #1
 8006978:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800697c:	f7fa f81e 	bl	80009bc <__aeabi_dcmplt>
 8006980:	2800      	cmp	r0, #0
 8006982:	d163      	bne.n	8006a4c <_dtoa_r+0x5f4>
 8006984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006988:	2000      	movs	r0, #0
 800698a:	4937      	ldr	r1, [pc, #220]	; (8006a68 <_dtoa_r+0x610>)
 800698c:	f7f9 fbec 	bl	8000168 <__aeabi_dsub>
 8006990:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006994:	f7fa f812 	bl	80009bc <__aeabi_dcmplt>
 8006998:	2800      	cmp	r0, #0
 800699a:	f040 80b5 	bne.w	8006b08 <_dtoa_r+0x6b0>
 800699e:	9b06      	ldr	r3, [sp, #24]
 80069a0:	1aeb      	subs	r3, r5, r3
 80069a2:	429e      	cmp	r6, r3
 80069a4:	f77f af7c 	ble.w	80068a0 <_dtoa_r+0x448>
 80069a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069ac:	2200      	movs	r2, #0
 80069ae:	4b2f      	ldr	r3, [pc, #188]	; (8006a6c <_dtoa_r+0x614>)
 80069b0:	f7f9 fd92 	bl	80004d8 <__aeabi_dmul>
 80069b4:	2200      	movs	r2, #0
 80069b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80069ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069be:	4b2b      	ldr	r3, [pc, #172]	; (8006a6c <_dtoa_r+0x614>)
 80069c0:	f7f9 fd8a 	bl	80004d8 <__aeabi_dmul>
 80069c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069c8:	e7c3      	b.n	8006952 <_dtoa_r+0x4fa>
 80069ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069ce:	f7f9 fd83 	bl	80004d8 <__aeabi_dmul>
 80069d2:	9b06      	ldr	r3, [sp, #24]
 80069d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80069d8:	199d      	adds	r5, r3, r6
 80069da:	461e      	mov	r6, r3
 80069dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069e0:	f7fa f82a 	bl	8000a38 <__aeabi_d2iz>
 80069e4:	9011      	str	r0, [sp, #68]	; 0x44
 80069e6:	f7f9 fd0d 	bl	8000404 <__aeabi_i2d>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069f2:	f7f9 fbb9 	bl	8000168 <__aeabi_dsub>
 80069f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069fc:	3330      	adds	r3, #48	; 0x30
 80069fe:	f806 3b01 	strb.w	r3, [r6], #1
 8006a02:	42ae      	cmp	r6, r5
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	d124      	bne.n	8006a54 <_dtoa_r+0x5fc>
 8006a0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a0e:	4b1a      	ldr	r3, [pc, #104]	; (8006a78 <_dtoa_r+0x620>)
 8006a10:	f7f9 fbac 	bl	800016c <__adddf3>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a1c:	f7f9 ffec 	bl	80009f8 <__aeabi_dcmpgt>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d171      	bne.n	8006b08 <_dtoa_r+0x6b0>
 8006a24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a28:	2000      	movs	r0, #0
 8006a2a:	4913      	ldr	r1, [pc, #76]	; (8006a78 <_dtoa_r+0x620>)
 8006a2c:	f7f9 fb9c 	bl	8000168 <__aeabi_dsub>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a38:	f7f9 ffc0 	bl	80009bc <__aeabi_dcmplt>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	f43f af2f 	beq.w	80068a0 <_dtoa_r+0x448>
 8006a42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a46:	1e6a      	subs	r2, r5, #1
 8006a48:	2b30      	cmp	r3, #48	; 0x30
 8006a4a:	d001      	beq.n	8006a50 <_dtoa_r+0x5f8>
 8006a4c:	46ba      	mov	sl, r7
 8006a4e:	e04a      	b.n	8006ae6 <_dtoa_r+0x68e>
 8006a50:	4615      	mov	r5, r2
 8006a52:	e7f6      	b.n	8006a42 <_dtoa_r+0x5ea>
 8006a54:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <_dtoa_r+0x614>)
 8006a56:	f7f9 fd3f 	bl	80004d8 <__aeabi_dmul>
 8006a5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a5e:	e7bd      	b.n	80069dc <_dtoa_r+0x584>
 8006a60:	080084a0 	.word	0x080084a0
 8006a64:	08008478 	.word	0x08008478
 8006a68:	3ff00000 	.word	0x3ff00000
 8006a6c:	40240000 	.word	0x40240000
 8006a70:	401c0000 	.word	0x401c0000
 8006a74:	40140000 	.word	0x40140000
 8006a78:	3fe00000 	.word	0x3fe00000
 8006a7c:	9d06      	ldr	r5, [sp, #24]
 8006a7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a86:	4630      	mov	r0, r6
 8006a88:	4639      	mov	r1, r7
 8006a8a:	f7f9 fe4f 	bl	800072c <__aeabi_ddiv>
 8006a8e:	f7f9 ffd3 	bl	8000a38 <__aeabi_d2iz>
 8006a92:	4681      	mov	r9, r0
 8006a94:	f7f9 fcb6 	bl	8000404 <__aeabi_i2d>
 8006a98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a9c:	f7f9 fd1c 	bl	80004d8 <__aeabi_dmul>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	4639      	mov	r1, r7
 8006aa8:	f7f9 fb5e 	bl	8000168 <__aeabi_dsub>
 8006aac:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006ab0:	f805 6b01 	strb.w	r6, [r5], #1
 8006ab4:	9e06      	ldr	r6, [sp, #24]
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	1bae      	subs	r6, r5, r6
 8006aba:	45b0      	cmp	r8, r6
 8006abc:	460b      	mov	r3, r1
 8006abe:	d135      	bne.n	8006b2c <_dtoa_r+0x6d4>
 8006ac0:	f7f9 fb54 	bl	800016c <__adddf3>
 8006ac4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ac8:	4606      	mov	r6, r0
 8006aca:	460f      	mov	r7, r1
 8006acc:	f7f9 ff94 	bl	80009f8 <__aeabi_dcmpgt>
 8006ad0:	b9c8      	cbnz	r0, 8006b06 <_dtoa_r+0x6ae>
 8006ad2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	4639      	mov	r1, r7
 8006ada:	f7f9 ff65 	bl	80009a8 <__aeabi_dcmpeq>
 8006ade:	b110      	cbz	r0, 8006ae6 <_dtoa_r+0x68e>
 8006ae0:	f019 0f01 	tst.w	r9, #1
 8006ae4:	d10f      	bne.n	8006b06 <_dtoa_r+0x6ae>
 8006ae6:	4659      	mov	r1, fp
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 fe08 	bl	80076fe <_Bfree>
 8006aee:	2300      	movs	r3, #0
 8006af0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006af2:	702b      	strb	r3, [r5, #0]
 8006af4:	f10a 0301 	add.w	r3, sl, #1
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f43f acf3 	beq.w	80064e8 <_dtoa_r+0x90>
 8006b02:	601d      	str	r5, [r3, #0]
 8006b04:	e4f0      	b.n	80064e8 <_dtoa_r+0x90>
 8006b06:	4657      	mov	r7, sl
 8006b08:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b0c:	1e6b      	subs	r3, r5, #1
 8006b0e:	2a39      	cmp	r2, #57	; 0x39
 8006b10:	d106      	bne.n	8006b20 <_dtoa_r+0x6c8>
 8006b12:	9a06      	ldr	r2, [sp, #24]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d107      	bne.n	8006b28 <_dtoa_r+0x6d0>
 8006b18:	2330      	movs	r3, #48	; 0x30
 8006b1a:	7013      	strb	r3, [r2, #0]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	3701      	adds	r7, #1
 8006b20:	781a      	ldrb	r2, [r3, #0]
 8006b22:	3201      	adds	r2, #1
 8006b24:	701a      	strb	r2, [r3, #0]
 8006b26:	e791      	b.n	8006a4c <_dtoa_r+0x5f4>
 8006b28:	461d      	mov	r5, r3
 8006b2a:	e7ed      	b.n	8006b08 <_dtoa_r+0x6b0>
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	4b99      	ldr	r3, [pc, #612]	; (8006d94 <_dtoa_r+0x93c>)
 8006b30:	f7f9 fcd2 	bl	80004d8 <__aeabi_dmul>
 8006b34:	2200      	movs	r2, #0
 8006b36:	2300      	movs	r3, #0
 8006b38:	4606      	mov	r6, r0
 8006b3a:	460f      	mov	r7, r1
 8006b3c:	f7f9 ff34 	bl	80009a8 <__aeabi_dcmpeq>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d09e      	beq.n	8006a82 <_dtoa_r+0x62a>
 8006b44:	e7cf      	b.n	8006ae6 <_dtoa_r+0x68e>
 8006b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b48:	2a00      	cmp	r2, #0
 8006b4a:	f000 8088 	beq.w	8006c5e <_dtoa_r+0x806>
 8006b4e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006b50:	2a01      	cmp	r2, #1
 8006b52:	dc6d      	bgt.n	8006c30 <_dtoa_r+0x7d8>
 8006b54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b56:	2a00      	cmp	r2, #0
 8006b58:	d066      	beq.n	8006c28 <_dtoa_r+0x7d0>
 8006b5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b5e:	464d      	mov	r5, r9
 8006b60:	9e08      	ldr	r6, [sp, #32]
 8006b62:	9a07      	ldr	r2, [sp, #28]
 8006b64:	2101      	movs	r1, #1
 8006b66:	441a      	add	r2, r3
 8006b68:	4620      	mov	r0, r4
 8006b6a:	4499      	add	r9, r3
 8006b6c:	9207      	str	r2, [sp, #28]
 8006b6e:	f000 fea4 	bl	80078ba <__i2b>
 8006b72:	4607      	mov	r7, r0
 8006b74:	2d00      	cmp	r5, #0
 8006b76:	dd0b      	ble.n	8006b90 <_dtoa_r+0x738>
 8006b78:	9b07      	ldr	r3, [sp, #28]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	dd08      	ble.n	8006b90 <_dtoa_r+0x738>
 8006b7e:	42ab      	cmp	r3, r5
 8006b80:	bfa8      	it	ge
 8006b82:	462b      	movge	r3, r5
 8006b84:	9a07      	ldr	r2, [sp, #28]
 8006b86:	eba9 0903 	sub.w	r9, r9, r3
 8006b8a:	1aed      	subs	r5, r5, r3
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	9307      	str	r3, [sp, #28]
 8006b90:	9b08      	ldr	r3, [sp, #32]
 8006b92:	b1eb      	cbz	r3, 8006bd0 <_dtoa_r+0x778>
 8006b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d065      	beq.n	8006c66 <_dtoa_r+0x80e>
 8006b9a:	b18e      	cbz	r6, 8006bc0 <_dtoa_r+0x768>
 8006b9c:	4639      	mov	r1, r7
 8006b9e:	4632      	mov	r2, r6
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f000 ff29 	bl	80079f8 <__pow5mult>
 8006ba6:	465a      	mov	r2, fp
 8006ba8:	4601      	mov	r1, r0
 8006baa:	4607      	mov	r7, r0
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 fe8d 	bl	80078cc <__multiply>
 8006bb2:	4659      	mov	r1, fp
 8006bb4:	900a      	str	r0, [sp, #40]	; 0x28
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f000 fda1 	bl	80076fe <_Bfree>
 8006bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bbe:	469b      	mov	fp, r3
 8006bc0:	9b08      	ldr	r3, [sp, #32]
 8006bc2:	1b9a      	subs	r2, r3, r6
 8006bc4:	d004      	beq.n	8006bd0 <_dtoa_r+0x778>
 8006bc6:	4659      	mov	r1, fp
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 ff15 	bl	80079f8 <__pow5mult>
 8006bce:	4683      	mov	fp, r0
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 fe71 	bl	80078ba <__i2b>
 8006bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bda:	4606      	mov	r6, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 81c6 	beq.w	8006f6e <_dtoa_r+0xb16>
 8006be2:	461a      	mov	r2, r3
 8006be4:	4601      	mov	r1, r0
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 ff06 	bl	80079f8 <__pow5mult>
 8006bec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006bee:	4606      	mov	r6, r0
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	dc3e      	bgt.n	8006c72 <_dtoa_r+0x81a>
 8006bf4:	9b02      	ldr	r3, [sp, #8]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d137      	bne.n	8006c6a <_dtoa_r+0x812>
 8006bfa:	9b03      	ldr	r3, [sp, #12]
 8006bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d134      	bne.n	8006c6e <_dtoa_r+0x816>
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c0a:	0d1b      	lsrs	r3, r3, #20
 8006c0c:	051b      	lsls	r3, r3, #20
 8006c0e:	b12b      	cbz	r3, 8006c1c <_dtoa_r+0x7c4>
 8006c10:	9b07      	ldr	r3, [sp, #28]
 8006c12:	f109 0901 	add.w	r9, r9, #1
 8006c16:	3301      	adds	r3, #1
 8006c18:	9307      	str	r3, [sp, #28]
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	9308      	str	r3, [sp, #32]
 8006c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d128      	bne.n	8006c76 <_dtoa_r+0x81e>
 8006c24:	2001      	movs	r0, #1
 8006c26:	e02e      	b.n	8006c86 <_dtoa_r+0x82e>
 8006c28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c2a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c2e:	e796      	b.n	8006b5e <_dtoa_r+0x706>
 8006c30:	9b08      	ldr	r3, [sp, #32]
 8006c32:	f108 36ff 	add.w	r6, r8, #4294967295
 8006c36:	42b3      	cmp	r3, r6
 8006c38:	bfb7      	itett	lt
 8006c3a:	9b08      	ldrlt	r3, [sp, #32]
 8006c3c:	1b9e      	subge	r6, r3, r6
 8006c3e:	1af2      	sublt	r2, r6, r3
 8006c40:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006c42:	bfbf      	itttt	lt
 8006c44:	9608      	strlt	r6, [sp, #32]
 8006c46:	189b      	addlt	r3, r3, r2
 8006c48:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006c4a:	2600      	movlt	r6, #0
 8006c4c:	f1b8 0f00 	cmp.w	r8, #0
 8006c50:	bfb9      	ittee	lt
 8006c52:	eba9 0508 	sublt.w	r5, r9, r8
 8006c56:	2300      	movlt	r3, #0
 8006c58:	464d      	movge	r5, r9
 8006c5a:	4643      	movge	r3, r8
 8006c5c:	e781      	b.n	8006b62 <_dtoa_r+0x70a>
 8006c5e:	9e08      	ldr	r6, [sp, #32]
 8006c60:	464d      	mov	r5, r9
 8006c62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006c64:	e786      	b.n	8006b74 <_dtoa_r+0x71c>
 8006c66:	9a08      	ldr	r2, [sp, #32]
 8006c68:	e7ad      	b.n	8006bc6 <_dtoa_r+0x76e>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	e7d6      	b.n	8006c1c <_dtoa_r+0x7c4>
 8006c6e:	9b02      	ldr	r3, [sp, #8]
 8006c70:	e7d4      	b.n	8006c1c <_dtoa_r+0x7c4>
 8006c72:	2300      	movs	r3, #0
 8006c74:	9308      	str	r3, [sp, #32]
 8006c76:	6933      	ldr	r3, [r6, #16]
 8006c78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c7c:	6918      	ldr	r0, [r3, #16]
 8006c7e:	f000 fdce 	bl	800781e <__hi0bits>
 8006c82:	f1c0 0020 	rsb	r0, r0, #32
 8006c86:	9b07      	ldr	r3, [sp, #28]
 8006c88:	4418      	add	r0, r3
 8006c8a:	f010 001f 	ands.w	r0, r0, #31
 8006c8e:	d047      	beq.n	8006d20 <_dtoa_r+0x8c8>
 8006c90:	f1c0 0320 	rsb	r3, r0, #32
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	dd3b      	ble.n	8006d10 <_dtoa_r+0x8b8>
 8006c98:	9b07      	ldr	r3, [sp, #28]
 8006c9a:	f1c0 001c 	rsb	r0, r0, #28
 8006c9e:	4481      	add	r9, r0
 8006ca0:	4405      	add	r5, r0
 8006ca2:	4403      	add	r3, r0
 8006ca4:	9307      	str	r3, [sp, #28]
 8006ca6:	f1b9 0f00 	cmp.w	r9, #0
 8006caa:	dd05      	ble.n	8006cb8 <_dtoa_r+0x860>
 8006cac:	4659      	mov	r1, fp
 8006cae:	464a      	mov	r2, r9
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f000 feef 	bl	8007a94 <__lshift>
 8006cb6:	4683      	mov	fp, r0
 8006cb8:	9b07      	ldr	r3, [sp, #28]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	dd05      	ble.n	8006cca <_dtoa_r+0x872>
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 fee6 	bl	8007a94 <__lshift>
 8006cc8:	4606      	mov	r6, r0
 8006cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ccc:	b353      	cbz	r3, 8006d24 <_dtoa_r+0x8cc>
 8006cce:	4631      	mov	r1, r6
 8006cd0:	4658      	mov	r0, fp
 8006cd2:	f000 ff33 	bl	8007b3c <__mcmp>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	da24      	bge.n	8006d24 <_dtoa_r+0x8cc>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	4659      	mov	r1, fp
 8006cde:	220a      	movs	r2, #10
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f000 fd23 	bl	800772c <__multadd>
 8006ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cec:	4683      	mov	fp, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 8144 	beq.w	8006f7c <_dtoa_r+0xb24>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	220a      	movs	r2, #10
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f000 fd16 	bl	800772c <__multadd>
 8006d00:	9b04      	ldr	r3, [sp, #16]
 8006d02:	4607      	mov	r7, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	dc4d      	bgt.n	8006da4 <_dtoa_r+0x94c>
 8006d08:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	dd4a      	ble.n	8006da4 <_dtoa_r+0x94c>
 8006d0e:	e011      	b.n	8006d34 <_dtoa_r+0x8dc>
 8006d10:	d0c9      	beq.n	8006ca6 <_dtoa_r+0x84e>
 8006d12:	9a07      	ldr	r2, [sp, #28]
 8006d14:	331c      	adds	r3, #28
 8006d16:	441a      	add	r2, r3
 8006d18:	4499      	add	r9, r3
 8006d1a:	441d      	add	r5, r3
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	e7c1      	b.n	8006ca4 <_dtoa_r+0x84c>
 8006d20:	4603      	mov	r3, r0
 8006d22:	e7f6      	b.n	8006d12 <_dtoa_r+0x8ba>
 8006d24:	f1b8 0f00 	cmp.w	r8, #0
 8006d28:	dc36      	bgt.n	8006d98 <_dtoa_r+0x940>
 8006d2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	dd33      	ble.n	8006d98 <_dtoa_r+0x940>
 8006d30:	f8cd 8010 	str.w	r8, [sp, #16]
 8006d34:	9b04      	ldr	r3, [sp, #16]
 8006d36:	b963      	cbnz	r3, 8006d52 <_dtoa_r+0x8fa>
 8006d38:	4631      	mov	r1, r6
 8006d3a:	2205      	movs	r2, #5
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f000 fcf5 	bl	800772c <__multadd>
 8006d42:	4601      	mov	r1, r0
 8006d44:	4606      	mov	r6, r0
 8006d46:	4658      	mov	r0, fp
 8006d48:	f000 fef8 	bl	8007b3c <__mcmp>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	f73f add3 	bgt.w	80068f8 <_dtoa_r+0x4a0>
 8006d52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d54:	9d06      	ldr	r5, [sp, #24]
 8006d56:	ea6f 0a03 	mvn.w	sl, r3
 8006d5a:	f04f 0900 	mov.w	r9, #0
 8006d5e:	4631      	mov	r1, r6
 8006d60:	4620      	mov	r0, r4
 8006d62:	f000 fccc 	bl	80076fe <_Bfree>
 8006d66:	2f00      	cmp	r7, #0
 8006d68:	f43f aebd 	beq.w	8006ae6 <_dtoa_r+0x68e>
 8006d6c:	f1b9 0f00 	cmp.w	r9, #0
 8006d70:	d005      	beq.n	8006d7e <_dtoa_r+0x926>
 8006d72:	45b9      	cmp	r9, r7
 8006d74:	d003      	beq.n	8006d7e <_dtoa_r+0x926>
 8006d76:	4649      	mov	r1, r9
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f000 fcc0 	bl	80076fe <_Bfree>
 8006d7e:	4639      	mov	r1, r7
 8006d80:	4620      	mov	r0, r4
 8006d82:	f000 fcbc 	bl	80076fe <_Bfree>
 8006d86:	e6ae      	b.n	8006ae6 <_dtoa_r+0x68e>
 8006d88:	2600      	movs	r6, #0
 8006d8a:	4637      	mov	r7, r6
 8006d8c:	e7e1      	b.n	8006d52 <_dtoa_r+0x8fa>
 8006d8e:	46ba      	mov	sl, r7
 8006d90:	4637      	mov	r7, r6
 8006d92:	e5b1      	b.n	80068f8 <_dtoa_r+0x4a0>
 8006d94:	40240000 	.word	0x40240000
 8006d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d9a:	f8cd 8010 	str.w	r8, [sp, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 80f3 	beq.w	8006f8a <_dtoa_r+0xb32>
 8006da4:	2d00      	cmp	r5, #0
 8006da6:	dd05      	ble.n	8006db4 <_dtoa_r+0x95c>
 8006da8:	4639      	mov	r1, r7
 8006daa:	462a      	mov	r2, r5
 8006dac:	4620      	mov	r0, r4
 8006dae:	f000 fe71 	bl	8007a94 <__lshift>
 8006db2:	4607      	mov	r7, r0
 8006db4:	9b08      	ldr	r3, [sp, #32]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d04c      	beq.n	8006e54 <_dtoa_r+0x9fc>
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f000 fc6a 	bl	8007696 <_Balloc>
 8006dc2:	4605      	mov	r5, r0
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	f107 010c 	add.w	r1, r7, #12
 8006dca:	3202      	adds	r2, #2
 8006dcc:	0092      	lsls	r2, r2, #2
 8006dce:	300c      	adds	r0, #12
 8006dd0:	f000 fc56 	bl	8007680 <memcpy>
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f000 fe5b 	bl	8007a94 <__lshift>
 8006dde:	46b9      	mov	r9, r7
 8006de0:	4607      	mov	r7, r0
 8006de2:	9b06      	ldr	r3, [sp, #24]
 8006de4:	9307      	str	r3, [sp, #28]
 8006de6:	9b02      	ldr	r3, [sp, #8]
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	9308      	str	r3, [sp, #32]
 8006dee:	4631      	mov	r1, r6
 8006df0:	4658      	mov	r0, fp
 8006df2:	f7ff faa3 	bl	800633c <quorem>
 8006df6:	4649      	mov	r1, r9
 8006df8:	4605      	mov	r5, r0
 8006dfa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006dfe:	4658      	mov	r0, fp
 8006e00:	f000 fe9c 	bl	8007b3c <__mcmp>
 8006e04:	463a      	mov	r2, r7
 8006e06:	9002      	str	r0, [sp, #8]
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f000 feb0 	bl	8007b70 <__mdiff>
 8006e10:	68c3      	ldr	r3, [r0, #12]
 8006e12:	4602      	mov	r2, r0
 8006e14:	bb03      	cbnz	r3, 8006e58 <_dtoa_r+0xa00>
 8006e16:	4601      	mov	r1, r0
 8006e18:	9009      	str	r0, [sp, #36]	; 0x24
 8006e1a:	4658      	mov	r0, fp
 8006e1c:	f000 fe8e 	bl	8007b3c <__mcmp>
 8006e20:	4603      	mov	r3, r0
 8006e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e24:	4611      	mov	r1, r2
 8006e26:	4620      	mov	r0, r4
 8006e28:	9309      	str	r3, [sp, #36]	; 0x24
 8006e2a:	f000 fc68 	bl	80076fe <_Bfree>
 8006e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e30:	b9a3      	cbnz	r3, 8006e5c <_dtoa_r+0xa04>
 8006e32:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006e34:	b992      	cbnz	r2, 8006e5c <_dtoa_r+0xa04>
 8006e36:	9a08      	ldr	r2, [sp, #32]
 8006e38:	b982      	cbnz	r2, 8006e5c <_dtoa_r+0xa04>
 8006e3a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006e3e:	d029      	beq.n	8006e94 <_dtoa_r+0xa3c>
 8006e40:	9b02      	ldr	r3, [sp, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	dd01      	ble.n	8006e4a <_dtoa_r+0x9f2>
 8006e46:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006e4a:	9b07      	ldr	r3, [sp, #28]
 8006e4c:	1c5d      	adds	r5, r3, #1
 8006e4e:	f883 8000 	strb.w	r8, [r3]
 8006e52:	e784      	b.n	8006d5e <_dtoa_r+0x906>
 8006e54:	4638      	mov	r0, r7
 8006e56:	e7c2      	b.n	8006dde <_dtoa_r+0x986>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e7e3      	b.n	8006e24 <_dtoa_r+0x9cc>
 8006e5c:	9a02      	ldr	r2, [sp, #8]
 8006e5e:	2a00      	cmp	r2, #0
 8006e60:	db04      	blt.n	8006e6c <_dtoa_r+0xa14>
 8006e62:	d123      	bne.n	8006eac <_dtoa_r+0xa54>
 8006e64:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006e66:	bb0a      	cbnz	r2, 8006eac <_dtoa_r+0xa54>
 8006e68:	9a08      	ldr	r2, [sp, #32]
 8006e6a:	b9fa      	cbnz	r2, 8006eac <_dtoa_r+0xa54>
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	ddec      	ble.n	8006e4a <_dtoa_r+0x9f2>
 8006e70:	4659      	mov	r1, fp
 8006e72:	2201      	movs	r2, #1
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 fe0d 	bl	8007a94 <__lshift>
 8006e7a:	4631      	mov	r1, r6
 8006e7c:	4683      	mov	fp, r0
 8006e7e:	f000 fe5d 	bl	8007b3c <__mcmp>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	dc03      	bgt.n	8006e8e <_dtoa_r+0xa36>
 8006e86:	d1e0      	bne.n	8006e4a <_dtoa_r+0x9f2>
 8006e88:	f018 0f01 	tst.w	r8, #1
 8006e8c:	d0dd      	beq.n	8006e4a <_dtoa_r+0x9f2>
 8006e8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006e92:	d1d8      	bne.n	8006e46 <_dtoa_r+0x9ee>
 8006e94:	9b07      	ldr	r3, [sp, #28]
 8006e96:	9a07      	ldr	r2, [sp, #28]
 8006e98:	1c5d      	adds	r5, r3, #1
 8006e9a:	2339      	movs	r3, #57	; 0x39
 8006e9c:	7013      	strb	r3, [r2, #0]
 8006e9e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ea2:	1e6a      	subs	r2, r5, #1
 8006ea4:	2b39      	cmp	r3, #57	; 0x39
 8006ea6:	d04d      	beq.n	8006f44 <_dtoa_r+0xaec>
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	e052      	b.n	8006f52 <_dtoa_r+0xafa>
 8006eac:	9a07      	ldr	r2, [sp, #28]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f102 0501 	add.w	r5, r2, #1
 8006eb4:	dd06      	ble.n	8006ec4 <_dtoa_r+0xa6c>
 8006eb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006eba:	d0eb      	beq.n	8006e94 <_dtoa_r+0xa3c>
 8006ebc:	f108 0801 	add.w	r8, r8, #1
 8006ec0:	9b07      	ldr	r3, [sp, #28]
 8006ec2:	e7c4      	b.n	8006e4e <_dtoa_r+0x9f6>
 8006ec4:	9b06      	ldr	r3, [sp, #24]
 8006ec6:	9a04      	ldr	r2, [sp, #16]
 8006ec8:	1aeb      	subs	r3, r5, r3
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006ed0:	d021      	beq.n	8006f16 <_dtoa_r+0xabe>
 8006ed2:	4659      	mov	r1, fp
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	220a      	movs	r2, #10
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f000 fc27 	bl	800772c <__multadd>
 8006ede:	45b9      	cmp	r9, r7
 8006ee0:	4683      	mov	fp, r0
 8006ee2:	f04f 0300 	mov.w	r3, #0
 8006ee6:	f04f 020a 	mov.w	r2, #10
 8006eea:	4649      	mov	r1, r9
 8006eec:	4620      	mov	r0, r4
 8006eee:	d105      	bne.n	8006efc <_dtoa_r+0xaa4>
 8006ef0:	f000 fc1c 	bl	800772c <__multadd>
 8006ef4:	4681      	mov	r9, r0
 8006ef6:	4607      	mov	r7, r0
 8006ef8:	9507      	str	r5, [sp, #28]
 8006efa:	e778      	b.n	8006dee <_dtoa_r+0x996>
 8006efc:	f000 fc16 	bl	800772c <__multadd>
 8006f00:	4639      	mov	r1, r7
 8006f02:	4681      	mov	r9, r0
 8006f04:	2300      	movs	r3, #0
 8006f06:	220a      	movs	r2, #10
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f000 fc0f 	bl	800772c <__multadd>
 8006f0e:	4607      	mov	r7, r0
 8006f10:	e7f2      	b.n	8006ef8 <_dtoa_r+0xaa0>
 8006f12:	f04f 0900 	mov.w	r9, #0
 8006f16:	4659      	mov	r1, fp
 8006f18:	2201      	movs	r2, #1
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 fdba 	bl	8007a94 <__lshift>
 8006f20:	4631      	mov	r1, r6
 8006f22:	4683      	mov	fp, r0
 8006f24:	f000 fe0a 	bl	8007b3c <__mcmp>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	dcb8      	bgt.n	8006e9e <_dtoa_r+0xa46>
 8006f2c:	d102      	bne.n	8006f34 <_dtoa_r+0xadc>
 8006f2e:	f018 0f01 	tst.w	r8, #1
 8006f32:	d1b4      	bne.n	8006e9e <_dtoa_r+0xa46>
 8006f34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f38:	1e6a      	subs	r2, r5, #1
 8006f3a:	2b30      	cmp	r3, #48	; 0x30
 8006f3c:	f47f af0f 	bne.w	8006d5e <_dtoa_r+0x906>
 8006f40:	4615      	mov	r5, r2
 8006f42:	e7f7      	b.n	8006f34 <_dtoa_r+0xadc>
 8006f44:	9b06      	ldr	r3, [sp, #24]
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d105      	bne.n	8006f56 <_dtoa_r+0xafe>
 8006f4a:	2331      	movs	r3, #49	; 0x31
 8006f4c:	9a06      	ldr	r2, [sp, #24]
 8006f4e:	f10a 0a01 	add.w	sl, sl, #1
 8006f52:	7013      	strb	r3, [r2, #0]
 8006f54:	e703      	b.n	8006d5e <_dtoa_r+0x906>
 8006f56:	4615      	mov	r5, r2
 8006f58:	e7a1      	b.n	8006e9e <_dtoa_r+0xa46>
 8006f5a:	4b17      	ldr	r3, [pc, #92]	; (8006fb8 <_dtoa_r+0xb60>)
 8006f5c:	f7ff bae1 	b.w	8006522 <_dtoa_r+0xca>
 8006f60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f47f aabb 	bne.w	80064de <_dtoa_r+0x86>
 8006f68:	4b14      	ldr	r3, [pc, #80]	; (8006fbc <_dtoa_r+0xb64>)
 8006f6a:	f7ff bada 	b.w	8006522 <_dtoa_r+0xca>
 8006f6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	f77f ae3f 	ble.w	8006bf4 <_dtoa_r+0x79c>
 8006f76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f78:	9308      	str	r3, [sp, #32]
 8006f7a:	e653      	b.n	8006c24 <_dtoa_r+0x7cc>
 8006f7c:	9b04      	ldr	r3, [sp, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	dc03      	bgt.n	8006f8a <_dtoa_r+0xb32>
 8006f82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	f73f aed5 	bgt.w	8006d34 <_dtoa_r+0x8dc>
 8006f8a:	9d06      	ldr	r5, [sp, #24]
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	4658      	mov	r0, fp
 8006f90:	f7ff f9d4 	bl	800633c <quorem>
 8006f94:	9b06      	ldr	r3, [sp, #24]
 8006f96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006f9a:	f805 8b01 	strb.w	r8, [r5], #1
 8006f9e:	9a04      	ldr	r2, [sp, #16]
 8006fa0:	1aeb      	subs	r3, r5, r3
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	ddb5      	ble.n	8006f12 <_dtoa_r+0xaba>
 8006fa6:	4659      	mov	r1, fp
 8006fa8:	2300      	movs	r3, #0
 8006faa:	220a      	movs	r2, #10
 8006fac:	4620      	mov	r0, r4
 8006fae:	f000 fbbd 	bl	800772c <__multadd>
 8006fb2:	4683      	mov	fp, r0
 8006fb4:	e7ea      	b.n	8006f8c <_dtoa_r+0xb34>
 8006fb6:	bf00      	nop
 8006fb8:	080083ec 	.word	0x080083ec
 8006fbc:	08008460 	.word	0x08008460

08006fc0 <rshift>:
 8006fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fc2:	6906      	ldr	r6, [r0, #16]
 8006fc4:	114b      	asrs	r3, r1, #5
 8006fc6:	429e      	cmp	r6, r3
 8006fc8:	f100 0414 	add.w	r4, r0, #20
 8006fcc:	dd31      	ble.n	8007032 <rshift+0x72>
 8006fce:	f011 011f 	ands.w	r1, r1, #31
 8006fd2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006fd6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006fda:	d108      	bne.n	8006fee <rshift+0x2e>
 8006fdc:	4621      	mov	r1, r4
 8006fde:	42b2      	cmp	r2, r6
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	d211      	bcs.n	8007008 <rshift+0x48>
 8006fe4:	f852 3b04 	ldr.w	r3, [r2], #4
 8006fe8:	f841 3b04 	str.w	r3, [r1], #4
 8006fec:	e7f7      	b.n	8006fde <rshift+0x1e>
 8006fee:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006ff2:	4623      	mov	r3, r4
 8006ff4:	f1c1 0c20 	rsb	ip, r1, #32
 8006ff8:	40cd      	lsrs	r5, r1
 8006ffa:	3204      	adds	r2, #4
 8006ffc:	42b2      	cmp	r2, r6
 8006ffe:	4617      	mov	r7, r2
 8007000:	d30d      	bcc.n	800701e <rshift+0x5e>
 8007002:	601d      	str	r5, [r3, #0]
 8007004:	b105      	cbz	r5, 8007008 <rshift+0x48>
 8007006:	3304      	adds	r3, #4
 8007008:	42a3      	cmp	r3, r4
 800700a:	eba3 0204 	sub.w	r2, r3, r4
 800700e:	bf08      	it	eq
 8007010:	2300      	moveq	r3, #0
 8007012:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007016:	6102      	str	r2, [r0, #16]
 8007018:	bf08      	it	eq
 800701a:	6143      	streq	r3, [r0, #20]
 800701c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800701e:	683f      	ldr	r7, [r7, #0]
 8007020:	fa07 f70c 	lsl.w	r7, r7, ip
 8007024:	433d      	orrs	r5, r7
 8007026:	f843 5b04 	str.w	r5, [r3], #4
 800702a:	f852 5b04 	ldr.w	r5, [r2], #4
 800702e:	40cd      	lsrs	r5, r1
 8007030:	e7e4      	b.n	8006ffc <rshift+0x3c>
 8007032:	4623      	mov	r3, r4
 8007034:	e7e8      	b.n	8007008 <rshift+0x48>

08007036 <__hexdig_fun>:
 8007036:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800703a:	2b09      	cmp	r3, #9
 800703c:	d802      	bhi.n	8007044 <__hexdig_fun+0xe>
 800703e:	3820      	subs	r0, #32
 8007040:	b2c0      	uxtb	r0, r0
 8007042:	4770      	bx	lr
 8007044:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007048:	2b05      	cmp	r3, #5
 800704a:	d801      	bhi.n	8007050 <__hexdig_fun+0x1a>
 800704c:	3847      	subs	r0, #71	; 0x47
 800704e:	e7f7      	b.n	8007040 <__hexdig_fun+0xa>
 8007050:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007054:	2b05      	cmp	r3, #5
 8007056:	d801      	bhi.n	800705c <__hexdig_fun+0x26>
 8007058:	3827      	subs	r0, #39	; 0x27
 800705a:	e7f1      	b.n	8007040 <__hexdig_fun+0xa>
 800705c:	2000      	movs	r0, #0
 800705e:	4770      	bx	lr

08007060 <__gethex>:
 8007060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	b08b      	sub	sp, #44	; 0x2c
 8007066:	9002      	str	r0, [sp, #8]
 8007068:	9816      	ldr	r0, [sp, #88]	; 0x58
 800706a:	468a      	mov	sl, r1
 800706c:	4690      	mov	r8, r2
 800706e:	9306      	str	r3, [sp, #24]
 8007070:	f000 face 	bl	8007610 <__localeconv_l>
 8007074:	6803      	ldr	r3, [r0, #0]
 8007076:	f04f 0b00 	mov.w	fp, #0
 800707a:	4618      	mov	r0, r3
 800707c:	9303      	str	r3, [sp, #12]
 800707e:	f7f9 f867 	bl	8000150 <strlen>
 8007082:	9b03      	ldr	r3, [sp, #12]
 8007084:	9001      	str	r0, [sp, #4]
 8007086:	4403      	add	r3, r0
 8007088:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800708c:	9307      	str	r3, [sp, #28]
 800708e:	f8da 3000 	ldr.w	r3, [sl]
 8007092:	3302      	adds	r3, #2
 8007094:	461f      	mov	r7, r3
 8007096:	f813 0b01 	ldrb.w	r0, [r3], #1
 800709a:	2830      	cmp	r0, #48	; 0x30
 800709c:	d06c      	beq.n	8007178 <__gethex+0x118>
 800709e:	f7ff ffca 	bl	8007036 <__hexdig_fun>
 80070a2:	4604      	mov	r4, r0
 80070a4:	2800      	cmp	r0, #0
 80070a6:	d16a      	bne.n	800717e <__gethex+0x11e>
 80070a8:	9a01      	ldr	r2, [sp, #4]
 80070aa:	9903      	ldr	r1, [sp, #12]
 80070ac:	4638      	mov	r0, r7
 80070ae:	f001 f901 	bl	80082b4 <strncmp>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d166      	bne.n	8007184 <__gethex+0x124>
 80070b6:	9b01      	ldr	r3, [sp, #4]
 80070b8:	5cf8      	ldrb	r0, [r7, r3]
 80070ba:	18fe      	adds	r6, r7, r3
 80070bc:	f7ff ffbb 	bl	8007036 <__hexdig_fun>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d062      	beq.n	800718a <__gethex+0x12a>
 80070c4:	4633      	mov	r3, r6
 80070c6:	7818      	ldrb	r0, [r3, #0]
 80070c8:	461f      	mov	r7, r3
 80070ca:	2830      	cmp	r0, #48	; 0x30
 80070cc:	f103 0301 	add.w	r3, r3, #1
 80070d0:	d0f9      	beq.n	80070c6 <__gethex+0x66>
 80070d2:	f7ff ffb0 	bl	8007036 <__hexdig_fun>
 80070d6:	fab0 f580 	clz	r5, r0
 80070da:	4634      	mov	r4, r6
 80070dc:	f04f 0b01 	mov.w	fp, #1
 80070e0:	096d      	lsrs	r5, r5, #5
 80070e2:	463a      	mov	r2, r7
 80070e4:	4616      	mov	r6, r2
 80070e6:	7830      	ldrb	r0, [r6, #0]
 80070e8:	3201      	adds	r2, #1
 80070ea:	f7ff ffa4 	bl	8007036 <__hexdig_fun>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d1f8      	bne.n	80070e4 <__gethex+0x84>
 80070f2:	9a01      	ldr	r2, [sp, #4]
 80070f4:	9903      	ldr	r1, [sp, #12]
 80070f6:	4630      	mov	r0, r6
 80070f8:	f001 f8dc 	bl	80082b4 <strncmp>
 80070fc:	b950      	cbnz	r0, 8007114 <__gethex+0xb4>
 80070fe:	b954      	cbnz	r4, 8007116 <__gethex+0xb6>
 8007100:	9b01      	ldr	r3, [sp, #4]
 8007102:	18f4      	adds	r4, r6, r3
 8007104:	4622      	mov	r2, r4
 8007106:	4616      	mov	r6, r2
 8007108:	7830      	ldrb	r0, [r6, #0]
 800710a:	3201      	adds	r2, #1
 800710c:	f7ff ff93 	bl	8007036 <__hexdig_fun>
 8007110:	2800      	cmp	r0, #0
 8007112:	d1f8      	bne.n	8007106 <__gethex+0xa6>
 8007114:	b10c      	cbz	r4, 800711a <__gethex+0xba>
 8007116:	1ba4      	subs	r4, r4, r6
 8007118:	00a4      	lsls	r4, r4, #2
 800711a:	7833      	ldrb	r3, [r6, #0]
 800711c:	2b50      	cmp	r3, #80	; 0x50
 800711e:	d001      	beq.n	8007124 <__gethex+0xc4>
 8007120:	2b70      	cmp	r3, #112	; 0x70
 8007122:	d140      	bne.n	80071a6 <__gethex+0x146>
 8007124:	7873      	ldrb	r3, [r6, #1]
 8007126:	2b2b      	cmp	r3, #43	; 0x2b
 8007128:	d031      	beq.n	800718e <__gethex+0x12e>
 800712a:	2b2d      	cmp	r3, #45	; 0x2d
 800712c:	d033      	beq.n	8007196 <__gethex+0x136>
 800712e:	f04f 0900 	mov.w	r9, #0
 8007132:	1c71      	adds	r1, r6, #1
 8007134:	7808      	ldrb	r0, [r1, #0]
 8007136:	f7ff ff7e 	bl	8007036 <__hexdig_fun>
 800713a:	1e43      	subs	r3, r0, #1
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b18      	cmp	r3, #24
 8007140:	d831      	bhi.n	80071a6 <__gethex+0x146>
 8007142:	f1a0 0210 	sub.w	r2, r0, #16
 8007146:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800714a:	f7ff ff74 	bl	8007036 <__hexdig_fun>
 800714e:	1e43      	subs	r3, r0, #1
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b18      	cmp	r3, #24
 8007154:	d922      	bls.n	800719c <__gethex+0x13c>
 8007156:	f1b9 0f00 	cmp.w	r9, #0
 800715a:	d000      	beq.n	800715e <__gethex+0xfe>
 800715c:	4252      	negs	r2, r2
 800715e:	4414      	add	r4, r2
 8007160:	f8ca 1000 	str.w	r1, [sl]
 8007164:	b30d      	cbz	r5, 80071aa <__gethex+0x14a>
 8007166:	f1bb 0f00 	cmp.w	fp, #0
 800716a:	bf0c      	ite	eq
 800716c:	2706      	moveq	r7, #6
 800716e:	2700      	movne	r7, #0
 8007170:	4638      	mov	r0, r7
 8007172:	b00b      	add	sp, #44	; 0x2c
 8007174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007178:	f10b 0b01 	add.w	fp, fp, #1
 800717c:	e78a      	b.n	8007094 <__gethex+0x34>
 800717e:	2500      	movs	r5, #0
 8007180:	462c      	mov	r4, r5
 8007182:	e7ae      	b.n	80070e2 <__gethex+0x82>
 8007184:	463e      	mov	r6, r7
 8007186:	2501      	movs	r5, #1
 8007188:	e7c7      	b.n	800711a <__gethex+0xba>
 800718a:	4604      	mov	r4, r0
 800718c:	e7fb      	b.n	8007186 <__gethex+0x126>
 800718e:	f04f 0900 	mov.w	r9, #0
 8007192:	1cb1      	adds	r1, r6, #2
 8007194:	e7ce      	b.n	8007134 <__gethex+0xd4>
 8007196:	f04f 0901 	mov.w	r9, #1
 800719a:	e7fa      	b.n	8007192 <__gethex+0x132>
 800719c:	230a      	movs	r3, #10
 800719e:	fb03 0202 	mla	r2, r3, r2, r0
 80071a2:	3a10      	subs	r2, #16
 80071a4:	e7cf      	b.n	8007146 <__gethex+0xe6>
 80071a6:	4631      	mov	r1, r6
 80071a8:	e7da      	b.n	8007160 <__gethex+0x100>
 80071aa:	4629      	mov	r1, r5
 80071ac:	1bf3      	subs	r3, r6, r7
 80071ae:	3b01      	subs	r3, #1
 80071b0:	2b07      	cmp	r3, #7
 80071b2:	dc49      	bgt.n	8007248 <__gethex+0x1e8>
 80071b4:	9802      	ldr	r0, [sp, #8]
 80071b6:	f000 fa6e 	bl	8007696 <_Balloc>
 80071ba:	f04f 0b00 	mov.w	fp, #0
 80071be:	4605      	mov	r5, r0
 80071c0:	46da      	mov	sl, fp
 80071c2:	9b01      	ldr	r3, [sp, #4]
 80071c4:	f100 0914 	add.w	r9, r0, #20
 80071c8:	f1c3 0301 	rsb	r3, r3, #1
 80071cc:	f8cd 9010 	str.w	r9, [sp, #16]
 80071d0:	9308      	str	r3, [sp, #32]
 80071d2:	42b7      	cmp	r7, r6
 80071d4:	d33b      	bcc.n	800724e <__gethex+0x1ee>
 80071d6:	9804      	ldr	r0, [sp, #16]
 80071d8:	f840 ab04 	str.w	sl, [r0], #4
 80071dc:	eba0 0009 	sub.w	r0, r0, r9
 80071e0:	1080      	asrs	r0, r0, #2
 80071e2:	6128      	str	r0, [r5, #16]
 80071e4:	0147      	lsls	r7, r0, #5
 80071e6:	4650      	mov	r0, sl
 80071e8:	f000 fb19 	bl	800781e <__hi0bits>
 80071ec:	f8d8 6000 	ldr.w	r6, [r8]
 80071f0:	1a3f      	subs	r7, r7, r0
 80071f2:	42b7      	cmp	r7, r6
 80071f4:	dd64      	ble.n	80072c0 <__gethex+0x260>
 80071f6:	1bbf      	subs	r7, r7, r6
 80071f8:	4639      	mov	r1, r7
 80071fa:	4628      	mov	r0, r5
 80071fc:	f000 fe23 	bl	8007e46 <__any_on>
 8007200:	4682      	mov	sl, r0
 8007202:	b178      	cbz	r0, 8007224 <__gethex+0x1c4>
 8007204:	f04f 0a01 	mov.w	sl, #1
 8007208:	1e7b      	subs	r3, r7, #1
 800720a:	1159      	asrs	r1, r3, #5
 800720c:	f003 021f 	and.w	r2, r3, #31
 8007210:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007214:	fa0a f202 	lsl.w	r2, sl, r2
 8007218:	420a      	tst	r2, r1
 800721a:	d003      	beq.n	8007224 <__gethex+0x1c4>
 800721c:	4553      	cmp	r3, sl
 800721e:	dc46      	bgt.n	80072ae <__gethex+0x24e>
 8007220:	f04f 0a02 	mov.w	sl, #2
 8007224:	4639      	mov	r1, r7
 8007226:	4628      	mov	r0, r5
 8007228:	f7ff feca 	bl	8006fc0 <rshift>
 800722c:	443c      	add	r4, r7
 800722e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007232:	42a3      	cmp	r3, r4
 8007234:	da52      	bge.n	80072dc <__gethex+0x27c>
 8007236:	4629      	mov	r1, r5
 8007238:	9802      	ldr	r0, [sp, #8]
 800723a:	f000 fa60 	bl	80076fe <_Bfree>
 800723e:	2300      	movs	r3, #0
 8007240:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007242:	27a3      	movs	r7, #163	; 0xa3
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	e793      	b.n	8007170 <__gethex+0x110>
 8007248:	3101      	adds	r1, #1
 800724a:	105b      	asrs	r3, r3, #1
 800724c:	e7b0      	b.n	80071b0 <__gethex+0x150>
 800724e:	1e73      	subs	r3, r6, #1
 8007250:	9305      	str	r3, [sp, #20]
 8007252:	9a07      	ldr	r2, [sp, #28]
 8007254:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007258:	4293      	cmp	r3, r2
 800725a:	d018      	beq.n	800728e <__gethex+0x22e>
 800725c:	f1bb 0f20 	cmp.w	fp, #32
 8007260:	d107      	bne.n	8007272 <__gethex+0x212>
 8007262:	9b04      	ldr	r3, [sp, #16]
 8007264:	f8c3 a000 	str.w	sl, [r3]
 8007268:	f04f 0a00 	mov.w	sl, #0
 800726c:	46d3      	mov	fp, sl
 800726e:	3304      	adds	r3, #4
 8007270:	9304      	str	r3, [sp, #16]
 8007272:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007276:	f7ff fede 	bl	8007036 <__hexdig_fun>
 800727a:	f000 000f 	and.w	r0, r0, #15
 800727e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007282:	ea4a 0a00 	orr.w	sl, sl, r0
 8007286:	f10b 0b04 	add.w	fp, fp, #4
 800728a:	9b05      	ldr	r3, [sp, #20]
 800728c:	e00d      	b.n	80072aa <__gethex+0x24a>
 800728e:	9b05      	ldr	r3, [sp, #20]
 8007290:	9a08      	ldr	r2, [sp, #32]
 8007292:	4413      	add	r3, r2
 8007294:	42bb      	cmp	r3, r7
 8007296:	d3e1      	bcc.n	800725c <__gethex+0x1fc>
 8007298:	4618      	mov	r0, r3
 800729a:	9a01      	ldr	r2, [sp, #4]
 800729c:	9903      	ldr	r1, [sp, #12]
 800729e:	9309      	str	r3, [sp, #36]	; 0x24
 80072a0:	f001 f808 	bl	80082b4 <strncmp>
 80072a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a6:	2800      	cmp	r0, #0
 80072a8:	d1d8      	bne.n	800725c <__gethex+0x1fc>
 80072aa:	461e      	mov	r6, r3
 80072ac:	e791      	b.n	80071d2 <__gethex+0x172>
 80072ae:	1eb9      	subs	r1, r7, #2
 80072b0:	4628      	mov	r0, r5
 80072b2:	f000 fdc8 	bl	8007e46 <__any_on>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d0b2      	beq.n	8007220 <__gethex+0x1c0>
 80072ba:	f04f 0a03 	mov.w	sl, #3
 80072be:	e7b1      	b.n	8007224 <__gethex+0x1c4>
 80072c0:	da09      	bge.n	80072d6 <__gethex+0x276>
 80072c2:	1bf7      	subs	r7, r6, r7
 80072c4:	4629      	mov	r1, r5
 80072c6:	463a      	mov	r2, r7
 80072c8:	9802      	ldr	r0, [sp, #8]
 80072ca:	f000 fbe3 	bl	8007a94 <__lshift>
 80072ce:	4605      	mov	r5, r0
 80072d0:	1be4      	subs	r4, r4, r7
 80072d2:	f100 0914 	add.w	r9, r0, #20
 80072d6:	f04f 0a00 	mov.w	sl, #0
 80072da:	e7a8      	b.n	800722e <__gethex+0x1ce>
 80072dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80072e0:	42a0      	cmp	r0, r4
 80072e2:	dd6b      	ble.n	80073bc <__gethex+0x35c>
 80072e4:	1b04      	subs	r4, r0, r4
 80072e6:	42a6      	cmp	r6, r4
 80072e8:	dc2e      	bgt.n	8007348 <__gethex+0x2e8>
 80072ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d022      	beq.n	8007338 <__gethex+0x2d8>
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d024      	beq.n	8007340 <__gethex+0x2e0>
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d115      	bne.n	8007326 <__gethex+0x2c6>
 80072fa:	42a6      	cmp	r6, r4
 80072fc:	d113      	bne.n	8007326 <__gethex+0x2c6>
 80072fe:	2e01      	cmp	r6, #1
 8007300:	dc0b      	bgt.n	800731a <__gethex+0x2ba>
 8007302:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007306:	9a06      	ldr	r2, [sp, #24]
 8007308:	2762      	movs	r7, #98	; 0x62
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	2301      	movs	r3, #1
 800730e:	612b      	str	r3, [r5, #16]
 8007310:	f8c9 3000 	str.w	r3, [r9]
 8007314:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007316:	601d      	str	r5, [r3, #0]
 8007318:	e72a      	b.n	8007170 <__gethex+0x110>
 800731a:	1e71      	subs	r1, r6, #1
 800731c:	4628      	mov	r0, r5
 800731e:	f000 fd92 	bl	8007e46 <__any_on>
 8007322:	2800      	cmp	r0, #0
 8007324:	d1ed      	bne.n	8007302 <__gethex+0x2a2>
 8007326:	4629      	mov	r1, r5
 8007328:	9802      	ldr	r0, [sp, #8]
 800732a:	f000 f9e8 	bl	80076fe <_Bfree>
 800732e:	2300      	movs	r3, #0
 8007330:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007332:	2750      	movs	r7, #80	; 0x50
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	e71b      	b.n	8007170 <__gethex+0x110>
 8007338:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0e1      	beq.n	8007302 <__gethex+0x2a2>
 800733e:	e7f2      	b.n	8007326 <__gethex+0x2c6>
 8007340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1dd      	bne.n	8007302 <__gethex+0x2a2>
 8007346:	e7ee      	b.n	8007326 <__gethex+0x2c6>
 8007348:	1e67      	subs	r7, r4, #1
 800734a:	f1ba 0f00 	cmp.w	sl, #0
 800734e:	d132      	bne.n	80073b6 <__gethex+0x356>
 8007350:	b127      	cbz	r7, 800735c <__gethex+0x2fc>
 8007352:	4639      	mov	r1, r7
 8007354:	4628      	mov	r0, r5
 8007356:	f000 fd76 	bl	8007e46 <__any_on>
 800735a:	4682      	mov	sl, r0
 800735c:	2301      	movs	r3, #1
 800735e:	117a      	asrs	r2, r7, #5
 8007360:	f007 071f 	and.w	r7, r7, #31
 8007364:	fa03 f707 	lsl.w	r7, r3, r7
 8007368:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800736c:	4621      	mov	r1, r4
 800736e:	421f      	tst	r7, r3
 8007370:	f04f 0702 	mov.w	r7, #2
 8007374:	4628      	mov	r0, r5
 8007376:	bf18      	it	ne
 8007378:	f04a 0a02 	orrne.w	sl, sl, #2
 800737c:	1b36      	subs	r6, r6, r4
 800737e:	f7ff fe1f 	bl	8006fc0 <rshift>
 8007382:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007386:	f1ba 0f00 	cmp.w	sl, #0
 800738a:	d048      	beq.n	800741e <__gethex+0x3be>
 800738c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007390:	2b02      	cmp	r3, #2
 8007392:	d015      	beq.n	80073c0 <__gethex+0x360>
 8007394:	2b03      	cmp	r3, #3
 8007396:	d017      	beq.n	80073c8 <__gethex+0x368>
 8007398:	2b01      	cmp	r3, #1
 800739a:	d109      	bne.n	80073b0 <__gethex+0x350>
 800739c:	f01a 0f02 	tst.w	sl, #2
 80073a0:	d006      	beq.n	80073b0 <__gethex+0x350>
 80073a2:	f8d9 3000 	ldr.w	r3, [r9]
 80073a6:	ea4a 0a03 	orr.w	sl, sl, r3
 80073aa:	f01a 0f01 	tst.w	sl, #1
 80073ae:	d10e      	bne.n	80073ce <__gethex+0x36e>
 80073b0:	f047 0710 	orr.w	r7, r7, #16
 80073b4:	e033      	b.n	800741e <__gethex+0x3be>
 80073b6:	f04f 0a01 	mov.w	sl, #1
 80073ba:	e7cf      	b.n	800735c <__gethex+0x2fc>
 80073bc:	2701      	movs	r7, #1
 80073be:	e7e2      	b.n	8007386 <__gethex+0x326>
 80073c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073c2:	f1c3 0301 	rsb	r3, r3, #1
 80073c6:	9315      	str	r3, [sp, #84]	; 0x54
 80073c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0f0      	beq.n	80073b0 <__gethex+0x350>
 80073ce:	f04f 0c00 	mov.w	ip, #0
 80073d2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80073d6:	f105 0314 	add.w	r3, r5, #20
 80073da:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80073de:	eb03 010a 	add.w	r1, r3, sl
 80073e2:	4618      	mov	r0, r3
 80073e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80073ec:	d01c      	beq.n	8007428 <__gethex+0x3c8>
 80073ee:	3201      	adds	r2, #1
 80073f0:	6002      	str	r2, [r0, #0]
 80073f2:	2f02      	cmp	r7, #2
 80073f4:	f105 0314 	add.w	r3, r5, #20
 80073f8:	d138      	bne.n	800746c <__gethex+0x40c>
 80073fa:	f8d8 2000 	ldr.w	r2, [r8]
 80073fe:	3a01      	subs	r2, #1
 8007400:	42b2      	cmp	r2, r6
 8007402:	d10a      	bne.n	800741a <__gethex+0x3ba>
 8007404:	2201      	movs	r2, #1
 8007406:	1171      	asrs	r1, r6, #5
 8007408:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800740c:	f006 061f 	and.w	r6, r6, #31
 8007410:	fa02 f606 	lsl.w	r6, r2, r6
 8007414:	421e      	tst	r6, r3
 8007416:	bf18      	it	ne
 8007418:	4617      	movne	r7, r2
 800741a:	f047 0720 	orr.w	r7, r7, #32
 800741e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007420:	601d      	str	r5, [r3, #0]
 8007422:	9b06      	ldr	r3, [sp, #24]
 8007424:	601c      	str	r4, [r3, #0]
 8007426:	e6a3      	b.n	8007170 <__gethex+0x110>
 8007428:	4299      	cmp	r1, r3
 800742a:	f843 cc04 	str.w	ip, [r3, #-4]
 800742e:	d8d8      	bhi.n	80073e2 <__gethex+0x382>
 8007430:	68ab      	ldr	r3, [r5, #8]
 8007432:	4599      	cmp	r9, r3
 8007434:	db12      	blt.n	800745c <__gethex+0x3fc>
 8007436:	6869      	ldr	r1, [r5, #4]
 8007438:	9802      	ldr	r0, [sp, #8]
 800743a:	3101      	adds	r1, #1
 800743c:	f000 f92b 	bl	8007696 <_Balloc>
 8007440:	4683      	mov	fp, r0
 8007442:	692a      	ldr	r2, [r5, #16]
 8007444:	f105 010c 	add.w	r1, r5, #12
 8007448:	3202      	adds	r2, #2
 800744a:	0092      	lsls	r2, r2, #2
 800744c:	300c      	adds	r0, #12
 800744e:	f000 f917 	bl	8007680 <memcpy>
 8007452:	4629      	mov	r1, r5
 8007454:	9802      	ldr	r0, [sp, #8]
 8007456:	f000 f952 	bl	80076fe <_Bfree>
 800745a:	465d      	mov	r5, fp
 800745c:	692b      	ldr	r3, [r5, #16]
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	612a      	str	r2, [r5, #16]
 8007462:	2201      	movs	r2, #1
 8007464:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007468:	615a      	str	r2, [r3, #20]
 800746a:	e7c2      	b.n	80073f2 <__gethex+0x392>
 800746c:	692a      	ldr	r2, [r5, #16]
 800746e:	454a      	cmp	r2, r9
 8007470:	dd0b      	ble.n	800748a <__gethex+0x42a>
 8007472:	2101      	movs	r1, #1
 8007474:	4628      	mov	r0, r5
 8007476:	f7ff fda3 	bl	8006fc0 <rshift>
 800747a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800747e:	3401      	adds	r4, #1
 8007480:	42a3      	cmp	r3, r4
 8007482:	f6ff aed8 	blt.w	8007236 <__gethex+0x1d6>
 8007486:	2701      	movs	r7, #1
 8007488:	e7c7      	b.n	800741a <__gethex+0x3ba>
 800748a:	f016 061f 	ands.w	r6, r6, #31
 800748e:	d0fa      	beq.n	8007486 <__gethex+0x426>
 8007490:	449a      	add	sl, r3
 8007492:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007496:	f000 f9c2 	bl	800781e <__hi0bits>
 800749a:	f1c6 0620 	rsb	r6, r6, #32
 800749e:	42b0      	cmp	r0, r6
 80074a0:	dbe7      	blt.n	8007472 <__gethex+0x412>
 80074a2:	e7f0      	b.n	8007486 <__gethex+0x426>

080074a4 <L_shift>:
 80074a4:	f1c2 0208 	rsb	r2, r2, #8
 80074a8:	0092      	lsls	r2, r2, #2
 80074aa:	b570      	push	{r4, r5, r6, lr}
 80074ac:	f1c2 0620 	rsb	r6, r2, #32
 80074b0:	6843      	ldr	r3, [r0, #4]
 80074b2:	6804      	ldr	r4, [r0, #0]
 80074b4:	fa03 f506 	lsl.w	r5, r3, r6
 80074b8:	432c      	orrs	r4, r5
 80074ba:	40d3      	lsrs	r3, r2
 80074bc:	6004      	str	r4, [r0, #0]
 80074be:	f840 3f04 	str.w	r3, [r0, #4]!
 80074c2:	4288      	cmp	r0, r1
 80074c4:	d3f4      	bcc.n	80074b0 <L_shift+0xc>
 80074c6:	bd70      	pop	{r4, r5, r6, pc}

080074c8 <__match>:
 80074c8:	b530      	push	{r4, r5, lr}
 80074ca:	6803      	ldr	r3, [r0, #0]
 80074cc:	3301      	adds	r3, #1
 80074ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074d2:	b914      	cbnz	r4, 80074da <__match+0x12>
 80074d4:	6003      	str	r3, [r0, #0]
 80074d6:	2001      	movs	r0, #1
 80074d8:	bd30      	pop	{r4, r5, pc}
 80074da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80074e2:	2d19      	cmp	r5, #25
 80074e4:	bf98      	it	ls
 80074e6:	3220      	addls	r2, #32
 80074e8:	42a2      	cmp	r2, r4
 80074ea:	d0f0      	beq.n	80074ce <__match+0x6>
 80074ec:	2000      	movs	r0, #0
 80074ee:	e7f3      	b.n	80074d8 <__match+0x10>

080074f0 <__hexnan>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	2500      	movs	r5, #0
 80074f6:	680b      	ldr	r3, [r1, #0]
 80074f8:	4682      	mov	sl, r0
 80074fa:	115f      	asrs	r7, r3, #5
 80074fc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007500:	f013 031f 	ands.w	r3, r3, #31
 8007504:	bf18      	it	ne
 8007506:	3704      	addne	r7, #4
 8007508:	1f3e      	subs	r6, r7, #4
 800750a:	4690      	mov	r8, r2
 800750c:	46b1      	mov	r9, r6
 800750e:	4634      	mov	r4, r6
 8007510:	46ab      	mov	fp, r5
 8007512:	b087      	sub	sp, #28
 8007514:	6801      	ldr	r1, [r0, #0]
 8007516:	9301      	str	r3, [sp, #4]
 8007518:	f847 5c04 	str.w	r5, [r7, #-4]
 800751c:	9502      	str	r5, [sp, #8]
 800751e:	784a      	ldrb	r2, [r1, #1]
 8007520:	1c4b      	adds	r3, r1, #1
 8007522:	9303      	str	r3, [sp, #12]
 8007524:	b342      	cbz	r2, 8007578 <__hexnan+0x88>
 8007526:	4610      	mov	r0, r2
 8007528:	9105      	str	r1, [sp, #20]
 800752a:	9204      	str	r2, [sp, #16]
 800752c:	f7ff fd83 	bl	8007036 <__hexdig_fun>
 8007530:	2800      	cmp	r0, #0
 8007532:	d143      	bne.n	80075bc <__hexnan+0xcc>
 8007534:	9a04      	ldr	r2, [sp, #16]
 8007536:	9905      	ldr	r1, [sp, #20]
 8007538:	2a20      	cmp	r2, #32
 800753a:	d818      	bhi.n	800756e <__hexnan+0x7e>
 800753c:	9b02      	ldr	r3, [sp, #8]
 800753e:	459b      	cmp	fp, r3
 8007540:	dd13      	ble.n	800756a <__hexnan+0x7a>
 8007542:	454c      	cmp	r4, r9
 8007544:	d206      	bcs.n	8007554 <__hexnan+0x64>
 8007546:	2d07      	cmp	r5, #7
 8007548:	dc04      	bgt.n	8007554 <__hexnan+0x64>
 800754a:	462a      	mov	r2, r5
 800754c:	4649      	mov	r1, r9
 800754e:	4620      	mov	r0, r4
 8007550:	f7ff ffa8 	bl	80074a4 <L_shift>
 8007554:	4544      	cmp	r4, r8
 8007556:	d944      	bls.n	80075e2 <__hexnan+0xf2>
 8007558:	2300      	movs	r3, #0
 800755a:	f1a4 0904 	sub.w	r9, r4, #4
 800755e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007562:	461d      	mov	r5, r3
 8007564:	464c      	mov	r4, r9
 8007566:	f8cd b008 	str.w	fp, [sp, #8]
 800756a:	9903      	ldr	r1, [sp, #12]
 800756c:	e7d7      	b.n	800751e <__hexnan+0x2e>
 800756e:	2a29      	cmp	r2, #41	; 0x29
 8007570:	d14a      	bne.n	8007608 <__hexnan+0x118>
 8007572:	3102      	adds	r1, #2
 8007574:	f8ca 1000 	str.w	r1, [sl]
 8007578:	f1bb 0f00 	cmp.w	fp, #0
 800757c:	d044      	beq.n	8007608 <__hexnan+0x118>
 800757e:	454c      	cmp	r4, r9
 8007580:	d206      	bcs.n	8007590 <__hexnan+0xa0>
 8007582:	2d07      	cmp	r5, #7
 8007584:	dc04      	bgt.n	8007590 <__hexnan+0xa0>
 8007586:	462a      	mov	r2, r5
 8007588:	4649      	mov	r1, r9
 800758a:	4620      	mov	r0, r4
 800758c:	f7ff ff8a 	bl	80074a4 <L_shift>
 8007590:	4544      	cmp	r4, r8
 8007592:	d928      	bls.n	80075e6 <__hexnan+0xf6>
 8007594:	4643      	mov	r3, r8
 8007596:	f854 2b04 	ldr.w	r2, [r4], #4
 800759a:	42a6      	cmp	r6, r4
 800759c:	f843 2b04 	str.w	r2, [r3], #4
 80075a0:	d2f9      	bcs.n	8007596 <__hexnan+0xa6>
 80075a2:	2200      	movs	r2, #0
 80075a4:	f843 2b04 	str.w	r2, [r3], #4
 80075a8:	429e      	cmp	r6, r3
 80075aa:	d2fb      	bcs.n	80075a4 <__hexnan+0xb4>
 80075ac:	6833      	ldr	r3, [r6, #0]
 80075ae:	b91b      	cbnz	r3, 80075b8 <__hexnan+0xc8>
 80075b0:	4546      	cmp	r6, r8
 80075b2:	d127      	bne.n	8007604 <__hexnan+0x114>
 80075b4:	2301      	movs	r3, #1
 80075b6:	6033      	str	r3, [r6, #0]
 80075b8:	2005      	movs	r0, #5
 80075ba:	e026      	b.n	800760a <__hexnan+0x11a>
 80075bc:	3501      	adds	r5, #1
 80075be:	2d08      	cmp	r5, #8
 80075c0:	f10b 0b01 	add.w	fp, fp, #1
 80075c4:	dd06      	ble.n	80075d4 <__hexnan+0xe4>
 80075c6:	4544      	cmp	r4, r8
 80075c8:	d9cf      	bls.n	800756a <__hexnan+0x7a>
 80075ca:	2300      	movs	r3, #0
 80075cc:	2501      	movs	r5, #1
 80075ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80075d2:	3c04      	subs	r4, #4
 80075d4:	6822      	ldr	r2, [r4, #0]
 80075d6:	f000 000f 	and.w	r0, r0, #15
 80075da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80075de:	6020      	str	r0, [r4, #0]
 80075e0:	e7c3      	b.n	800756a <__hexnan+0x7a>
 80075e2:	2508      	movs	r5, #8
 80075e4:	e7c1      	b.n	800756a <__hexnan+0x7a>
 80075e6:	9b01      	ldr	r3, [sp, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0df      	beq.n	80075ac <__hexnan+0xbc>
 80075ec:	f04f 32ff 	mov.w	r2, #4294967295
 80075f0:	f1c3 0320 	rsb	r3, r3, #32
 80075f4:	fa22 f303 	lsr.w	r3, r2, r3
 80075f8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80075fc:	401a      	ands	r2, r3
 80075fe:	f847 2c04 	str.w	r2, [r7, #-4]
 8007602:	e7d3      	b.n	80075ac <__hexnan+0xbc>
 8007604:	3e04      	subs	r6, #4
 8007606:	e7d1      	b.n	80075ac <__hexnan+0xbc>
 8007608:	2004      	movs	r0, #4
 800760a:	b007      	add	sp, #28
 800760c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007610 <__localeconv_l>:
 8007610:	30f0      	adds	r0, #240	; 0xf0
 8007612:	4770      	bx	lr

08007614 <_localeconv_r>:
 8007614:	4b04      	ldr	r3, [pc, #16]	; (8007628 <_localeconv_r+0x14>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6a18      	ldr	r0, [r3, #32]
 800761a:	4b04      	ldr	r3, [pc, #16]	; (800762c <_localeconv_r+0x18>)
 800761c:	2800      	cmp	r0, #0
 800761e:	bf08      	it	eq
 8007620:	4618      	moveq	r0, r3
 8007622:	30f0      	adds	r0, #240	; 0xf0
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	20000018 	.word	0x20000018
 800762c:	2000007c 	.word	0x2000007c

08007630 <malloc>:
 8007630:	4b02      	ldr	r3, [pc, #8]	; (800763c <malloc+0xc>)
 8007632:	4601      	mov	r1, r0
 8007634:	6818      	ldr	r0, [r3, #0]
 8007636:	f000 bc81 	b.w	8007f3c <_malloc_r>
 800763a:	bf00      	nop
 800763c:	20000018 	.word	0x20000018

08007640 <__ascii_mbtowc>:
 8007640:	b082      	sub	sp, #8
 8007642:	b901      	cbnz	r1, 8007646 <__ascii_mbtowc+0x6>
 8007644:	a901      	add	r1, sp, #4
 8007646:	b142      	cbz	r2, 800765a <__ascii_mbtowc+0x1a>
 8007648:	b14b      	cbz	r3, 800765e <__ascii_mbtowc+0x1e>
 800764a:	7813      	ldrb	r3, [r2, #0]
 800764c:	600b      	str	r3, [r1, #0]
 800764e:	7812      	ldrb	r2, [r2, #0]
 8007650:	1c10      	adds	r0, r2, #0
 8007652:	bf18      	it	ne
 8007654:	2001      	movne	r0, #1
 8007656:	b002      	add	sp, #8
 8007658:	4770      	bx	lr
 800765a:	4610      	mov	r0, r2
 800765c:	e7fb      	b.n	8007656 <__ascii_mbtowc+0x16>
 800765e:	f06f 0001 	mvn.w	r0, #1
 8007662:	e7f8      	b.n	8007656 <__ascii_mbtowc+0x16>

08007664 <memchr>:
 8007664:	b510      	push	{r4, lr}
 8007666:	b2c9      	uxtb	r1, r1
 8007668:	4402      	add	r2, r0
 800766a:	4290      	cmp	r0, r2
 800766c:	4603      	mov	r3, r0
 800766e:	d101      	bne.n	8007674 <memchr+0x10>
 8007670:	2300      	movs	r3, #0
 8007672:	e003      	b.n	800767c <memchr+0x18>
 8007674:	781c      	ldrb	r4, [r3, #0]
 8007676:	3001      	adds	r0, #1
 8007678:	428c      	cmp	r4, r1
 800767a:	d1f6      	bne.n	800766a <memchr+0x6>
 800767c:	4618      	mov	r0, r3
 800767e:	bd10      	pop	{r4, pc}

08007680 <memcpy>:
 8007680:	b510      	push	{r4, lr}
 8007682:	1e43      	subs	r3, r0, #1
 8007684:	440a      	add	r2, r1
 8007686:	4291      	cmp	r1, r2
 8007688:	d100      	bne.n	800768c <memcpy+0xc>
 800768a:	bd10      	pop	{r4, pc}
 800768c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007690:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007694:	e7f7      	b.n	8007686 <memcpy+0x6>

08007696 <_Balloc>:
 8007696:	b570      	push	{r4, r5, r6, lr}
 8007698:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800769a:	4604      	mov	r4, r0
 800769c:	460e      	mov	r6, r1
 800769e:	b93d      	cbnz	r5, 80076b0 <_Balloc+0x1a>
 80076a0:	2010      	movs	r0, #16
 80076a2:	f7ff ffc5 	bl	8007630 <malloc>
 80076a6:	6260      	str	r0, [r4, #36]	; 0x24
 80076a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076ac:	6005      	str	r5, [r0, #0]
 80076ae:	60c5      	str	r5, [r0, #12]
 80076b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80076b2:	68eb      	ldr	r3, [r5, #12]
 80076b4:	b183      	cbz	r3, 80076d8 <_Balloc+0x42>
 80076b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80076be:	b9b8      	cbnz	r0, 80076f0 <_Balloc+0x5a>
 80076c0:	2101      	movs	r1, #1
 80076c2:	fa01 f506 	lsl.w	r5, r1, r6
 80076c6:	1d6a      	adds	r2, r5, #5
 80076c8:	0092      	lsls	r2, r2, #2
 80076ca:	4620      	mov	r0, r4
 80076cc:	f000 fbdc 	bl	8007e88 <_calloc_r>
 80076d0:	b160      	cbz	r0, 80076ec <_Balloc+0x56>
 80076d2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80076d6:	e00e      	b.n	80076f6 <_Balloc+0x60>
 80076d8:	2221      	movs	r2, #33	; 0x21
 80076da:	2104      	movs	r1, #4
 80076dc:	4620      	mov	r0, r4
 80076de:	f000 fbd3 	bl	8007e88 <_calloc_r>
 80076e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076e4:	60e8      	str	r0, [r5, #12]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1e4      	bne.n	80076b6 <_Balloc+0x20>
 80076ec:	2000      	movs	r0, #0
 80076ee:	bd70      	pop	{r4, r5, r6, pc}
 80076f0:	6802      	ldr	r2, [r0, #0]
 80076f2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80076f6:	2300      	movs	r3, #0
 80076f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076fc:	e7f7      	b.n	80076ee <_Balloc+0x58>

080076fe <_Bfree>:
 80076fe:	b570      	push	{r4, r5, r6, lr}
 8007700:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007702:	4606      	mov	r6, r0
 8007704:	460d      	mov	r5, r1
 8007706:	b93c      	cbnz	r4, 8007718 <_Bfree+0x1a>
 8007708:	2010      	movs	r0, #16
 800770a:	f7ff ff91 	bl	8007630 <malloc>
 800770e:	6270      	str	r0, [r6, #36]	; 0x24
 8007710:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007714:	6004      	str	r4, [r0, #0]
 8007716:	60c4      	str	r4, [r0, #12]
 8007718:	b13d      	cbz	r5, 800772a <_Bfree+0x2c>
 800771a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800771c:	686a      	ldr	r2, [r5, #4]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007724:	6029      	str	r1, [r5, #0]
 8007726:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800772a:	bd70      	pop	{r4, r5, r6, pc}

0800772c <__multadd>:
 800772c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007730:	461f      	mov	r7, r3
 8007732:	4606      	mov	r6, r0
 8007734:	460c      	mov	r4, r1
 8007736:	2300      	movs	r3, #0
 8007738:	690d      	ldr	r5, [r1, #16]
 800773a:	f101 0c14 	add.w	ip, r1, #20
 800773e:	f8dc 0000 	ldr.w	r0, [ip]
 8007742:	3301      	adds	r3, #1
 8007744:	b281      	uxth	r1, r0
 8007746:	fb02 7101 	mla	r1, r2, r1, r7
 800774a:	0c00      	lsrs	r0, r0, #16
 800774c:	0c0f      	lsrs	r7, r1, #16
 800774e:	fb02 7000 	mla	r0, r2, r0, r7
 8007752:	b289      	uxth	r1, r1
 8007754:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007758:	429d      	cmp	r5, r3
 800775a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800775e:	f84c 1b04 	str.w	r1, [ip], #4
 8007762:	dcec      	bgt.n	800773e <__multadd+0x12>
 8007764:	b1d7      	cbz	r7, 800779c <__multadd+0x70>
 8007766:	68a3      	ldr	r3, [r4, #8]
 8007768:	42ab      	cmp	r3, r5
 800776a:	dc12      	bgt.n	8007792 <__multadd+0x66>
 800776c:	6861      	ldr	r1, [r4, #4]
 800776e:	4630      	mov	r0, r6
 8007770:	3101      	adds	r1, #1
 8007772:	f7ff ff90 	bl	8007696 <_Balloc>
 8007776:	4680      	mov	r8, r0
 8007778:	6922      	ldr	r2, [r4, #16]
 800777a:	f104 010c 	add.w	r1, r4, #12
 800777e:	3202      	adds	r2, #2
 8007780:	0092      	lsls	r2, r2, #2
 8007782:	300c      	adds	r0, #12
 8007784:	f7ff ff7c 	bl	8007680 <memcpy>
 8007788:	4621      	mov	r1, r4
 800778a:	4630      	mov	r0, r6
 800778c:	f7ff ffb7 	bl	80076fe <_Bfree>
 8007790:	4644      	mov	r4, r8
 8007792:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007796:	3501      	adds	r5, #1
 8007798:	615f      	str	r7, [r3, #20]
 800779a:	6125      	str	r5, [r4, #16]
 800779c:	4620      	mov	r0, r4
 800779e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080077a2 <__s2b>:
 80077a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077a6:	4615      	mov	r5, r2
 80077a8:	2209      	movs	r2, #9
 80077aa:	461f      	mov	r7, r3
 80077ac:	3308      	adds	r3, #8
 80077ae:	460c      	mov	r4, r1
 80077b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80077b4:	4606      	mov	r6, r0
 80077b6:	2201      	movs	r2, #1
 80077b8:	2100      	movs	r1, #0
 80077ba:	429a      	cmp	r2, r3
 80077bc:	db20      	blt.n	8007800 <__s2b+0x5e>
 80077be:	4630      	mov	r0, r6
 80077c0:	f7ff ff69 	bl	8007696 <_Balloc>
 80077c4:	9b08      	ldr	r3, [sp, #32]
 80077c6:	2d09      	cmp	r5, #9
 80077c8:	6143      	str	r3, [r0, #20]
 80077ca:	f04f 0301 	mov.w	r3, #1
 80077ce:	6103      	str	r3, [r0, #16]
 80077d0:	dd19      	ble.n	8007806 <__s2b+0x64>
 80077d2:	f104 0809 	add.w	r8, r4, #9
 80077d6:	46c1      	mov	r9, r8
 80077d8:	442c      	add	r4, r5
 80077da:	f819 3b01 	ldrb.w	r3, [r9], #1
 80077de:	4601      	mov	r1, r0
 80077e0:	3b30      	subs	r3, #48	; 0x30
 80077e2:	220a      	movs	r2, #10
 80077e4:	4630      	mov	r0, r6
 80077e6:	f7ff ffa1 	bl	800772c <__multadd>
 80077ea:	45a1      	cmp	r9, r4
 80077ec:	d1f5      	bne.n	80077da <__s2b+0x38>
 80077ee:	eb08 0405 	add.w	r4, r8, r5
 80077f2:	3c08      	subs	r4, #8
 80077f4:	1b2d      	subs	r5, r5, r4
 80077f6:	1963      	adds	r3, r4, r5
 80077f8:	42bb      	cmp	r3, r7
 80077fa:	db07      	blt.n	800780c <__s2b+0x6a>
 80077fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007800:	0052      	lsls	r2, r2, #1
 8007802:	3101      	adds	r1, #1
 8007804:	e7d9      	b.n	80077ba <__s2b+0x18>
 8007806:	340a      	adds	r4, #10
 8007808:	2509      	movs	r5, #9
 800780a:	e7f3      	b.n	80077f4 <__s2b+0x52>
 800780c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007810:	4601      	mov	r1, r0
 8007812:	3b30      	subs	r3, #48	; 0x30
 8007814:	220a      	movs	r2, #10
 8007816:	4630      	mov	r0, r6
 8007818:	f7ff ff88 	bl	800772c <__multadd>
 800781c:	e7eb      	b.n	80077f6 <__s2b+0x54>

0800781e <__hi0bits>:
 800781e:	0c02      	lsrs	r2, r0, #16
 8007820:	0412      	lsls	r2, r2, #16
 8007822:	4603      	mov	r3, r0
 8007824:	b9b2      	cbnz	r2, 8007854 <__hi0bits+0x36>
 8007826:	0403      	lsls	r3, r0, #16
 8007828:	2010      	movs	r0, #16
 800782a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800782e:	bf04      	itt	eq
 8007830:	021b      	lsleq	r3, r3, #8
 8007832:	3008      	addeq	r0, #8
 8007834:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007838:	bf04      	itt	eq
 800783a:	011b      	lsleq	r3, r3, #4
 800783c:	3004      	addeq	r0, #4
 800783e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007842:	bf04      	itt	eq
 8007844:	009b      	lsleq	r3, r3, #2
 8007846:	3002      	addeq	r0, #2
 8007848:	2b00      	cmp	r3, #0
 800784a:	db06      	blt.n	800785a <__hi0bits+0x3c>
 800784c:	005b      	lsls	r3, r3, #1
 800784e:	d503      	bpl.n	8007858 <__hi0bits+0x3a>
 8007850:	3001      	adds	r0, #1
 8007852:	4770      	bx	lr
 8007854:	2000      	movs	r0, #0
 8007856:	e7e8      	b.n	800782a <__hi0bits+0xc>
 8007858:	2020      	movs	r0, #32
 800785a:	4770      	bx	lr

0800785c <__lo0bits>:
 800785c:	6803      	ldr	r3, [r0, #0]
 800785e:	4601      	mov	r1, r0
 8007860:	f013 0207 	ands.w	r2, r3, #7
 8007864:	d00b      	beq.n	800787e <__lo0bits+0x22>
 8007866:	07da      	lsls	r2, r3, #31
 8007868:	d423      	bmi.n	80078b2 <__lo0bits+0x56>
 800786a:	0798      	lsls	r0, r3, #30
 800786c:	bf49      	itett	mi
 800786e:	085b      	lsrmi	r3, r3, #1
 8007870:	089b      	lsrpl	r3, r3, #2
 8007872:	2001      	movmi	r0, #1
 8007874:	600b      	strmi	r3, [r1, #0]
 8007876:	bf5c      	itt	pl
 8007878:	600b      	strpl	r3, [r1, #0]
 800787a:	2002      	movpl	r0, #2
 800787c:	4770      	bx	lr
 800787e:	b298      	uxth	r0, r3
 8007880:	b9a8      	cbnz	r0, 80078ae <__lo0bits+0x52>
 8007882:	2010      	movs	r0, #16
 8007884:	0c1b      	lsrs	r3, r3, #16
 8007886:	f013 0fff 	tst.w	r3, #255	; 0xff
 800788a:	bf04      	itt	eq
 800788c:	0a1b      	lsreq	r3, r3, #8
 800788e:	3008      	addeq	r0, #8
 8007890:	071a      	lsls	r2, r3, #28
 8007892:	bf04      	itt	eq
 8007894:	091b      	lsreq	r3, r3, #4
 8007896:	3004      	addeq	r0, #4
 8007898:	079a      	lsls	r2, r3, #30
 800789a:	bf04      	itt	eq
 800789c:	089b      	lsreq	r3, r3, #2
 800789e:	3002      	addeq	r0, #2
 80078a0:	07da      	lsls	r2, r3, #31
 80078a2:	d402      	bmi.n	80078aa <__lo0bits+0x4e>
 80078a4:	085b      	lsrs	r3, r3, #1
 80078a6:	d006      	beq.n	80078b6 <__lo0bits+0x5a>
 80078a8:	3001      	adds	r0, #1
 80078aa:	600b      	str	r3, [r1, #0]
 80078ac:	4770      	bx	lr
 80078ae:	4610      	mov	r0, r2
 80078b0:	e7e9      	b.n	8007886 <__lo0bits+0x2a>
 80078b2:	2000      	movs	r0, #0
 80078b4:	4770      	bx	lr
 80078b6:	2020      	movs	r0, #32
 80078b8:	4770      	bx	lr

080078ba <__i2b>:
 80078ba:	b510      	push	{r4, lr}
 80078bc:	460c      	mov	r4, r1
 80078be:	2101      	movs	r1, #1
 80078c0:	f7ff fee9 	bl	8007696 <_Balloc>
 80078c4:	2201      	movs	r2, #1
 80078c6:	6144      	str	r4, [r0, #20]
 80078c8:	6102      	str	r2, [r0, #16]
 80078ca:	bd10      	pop	{r4, pc}

080078cc <__multiply>:
 80078cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d0:	4614      	mov	r4, r2
 80078d2:	690a      	ldr	r2, [r1, #16]
 80078d4:	6923      	ldr	r3, [r4, #16]
 80078d6:	4688      	mov	r8, r1
 80078d8:	429a      	cmp	r2, r3
 80078da:	bfbe      	ittt	lt
 80078dc:	460b      	movlt	r3, r1
 80078de:	46a0      	movlt	r8, r4
 80078e0:	461c      	movlt	r4, r3
 80078e2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80078e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80078ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078ee:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80078f2:	eb07 0609 	add.w	r6, r7, r9
 80078f6:	42b3      	cmp	r3, r6
 80078f8:	bfb8      	it	lt
 80078fa:	3101      	addlt	r1, #1
 80078fc:	f7ff fecb 	bl	8007696 <_Balloc>
 8007900:	f100 0514 	add.w	r5, r0, #20
 8007904:	462b      	mov	r3, r5
 8007906:	2200      	movs	r2, #0
 8007908:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800790c:	4573      	cmp	r3, lr
 800790e:	d316      	bcc.n	800793e <__multiply+0x72>
 8007910:	f104 0214 	add.w	r2, r4, #20
 8007914:	f108 0114 	add.w	r1, r8, #20
 8007918:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800791c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	9b00      	ldr	r3, [sp, #0]
 8007924:	9201      	str	r2, [sp, #4]
 8007926:	4293      	cmp	r3, r2
 8007928:	d80c      	bhi.n	8007944 <__multiply+0x78>
 800792a:	2e00      	cmp	r6, #0
 800792c:	dd03      	ble.n	8007936 <__multiply+0x6a>
 800792e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007932:	2b00      	cmp	r3, #0
 8007934:	d05d      	beq.n	80079f2 <__multiply+0x126>
 8007936:	6106      	str	r6, [r0, #16]
 8007938:	b003      	add	sp, #12
 800793a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800793e:	f843 2b04 	str.w	r2, [r3], #4
 8007942:	e7e3      	b.n	800790c <__multiply+0x40>
 8007944:	f8b2 b000 	ldrh.w	fp, [r2]
 8007948:	f1bb 0f00 	cmp.w	fp, #0
 800794c:	d023      	beq.n	8007996 <__multiply+0xca>
 800794e:	4689      	mov	r9, r1
 8007950:	46ac      	mov	ip, r5
 8007952:	f04f 0800 	mov.w	r8, #0
 8007956:	f859 4b04 	ldr.w	r4, [r9], #4
 800795a:	f8dc a000 	ldr.w	sl, [ip]
 800795e:	b2a3      	uxth	r3, r4
 8007960:	fa1f fa8a 	uxth.w	sl, sl
 8007964:	fb0b a303 	mla	r3, fp, r3, sl
 8007968:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800796c:	f8dc 4000 	ldr.w	r4, [ip]
 8007970:	4443      	add	r3, r8
 8007972:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007976:	fb0b 840a 	mla	r4, fp, sl, r8
 800797a:	46e2      	mov	sl, ip
 800797c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007980:	b29b      	uxth	r3, r3
 8007982:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007986:	454f      	cmp	r7, r9
 8007988:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800798c:	f84a 3b04 	str.w	r3, [sl], #4
 8007990:	d82b      	bhi.n	80079ea <__multiply+0x11e>
 8007992:	f8cc 8004 	str.w	r8, [ip, #4]
 8007996:	9b01      	ldr	r3, [sp, #4]
 8007998:	3204      	adds	r2, #4
 800799a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800799e:	f1ba 0f00 	cmp.w	sl, #0
 80079a2:	d020      	beq.n	80079e6 <__multiply+0x11a>
 80079a4:	4689      	mov	r9, r1
 80079a6:	46a8      	mov	r8, r5
 80079a8:	f04f 0b00 	mov.w	fp, #0
 80079ac:	682b      	ldr	r3, [r5, #0]
 80079ae:	f8b9 c000 	ldrh.w	ip, [r9]
 80079b2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	fb0a 440c 	mla	r4, sl, ip, r4
 80079bc:	46c4      	mov	ip, r8
 80079be:	445c      	add	r4, fp
 80079c0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80079c4:	f84c 3b04 	str.w	r3, [ip], #4
 80079c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80079cc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80079d0:	0c1b      	lsrs	r3, r3, #16
 80079d2:	fb0a b303 	mla	r3, sl, r3, fp
 80079d6:	454f      	cmp	r7, r9
 80079d8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80079dc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80079e0:	d805      	bhi.n	80079ee <__multiply+0x122>
 80079e2:	f8c8 3004 	str.w	r3, [r8, #4]
 80079e6:	3504      	adds	r5, #4
 80079e8:	e79b      	b.n	8007922 <__multiply+0x56>
 80079ea:	46d4      	mov	ip, sl
 80079ec:	e7b3      	b.n	8007956 <__multiply+0x8a>
 80079ee:	46e0      	mov	r8, ip
 80079f0:	e7dd      	b.n	80079ae <__multiply+0xe2>
 80079f2:	3e01      	subs	r6, #1
 80079f4:	e799      	b.n	800792a <__multiply+0x5e>
	...

080079f8 <__pow5mult>:
 80079f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079fc:	4615      	mov	r5, r2
 80079fe:	f012 0203 	ands.w	r2, r2, #3
 8007a02:	4606      	mov	r6, r0
 8007a04:	460f      	mov	r7, r1
 8007a06:	d007      	beq.n	8007a18 <__pow5mult+0x20>
 8007a08:	4c21      	ldr	r4, [pc, #132]	; (8007a90 <__pow5mult+0x98>)
 8007a0a:	3a01      	subs	r2, #1
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a12:	f7ff fe8b 	bl	800772c <__multadd>
 8007a16:	4607      	mov	r7, r0
 8007a18:	10ad      	asrs	r5, r5, #2
 8007a1a:	d035      	beq.n	8007a88 <__pow5mult+0x90>
 8007a1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007a1e:	b93c      	cbnz	r4, 8007a30 <__pow5mult+0x38>
 8007a20:	2010      	movs	r0, #16
 8007a22:	f7ff fe05 	bl	8007630 <malloc>
 8007a26:	6270      	str	r0, [r6, #36]	; 0x24
 8007a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a2c:	6004      	str	r4, [r0, #0]
 8007a2e:	60c4      	str	r4, [r0, #12]
 8007a30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a38:	b94c      	cbnz	r4, 8007a4e <__pow5mult+0x56>
 8007a3a:	f240 2171 	movw	r1, #625	; 0x271
 8007a3e:	4630      	mov	r0, r6
 8007a40:	f7ff ff3b 	bl	80078ba <__i2b>
 8007a44:	2300      	movs	r3, #0
 8007a46:	4604      	mov	r4, r0
 8007a48:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a4c:	6003      	str	r3, [r0, #0]
 8007a4e:	f04f 0800 	mov.w	r8, #0
 8007a52:	07eb      	lsls	r3, r5, #31
 8007a54:	d50a      	bpl.n	8007a6c <__pow5mult+0x74>
 8007a56:	4639      	mov	r1, r7
 8007a58:	4622      	mov	r2, r4
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	f7ff ff36 	bl	80078cc <__multiply>
 8007a60:	4681      	mov	r9, r0
 8007a62:	4639      	mov	r1, r7
 8007a64:	4630      	mov	r0, r6
 8007a66:	f7ff fe4a 	bl	80076fe <_Bfree>
 8007a6a:	464f      	mov	r7, r9
 8007a6c:	106d      	asrs	r5, r5, #1
 8007a6e:	d00b      	beq.n	8007a88 <__pow5mult+0x90>
 8007a70:	6820      	ldr	r0, [r4, #0]
 8007a72:	b938      	cbnz	r0, 8007a84 <__pow5mult+0x8c>
 8007a74:	4622      	mov	r2, r4
 8007a76:	4621      	mov	r1, r4
 8007a78:	4630      	mov	r0, r6
 8007a7a:	f7ff ff27 	bl	80078cc <__multiply>
 8007a7e:	6020      	str	r0, [r4, #0]
 8007a80:	f8c0 8000 	str.w	r8, [r0]
 8007a84:	4604      	mov	r4, r0
 8007a86:	e7e4      	b.n	8007a52 <__pow5mult+0x5a>
 8007a88:	4638      	mov	r0, r7
 8007a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a8e:	bf00      	nop
 8007a90:	08008568 	.word	0x08008568

08007a94 <__lshift>:
 8007a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a98:	460c      	mov	r4, r1
 8007a9a:	4607      	mov	r7, r0
 8007a9c:	4616      	mov	r6, r2
 8007a9e:	6923      	ldr	r3, [r4, #16]
 8007aa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007aa4:	eb0a 0903 	add.w	r9, sl, r3
 8007aa8:	6849      	ldr	r1, [r1, #4]
 8007aaa:	68a3      	ldr	r3, [r4, #8]
 8007aac:	f109 0501 	add.w	r5, r9, #1
 8007ab0:	42ab      	cmp	r3, r5
 8007ab2:	db32      	blt.n	8007b1a <__lshift+0x86>
 8007ab4:	4638      	mov	r0, r7
 8007ab6:	f7ff fdee 	bl	8007696 <_Balloc>
 8007aba:	2300      	movs	r3, #0
 8007abc:	4680      	mov	r8, r0
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f100 0114 	add.w	r1, r0, #20
 8007ac4:	4553      	cmp	r3, sl
 8007ac6:	db2b      	blt.n	8007b20 <__lshift+0x8c>
 8007ac8:	6920      	ldr	r0, [r4, #16]
 8007aca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ace:	f104 0314 	add.w	r3, r4, #20
 8007ad2:	f016 021f 	ands.w	r2, r6, #31
 8007ad6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ada:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ade:	d025      	beq.n	8007b2c <__lshift+0x98>
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	f1c2 0e20 	rsb	lr, r2, #32
 8007ae6:	468a      	mov	sl, r1
 8007ae8:	681e      	ldr	r6, [r3, #0]
 8007aea:	4096      	lsls	r6, r2
 8007aec:	4330      	orrs	r0, r6
 8007aee:	f84a 0b04 	str.w	r0, [sl], #4
 8007af2:	f853 0b04 	ldr.w	r0, [r3], #4
 8007af6:	459c      	cmp	ip, r3
 8007af8:	fa20 f00e 	lsr.w	r0, r0, lr
 8007afc:	d814      	bhi.n	8007b28 <__lshift+0x94>
 8007afe:	6048      	str	r0, [r1, #4]
 8007b00:	b108      	cbz	r0, 8007b06 <__lshift+0x72>
 8007b02:	f109 0502 	add.w	r5, r9, #2
 8007b06:	3d01      	subs	r5, #1
 8007b08:	4638      	mov	r0, r7
 8007b0a:	f8c8 5010 	str.w	r5, [r8, #16]
 8007b0e:	4621      	mov	r1, r4
 8007b10:	f7ff fdf5 	bl	80076fe <_Bfree>
 8007b14:	4640      	mov	r0, r8
 8007b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b1a:	3101      	adds	r1, #1
 8007b1c:	005b      	lsls	r3, r3, #1
 8007b1e:	e7c7      	b.n	8007ab0 <__lshift+0x1c>
 8007b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007b24:	3301      	adds	r3, #1
 8007b26:	e7cd      	b.n	8007ac4 <__lshift+0x30>
 8007b28:	4651      	mov	r1, sl
 8007b2a:	e7dc      	b.n	8007ae6 <__lshift+0x52>
 8007b2c:	3904      	subs	r1, #4
 8007b2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b32:	459c      	cmp	ip, r3
 8007b34:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b38:	d8f9      	bhi.n	8007b2e <__lshift+0x9a>
 8007b3a:	e7e4      	b.n	8007b06 <__lshift+0x72>

08007b3c <__mcmp>:
 8007b3c:	6903      	ldr	r3, [r0, #16]
 8007b3e:	690a      	ldr	r2, [r1, #16]
 8007b40:	b530      	push	{r4, r5, lr}
 8007b42:	1a9b      	subs	r3, r3, r2
 8007b44:	d10c      	bne.n	8007b60 <__mcmp+0x24>
 8007b46:	0092      	lsls	r2, r2, #2
 8007b48:	3014      	adds	r0, #20
 8007b4a:	3114      	adds	r1, #20
 8007b4c:	1884      	adds	r4, r0, r2
 8007b4e:	4411      	add	r1, r2
 8007b50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b58:	4295      	cmp	r5, r2
 8007b5a:	d003      	beq.n	8007b64 <__mcmp+0x28>
 8007b5c:	d305      	bcc.n	8007b6a <__mcmp+0x2e>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	4618      	mov	r0, r3
 8007b62:	bd30      	pop	{r4, r5, pc}
 8007b64:	42a0      	cmp	r0, r4
 8007b66:	d3f3      	bcc.n	8007b50 <__mcmp+0x14>
 8007b68:	e7fa      	b.n	8007b60 <__mcmp+0x24>
 8007b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b6e:	e7f7      	b.n	8007b60 <__mcmp+0x24>

08007b70 <__mdiff>:
 8007b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b74:	460d      	mov	r5, r1
 8007b76:	4607      	mov	r7, r0
 8007b78:	4611      	mov	r1, r2
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	4614      	mov	r4, r2
 8007b7e:	f7ff ffdd 	bl	8007b3c <__mcmp>
 8007b82:	1e06      	subs	r6, r0, #0
 8007b84:	d108      	bne.n	8007b98 <__mdiff+0x28>
 8007b86:	4631      	mov	r1, r6
 8007b88:	4638      	mov	r0, r7
 8007b8a:	f7ff fd84 	bl	8007696 <_Balloc>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b98:	bfa4      	itt	ge
 8007b9a:	4623      	movge	r3, r4
 8007b9c:	462c      	movge	r4, r5
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	6861      	ldr	r1, [r4, #4]
 8007ba2:	bfa6      	itte	ge
 8007ba4:	461d      	movge	r5, r3
 8007ba6:	2600      	movge	r6, #0
 8007ba8:	2601      	movlt	r6, #1
 8007baa:	f7ff fd74 	bl	8007696 <_Balloc>
 8007bae:	f04f 0e00 	mov.w	lr, #0
 8007bb2:	60c6      	str	r6, [r0, #12]
 8007bb4:	692b      	ldr	r3, [r5, #16]
 8007bb6:	6926      	ldr	r6, [r4, #16]
 8007bb8:	f104 0214 	add.w	r2, r4, #20
 8007bbc:	f105 0914 	add.w	r9, r5, #20
 8007bc0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007bc4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007bc8:	f100 0114 	add.w	r1, r0, #20
 8007bcc:	f852 ab04 	ldr.w	sl, [r2], #4
 8007bd0:	f859 5b04 	ldr.w	r5, [r9], #4
 8007bd4:	fa1f f38a 	uxth.w	r3, sl
 8007bd8:	4473      	add	r3, lr
 8007bda:	b2ac      	uxth	r4, r5
 8007bdc:	1b1b      	subs	r3, r3, r4
 8007bde:	0c2c      	lsrs	r4, r5, #16
 8007be0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007be4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007bee:	45c8      	cmp	r8, r9
 8007bf0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007bf4:	4694      	mov	ip, r2
 8007bf6:	f841 4b04 	str.w	r4, [r1], #4
 8007bfa:	d8e7      	bhi.n	8007bcc <__mdiff+0x5c>
 8007bfc:	45bc      	cmp	ip, r7
 8007bfe:	d304      	bcc.n	8007c0a <__mdiff+0x9a>
 8007c00:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007c04:	b183      	cbz	r3, 8007c28 <__mdiff+0xb8>
 8007c06:	6106      	str	r6, [r0, #16]
 8007c08:	e7c4      	b.n	8007b94 <__mdiff+0x24>
 8007c0a:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007c0e:	b2a2      	uxth	r2, r4
 8007c10:	4472      	add	r2, lr
 8007c12:	1413      	asrs	r3, r2, #16
 8007c14:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007c18:	b292      	uxth	r2, r2
 8007c1a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c1e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007c22:	f841 2b04 	str.w	r2, [r1], #4
 8007c26:	e7e9      	b.n	8007bfc <__mdiff+0x8c>
 8007c28:	3e01      	subs	r6, #1
 8007c2a:	e7e9      	b.n	8007c00 <__mdiff+0x90>

08007c2c <__ulp>:
 8007c2c:	4b10      	ldr	r3, [pc, #64]	; (8007c70 <__ulp+0x44>)
 8007c2e:	400b      	ands	r3, r1
 8007c30:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	dd02      	ble.n	8007c3e <__ulp+0x12>
 8007c38:	2000      	movs	r0, #0
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4770      	bx	lr
 8007c3e:	425b      	negs	r3, r3
 8007c40:	151b      	asrs	r3, r3, #20
 8007c42:	2b13      	cmp	r3, #19
 8007c44:	f04f 0000 	mov.w	r0, #0
 8007c48:	f04f 0100 	mov.w	r1, #0
 8007c4c:	dc04      	bgt.n	8007c58 <__ulp+0x2c>
 8007c4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007c52:	fa42 f103 	asr.w	r1, r2, r3
 8007c56:	4770      	bx	lr
 8007c58:	2201      	movs	r2, #1
 8007c5a:	3b14      	subs	r3, #20
 8007c5c:	2b1e      	cmp	r3, #30
 8007c5e:	bfce      	itee	gt
 8007c60:	4613      	movgt	r3, r2
 8007c62:	f1c3 031f 	rsble	r3, r3, #31
 8007c66:	fa02 f303 	lslle.w	r3, r2, r3
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	7ff00000 	.word	0x7ff00000

08007c74 <__b2d>:
 8007c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c78:	6907      	ldr	r7, [r0, #16]
 8007c7a:	f100 0914 	add.w	r9, r0, #20
 8007c7e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007c82:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007c86:	f1a7 0804 	sub.w	r8, r7, #4
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	f7ff fdc7 	bl	800781e <__hi0bits>
 8007c90:	f1c0 0320 	rsb	r3, r0, #32
 8007c94:	280a      	cmp	r0, #10
 8007c96:	600b      	str	r3, [r1, #0]
 8007c98:	491e      	ldr	r1, [pc, #120]	; (8007d14 <__b2d+0xa0>)
 8007c9a:	dc17      	bgt.n	8007ccc <__b2d+0x58>
 8007c9c:	45c1      	cmp	r9, r8
 8007c9e:	bf28      	it	cs
 8007ca0:	2200      	movcs	r2, #0
 8007ca2:	f1c0 0c0b 	rsb	ip, r0, #11
 8007ca6:	fa26 f30c 	lsr.w	r3, r6, ip
 8007caa:	bf38      	it	cc
 8007cac:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007cb0:	ea43 0501 	orr.w	r5, r3, r1
 8007cb4:	f100 0315 	add.w	r3, r0, #21
 8007cb8:	fa06 f303 	lsl.w	r3, r6, r3
 8007cbc:	fa22 f20c 	lsr.w	r2, r2, ip
 8007cc0:	ea43 0402 	orr.w	r4, r3, r2
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ccc:	45c1      	cmp	r9, r8
 8007cce:	bf3a      	itte	cc
 8007cd0:	f1a7 0808 	subcc.w	r8, r7, #8
 8007cd4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007cd8:	2200      	movcs	r2, #0
 8007cda:	f1b0 030b 	subs.w	r3, r0, #11
 8007cde:	d015      	beq.n	8007d0c <__b2d+0x98>
 8007ce0:	409e      	lsls	r6, r3
 8007ce2:	f1c3 0720 	rsb	r7, r3, #32
 8007ce6:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8007cea:	fa22 f107 	lsr.w	r1, r2, r7
 8007cee:	45c8      	cmp	r8, r9
 8007cf0:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007cf4:	ea46 0501 	orr.w	r5, r6, r1
 8007cf8:	bf94      	ite	ls
 8007cfa:	2100      	movls	r1, #0
 8007cfc:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007d00:	fa02 f003 	lsl.w	r0, r2, r3
 8007d04:	40f9      	lsrs	r1, r7
 8007d06:	ea40 0401 	orr.w	r4, r0, r1
 8007d0a:	e7db      	b.n	8007cc4 <__b2d+0x50>
 8007d0c:	ea46 0501 	orr.w	r5, r6, r1
 8007d10:	4614      	mov	r4, r2
 8007d12:	e7d7      	b.n	8007cc4 <__b2d+0x50>
 8007d14:	3ff00000 	.word	0x3ff00000

08007d18 <__d2b>:
 8007d18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007d1c:	461c      	mov	r4, r3
 8007d1e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007d22:	2101      	movs	r1, #1
 8007d24:	4690      	mov	r8, r2
 8007d26:	f7ff fcb6 	bl	8007696 <_Balloc>
 8007d2a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007d2e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007d32:	4607      	mov	r7, r0
 8007d34:	bb34      	cbnz	r4, 8007d84 <__d2b+0x6c>
 8007d36:	9201      	str	r2, [sp, #4]
 8007d38:	f1b8 0200 	subs.w	r2, r8, #0
 8007d3c:	d027      	beq.n	8007d8e <__d2b+0x76>
 8007d3e:	a802      	add	r0, sp, #8
 8007d40:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007d44:	f7ff fd8a 	bl	800785c <__lo0bits>
 8007d48:	9900      	ldr	r1, [sp, #0]
 8007d4a:	b1f0      	cbz	r0, 8007d8a <__d2b+0x72>
 8007d4c:	9a01      	ldr	r2, [sp, #4]
 8007d4e:	f1c0 0320 	rsb	r3, r0, #32
 8007d52:	fa02 f303 	lsl.w	r3, r2, r3
 8007d56:	430b      	orrs	r3, r1
 8007d58:	40c2      	lsrs	r2, r0
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	9201      	str	r2, [sp, #4]
 8007d5e:	9b01      	ldr	r3, [sp, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	bf14      	ite	ne
 8007d64:	2102      	movne	r1, #2
 8007d66:	2101      	moveq	r1, #1
 8007d68:	61bb      	str	r3, [r7, #24]
 8007d6a:	6139      	str	r1, [r7, #16]
 8007d6c:	b1c4      	cbz	r4, 8007da0 <__d2b+0x88>
 8007d6e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007d72:	4404      	add	r4, r0
 8007d74:	6034      	str	r4, [r6, #0]
 8007d76:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d7a:	6028      	str	r0, [r5, #0]
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	b002      	add	sp, #8
 8007d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d84:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007d88:	e7d5      	b.n	8007d36 <__d2b+0x1e>
 8007d8a:	6179      	str	r1, [r7, #20]
 8007d8c:	e7e7      	b.n	8007d5e <__d2b+0x46>
 8007d8e:	a801      	add	r0, sp, #4
 8007d90:	f7ff fd64 	bl	800785c <__lo0bits>
 8007d94:	2101      	movs	r1, #1
 8007d96:	9b01      	ldr	r3, [sp, #4]
 8007d98:	6139      	str	r1, [r7, #16]
 8007d9a:	617b      	str	r3, [r7, #20]
 8007d9c:	3020      	adds	r0, #32
 8007d9e:	e7e5      	b.n	8007d6c <__d2b+0x54>
 8007da0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007da4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007da8:	6030      	str	r0, [r6, #0]
 8007daa:	6918      	ldr	r0, [r3, #16]
 8007dac:	f7ff fd37 	bl	800781e <__hi0bits>
 8007db0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007db4:	e7e1      	b.n	8007d7a <__d2b+0x62>

08007db6 <__ratio>:
 8007db6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dba:	4688      	mov	r8, r1
 8007dbc:	4669      	mov	r1, sp
 8007dbe:	4681      	mov	r9, r0
 8007dc0:	f7ff ff58 	bl	8007c74 <__b2d>
 8007dc4:	468b      	mov	fp, r1
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	460f      	mov	r7, r1
 8007dca:	4640      	mov	r0, r8
 8007dcc:	a901      	add	r1, sp, #4
 8007dce:	f7ff ff51 	bl	8007c74 <__b2d>
 8007dd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007dd6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007dda:	460d      	mov	r5, r1
 8007ddc:	eba3 0c02 	sub.w	ip, r3, r2
 8007de0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007de4:	1a9b      	subs	r3, r3, r2
 8007de6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bfd5      	itete	le
 8007dee:	460a      	movle	r2, r1
 8007df0:	463a      	movgt	r2, r7
 8007df2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007df6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007dfa:	bfd8      	it	le
 8007dfc:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8007e00:	462b      	mov	r3, r5
 8007e02:	4602      	mov	r2, r0
 8007e04:	4659      	mov	r1, fp
 8007e06:	4630      	mov	r0, r6
 8007e08:	f7f8 fc90 	bl	800072c <__aeabi_ddiv>
 8007e0c:	b003      	add	sp, #12
 8007e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e12 <__copybits>:
 8007e12:	3901      	subs	r1, #1
 8007e14:	b510      	push	{r4, lr}
 8007e16:	1149      	asrs	r1, r1, #5
 8007e18:	6914      	ldr	r4, [r2, #16]
 8007e1a:	3101      	adds	r1, #1
 8007e1c:	f102 0314 	add.w	r3, r2, #20
 8007e20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007e28:	42a3      	cmp	r3, r4
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	d303      	bcc.n	8007e36 <__copybits+0x24>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	428a      	cmp	r2, r1
 8007e32:	d305      	bcc.n	8007e40 <__copybits+0x2e>
 8007e34:	bd10      	pop	{r4, pc}
 8007e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e3a:	f840 2b04 	str.w	r2, [r0], #4
 8007e3e:	e7f3      	b.n	8007e28 <__copybits+0x16>
 8007e40:	f842 3b04 	str.w	r3, [r2], #4
 8007e44:	e7f4      	b.n	8007e30 <__copybits+0x1e>

08007e46 <__any_on>:
 8007e46:	f100 0214 	add.w	r2, r0, #20
 8007e4a:	6900      	ldr	r0, [r0, #16]
 8007e4c:	114b      	asrs	r3, r1, #5
 8007e4e:	4298      	cmp	r0, r3
 8007e50:	b510      	push	{r4, lr}
 8007e52:	db11      	blt.n	8007e78 <__any_on+0x32>
 8007e54:	dd0a      	ble.n	8007e6c <__any_on+0x26>
 8007e56:	f011 011f 	ands.w	r1, r1, #31
 8007e5a:	d007      	beq.n	8007e6c <__any_on+0x26>
 8007e5c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e60:	fa24 f001 	lsr.w	r0, r4, r1
 8007e64:	fa00 f101 	lsl.w	r1, r0, r1
 8007e68:	428c      	cmp	r4, r1
 8007e6a:	d10b      	bne.n	8007e84 <__any_on+0x3e>
 8007e6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d803      	bhi.n	8007e7c <__any_on+0x36>
 8007e74:	2000      	movs	r0, #0
 8007e76:	bd10      	pop	{r4, pc}
 8007e78:	4603      	mov	r3, r0
 8007e7a:	e7f7      	b.n	8007e6c <__any_on+0x26>
 8007e7c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e80:	2900      	cmp	r1, #0
 8007e82:	d0f5      	beq.n	8007e70 <__any_on+0x2a>
 8007e84:	2001      	movs	r0, #1
 8007e86:	e7f6      	b.n	8007e76 <__any_on+0x30>

08007e88 <_calloc_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	fb02 f401 	mul.w	r4, r2, r1
 8007e8e:	4621      	mov	r1, r4
 8007e90:	f000 f854 	bl	8007f3c <_malloc_r>
 8007e94:	4605      	mov	r5, r0
 8007e96:	b118      	cbz	r0, 8007ea0 <_calloc_r+0x18>
 8007e98:	4622      	mov	r2, r4
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	f7fc ffa0 	bl	8004de0 <memset>
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	bd38      	pop	{r3, r4, r5, pc}

08007ea4 <_free_r>:
 8007ea4:	b538      	push	{r3, r4, r5, lr}
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	2900      	cmp	r1, #0
 8007eaa:	d043      	beq.n	8007f34 <_free_r+0x90>
 8007eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eb0:	1f0c      	subs	r4, r1, #4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	bfb8      	it	lt
 8007eb6:	18e4      	addlt	r4, r4, r3
 8007eb8:	f000 fa34 	bl	8008324 <__malloc_lock>
 8007ebc:	4a1e      	ldr	r2, [pc, #120]	; (8007f38 <_free_r+0x94>)
 8007ebe:	6813      	ldr	r3, [r2, #0]
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	b933      	cbnz	r3, 8007ed2 <_free_r+0x2e>
 8007ec4:	6063      	str	r3, [r4, #4]
 8007ec6:	6014      	str	r4, [r2, #0]
 8007ec8:	4628      	mov	r0, r5
 8007eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ece:	f000 ba2a 	b.w	8008326 <__malloc_unlock>
 8007ed2:	42a3      	cmp	r3, r4
 8007ed4:	d90b      	bls.n	8007eee <_free_r+0x4a>
 8007ed6:	6821      	ldr	r1, [r4, #0]
 8007ed8:	1862      	adds	r2, r4, r1
 8007eda:	4293      	cmp	r3, r2
 8007edc:	bf01      	itttt	eq
 8007ede:	681a      	ldreq	r2, [r3, #0]
 8007ee0:	685b      	ldreq	r3, [r3, #4]
 8007ee2:	1852      	addeq	r2, r2, r1
 8007ee4:	6022      	streq	r2, [r4, #0]
 8007ee6:	6063      	str	r3, [r4, #4]
 8007ee8:	6004      	str	r4, [r0, #0]
 8007eea:	e7ed      	b.n	8007ec8 <_free_r+0x24>
 8007eec:	4613      	mov	r3, r2
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	b10a      	cbz	r2, 8007ef6 <_free_r+0x52>
 8007ef2:	42a2      	cmp	r2, r4
 8007ef4:	d9fa      	bls.n	8007eec <_free_r+0x48>
 8007ef6:	6819      	ldr	r1, [r3, #0]
 8007ef8:	1858      	adds	r0, r3, r1
 8007efa:	42a0      	cmp	r0, r4
 8007efc:	d10b      	bne.n	8007f16 <_free_r+0x72>
 8007efe:	6820      	ldr	r0, [r4, #0]
 8007f00:	4401      	add	r1, r0
 8007f02:	1858      	adds	r0, r3, r1
 8007f04:	4282      	cmp	r2, r0
 8007f06:	6019      	str	r1, [r3, #0]
 8007f08:	d1de      	bne.n	8007ec8 <_free_r+0x24>
 8007f0a:	6810      	ldr	r0, [r2, #0]
 8007f0c:	6852      	ldr	r2, [r2, #4]
 8007f0e:	4401      	add	r1, r0
 8007f10:	6019      	str	r1, [r3, #0]
 8007f12:	605a      	str	r2, [r3, #4]
 8007f14:	e7d8      	b.n	8007ec8 <_free_r+0x24>
 8007f16:	d902      	bls.n	8007f1e <_free_r+0x7a>
 8007f18:	230c      	movs	r3, #12
 8007f1a:	602b      	str	r3, [r5, #0]
 8007f1c:	e7d4      	b.n	8007ec8 <_free_r+0x24>
 8007f1e:	6820      	ldr	r0, [r4, #0]
 8007f20:	1821      	adds	r1, r4, r0
 8007f22:	428a      	cmp	r2, r1
 8007f24:	bf01      	itttt	eq
 8007f26:	6811      	ldreq	r1, [r2, #0]
 8007f28:	6852      	ldreq	r2, [r2, #4]
 8007f2a:	1809      	addeq	r1, r1, r0
 8007f2c:	6021      	streq	r1, [r4, #0]
 8007f2e:	6062      	str	r2, [r4, #4]
 8007f30:	605c      	str	r4, [r3, #4]
 8007f32:	e7c9      	b.n	8007ec8 <_free_r+0x24>
 8007f34:	bd38      	pop	{r3, r4, r5, pc}
 8007f36:	bf00      	nop
 8007f38:	200002e0 	.word	0x200002e0

08007f3c <_malloc_r>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	1ccd      	adds	r5, r1, #3
 8007f40:	f025 0503 	bic.w	r5, r5, #3
 8007f44:	3508      	adds	r5, #8
 8007f46:	2d0c      	cmp	r5, #12
 8007f48:	bf38      	it	cc
 8007f4a:	250c      	movcc	r5, #12
 8007f4c:	2d00      	cmp	r5, #0
 8007f4e:	4606      	mov	r6, r0
 8007f50:	db01      	blt.n	8007f56 <_malloc_r+0x1a>
 8007f52:	42a9      	cmp	r1, r5
 8007f54:	d903      	bls.n	8007f5e <_malloc_r+0x22>
 8007f56:	230c      	movs	r3, #12
 8007f58:	6033      	str	r3, [r6, #0]
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	bd70      	pop	{r4, r5, r6, pc}
 8007f5e:	f000 f9e1 	bl	8008324 <__malloc_lock>
 8007f62:	4a21      	ldr	r2, [pc, #132]	; (8007fe8 <_malloc_r+0xac>)
 8007f64:	6814      	ldr	r4, [r2, #0]
 8007f66:	4621      	mov	r1, r4
 8007f68:	b991      	cbnz	r1, 8007f90 <_malloc_r+0x54>
 8007f6a:	4c20      	ldr	r4, [pc, #128]	; (8007fec <_malloc_r+0xb0>)
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	b91b      	cbnz	r3, 8007f78 <_malloc_r+0x3c>
 8007f70:	4630      	mov	r0, r6
 8007f72:	f000 f98f 	bl	8008294 <_sbrk_r>
 8007f76:	6020      	str	r0, [r4, #0]
 8007f78:	4629      	mov	r1, r5
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f000 f98a 	bl	8008294 <_sbrk_r>
 8007f80:	1c43      	adds	r3, r0, #1
 8007f82:	d124      	bne.n	8007fce <_malloc_r+0x92>
 8007f84:	230c      	movs	r3, #12
 8007f86:	4630      	mov	r0, r6
 8007f88:	6033      	str	r3, [r6, #0]
 8007f8a:	f000 f9cc 	bl	8008326 <__malloc_unlock>
 8007f8e:	e7e4      	b.n	8007f5a <_malloc_r+0x1e>
 8007f90:	680b      	ldr	r3, [r1, #0]
 8007f92:	1b5b      	subs	r3, r3, r5
 8007f94:	d418      	bmi.n	8007fc8 <_malloc_r+0x8c>
 8007f96:	2b0b      	cmp	r3, #11
 8007f98:	d90f      	bls.n	8007fba <_malloc_r+0x7e>
 8007f9a:	600b      	str	r3, [r1, #0]
 8007f9c:	18cc      	adds	r4, r1, r3
 8007f9e:	50cd      	str	r5, [r1, r3]
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f000 f9c0 	bl	8008326 <__malloc_unlock>
 8007fa6:	f104 000b 	add.w	r0, r4, #11
 8007faa:	1d23      	adds	r3, r4, #4
 8007fac:	f020 0007 	bic.w	r0, r0, #7
 8007fb0:	1ac3      	subs	r3, r0, r3
 8007fb2:	d0d3      	beq.n	8007f5c <_malloc_r+0x20>
 8007fb4:	425a      	negs	r2, r3
 8007fb6:	50e2      	str	r2, [r4, r3]
 8007fb8:	e7d0      	b.n	8007f5c <_malloc_r+0x20>
 8007fba:	684b      	ldr	r3, [r1, #4]
 8007fbc:	428c      	cmp	r4, r1
 8007fbe:	bf16      	itet	ne
 8007fc0:	6063      	strne	r3, [r4, #4]
 8007fc2:	6013      	streq	r3, [r2, #0]
 8007fc4:	460c      	movne	r4, r1
 8007fc6:	e7eb      	b.n	8007fa0 <_malloc_r+0x64>
 8007fc8:	460c      	mov	r4, r1
 8007fca:	6849      	ldr	r1, [r1, #4]
 8007fcc:	e7cc      	b.n	8007f68 <_malloc_r+0x2c>
 8007fce:	1cc4      	adds	r4, r0, #3
 8007fd0:	f024 0403 	bic.w	r4, r4, #3
 8007fd4:	42a0      	cmp	r0, r4
 8007fd6:	d005      	beq.n	8007fe4 <_malloc_r+0xa8>
 8007fd8:	1a21      	subs	r1, r4, r0
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f000 f95a 	bl	8008294 <_sbrk_r>
 8007fe0:	3001      	adds	r0, #1
 8007fe2:	d0cf      	beq.n	8007f84 <_malloc_r+0x48>
 8007fe4:	6025      	str	r5, [r4, #0]
 8007fe6:	e7db      	b.n	8007fa0 <_malloc_r+0x64>
 8007fe8:	200002e0 	.word	0x200002e0
 8007fec:	200002e4 	.word	0x200002e4

08007ff0 <__ssputs_r>:
 8007ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff4:	688e      	ldr	r6, [r1, #8]
 8007ff6:	4682      	mov	sl, r0
 8007ff8:	429e      	cmp	r6, r3
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	4690      	mov	r8, r2
 8007ffe:	4699      	mov	r9, r3
 8008000:	d837      	bhi.n	8008072 <__ssputs_r+0x82>
 8008002:	898a      	ldrh	r2, [r1, #12]
 8008004:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008008:	d031      	beq.n	800806e <__ssputs_r+0x7e>
 800800a:	2302      	movs	r3, #2
 800800c:	6825      	ldr	r5, [r4, #0]
 800800e:	6909      	ldr	r1, [r1, #16]
 8008010:	1a6f      	subs	r7, r5, r1
 8008012:	6965      	ldr	r5, [r4, #20]
 8008014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008018:	fb95 f5f3 	sdiv	r5, r5, r3
 800801c:	f109 0301 	add.w	r3, r9, #1
 8008020:	443b      	add	r3, r7
 8008022:	429d      	cmp	r5, r3
 8008024:	bf38      	it	cc
 8008026:	461d      	movcc	r5, r3
 8008028:	0553      	lsls	r3, r2, #21
 800802a:	d530      	bpl.n	800808e <__ssputs_r+0x9e>
 800802c:	4629      	mov	r1, r5
 800802e:	f7ff ff85 	bl	8007f3c <_malloc_r>
 8008032:	4606      	mov	r6, r0
 8008034:	b950      	cbnz	r0, 800804c <__ssputs_r+0x5c>
 8008036:	230c      	movs	r3, #12
 8008038:	f04f 30ff 	mov.w	r0, #4294967295
 800803c:	f8ca 3000 	str.w	r3, [sl]
 8008040:	89a3      	ldrh	r3, [r4, #12]
 8008042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008046:	81a3      	strh	r3, [r4, #12]
 8008048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804c:	463a      	mov	r2, r7
 800804e:	6921      	ldr	r1, [r4, #16]
 8008050:	f7ff fb16 	bl	8007680 <memcpy>
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800805a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800805e:	81a3      	strh	r3, [r4, #12]
 8008060:	6126      	str	r6, [r4, #16]
 8008062:	443e      	add	r6, r7
 8008064:	6026      	str	r6, [r4, #0]
 8008066:	464e      	mov	r6, r9
 8008068:	6165      	str	r5, [r4, #20]
 800806a:	1bed      	subs	r5, r5, r7
 800806c:	60a5      	str	r5, [r4, #8]
 800806e:	454e      	cmp	r6, r9
 8008070:	d900      	bls.n	8008074 <__ssputs_r+0x84>
 8008072:	464e      	mov	r6, r9
 8008074:	4632      	mov	r2, r6
 8008076:	4641      	mov	r1, r8
 8008078:	6820      	ldr	r0, [r4, #0]
 800807a:	f000 f93a 	bl	80082f2 <memmove>
 800807e:	68a3      	ldr	r3, [r4, #8]
 8008080:	2000      	movs	r0, #0
 8008082:	1b9b      	subs	r3, r3, r6
 8008084:	60a3      	str	r3, [r4, #8]
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	441e      	add	r6, r3
 800808a:	6026      	str	r6, [r4, #0]
 800808c:	e7dc      	b.n	8008048 <__ssputs_r+0x58>
 800808e:	462a      	mov	r2, r5
 8008090:	f000 f94a 	bl	8008328 <_realloc_r>
 8008094:	4606      	mov	r6, r0
 8008096:	2800      	cmp	r0, #0
 8008098:	d1e2      	bne.n	8008060 <__ssputs_r+0x70>
 800809a:	6921      	ldr	r1, [r4, #16]
 800809c:	4650      	mov	r0, sl
 800809e:	f7ff ff01 	bl	8007ea4 <_free_r>
 80080a2:	e7c8      	b.n	8008036 <__ssputs_r+0x46>

080080a4 <_svfiprintf_r>:
 80080a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a8:	461d      	mov	r5, r3
 80080aa:	898b      	ldrh	r3, [r1, #12]
 80080ac:	b09d      	sub	sp, #116	; 0x74
 80080ae:	061f      	lsls	r7, r3, #24
 80080b0:	4680      	mov	r8, r0
 80080b2:	460c      	mov	r4, r1
 80080b4:	4616      	mov	r6, r2
 80080b6:	d50f      	bpl.n	80080d8 <_svfiprintf_r+0x34>
 80080b8:	690b      	ldr	r3, [r1, #16]
 80080ba:	b96b      	cbnz	r3, 80080d8 <_svfiprintf_r+0x34>
 80080bc:	2140      	movs	r1, #64	; 0x40
 80080be:	f7ff ff3d 	bl	8007f3c <_malloc_r>
 80080c2:	6020      	str	r0, [r4, #0]
 80080c4:	6120      	str	r0, [r4, #16]
 80080c6:	b928      	cbnz	r0, 80080d4 <_svfiprintf_r+0x30>
 80080c8:	230c      	movs	r3, #12
 80080ca:	f8c8 3000 	str.w	r3, [r8]
 80080ce:	f04f 30ff 	mov.w	r0, #4294967295
 80080d2:	e0c8      	b.n	8008266 <_svfiprintf_r+0x1c2>
 80080d4:	2340      	movs	r3, #64	; 0x40
 80080d6:	6163      	str	r3, [r4, #20]
 80080d8:	2300      	movs	r3, #0
 80080da:	9309      	str	r3, [sp, #36]	; 0x24
 80080dc:	2320      	movs	r3, #32
 80080de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080e2:	2330      	movs	r3, #48	; 0x30
 80080e4:	f04f 0b01 	mov.w	fp, #1
 80080e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080ec:	9503      	str	r5, [sp, #12]
 80080ee:	4637      	mov	r7, r6
 80080f0:	463d      	mov	r5, r7
 80080f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80080f6:	b10b      	cbz	r3, 80080fc <_svfiprintf_r+0x58>
 80080f8:	2b25      	cmp	r3, #37	; 0x25
 80080fa:	d13e      	bne.n	800817a <_svfiprintf_r+0xd6>
 80080fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8008100:	d00b      	beq.n	800811a <_svfiprintf_r+0x76>
 8008102:	4653      	mov	r3, sl
 8008104:	4632      	mov	r2, r6
 8008106:	4621      	mov	r1, r4
 8008108:	4640      	mov	r0, r8
 800810a:	f7ff ff71 	bl	8007ff0 <__ssputs_r>
 800810e:	3001      	adds	r0, #1
 8008110:	f000 80a4 	beq.w	800825c <_svfiprintf_r+0x1b8>
 8008114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008116:	4453      	add	r3, sl
 8008118:	9309      	str	r3, [sp, #36]	; 0x24
 800811a:	783b      	ldrb	r3, [r7, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 809d 	beq.w	800825c <_svfiprintf_r+0x1b8>
 8008122:	2300      	movs	r3, #0
 8008124:	f04f 32ff 	mov.w	r2, #4294967295
 8008128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800812c:	9304      	str	r3, [sp, #16]
 800812e:	9307      	str	r3, [sp, #28]
 8008130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008134:	931a      	str	r3, [sp, #104]	; 0x68
 8008136:	462f      	mov	r7, r5
 8008138:	2205      	movs	r2, #5
 800813a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800813e:	4850      	ldr	r0, [pc, #320]	; (8008280 <_svfiprintf_r+0x1dc>)
 8008140:	f7ff fa90 	bl	8007664 <memchr>
 8008144:	9b04      	ldr	r3, [sp, #16]
 8008146:	b9d0      	cbnz	r0, 800817e <_svfiprintf_r+0xda>
 8008148:	06d9      	lsls	r1, r3, #27
 800814a:	bf44      	itt	mi
 800814c:	2220      	movmi	r2, #32
 800814e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008152:	071a      	lsls	r2, r3, #28
 8008154:	bf44      	itt	mi
 8008156:	222b      	movmi	r2, #43	; 0x2b
 8008158:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800815c:	782a      	ldrb	r2, [r5, #0]
 800815e:	2a2a      	cmp	r2, #42	; 0x2a
 8008160:	d015      	beq.n	800818e <_svfiprintf_r+0xea>
 8008162:	462f      	mov	r7, r5
 8008164:	2000      	movs	r0, #0
 8008166:	250a      	movs	r5, #10
 8008168:	9a07      	ldr	r2, [sp, #28]
 800816a:	4639      	mov	r1, r7
 800816c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008170:	3b30      	subs	r3, #48	; 0x30
 8008172:	2b09      	cmp	r3, #9
 8008174:	d94d      	bls.n	8008212 <_svfiprintf_r+0x16e>
 8008176:	b1b8      	cbz	r0, 80081a8 <_svfiprintf_r+0x104>
 8008178:	e00f      	b.n	800819a <_svfiprintf_r+0xf6>
 800817a:	462f      	mov	r7, r5
 800817c:	e7b8      	b.n	80080f0 <_svfiprintf_r+0x4c>
 800817e:	4a40      	ldr	r2, [pc, #256]	; (8008280 <_svfiprintf_r+0x1dc>)
 8008180:	463d      	mov	r5, r7
 8008182:	1a80      	subs	r0, r0, r2
 8008184:	fa0b f000 	lsl.w	r0, fp, r0
 8008188:	4318      	orrs	r0, r3
 800818a:	9004      	str	r0, [sp, #16]
 800818c:	e7d3      	b.n	8008136 <_svfiprintf_r+0x92>
 800818e:	9a03      	ldr	r2, [sp, #12]
 8008190:	1d11      	adds	r1, r2, #4
 8008192:	6812      	ldr	r2, [r2, #0]
 8008194:	9103      	str	r1, [sp, #12]
 8008196:	2a00      	cmp	r2, #0
 8008198:	db01      	blt.n	800819e <_svfiprintf_r+0xfa>
 800819a:	9207      	str	r2, [sp, #28]
 800819c:	e004      	b.n	80081a8 <_svfiprintf_r+0x104>
 800819e:	4252      	negs	r2, r2
 80081a0:	f043 0302 	orr.w	r3, r3, #2
 80081a4:	9207      	str	r2, [sp, #28]
 80081a6:	9304      	str	r3, [sp, #16]
 80081a8:	783b      	ldrb	r3, [r7, #0]
 80081aa:	2b2e      	cmp	r3, #46	; 0x2e
 80081ac:	d10c      	bne.n	80081c8 <_svfiprintf_r+0x124>
 80081ae:	787b      	ldrb	r3, [r7, #1]
 80081b0:	2b2a      	cmp	r3, #42	; 0x2a
 80081b2:	d133      	bne.n	800821c <_svfiprintf_r+0x178>
 80081b4:	9b03      	ldr	r3, [sp, #12]
 80081b6:	3702      	adds	r7, #2
 80081b8:	1d1a      	adds	r2, r3, #4
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	9203      	str	r2, [sp, #12]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	bfb8      	it	lt
 80081c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80081c6:	9305      	str	r3, [sp, #20]
 80081c8:	4d2e      	ldr	r5, [pc, #184]	; (8008284 <_svfiprintf_r+0x1e0>)
 80081ca:	2203      	movs	r2, #3
 80081cc:	7839      	ldrb	r1, [r7, #0]
 80081ce:	4628      	mov	r0, r5
 80081d0:	f7ff fa48 	bl	8007664 <memchr>
 80081d4:	b138      	cbz	r0, 80081e6 <_svfiprintf_r+0x142>
 80081d6:	2340      	movs	r3, #64	; 0x40
 80081d8:	1b40      	subs	r0, r0, r5
 80081da:	fa03 f000 	lsl.w	r0, r3, r0
 80081de:	9b04      	ldr	r3, [sp, #16]
 80081e0:	3701      	adds	r7, #1
 80081e2:	4303      	orrs	r3, r0
 80081e4:	9304      	str	r3, [sp, #16]
 80081e6:	7839      	ldrb	r1, [r7, #0]
 80081e8:	2206      	movs	r2, #6
 80081ea:	4827      	ldr	r0, [pc, #156]	; (8008288 <_svfiprintf_r+0x1e4>)
 80081ec:	1c7e      	adds	r6, r7, #1
 80081ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081f2:	f7ff fa37 	bl	8007664 <memchr>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d038      	beq.n	800826c <_svfiprintf_r+0x1c8>
 80081fa:	4b24      	ldr	r3, [pc, #144]	; (800828c <_svfiprintf_r+0x1e8>)
 80081fc:	bb13      	cbnz	r3, 8008244 <_svfiprintf_r+0x1a0>
 80081fe:	9b03      	ldr	r3, [sp, #12]
 8008200:	3307      	adds	r3, #7
 8008202:	f023 0307 	bic.w	r3, r3, #7
 8008206:	3308      	adds	r3, #8
 8008208:	9303      	str	r3, [sp, #12]
 800820a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800820c:	444b      	add	r3, r9
 800820e:	9309      	str	r3, [sp, #36]	; 0x24
 8008210:	e76d      	b.n	80080ee <_svfiprintf_r+0x4a>
 8008212:	fb05 3202 	mla	r2, r5, r2, r3
 8008216:	2001      	movs	r0, #1
 8008218:	460f      	mov	r7, r1
 800821a:	e7a6      	b.n	800816a <_svfiprintf_r+0xc6>
 800821c:	2300      	movs	r3, #0
 800821e:	250a      	movs	r5, #10
 8008220:	4619      	mov	r1, r3
 8008222:	3701      	adds	r7, #1
 8008224:	9305      	str	r3, [sp, #20]
 8008226:	4638      	mov	r0, r7
 8008228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800822c:	3a30      	subs	r2, #48	; 0x30
 800822e:	2a09      	cmp	r2, #9
 8008230:	d903      	bls.n	800823a <_svfiprintf_r+0x196>
 8008232:	2b00      	cmp	r3, #0
 8008234:	d0c8      	beq.n	80081c8 <_svfiprintf_r+0x124>
 8008236:	9105      	str	r1, [sp, #20]
 8008238:	e7c6      	b.n	80081c8 <_svfiprintf_r+0x124>
 800823a:	fb05 2101 	mla	r1, r5, r1, r2
 800823e:	2301      	movs	r3, #1
 8008240:	4607      	mov	r7, r0
 8008242:	e7f0      	b.n	8008226 <_svfiprintf_r+0x182>
 8008244:	ab03      	add	r3, sp, #12
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	4622      	mov	r2, r4
 800824a:	4b11      	ldr	r3, [pc, #68]	; (8008290 <_svfiprintf_r+0x1ec>)
 800824c:	a904      	add	r1, sp, #16
 800824e:	4640      	mov	r0, r8
 8008250:	f7fc fe60 	bl	8004f14 <_printf_float>
 8008254:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008258:	4681      	mov	r9, r0
 800825a:	d1d6      	bne.n	800820a <_svfiprintf_r+0x166>
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	065b      	lsls	r3, r3, #25
 8008260:	f53f af35 	bmi.w	80080ce <_svfiprintf_r+0x2a>
 8008264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008266:	b01d      	add	sp, #116	; 0x74
 8008268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826c:	ab03      	add	r3, sp, #12
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	4622      	mov	r2, r4
 8008272:	4b07      	ldr	r3, [pc, #28]	; (8008290 <_svfiprintf_r+0x1ec>)
 8008274:	a904      	add	r1, sp, #16
 8008276:	4640      	mov	r0, r8
 8008278:	f7fd f8f8 	bl	800546c <_printf_i>
 800827c:	e7ea      	b.n	8008254 <_svfiprintf_r+0x1b0>
 800827e:	bf00      	nop
 8008280:	08008574 	.word	0x08008574
 8008284:	0800857a 	.word	0x0800857a
 8008288:	0800857e 	.word	0x0800857e
 800828c:	08004f15 	.word	0x08004f15
 8008290:	08007ff1 	.word	0x08007ff1

08008294 <_sbrk_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	2300      	movs	r3, #0
 8008298:	4c05      	ldr	r4, [pc, #20]	; (80082b0 <_sbrk_r+0x1c>)
 800829a:	4605      	mov	r5, r0
 800829c:	4608      	mov	r0, r1
 800829e:	6023      	str	r3, [r4, #0]
 80082a0:	f7f9 fdcc 	bl	8001e3c <_sbrk>
 80082a4:	1c43      	adds	r3, r0, #1
 80082a6:	d102      	bne.n	80082ae <_sbrk_r+0x1a>
 80082a8:	6823      	ldr	r3, [r4, #0]
 80082aa:	b103      	cbz	r3, 80082ae <_sbrk_r+0x1a>
 80082ac:	602b      	str	r3, [r5, #0]
 80082ae:	bd38      	pop	{r3, r4, r5, pc}
 80082b0:	200004f8 	.word	0x200004f8

080082b4 <strncmp>:
 80082b4:	b510      	push	{r4, lr}
 80082b6:	b16a      	cbz	r2, 80082d4 <strncmp+0x20>
 80082b8:	3901      	subs	r1, #1
 80082ba:	1884      	adds	r4, r0, r2
 80082bc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80082c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d103      	bne.n	80082d0 <strncmp+0x1c>
 80082c8:	42a0      	cmp	r0, r4
 80082ca:	d001      	beq.n	80082d0 <strncmp+0x1c>
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1f5      	bne.n	80082bc <strncmp+0x8>
 80082d0:	1a98      	subs	r0, r3, r2
 80082d2:	bd10      	pop	{r4, pc}
 80082d4:	4610      	mov	r0, r2
 80082d6:	e7fc      	b.n	80082d2 <strncmp+0x1e>

080082d8 <__ascii_wctomb>:
 80082d8:	b149      	cbz	r1, 80082ee <__ascii_wctomb+0x16>
 80082da:	2aff      	cmp	r2, #255	; 0xff
 80082dc:	bf8b      	itete	hi
 80082de:	238a      	movhi	r3, #138	; 0x8a
 80082e0:	700a      	strbls	r2, [r1, #0]
 80082e2:	6003      	strhi	r3, [r0, #0]
 80082e4:	2001      	movls	r0, #1
 80082e6:	bf88      	it	hi
 80082e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80082ec:	4770      	bx	lr
 80082ee:	4608      	mov	r0, r1
 80082f0:	4770      	bx	lr

080082f2 <memmove>:
 80082f2:	4288      	cmp	r0, r1
 80082f4:	b510      	push	{r4, lr}
 80082f6:	eb01 0302 	add.w	r3, r1, r2
 80082fa:	d807      	bhi.n	800830c <memmove+0x1a>
 80082fc:	1e42      	subs	r2, r0, #1
 80082fe:	4299      	cmp	r1, r3
 8008300:	d00a      	beq.n	8008318 <memmove+0x26>
 8008302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008306:	f802 4f01 	strb.w	r4, [r2, #1]!
 800830a:	e7f8      	b.n	80082fe <memmove+0xc>
 800830c:	4283      	cmp	r3, r0
 800830e:	d9f5      	bls.n	80082fc <memmove+0xa>
 8008310:	1881      	adds	r1, r0, r2
 8008312:	1ad2      	subs	r2, r2, r3
 8008314:	42d3      	cmn	r3, r2
 8008316:	d100      	bne.n	800831a <memmove+0x28>
 8008318:	bd10      	pop	{r4, pc}
 800831a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800831e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008322:	e7f7      	b.n	8008314 <memmove+0x22>

08008324 <__malloc_lock>:
 8008324:	4770      	bx	lr

08008326 <__malloc_unlock>:
 8008326:	4770      	bx	lr

08008328 <_realloc_r>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	4607      	mov	r7, r0
 800832c:	4614      	mov	r4, r2
 800832e:	460e      	mov	r6, r1
 8008330:	b921      	cbnz	r1, 800833c <_realloc_r+0x14>
 8008332:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008336:	4611      	mov	r1, r2
 8008338:	f7ff be00 	b.w	8007f3c <_malloc_r>
 800833c:	b922      	cbnz	r2, 8008348 <_realloc_r+0x20>
 800833e:	f7ff fdb1 	bl	8007ea4 <_free_r>
 8008342:	4625      	mov	r5, r4
 8008344:	4628      	mov	r0, r5
 8008346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008348:	f000 f814 	bl	8008374 <_malloc_usable_size_r>
 800834c:	42a0      	cmp	r0, r4
 800834e:	d20f      	bcs.n	8008370 <_realloc_r+0x48>
 8008350:	4621      	mov	r1, r4
 8008352:	4638      	mov	r0, r7
 8008354:	f7ff fdf2 	bl	8007f3c <_malloc_r>
 8008358:	4605      	mov	r5, r0
 800835a:	2800      	cmp	r0, #0
 800835c:	d0f2      	beq.n	8008344 <_realloc_r+0x1c>
 800835e:	4631      	mov	r1, r6
 8008360:	4622      	mov	r2, r4
 8008362:	f7ff f98d 	bl	8007680 <memcpy>
 8008366:	4631      	mov	r1, r6
 8008368:	4638      	mov	r0, r7
 800836a:	f7ff fd9b 	bl	8007ea4 <_free_r>
 800836e:	e7e9      	b.n	8008344 <_realloc_r+0x1c>
 8008370:	4635      	mov	r5, r6
 8008372:	e7e7      	b.n	8008344 <_realloc_r+0x1c>

08008374 <_malloc_usable_size_r>:
 8008374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008378:	1f18      	subs	r0, r3, #4
 800837a:	2b00      	cmp	r3, #0
 800837c:	bfbc      	itt	lt
 800837e:	580b      	ldrlt	r3, [r1, r0]
 8008380:	18c0      	addlt	r0, r0, r3
 8008382:	4770      	bx	lr

08008384 <_init>:
 8008384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008386:	bf00      	nop
 8008388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800838a:	bc08      	pop	{r3}
 800838c:	469e      	mov	lr, r3
 800838e:	4770      	bx	lr

08008390 <_fini>:
 8008390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008392:	bf00      	nop
 8008394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008396:	bc08      	pop	{r3}
 8008398:	469e      	mov	lr, r3
 800839a:	4770      	bx	lr
